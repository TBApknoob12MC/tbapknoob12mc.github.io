var Module = typeof Module !== "undefined" ? Module : {};

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = function(status, toThrow) {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = true;

var ENVIRONMENT_IS_WORKER = false;

var ENVIRONMENT_IS_NODE = false;

var ENVIRONMENT_IS_SHELL = false;

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 read_ = function shell_read(url) {
  try {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  } catch (err) {
   var data = tryParseAsDataURI(url);
   if (data) {
    return intArrayToString(data);
   }
   throw err;
  }
 };
 if (ENVIRONMENT_IS_WORKER) {
  readBinary = function readBinary(url) {
   try {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   } catch (err) {
    var data = tryParseAsDataURI(url);
    if (data) {
     return data;
    }
    throw err;
   }
  };
 }
 readAsync = function readAsync(url, onload, onerror) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
    return;
   }
   var data = tryParseAsDataURI(url);
   if (data) {
    onload(data.buffer);
    return;
   }
   onerror();
  };
  xhr.onerror = onerror;
  xhr.send(null);
 };
 setWindowTitle = function(title) {
  document.title = title;
 };
} else {}

var out = Module["print"] || console.log.bind(console);

var err = Module["printErr"] || console.warn.bind(console);

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (Module["quit"]) quit_ = Module["quit"];

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
 var ret = HEAP32[DYNAMICTOP_PTR >> 2];
 var end = ret + size + 15 & -16;
 if (end > _emscripten_get_heap_size()) {
  abort();
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = end;
 return ret;
}

function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;

 case "i16":
  return 2;

 case "i32":
  return 4;

 case "i64":
  return 8;

 case "float":
  return 4;

 case "double":
  return 8;

 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = parseInt(type.substr(1));
    assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}

function warnOnce(text) {
 if (!warnOnce.shown) warnOnce.shown = {};
 if (!warnOnce.shown[text]) {
  warnOnce.shown[text] = 1;
  err(text);
 }
}

var jsCallStartIndex = 1;

var functionPointers = new Array(0);

var funcWrappers = {};

function dynCall(sig, ptr, args) {
 if (args && args.length) {
  return Module["dynCall_" + sig].apply(null, [ ptr ].concat(args));
 } else {
  return Module["dynCall_" + sig].call(null, ptr);
 }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
 tempRet0 = value;
};

var getTempRet0 = function() {
 return tempRet0;
};

var GLOBAL_BASE = 8;

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

var noExitRuntime;

if (Module["noExitRuntime"]) noExitRuntime = Module["noExitRuntime"];

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;

 case "i8":
  HEAP8[ptr >> 0] = value;
  break;

 case "i16":
  HEAP16[ptr >> 1] = value;
  break;

 case "i32":
  HEAP32[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], 
  HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  HEAPF32[ptr >> 2] = value;
  break;

 case "double":
  HEAPF64[ptr >> 3] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

var ABORT = false;

var EXITSTATUS = 0;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

function getCFunc(ident) {
 var func = Module["_" + ident];
 assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
 return func;
}

function ccall(ident, returnType, argTypes, args, opts) {
 var toC = {
  "string": function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    var len = (str.length << 2) + 1;
    ret = stackAlloc(len);
    stringToUTF8(str, ret, len);
   }
   return ret;
  },
  "array": function(arr) {
   var ret = stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }
 };
 function convertReturnValue(ret) {
  if (returnType === "string") return UTF8ToString(ret);
  if (returnType === "boolean") return Boolean(ret);
  return ret;
 }
 var func = getCFunc(ident);
 var cArgs = [];
 var stack = 0;
 if (args) {
  for (var i = 0; i < args.length; i++) {
   var converter = toC[argTypes[i]];
   if (converter) {
    if (stack === 0) stack = stackSave();
    cArgs[i] = converter(args[i]);
   } else {
    cArgs[i] = args[i];
   }
  }
 }
 var ret = func.apply(null, cArgs);
 ret = convertReturnValue(ret);
 if (stack !== 0) stackRestore(stack);
 return ret;
}

var ALLOC_NONE = 3;

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = u8Array[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

function allocateUTF8OnStack(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = stackAlloc(size);
 stringToUTF8Array(str, HEAP8, ret, size);
 return ret;
}

function writeArrayToMemory(array, buffer) {
 HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}

function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}

var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferAndViews(buf) {
 buffer = buf;
 Module["HEAP8"] = HEAP8 = new Int8Array(buf);
 Module["HEAP16"] = HEAP16 = new Int16Array(buf);
 Module["HEAP32"] = HEAP32 = new Int32Array(buf);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}

var STACK_BASE = 1869024, DYNAMIC_BASE = 2131168, DYNAMICTOP_PTR = 1868832;

var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;

if (Module["buffer"]) {
 buffer = Module["buffer"];
} else {
 buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
}

INITIAL_TOTAL_MEMORY = buffer.byteLength;

updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
 runtimeExited = true;
}

function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

if (!Math.imul || Math.imul(4294967295, 5) !== -5) Math.imul = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};

if (!Math.clz32) Math.clz32 = function(x) {
 var n = 32;
 var y = x >> 16;
 if (y) {
  n -= 16;
  x = y;
 }
 y = x >> 8;
 if (y) {
  n -= 8;
  x = y;
 }
 y = x >> 4;
 if (y) {
  n -= 4;
  x = y;
 }
 y = x >> 2;
 if (y) {
  n -= 2;
  x = y;
 }
 y = x >> 1;
 if (y) return n - 2;
 return n - x;
};

if (!Math.trunc) Math.trunc = function(x) {
 return x < 0 ? Math.ceil(x) : Math.floor(x);
};

var Math_abs = Math.abs;

var Math_ceil = Math.ceil;

var Math_floor = Math.floor;

var Math_min = Math.min;

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

function getUniqueRunDependency(id) {
 return id;
}

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 what += "";
 out(what);
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
}

var memoryInitializer = null;

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}

var tempDouble;

var tempI64;

memoryInitializer = "data:application/octet-stream;base64,";

var tempDoublePtr = 1869008;

function demangle(func) {
 return func;
}

function demangleAll(text) {
 var regex = /\b__Z[\w\d_]+/g;
 return text.replace(regex, function(x) {
  var y = demangle(x);
  return x === y ? x : y + " [" + x + "]";
 });
}

function jsStackTrace() {
 var err = new Error();
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}

function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}

function _emscripten_set_main_loop_timing(mode, value) {
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  return 1;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
   setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (typeof setImmediate === "undefined") {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "setimmediate";
   var Browser_setImmediate_messageHandler = function(event) {
    if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   };
   addEventListener("message", Browser_setImmediate_messageHandler, true);
   setImmediate = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    if (ENVIRONMENT_IS_WORKER) {
     if (Module["setImmediates"] === undefined) Module["setImmediates"] = [];
     Module["setImmediates"].push(func);
     postMessage({
      target: emscriptenMainLoopMessageId
     });
    } else postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   setImmediate(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}

function _emscripten_get_now() {
 abort();
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
 noExitRuntime = true;
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = func;
 Browser.mainLoop.arg = arg;
 var browserIterationFunc;
 if (typeof arg !== "undefined") {
  browserIterationFunc = function() {
   Module["dynCall_vi"](func, arg);
  };
 } else {
  browserIterationFunc = function() {
   Module["dynCall_v"](func);
  };
 }
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  } else if (Browser.mainLoop.timingMode == 0) {
   Browser.mainLoop.tickStartTime = _emscripten_get_now();
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   err("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  Browser.mainLoop.runIter(browserIterationFunc);
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "SimulateInfiniteLoop";
 }
}

var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  },
  resume: function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  },
  updateStatus: function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  },
  runIter: function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) err("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  }
 },
 isFullscreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob();
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ new Uint8Array(byteArray).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder();
    bb.append(new Uint8Array(byteArray).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image();
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio();
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio();
    audio.addEventListener("canplaythrough", function() {
     finish(audio);
    }, false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout(function() {
     finish(audio);
    }, 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
  }
  var canvas = Module["canvas"];
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {};
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {};
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", function(ev) {
     if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
      Module["canvas"].requestPointerLock();
      ev.preventDefault();
     }
    }, false);
   }
  }
 },
 createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false,
    majorVersion: 1
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   if (typeof GL !== "undefined") {
    contextHandle = GL.createContext(canvas, contextAttributes);
    if (contextHandle) {
     ctx = GL.getContext(contextHandle).GLctx;
    }
   }
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
    callback();
   });
   Browser.init();
  }
  return ctx;
 },
 destroyContext: function(canvas, useWebGL, setInModule) {},
 fullscreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullscreen: function(lockPointer, resizeCanvas, vrDevice) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  Browser.vrDevice = vrDevice;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
  var canvas = Module["canvas"];
  function fullscreenChange() {
   Browser.isFullscreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.exitFullscreen = Browser.exitFullscreen;
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullscreen = true;
    if (Browser.resizeCanvas) {
     Browser.setFullscreenCanvasSize();
    } else {
     Browser.updateCanvasDimensions(canvas);
    }
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) {
     Browser.setWindowedCanvasSize();
    } else {
     Browser.updateCanvasDimensions(canvas);
    }
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullscreen);
   if (Module["onFullscreen"]) Module["onFullscreen"](Browser.isFullscreen);
  }
  if (!Browser.fullscreenHandlersInstalled) {
   Browser.fullscreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullscreenChange, false);
   document.addEventListener("mozfullscreenchange", fullscreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
   document.addEventListener("MSFullscreenChange", fullscreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
   canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  } : null);
  if (vrDevice) {
   canvasContainer.requestFullscreen({
    vrDisplay: vrDevice
   });
  } else {
   canvasContainer.requestFullscreen();
  }
 },
 requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
  err("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");
  Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
   return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
  };
  return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
 },
 exitFullscreen: function() {
  if (!Browser.isFullscreen) {
   return false;
  }
  var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {};
  CFS.apply(document, []);
  return true;
 },
 nextRAF: 0,
 fakeRequestAnimationFrame: function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 },
 requestAnimationFrame: function(func) {
  if (typeof requestAnimationFrame === "function") {
   requestAnimationFrame(func);
   return;
  }
  var RAF = Browser.fakeRequestAnimationFrame;
  if (typeof window !== "undefined") {
   RAF = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || RAF;
  }
  RAF(func);
 },
 safeCallback: function(func) {
  return function() {
   if (!ABORT) return func.apply(null, arguments);
  };
 },
 allowAsyncCallbacks: true,
 queuedAsyncCallbacks: [],
 pauseAsyncCallbacks: function() {
  Browser.allowAsyncCallbacks = false;
 },
 resumeAsyncCallbacks: function() {
  Browser.allowAsyncCallbacks = true;
  if (Browser.queuedAsyncCallbacks.length > 0) {
   var callbacks = Browser.queuedAsyncCallbacks;
   Browser.queuedAsyncCallbacks = [];
   callbacks.forEach(function(func) {
    func();
   });
  }
 },
 safeRequestAnimationFrame: function(func) {
  return Browser.requestAnimationFrame(function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  });
 },
 safeSetTimeout: function(func, timeout) {
  noExitRuntime = true;
  return setTimeout(function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }, timeout);
 },
 safeSetInterval: function(func, timeout) {
  noExitRuntime = true;
  return setInterval(function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   }
  }, timeout);
 },
 getMimetype: function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 },
 getUserMedia: function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 },
 getMovementX: function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 },
 getMovementY: function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 },
 getMouseWheelDelta: function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail / 3;
   break;

  case "mousewheel":
   delta = event.wheelDelta / 120;
   break;

  case "wheel":
   delta = event.deltaY;
   switch (event.deltaMode) {
   case 0:
    delta /= 100;
    break;

   case 1:
    delta /= 3;
    break;

   case 2:
    delta *= 80;
    break;

   default:
    throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
   }
   break;

  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 },
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 },
 asyncLoad: function(url, onload, onerror, noRunDep) {
  var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
  readAsync(url, function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (dep) removeRunDependency(dep);
  }, function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  });
  if (dep) addRunDependency(dep);
 },
 resizeListeners: [],
 updateResizeListeners: function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach(function(listener) {
   listener(canvas.width, canvas.height);
  });
 },
 setCanvasSize: function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 },
 windowedWidth: 0,
 windowedHeight: 0,
 setFullscreenCanvasSize: function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen >> 2] = flags;
  }
  Browser.updateCanvasDimensions(Module["canvas"]);
  Browser.updateResizeListeners();
 },
 setWindowedCanvasSize: function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen >> 2] = flags;
  }
  Browser.updateCanvasDimensions(Module["canvas"]);
  Browser.updateResizeListeners();
 },
 updateCanvasDimensions: function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 },
 wgetRequests: {},
 nextWgetRequestHandle: 0,
 getNextWgetRequestHandle: function() {
  var handle = Browser.nextWgetRequestHandle;
  Browser.nextWgetRequestHandle++;
  return handle;
 }
};

function _emscripten_cancel_main_loop() {
 Browser.mainLoop.pause();
 Browser.mainLoop.func = null;
}

var JSEvents = {
 keyEvent: 0,
 mouseEvent: 0,
 wheelEvent: 0,
 uiEvent: 0,
 focusEvent: 0,
 deviceOrientationEvent: 0,
 deviceMotionEvent: 0,
 fullscreenChangeEvent: 0,
 pointerlockChangeEvent: 0,
 visibilityChangeEvent: 0,
 touchEvent: 0,
 previousFullscreenElement: null,
 previousScreenX: null,
 previousScreenY: null,
 removeEventListenersRegistered: false,
 removeAllEventListeners: function() {
  for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
   JSEvents._removeHandler(i);
  }
  JSEvents.eventHandlers = [];
  JSEvents.deferredCalls = [];
 },
 registerRemoveEventListeners: function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push(JSEvents.removeAllEventListeners);
   JSEvents.removeEventListenersRegistered = true;
  }
 },
 deferredCalls: [],
 deferCall: function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort(function(x, y) {
   return x.precedence < y.precedence;
  });
 },
 removeDeferredCalls: function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 },
 canPerformEventHandlerRequests: function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 },
 runDeferredCalls: function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(this, call.argsList);
  }
 },
 inEventHandler: 0,
 currentEventHandler: null,
 eventHandlers: [],
 isInternetExplorer: function() {
  return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > 0;
 },
 removeAllHandlersOnTarget: function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 },
 _removeHandler: function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 },
 registerOrRemoveHandler: function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, { useCapture: eventHandler.useCapture, passive: false });
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 },
 getBoundingClientRectOrZeros: function(target) {
  return target.getBoundingClientRect ? target.getBoundingClientRect() : {
   left: 0,
   top: 0
  };
 },
 pageScrollPos: function() {
  if (pageXOffset > 0 || pageYOffset > 0) {
   return [ pageXOffset, pageYOffset ];
  }
  if (typeof document.documentElement.scrollLeft !== "undefined" || typeof document.documentElement.scrollTop !== "undefined") {
   return [ document.documentElement.scrollLeft, document.documentElement.scrollTop ];
  }
  return [ document.body.scrollLeft | 0, document.body.scrollTop | 0 ];
 },
 getNodeNameForTarget: function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 },
 tick: function() {
  if (window["performance"] && window["performance"]["now"]) return window["performance"]["now"](); else return Date.now();
 },
 fullscreenEnabled: function() {
  return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
 }
};

var __currentFullscreenStrategy = {};

var __specialEventTargets = [ 0, document, window ];

function __findEventTarget(target) {
 try {
  if (!target) return window;
  if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
  if (target === "#window") return window; else if (target === "#document") return document; else if (target === "#screen") return screen; else if (target === "#canvas") return Module["canvas"];
  return typeof target === "string" ? document.getElementById(target) : target;
 } catch (e) {
  return null;
 }
}

function __findCanvasEventTarget(target) {
 if (typeof target === "number") target = UTF8ToString(target);
 if (!target || target === "#canvas") {
  if (typeof GL !== "undefined" && GL.offscreenCanvases["canvas"]) return GL.offscreenCanvases["canvas"];
  return Module["canvas"];
 }
 if (typeof GL !== "undefined" && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
 return __findEventTarget(target);
}

function _emscripten_get_canvas_element_size(target, width, height) {
 var canvas = __findCanvasEventTarget(target);
 if (!canvas) return -4;
 HEAP32[width >> 2] = canvas.width;
 HEAP32[height >> 2] = canvas.height;
}

function __get_canvas_element_size(target) {
 var stackTop = stackSave();
 var w = stackAlloc(8);
 var h = w + 4;
 var targetInt = stackAlloc(target.id.length + 1);
 stringToUTF8(target.id, targetInt, target.id.length + 1);
 var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
 var size = [ HEAP32[w >> 2], HEAP32[h >> 2] ];
 stackRestore(stackTop);
 return size;
}

function _emscripten_set_canvas_element_size(target, width, height) {
 var canvas = __findCanvasEventTarget(target);
 if (!canvas) return -4;
 canvas.width = width;
 canvas.height = height;
 return 0;
}

function __set_canvas_element_size(target, width, height) {
 if (!target.controlTransferredOffscreen) {
  target.width = width;
  target.height = height;
 } else {
  var stackTop = stackSave();
  var targetInt = stackAlloc(target.id.length + 1);
  stringToUTF8(target.id, targetInt, target.id.length + 1);
  _emscripten_set_canvas_element_size(targetInt, width, height);
  stackRestore(stackTop);
 }
}

function __registerRestoreOldStyle(canvas) {
 var canvasSize = __get_canvas_element_size(canvas);
 var oldWidth = canvasSize[0];
 var oldHeight = canvasSize[1];
 var oldCssWidth = canvas.style.width;
 var oldCssHeight = canvas.style.height;
 var oldBackgroundColor = canvas.style.backgroundColor;
 var oldDocumentBackgroundColor = document.body.style.backgroundColor;
 var oldPaddingLeft = canvas.style.paddingLeft;
 var oldPaddingRight = canvas.style.paddingRight;
 var oldPaddingTop = canvas.style.paddingTop;
 var oldPaddingBottom = canvas.style.paddingBottom;
 var oldMarginLeft = canvas.style.marginLeft;
 var oldMarginRight = canvas.style.marginRight;
 var oldMarginTop = canvas.style.marginTop;
 var oldMarginBottom = canvas.style.marginBottom;
 var oldDocumentBodyMargin = document.body.style.margin;
 var oldDocumentOverflow = document.documentElement.style.overflow;
 var oldDocumentScroll = document.body.scroll;
 var oldImageRendering = canvas.style.imageRendering;
 function restoreOldStyle() {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  if (!fullscreenElement) {
   document.removeEventListener("fullscreenchange", restoreOldStyle);
   document.removeEventListener("mozfullscreenchange", restoreOldStyle);
   document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
   document.removeEventListener("MSFullscreenChange", restoreOldStyle);
   __set_canvas_element_size(canvas, oldWidth, oldHeight);
   canvas.style.width = oldCssWidth;
   canvas.style.height = oldCssHeight;
   canvas.style.backgroundColor = oldBackgroundColor;
   if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = "white";
   document.body.style.backgroundColor = oldDocumentBackgroundColor;
   canvas.style.paddingLeft = oldPaddingLeft;
   canvas.style.paddingRight = oldPaddingRight;
   canvas.style.paddingTop = oldPaddingTop;
   canvas.style.paddingBottom = oldPaddingBottom;
   canvas.style.marginLeft = oldMarginLeft;
   canvas.style.marginRight = oldMarginRight;
   canvas.style.marginTop = oldMarginTop;
   canvas.style.marginBottom = oldMarginBottom;
   document.body.style.margin = oldDocumentBodyMargin;
   document.documentElement.style.overflow = oldDocumentOverflow;
   document.body.scroll = oldDocumentScroll;
   canvas.style.imageRendering = oldImageRendering;
   if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
   if (__currentFullscreenStrategy.canvasResizedCallback) {
    dynCall_iiii(__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
   }
  }
 }
 document.addEventListener("fullscreenchange", restoreOldStyle);
 document.addEventListener("mozfullscreenchange", restoreOldStyle);
 document.addEventListener("webkitfullscreenchange", restoreOldStyle);
 document.addEventListener("MSFullscreenChange", restoreOldStyle);
 return restoreOldStyle;
}

function __setLetterbox(element, topBottom, leftRight) {
 if (JSEvents.isInternetExplorer()) {
  element.style.marginLeft = element.style.marginRight = leftRight + "px";
  element.style.marginTop = element.style.marginBottom = topBottom + "px";
 } else {
  element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
  element.style.paddingTop = element.style.paddingBottom = topBottom + "px";
 }
}

function _JSEvents_resizeCanvasForFullscreen(target, strategy) {
 var restoreOldStyle = __registerRestoreOldStyle(target);
 var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
 var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
 var rect = target.getBoundingClientRect();
 var windowedCssWidth = rect.right - rect.left;
 var windowedCssHeight = rect.bottom - rect.top;
 var canvasSize = __get_canvas_element_size(target);
 var windowedRttWidth = canvasSize[0];
 var windowedRttHeight = canvasSize[1];
 if (strategy.scaleMode == 3) {
  __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
  cssWidth = windowedCssWidth;
  cssHeight = windowedCssHeight;
 } else if (strategy.scaleMode == 2) {
  if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
   var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
   __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
   cssHeight = desiredCssHeight;
  } else {
   var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
   __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
   cssWidth = desiredCssWidth;
  }
 }
 if (!target.style.backgroundColor) target.style.backgroundColor = "black";
 if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
 target.style.width = cssWidth + "px";
 target.style.height = cssHeight + "px";
 if (strategy.filteringMode == 1) {
  target.style.imageRendering = "optimizeSpeed";
  target.style.imageRendering = "-moz-crisp-edges";
  target.style.imageRendering = "-o-crisp-edges";
  target.style.imageRendering = "-webkit-optimize-contrast";
  target.style.imageRendering = "optimize-contrast";
  target.style.imageRendering = "crisp-edges";
  target.style.imageRendering = "pixelated";
 }
 var dpiScale = strategy.canvasResolutionScaleMode == 2 ? devicePixelRatio : 1;
 if (strategy.canvasResolutionScaleMode != 0) {
  var newWidth = cssWidth * dpiScale | 0;
  var newHeight = cssHeight * dpiScale | 0;
  __set_canvas_element_size(target, newWidth, newHeight);
  if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
 }
 return restoreOldStyle;
}

function _JSEvents_requestFullscreen(target, strategy) {
 if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
  _JSEvents_resizeCanvasForFullscreen(target, strategy);
 }
 if (target.requestFullscreen) {
  target.requestFullscreen();
 } else if (target.msRequestFullscreen) {
  target.msRequestFullscreen();
 } else if (target.mozRequestFullScreen) {
  target.mozRequestFullScreen();
 } else if (target.mozRequestFullscreen) {
  target.mozRequestFullscreen();
 } else if (target.webkitRequestFullscreen) {
  target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
 } else {
  return JSEvents.fullscreenEnabled() ? -3 : -1;
 }
 if (strategy.canvasResizedCallback) {
  dynCall_iiii(strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
 }
 return 0;
}

function _emscripten_exit_fullscreen() {
 if (!JSEvents.fullscreenEnabled()) return -1;
 JSEvents.removeDeferredCalls(_JSEvents_requestFullscreen);
 var d = __specialEventTargets[1];
 if (d.exitFullscreen) {
  d.fullscreenElement && d.exitFullscreen();
 } else if (d.msExitFullscreen) {
  d.msFullscreenElement && d.msExitFullscreen();
 } else if (d.mozCancelFullScreen) {
  d.mozFullScreenElement && d.mozCancelFullScreen();
 } else if (d.webkitExitFullscreen) {
  d.webkitFullscreenElement && d.webkitExitFullscreen();
 } else {
  return -1;
 }
 if (__currentFullscreenStrategy.canvasResizedCallback) {
  dynCall_iiii(__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
  __currentFullscreenStrategy = 0;
 }
 return 0;
}

function __requestPointerLock(target) {
 if (target.requestPointerLock) {
  target.requestPointerLock();
 } else if (target.mozRequestPointerLock) {
  target.mozRequestPointerLock();
 } else if (target.webkitRequestPointerLock) {
  target.webkitRequestPointerLock();
 } else if (target.msRequestPointerLock) {
  target.msRequestPointerLock();
 } else {
  if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
   return -3;
  } else {
   return -1;
  }
 }
 return 0;
}

function _emscripten_exit_pointerlock() {
 JSEvents.removeDeferredCalls(__requestPointerLock);
 if (document.exitPointerLock) {
  document.exitPointerLock();
 } else if (document.msExitPointerLock) {
  document.msExitPointerLock();
 } else if (document.mozExitPointerLock) {
  document.mozExitPointerLock();
 } else if (document.webkitExitPointerLock) {
  document.webkitExitPointerLock();
 } else {
  return -1;
 }
 return 0;
}

function _emscripten_get_device_pixel_ratio() {
 return devicePixelRatio || 1;
}

function _emscripten_get_element_css_size(target, width, height) {
 target = target ? __findEventTarget(target) : Module["canvas"];
 if (!target) return -4;
 if (target.getBoundingClientRect) {
  var rect = target.getBoundingClientRect();
  HEAPF64[width >> 3] = rect.right - rect.left;
  HEAPF64[height >> 3] = rect.bottom - rect.top;
 } else {
  HEAPF64[width >> 3] = target.clientWidth;
  HEAPF64[height >> 3] = target.clientHeight;
 }
 return 0;
}

function __fillFullscreenChangeEventData(eventStruct, e) {
 var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
 var isFullscreen = !!fullscreenElement;
 HEAP32[eventStruct >> 2] = isFullscreen;
 HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
 var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
 var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
 var id = reportedElement && reportedElement.id ? reportedElement.id : "";
 stringToUTF8(nodeName, eventStruct + 8, 128);
 stringToUTF8(id, eventStruct + 136, 128);
 HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
 HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
 HEAP32[eventStruct + 272 >> 2] = screen.width;
 HEAP32[eventStruct + 276 >> 2] = screen.height;
 if (isFullscreen) {
  JSEvents.previousFullscreenElement = fullscreenElement;
 }
}

function _emscripten_get_fullscreen_status(fullscreenStatus) {
 if (!JSEvents.fullscreenEnabled()) return -1;
 __fillFullscreenChangeEventData(fullscreenStatus);
 return 0;
}

function __fillGamepadEventData(eventStruct, e) {
 HEAPF64[eventStruct >> 3] = e.timestamp;
 for (var i = 0; i < e.axes.length; ++i) {
  HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i];
 }
 for (var i = 0; i < e.buttons.length; ++i) {
  if (typeof e.buttons[i] === "object") {
   HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value;
  } else {
   HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i];
  }
 }
 for (var i = 0; i < e.buttons.length; ++i) {
  if (typeof e.buttons[i] === "object") {
   HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed;
  } else {
   HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1;
  }
 }
 HEAP32[eventStruct + 1296 >> 2] = e.connected;
 HEAP32[eventStruct + 1300 >> 2] = e.index;
 HEAP32[eventStruct + 8 >> 2] = e.axes.length;
 HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
 stringToUTF8(e.id, eventStruct + 1304, 64);
 stringToUTF8(e.mapping, eventStruct + 1368, 64);
}

function _emscripten_get_gamepad_status(index, gamepadState) {
 if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
 if (!JSEvents.lastGamepadState[index]) return -7;
 __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
 return 0;
}

function _emscripten_get_heap_size() {
 return HEAP8.length;
}

function _emscripten_get_num_gamepads() {
 return JSEvents.lastGamepadState.length;
}

function __fillPointerlockChangeEventData(eventStruct, e) {
 var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
 var isPointerlocked = !!pointerLockElement;
 HEAP32[eventStruct >> 2] = isPointerlocked;
 var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
 var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
 stringToUTF8(nodeName, eventStruct + 4, 128);
 stringToUTF8(id, eventStruct + 132, 128);
}

function _emscripten_get_pointerlock_status(pointerlockStatus) {
 if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
 if (!document.body || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
  return -1;
 }
 return 0;
}

function _emscripten_is_webgl_context_lost(target) {
 return !GL.contexts[target] || GL.contexts[target].GLctx.isContextLost();
}

function __emscripten_do_request_fullscreen(target, strategy) {
 if (!JSEvents.fullscreenEnabled()) return -1;
 if (!target) target = "#canvas";
 target = __findEventTarget(target);
 if (!target) return -4;
 if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
  return -3;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (strategy.deferUntilInEventHandler) {
   JSEvents.deferCall(_JSEvents_requestFullscreen, 1, [ target, strategy ]);
   return 1;
  } else {
   return -2;
  }
 }
 return _JSEvents_requestFullscreen(target, strategy);
}

function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
 var strategy = {};
 strategy.scaleMode = HEAP32[fullscreenStrategy >> 2];
 strategy.canvasResolutionScaleMode = HEAP32[fullscreenStrategy + 4 >> 2];
 strategy.filteringMode = HEAP32[fullscreenStrategy + 8 >> 2];
 strategy.deferUntilInEventHandler = deferUntilInEventHandler;
 strategy.canvasResizedCallback = HEAP32[fullscreenStrategy + 12 >> 2];
 strategy.canvasResizedCallbackUserData = HEAP32[fullscreenStrategy + 16 >> 2];
 __currentFullscreenStrategy = strategy;
 return __emscripten_do_request_fullscreen(target, strategy);
}

function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
 if (!target) target = "#canvas";
 target = __findEventTarget(target);
 if (!target) return -4;
 if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
  return -1;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (deferUntilInEventHandler) {
   JSEvents.deferCall(__requestPointerLock, 2, [ target ]);
   return 1;
  } else {
   return -2;
  }
 }
 return __requestPointerLock(target);
}

function emscripten_realloc_buffer(size) {
 try {
  var newBuffer = new ArrayBuffer(size);
  if (newBuffer.byteLength != size) return;
  new Int8Array(newBuffer).set(HEAP8);
  _emscripten_replace_memory(newBuffer);
  updateGlobalBufferAndViews(newBuffer);
  return 1;
 } catch (e) {}
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = _emscripten_get_heap_size();
 var PAGE_MULTIPLE = 16777216;
 var LIMIT = 2147483648 - PAGE_MULTIPLE;
 if (requestedSize > LIMIT) {
  return false;
 }
 var MIN_TOTAL_MEMORY = 16777216;
 var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
 while (newSize < requestedSize) {
  if (newSize <= 536870912) {
   newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
  } else {
   newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
  }
 }
 var replacement = emscripten_realloc_buffer(newSize);
 if (!replacement) {
  return false;
 }
 return true;
}

function _emscripten_resume_main_loop() {
 Browser.mainLoop.resume();
}

function _emscripten_sample_gamepad_data() {
 return (JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null) ? 0 : -1;
}

function __registerBeforeUnloadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
 var beforeUnloadEventHandlerFunc = function(ev) {
  var e = ev || event;
  var confirmationMessage = dynCall_iiii(callbackfunc, eventTypeId, 0, userData);
  if (confirmationMessage) {
   confirmationMessage = UTF8ToString(confirmationMessage);
  }
  if (confirmationMessage) {
   e.preventDefault();
   e.returnValue = confirmationMessage;
   return confirmationMessage;
  }
 };
 var eventHandler = {
  target: __findEventTarget(target),
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: beforeUnloadEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_beforeunload_callback_on_thread(userData, callbackfunc, targetThread) {
 if (typeof onbeforeunload === "undefined") return -1;
 if (targetThread !== 1) return -5;
 __registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
 return 0;
}

function __registerFocusEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.focusEvent) JSEvents.focusEvent = _malloc(256);
 var focusEventHandlerFunc = function(ev) {
  var e = ev || event;
  var nodeName = JSEvents.getNodeNameForTarget(e.target);
  var id = e.target.id ? e.target.id : "";
  var focusEvent = JSEvents.focusEvent;
  stringToUTF8(nodeName, focusEvent + 0, 128);
  stringToUTF8(id, focusEvent + 128, 128);
  if (dynCall_iiii(callbackfunc, eventTypeId, focusEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: __findEventTarget(target),
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: focusEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_blur_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);
 return 0;
}

function _emscripten_set_element_css_size(target, width, height) {
 target = target ? __findEventTarget(target) : Module["canvas"];
 if (!target) return -4;
 target.style.width = width + "px";
 target.style.height = height + "px";
 return 0;
}

function _emscripten_set_focus_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);
 return 0;
}

function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc(280);
 var fullscreenChangeEventhandlerFunc = function(ev) {
  var e = ev || event;
  var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: fullscreenChangeEventhandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (!JSEvents.fullscreenEnabled()) return -1;
 target = target ? __findEventTarget(target) : __specialEventTargets[1];
 if (!target) return -4;
 __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
 __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange", targetThread);
 __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
 __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange", targetThread);
 return 0;
}

function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc(164);
 var keyEventHandlerFunc = function(ev) {
  var e = ev || event;
  var keyEventData = JSEvents.keyEvent;
  stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
  stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
  HEAP32[keyEventData + 64 >> 2] = e.location;
  HEAP32[keyEventData + 68 >> 2] = e.ctrlKey;
  HEAP32[keyEventData + 72 >> 2] = e.shiftKey;
  HEAP32[keyEventData + 76 >> 2] = e.altKey;
  HEAP32[keyEventData + 80 >> 2] = e.metaKey;
  HEAP32[keyEventData + 84 >> 2] = e.repeat;
  stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
  stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
  HEAP32[keyEventData + 152 >> 2] = e.charCode;
  HEAP32[keyEventData + 156 >> 2] = e.keyCode;
  HEAP32[keyEventData + 160 >> 2] = e.which;
  if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: __findEventTarget(target),
  allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: keyEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
 return 0;
}

function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
 return 0;
}

function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
 return 0;
}

function __fillMouseEventData(eventStruct, e, target) {
 HEAPF64[eventStruct >> 3] = JSEvents.tick();
 HEAP32[eventStruct + 8 >> 2] = e.screenX;
 HEAP32[eventStruct + 12 >> 2] = e.screenY;
 HEAP32[eventStruct + 16 >> 2] = e.clientX;
 HEAP32[eventStruct + 20 >> 2] = e.clientY;
 HEAP32[eventStruct + 24 >> 2] = e.ctrlKey;
 HEAP32[eventStruct + 28 >> 2] = e.shiftKey;
 HEAP32[eventStruct + 32 >> 2] = e.altKey;
 HEAP32[eventStruct + 36 >> 2] = e.metaKey;
 HEAP16[eventStruct + 40 >> 1] = e.button;
 HEAP16[eventStruct + 42 >> 1] = e.buttons;
 HEAP32[eventStruct + 44 >> 2] = e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || e.screenX - JSEvents.previousScreenX;
 HEAP32[eventStruct + 48 >> 2] = e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || e.screenY - JSEvents.previousScreenY;
 if (Module["canvas"]) {
  var rect = Module["canvas"].getBoundingClientRect();
  HEAP32[eventStruct + 60 >> 2] = e.clientX - rect.left;
  HEAP32[eventStruct + 64 >> 2] = e.clientY - rect.top;
 } else {
  HEAP32[eventStruct + 60 >> 2] = 0;
  HEAP32[eventStruct + 64 >> 2] = 0;
 }
 if (target) {
  var rect = JSEvents.getBoundingClientRectOrZeros(target);
  HEAP32[eventStruct + 52 >> 2] = e.clientX - rect.left;
  HEAP32[eventStruct + 56 >> 2] = e.clientY - rect.top;
 } else {
  HEAP32[eventStruct + 52 >> 2] = 0;
  HEAP32[eventStruct + 56 >> 2] = 0;
 }
 if (e.type !== "wheel" && e.type !== "mousewheel") {
  JSEvents.previousScreenX = e.screenX;
  JSEvents.previousScreenY = e.screenY;
 }
}

function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc(72);
 target = __findEventTarget(target);
 var mouseEventHandlerFunc = function(ev) {
  var e = ev || event;
  __fillMouseEventData(JSEvents.mouseEvent, e, target);
  if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: mouseEventHandlerFunc,
  useCapture: useCapture
 };
 if (JSEvents.isInternetExplorer() && eventTypeString == "mousedown") eventHandler.allowsDeferredCalls = false;
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
 return 0;
}

function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
 return 0;
}

function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
 return 0;
}

function __registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc(36);
 if (eventTypeString == "scroll" && !target) {
  target = document;
 } else {
  target = __findEventTarget(target);
 }
 var uiEventHandlerFunc = function(ev) {
  var e = ev || event;
  if (e.target != target) {
   return;
  }
  var scrollPos = JSEvents.pageScrollPos();
  var uiEvent = JSEvents.uiEvent;
  HEAP32[uiEvent >> 2] = e.detail;
  HEAP32[uiEvent + 4 >> 2] = document.body.clientWidth;
  HEAP32[uiEvent + 8 >> 2] = document.body.clientHeight;
  HEAP32[uiEvent + 12 >> 2] = innerWidth;
  HEAP32[uiEvent + 16 >> 2] = innerHeight;
  HEAP32[uiEvent + 20 >> 2] = outerWidth;
  HEAP32[uiEvent + 24 >> 2] = outerHeight;
  HEAP32[uiEvent + 28 >> 2] = scrollPos[0];
  HEAP32[uiEvent + 32 >> 2] = scrollPos[1];
  if (dynCall_iiii(callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: uiEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
 return 0;
}

function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc(1684);
 target = __findEventTarget(target);
 var touchEventHandlerFunc = function(ev) {
  var e = ev || event;
  var touches = {};
  for (var i = 0; i < e.touches.length; ++i) {
   var touch = e.touches[i];
   touch.changed = false;
   touches[touch.identifier] = touch;
  }
  for (var i = 0; i < e.changedTouches.length; ++i) {
   var touch = e.changedTouches[i];
   touches[touch.identifier] = touch;
   touch.changed = true;
  }
  for (var i = 0; i < e.targetTouches.length; ++i) {
   var touch = e.targetTouches[i];
   touches[touch.identifier].onTarget = true;
  }
  var touchEvent = JSEvents.touchEvent;
  var ptr = touchEvent;
  HEAP32[ptr + 4 >> 2] = e.ctrlKey;
  HEAP32[ptr + 8 >> 2] = e.shiftKey;
  HEAP32[ptr + 12 >> 2] = e.altKey;
  HEAP32[ptr + 16 >> 2] = e.metaKey;
  ptr += 20;
  var canvasRect = Module["canvas"] ? Module["canvas"].getBoundingClientRect() : undefined;
  var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
  var numTouches = 0;
  for (var i in touches) {
   var t = touches[i];
   HEAP32[ptr >> 2] = t.identifier;
   HEAP32[ptr + 4 >> 2] = t.screenX;
   HEAP32[ptr + 8 >> 2] = t.screenY;
   HEAP32[ptr + 12 >> 2] = t.clientX;
   HEAP32[ptr + 16 >> 2] = t.clientY;
   HEAP32[ptr + 20 >> 2] = t.pageX;
   HEAP32[ptr + 24 >> 2] = t.pageY;
   HEAP32[ptr + 28 >> 2] = t.changed;
   HEAP32[ptr + 32 >> 2] = t.onTarget;
   if (canvasRect) {
    HEAP32[ptr + 44 >> 2] = t.clientX - canvasRect.left;
    HEAP32[ptr + 48 >> 2] = t.clientY - canvasRect.top;
   } else {
    HEAP32[ptr + 44 >> 2] = 0;
    HEAP32[ptr + 48 >> 2] = 0;
   }
   HEAP32[ptr + 36 >> 2] = t.clientX - targetRect.left;
   HEAP32[ptr + 40 >> 2] = t.clientY - targetRect.top;
   ptr += 52;
   if (++numTouches >= 32) {
    break;
   }
  }
  HEAP32[touchEvent >> 2] = numTouches;
  if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: touchEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
 return 0;
}

function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
 return 0;
}

function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
 return 0;
}

function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
 return 0;
}

function __fillVisibilityChangeEventData(eventStruct, e) {
 var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
 var visibilityState = visibilityStates.indexOf(document.visibilityState);
 HEAP32[eventStruct >> 2] = document.hidden;
 HEAP32[eventStruct + 4 >> 2] = visibilityState;
}

function __registerVisibilityChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.visibilityChangeEvent) JSEvents.visibilityChangeEvent = _malloc(8);
 var visibilityChangeEventHandlerFunc = function(ev) {
  var e = ev || event;
  var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
  __fillVisibilityChangeEventData(visibilityChangeEvent, e);
  if (dynCall_iiii(callbackfunc, eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: visibilityChangeEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_visibilitychange_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
 __registerVisibilityChangeEventCallback(__specialEventTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
 return 0;
}

function __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!target) target = Module["canvas"];
 var webGlEventHandlerFunc = function(ev) {
  var e = ev || event;
  if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: __findEventTarget(target),
  allowsDeferredCalls: false,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: webGlEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_webglcontextlost_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost", targetThread);
 return 0;
}

function __registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc(104);
 var wheelHandlerFunc = function(ev) {
  var e = ev || event;
  var wheelEvent = JSEvents.wheelEvent;
  __fillMouseEventData(wheelEvent, e, target);
  HEAPF64[wheelEvent + 72 >> 3] = e["deltaX"];
  HEAPF64[wheelEvent + 80 >> 3] = e["deltaY"];
  HEAPF64[wheelEvent + 88 >> 3] = e["deltaZ"];
  HEAP32[wheelEvent + 96 >> 2] = e["deltaMode"];
  if (dynCall_iiii(callbackfunc, eventTypeId, wheelEvent, userData)) e.preventDefault();
 };
 var mouseWheelHandlerFunc = function(ev) {
  var e = ev || event;
  __fillMouseEventData(JSEvents.wheelEvent, e, target);
  HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["wheelDeltaX"] || 0;
  HEAPF64[JSEvents.wheelEvent + 80 >> 3] = -(e["wheelDeltaY"] || e["wheelDelta"]);
  HEAPF64[JSEvents.wheelEvent + 88 >> 3] = 0;
  HEAP32[JSEvents.wheelEvent + 96 >> 2] = 0;
  var shouldCancel = dynCall_iiii(callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
  if (shouldCancel) {
   e.preventDefault();
  }
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: true,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: eventTypeString == "wheel" ? wheelHandlerFunc : mouseWheelHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 target = __findEventTarget(target);
 if (typeof target.onwheel !== "undefined") {
  __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
  return 0;
 } else if (typeof target.onmousewheel !== "undefined") {
  __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel", targetThread);
  return 0;
 } else {
  return -1;
 }
}

var GL = {
 counter: 1,
 lastError: 0,
 buffers: [],
 mappedBuffers: {},
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 uniforms: [],
 shaders: [],
 vaos: [],
 contexts: {},
 currentContext: null,
 offscreenCanvases: {},
 timerQueriesEXT: [],
 programInfos: {},
 stringCache: {},
 unpackAlignment: 4,
 init: function() {
  GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
  }
 },
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 },
 MINI_TEMP_BUFFER_SIZE: 256,
 miniTempBuffer: null,
 miniTempBufferViews: [ 0 ],
 getSource: function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var len = length ? HEAP32[length + i * 4 >> 2] : -1;
   source += UTF8ToString(HEAP32[string + i * 4 >> 2], len < 0 ? undefined : len);
  }
  return source;
 },
 createContext: function(canvas, webGLContextAttributes) {
  var ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
  if (!ctx) return 0;
  var handle = GL.registerContext(ctx, webGLContextAttributes);
  return handle;
 },
 registerContext: function(ctx, webGLContextAttributes) {
  var handle = _malloc(8);
  var context = {
   handle: handle,
   attributes: webGLContextAttributes,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  context.cannotHandleOffsetsInUniformArrayViews = function(g) {
   function b(c, t) {
    var s = g.createShader(t);
    g.shaderSource(s, c);
    g.compileShader(s);
    return s;
   }
   try {
    var p = g.createProgram();
    g.attachShader(p, b("attribute vec4 p;void main(){gl_Position=p;}", g.VERTEX_SHADER));
    g.attachShader(p, b("precision lowp float;uniform vec4 u;void main(){gl_FragColor=u;}", g.FRAGMENT_SHADER));
    g.linkProgram(p);
    var h = new Float32Array(8);
    h[4] = 1;
    g.useProgram(p);
    var l = g.getUniformLocation(p, "u");
    g.uniform4fv(l, h.subarray(4, 8));
    return !g.getUniform(p, l)[0];
   } catch (e) {
    return false;
   }
  }();
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes.enableExtensionsByDefault === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 },
 makeContextCurrent: function(contextHandle) {
  GL.currentContext = GL.contexts[contextHandle];
  Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
  return !(contextHandle && !GLctx);
 },
 getContext: function(contextHandle) {
  return GL.contexts[contextHandle];
 },
 deleteContext: function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  _free(GL.contexts[contextHandle]);
  GL.contexts[contextHandle] = null;
 },
 acquireInstancedArraysExtension: function(ctx) {
  var ext = ctx.getExtension("ANGLE_instanced_arrays");
  if (ext) {
   ctx["vertexAttribDivisor"] = function(index, divisor) {
    ext["vertexAttribDivisorANGLE"](index, divisor);
   };
   ctx["drawArraysInstanced"] = function(mode, first, count, primcount) {
    ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
   };
   ctx["drawElementsInstanced"] = function(mode, count, type, indices, primcount) {
    ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
   };
  }
 },
 acquireVertexArrayObjectExtension: function(ctx) {
  var ext = ctx.getExtension("OES_vertex_array_object");
  if (ext) {
   ctx["createVertexArray"] = function() {
    return ext["createVertexArrayOES"]();
   };
   ctx["deleteVertexArray"] = function(vao) {
    ext["deleteVertexArrayOES"](vao);
   };
   ctx["bindVertexArray"] = function(vao) {
    ext["bindVertexArrayOES"](vao);
   };
   ctx["isVertexArray"] = function(vao) {
    return ext["isVertexArrayOES"](vao);
   };
  }
 },
 acquireDrawBuffersExtension: function(ctx) {
  var ext = ctx.getExtension("WEBGL_draw_buffers");
  if (ext) {
   ctx["drawBuffers"] = function(n, bufs) {
    ext["drawBuffersWEBGL"](n, bufs);
   };
  }
 },
 initExtensions: function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  if (context.version < 2) {
   GL.acquireInstancedArraysExtension(GLctx);
   GL.acquireVertexArrayObjectExtension(GLctx);
   GL.acquireDrawBuffersExtension(GLctx);
  }
  GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth", "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float", "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2" ];
  var exts = GLctx.getSupportedExtensions() || [];
  exts.forEach(function(ext) {
   if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
    GLctx.getExtension(ext);
   }
  });
 },
 populateUniformTable: function(program) {
  var p = GL.programs[program];
  var ptable = GL.programInfos[program] = {
   uniforms: {},
   maxUniformLength: 0,
   maxAttributeLength: -1,
   maxUniformBlockNameLength: -1
  };
  var utable = ptable.uniforms;
  var numUniforms = GLctx.getProgramParameter(p, 35718);
  for (var i = 0; i < numUniforms; ++i) {
   var u = GLctx.getActiveUniform(p, i);
   var name = u.name;
   ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
   if (name.slice(-1) == "]") {
    name = name.slice(0, name.lastIndexOf("["));
   }
   var loc = GLctx.getUniformLocation(p, name);
   if (loc) {
    var id = GL.getNewId(GL.uniforms);
    utable[name] = [ u.size, id ];
    GL.uniforms[id] = loc;
    for (var j = 1; j < u.size; ++j) {
     var n = name + "[" + j + "]";
     loc = GLctx.getUniformLocation(p, n);
     id = GL.getNewId(GL.uniforms);
     GL.uniforms[id] = loc;
    }
   }
  }
 }
};

var __emscripten_webgl_power_preferences = [ "default", "low-power", "high-performance" ];

function _emscripten_webgl_do_create_context(target, attributes) {
 var contextAttributes = {};
 var a = attributes >> 2;
 contextAttributes["alpha"] = !!HEAP32[a + (0 >> 2)];
 contextAttributes["depth"] = !!HEAP32[a + (4 >> 2)];
 contextAttributes["stencil"] = !!HEAP32[a + (8 >> 2)];
 contextAttributes["antialias"] = !!HEAP32[a + (12 >> 2)];
 contextAttributes["premultipliedAlpha"] = !!HEAP32[a + (16 >> 2)];
 contextAttributes["preserveDrawingBuffer"] = !!HEAP32[a + (20 >> 2)];
 var powerPreference = HEAP32[a + (24 >> 2)];
 contextAttributes["powerPreference"] = __emscripten_webgl_power_preferences[powerPreference];
 contextAttributes["failIfMajorPerformanceCaveat"] = !!HEAP32[a + (28 >> 2)];
 contextAttributes.majorVersion = HEAP32[a + (32 >> 2)];
 contextAttributes.minorVersion = HEAP32[a + (36 >> 2)];
 contextAttributes.enableExtensionsByDefault = HEAP32[a + (40 >> 2)];
 contextAttributes.explicitSwapControl = HEAP32[a + (44 >> 2)];
 contextAttributes.proxyContextToMainThread = HEAP32[a + (48 >> 2)];
 contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52 >> 2)];
 var canvas = __findCanvasEventTarget(target);
 if (!canvas) {
  return 0;
 }
 if (contextAttributes.explicitSwapControl) {
  return 0;
 }
 var contextHandle = GL.createContext(canvas, contextAttributes);
 return contextHandle;
}

function _emscripten_webgl_create_context(a0, a1) {
 return _emscripten_webgl_do_create_context(a0, a1);
}

function _emscripten_webgl_destroy_context_calling_thread(contextHandle) {
 if (GL.currentContext == contextHandle) GL.currentContext = 0;
 GL.deleteContext(contextHandle);
}

function _emscripten_webgl_destroy_context(a0) {
 return _emscripten_webgl_destroy_context_calling_thread(a0);
}

function _emscripten_webgl_init_context_attributes(attributes) {
 var a = attributes >> 2;
 for (var i = 0; i < 56 >> 2; ++i) {
  HEAP32[a + i] = 0;
 }
 HEAP32[a + (0 >> 2)] = HEAP32[a + (4 >> 2)] = HEAP32[a + (12 >> 2)] = HEAP32[a + (16 >> 2)] = HEAP32[a + (32 >> 2)] = HEAP32[a + (40 >> 2)] = 1;
}

function _emscripten_webgl_make_context_current(contextHandle) {
 var success = GL.makeContextCurrent(contextHandle);
 return success ? 0 : -5;
}

Module["_emscripten_webgl_make_context_current"] = _emscripten_webgl_make_context_current;

function _exit(status) {
 exit(status);
}

function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = now / 1e3 | 0;
 HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}

function _glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}

function _glBindAttribLocation(program, index, name) {
 GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
}

function _glBindBuffer(target, buffer) {
 GLctx.bindBuffer(target, GL.buffers[buffer]);
}

function _glBindTexture(target, texture) {
 GLctx.bindTexture(target, GL.textures[texture]);
}

function _glBlendFunc(x0, x1) {
 GLctx["blendFunc"](x0, x1);
}

function _glBufferData(target, size, data, usage) {
 GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage);
}

function _glBufferSubData(target, offset, size, data) {
 GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
}

function _glClear(x0) {
 GLctx["clear"](x0);
}

function _glClearColor(x0, x1, x2, x3) {
 GLctx["clearColor"](x0, x1, x2, x3);
}

function _glColorMask(red, green, blue, alpha) {
 GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
}

function _glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}

function _glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 GL.programs[id] = program;
 return id;
}

function _glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}

function _glDeleteBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[buffers + i * 4 >> 2];
  var buffer = GL.buffers[id];
  if (!buffer) continue;
  GLctx.deleteBuffer(buffer);
  buffer.name = 0;
  GL.buffers[id] = null;
  if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
  if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
 }
}

function _glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
 GL.programInfos[id] = null;
}

function _glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}

function _glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}

function _glDepthFunc(x0) {
 GLctx["depthFunc"](x0);
}

function _glDepthMask(flag) {
 GLctx.depthMask(!!flag);
}

function _glDetachShader(program, shader) {
 GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
}

function _glDisable(x0) {
 GLctx["disable"](x0);
}

function _glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}

function _glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}

function _glDrawElements(mode, count, type, indices) {
 GLctx.drawElements(mode, count, type, indices);
}

function _glEnable(x0) {
 GLctx["enable"](x0);
}

function _glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}

function __glGenObject(n, buffers, createFunction, objectTable) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx[createFunction]();
  var id = buffer && GL.getNewId(objectTable);
  if (buffer) {
   buffer.name = id;
   objectTable[id] = buffer;
  } else {
   GL.recordError(1282);
  }
  HEAP32[buffers + i * 4 >> 2] = id;
 }
}

function _glGenBuffers(n, buffers) {
 __glGenObject(n, buffers, "createBuffer", GL.buffers);
}

function _glGenTextures(n, textures) {
 __glGenObject(n, textures, "createTexture", GL.textures);
}

function emscriptenWebGLGet(name_, p, type) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 var ret = undefined;
 switch (name_) {
 case 36346:
  ret = 1;
  break;

 case 36344:
  if (type != 0 && type != 1) {
   GL.recordError(1280);
  }
  return;

 case 36345:
  ret = 0;
  break;

 case 34466:
  var formats = GLctx.getParameter(34467);
  ret = formats ? formats.length : 0;
  break;
 }
 if (ret === undefined) {
  var result = GLctx.getParameter(name_);
  switch (typeof result) {
  case "number":
   ret = result;
   break;

  case "boolean":
   ret = result ? 1 : 0;
   break;

  case "string":
   GL.recordError(1280);
   return;

  case "object":
   if (result === null) {
    switch (name_) {
    case 34964:
    case 35725:
    case 34965:
    case 36006:
    case 36007:
    case 32873:
    case 34229:
    case 34068:
     {
      ret = 0;
      break;
     }

    default:
     {
      GL.recordError(1280);
      return;
     }
    }
   } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
    for (var i = 0; i < result.length; ++i) {
     switch (type) {
     case 0:
      HEAP32[p + i * 4 >> 2] = result[i];
      break;

     case 2:
      HEAPF32[p + i * 4 >> 2] = result[i];
      break;

     case 4:
      HEAP8[p + i >> 0] = result[i] ? 1 : 0;
      break;
     }
    }
    return;
   } else {
    try {
     ret = result.name | 0;
    } catch (e) {
     GL.recordError(1280);
     err("GL_INVALID_ENUM in glGet" + type + "v: Unknown object returned from WebGL getParameter(" + name_ + ")! (error: " + e + ")");
     return;
    }
   }
   break;

  default:
   GL.recordError(1280);
   err("GL_INVALID_ENUM in glGet" + type + "v: Native code calling glGet" + type + "v(" + name_ + ") and it returns " + result + " of type " + typeof result + "!");
   return;
  }
 }
 switch (type) {
 case 1:
  tempI64 = [ ret >>> 0, (tempDouble = ret, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], 
  HEAP32[p >> 2] = tempI64[0], HEAP32[p + 4 >> 2] = tempI64[1];
  break;

 case 0:
  HEAP32[p >> 2] = ret;
  break;

 case 2:
  HEAPF32[p >> 2] = ret;
  break;

 case 4:
  HEAP8[p >> 0] = ret ? 1 : 0;
  break;
 }
}

function _glGetIntegerv(name_, p) {
 emscriptenWebGLGet(name_, p, 0);
}

function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
}

function _glGetProgramiv(program, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (program >= GL.counter) {
  GL.recordError(1281);
  return;
 }
 var ptable = GL.programInfos[program];
 if (!ptable) {
  GL.recordError(1282);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  HEAP32[p >> 2] = ptable.maxUniformLength;
 } else if (pname == 35722) {
  if (ptable.maxAttributeLength == -1) {
   program = GL.programs[program];
   var numAttribs = GLctx.getProgramParameter(program, 35721);
   ptable.maxAttributeLength = 0;
   for (var i = 0; i < numAttribs; ++i) {
    var activeAttrib = GLctx.getActiveAttrib(program, i);
    ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
   }
  }
  HEAP32[p >> 2] = ptable.maxAttributeLength;
 } else if (pname == 35381) {
  if (ptable.maxUniformBlockNameLength == -1) {
   program = GL.programs[program];
   var numBlocks = GLctx.getProgramParameter(program, 35382);
   ptable.maxUniformBlockNameLength = 0;
   for (var i = 0; i < numBlocks; ++i) {
    var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
    ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length + 1);
   }
  }
  HEAP32[p >> 2] = ptable.maxUniformBlockNameLength;
 } else {
  HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
 }
}

function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
}

function _glGetShaderiv(shader, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35720) {
  var source = GLctx.getShaderSource(GL.shaders[shader]);
  var sourceLength = source === null || source.length == 0 ? 0 : source.length + 1;
  HEAP32[p >> 2] = sourceLength;
 } else {
  HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}

function stringToNewUTF8(jsString) {
 var length = lengthBytesUTF8(jsString) + 1;
 var cString = _malloc(length);
 stringToUTF8(jsString, cString, length);
 return cString;
}

function _glGetString(name_) {
 if (GL.stringCache[name_]) return GL.stringCache[name_];
 var ret;
 switch (name_) {
 case 7939:
  var exts = GLctx.getSupportedExtensions() || [];
  exts = exts.concat(exts.map(function(e) {
   return "GL_" + e;
  }));
  ret = stringToNewUTF8(exts.join(" "));
  break;

 case 7936:
 case 7937:
 case 37445:
 case 37446:
  var s = GLctx.getParameter(name_);
  if (!s) {
   GL.recordError(1280);
  }
  ret = stringToNewUTF8(s);
  break;

 case 7938:
  var glVersion = GLctx.getParameter(GLctx.VERSION);
  {
   glVersion = "OpenGL ES 2.0 (" + glVersion + ")";
  }
  ret = stringToNewUTF8(glVersion);
  break;

 case 35724:
  var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
  var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
  var ver_num = glslVersion.match(ver_re);
  if (ver_num !== null) {
   if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
   glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")";
  }
  ret = stringToNewUTF8(glslVersion);
  break;

 default:
  GL.recordError(1280);
  return 0;
 }
 GL.stringCache[name_] = ret;
 return ret;
}

function _glGetUniformLocation(program, name) {
 name = UTF8ToString(name);
 var arrayIndex = 0;
 if (name[name.length - 1] == "]") {
  var leftBrace = name.lastIndexOf("[");
  arrayIndex = name[leftBrace + 1] != "]" ? parseInt(name.slice(leftBrace + 1)) : 0;
  name = name.slice(0, leftBrace);
 }
 var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name];
 if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) {
  return uniformInfo[1] + arrayIndex;
 } else {
  return -1;
 }
}

function _glLinkProgram(program) {
 GLctx.linkProgram(GL.programs[program]);
 GL.populateUniformTable(program);
}

function _glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}

function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
 function roundedToNextMultipleOf(x, y) {
  return x + y - 1 & -y;
 }
 var plainRowSize = width * sizePerPixel;
 var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
 return height * alignedRowSize;
}

var __colorChannelsInGlTextureFormat = {
 6402: 1,
 6406: 1,
 6407: 3,
 6408: 4,
 6409: 1,
 6410: 2,
 35904: 3,
 35906: 4
};

var __sizeOfGlTextureElementType = {
 5121: 1,
 5123: 2,
 5125: 4,
 5126: 4,
 32819: 2,
 32820: 2,
 33635: 2,
 34042: 4,
 36193: 2
};

function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
 var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
 if (!sizePerPixel) {
  GL.recordError(1280);
  return;
 }
 var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
 var end = pixels + bytes;
 switch (type) {
 case 5121:
  return HEAPU8.subarray(pixels, end);

 case 5126:
  return HEAPF32.subarray(pixels >> 2, end >> 2);

 case 5125:
 case 34042:
  return HEAPU32.subarray(pixels >> 2, end >> 2);

 case 5123:
 case 33635:
 case 32819:
 case 32820:
 case 36193:
  return HEAPU16.subarray(pixels >> 1, end >> 1);

 default:
  GL.recordError(1280);
 }
}

function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
 GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
}

function _glTexParameteri(x0, x1, x2) {
 GLctx["texParameteri"](x0, x1, x2);
}

function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
 var pixelData = null;
 if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
 GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
}

function _glUniform1f(location, v0) {
 GLctx.uniform1f(GL.uniforms[location], v0);
}

function _glUniform2f(location, v0, v1) {
 GLctx.uniform2f(GL.uniforms[location], v0, v1);
}

function _glUniform3f(location, v0, v1, v2) {
 GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
}

function _glUniformMatrix4fv(location, count, transpose, value) {
 if (16 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferViews[16 * count - 1];
  for (var i = 0; i < 16 * count; i += 16) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
   view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
   view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
   view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
   view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
   view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
   view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
   view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
   view[i + 9] = HEAPF32[value + (4 * i + 36) >> 2];
   view[i + 10] = HEAPF32[value + (4 * i + 40) >> 2];
   view[i + 11] = HEAPF32[value + (4 * i + 44) >> 2];
   view[i + 12] = HEAPF32[value + (4 * i + 48) >> 2];
   view[i + 13] = HEAPF32[value + (4 * i + 52) >> 2];
   view[i + 14] = HEAPF32[value + (4 * i + 56) >> 2];
   view[i + 15] = HEAPF32[value + (4 * i + 60) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
  if (GL.currentContext.cannotHandleOffsetsInUniformArrayViews) view = new Float32Array(view);
 }
 GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
}

function _glUseProgram(program) {
 GLctx.useProgram(GL.programs[program]);
}

function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
}

function _glViewport(x0, x1, x2, x3) {
 GLctx["viewport"](x0, x1, x2, x3);
}

function _interop_AddClipboardListeners() {
 window.addEventListener("copy", function(e) {
  if (window.getSelection && window.getSelection().toString()) return;
  _interop_callVoidFunc("Window_RequestClipboardText");
  if (!window.cc_copyText) return;
  if (e.clipboardData) {
   e.clipboardData.setData("text/plain", window.cc_copyText);
   e.preventDefault();
  }
  window.cc_copyText = null;
 });
 window.addEventListener("paste", function(e) {
  if (e.clipboardData) {
   var contents = e.clipboardData.getData("text/plain");
   _interop_callStringFunc("Window_GotClipboardText", contents);
  }
 });
}

function _interop_AdjustXY(x, y) {
 var canvasRect = Module["canvas"].getBoundingClientRect();
 HEAP32[x >> 2] = HEAP32[x >> 2] - canvasRect.left;
 HEAP32[y >> 2] = HEAP32[y >> 2] - canvasRect.top;
}

function _fetchTexturePackAsync(url, onload, onerror) {
 var xhr = new XMLHttpRequest();
 xhr.open("GET", url);
 xhr.responseType = "arraybuffer";
 xhr.onerror = onerror;
 xhr.onload = function() {
  if (xhr.status == 200) {
   onload(xhr.response);
  } else {
   onerror();
  }
 };
 xhr.send();
}

function _interop_AsyncDownloadTexturePack(rawPath) {
 var path = UTF8ToString(rawPath);
 var url = "/static/default.zip";
 Module.setStatus("Downloading textures.. (1/2)");
 _fetchTexturePackAsync(url, function(buffer) {
  CCFS.writeFile(path, new Uint8Array(buffer));
  _interop_callVoidFunc("main_phase1");
 }, function() {
  _interop_callVoidFunc("main_phase1");
 });
}

function _IDBFS_getDB(callback) {
 var db = window.IDBFS_db;
 if (db) return callback(null, db);
 IDBFS_DB_VERSION = 21;
 IDBFS_DB_STORE_NAME = "FILE_DATA";
 var idb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 if (!idb) return callback("IndexedDB unsupported");
 var req;
 try {
  req = idb.open("/classicube", IDBFS_DB_VERSION);
 } catch (e) {
  return callback(e);
 }
 if (!req) return callback("Unable to connect to IndexedDB");
 req.onupgradeneeded = function(e) {
  var db = e.target.result;
  var transaction = e.target.transaction;
  var fileStore;
  if (db.objectStoreNames.contains(IDBFS_DB_STORE_NAME)) {
   fileStore = transaction.objectStore(IDBFS_DB_STORE_NAME);
  } else {
   fileStore = db.createObjectStore(IDBFS_DB_STORE_NAME);
  }
  if (!fileStore.indexNames.contains("timestamp")) {
   fileStore.createIndex("timestamp", "timestamp", {
    unique: false
   });
  }
 };
 req.onsuccess = function() {
  db = req.result;
  window.IDBFS_db = db;
  db.onclose = function(ev) {
   console.log("IndexedDB connection closed unexpectedly!");
   window.IDBFS_db = null;
  };
  callback(null, db);
 };
 req.onerror = function(e) {
  callback(this.error);
  e.preventDefault();
 };
}

function _IDBFS_getRemoteSet(callback) {
 var entries = {};
 _IDBFS_getDB(function(err, db) {
  if (err) return callback(err);
  try {
   var transaction = db.transaction([ IDBFS_DB_STORE_NAME ], "readonly");
   transaction.onerror = function(e) {
    callback(this.error);
    e.preventDefault();
   };
   var store = transaction.objectStore(IDBFS_DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   };
  } catch (e) {
   return callback(e);
  }
 });
}

function _IDBFS_loadRemoteEntry(store, path, callback) {
 var req = store.get(path);
 req.onsuccess = function(event) {
  callback(null, event.target.result);
 };
 req.onerror = function(e) {
  callback(this.error);
  e.preventDefault();
 };
}

function _IDBFS_storeLocalEntry(path, entry, callback) {
 try {
  if (CCFS.isFile(entry.mode)) {
   CCFS.writeFile(path, entry.contents);
   CCFS.utime(path, entry.timestamp);
  }
 } catch (e) {
  return callback(e);
 }
 callback(null);
}

function _IDBFS_reconcile(src, callback) {
 var total = 0;
 var create = [];
 Object.keys(src.entries).forEach(function(key) {
  create.push(key);
  total++;
 });
 if (!total) return callback(null);
 var errored = false;
 var completed = 0;
 var transaction = src.db.transaction([ IDBFS_DB_STORE_NAME ], "readwrite");
 var store = transaction.objectStore(IDBFS_DB_STORE_NAME);
 function done(err) {
  if (err) {
   if (!done.errored) {
    done.errored = true;
    return callback(err);
   }
   return;
  }
  if (++completed >= total) {
   return callback(null);
  }
 }
 transaction.onerror = function(e) {
  done(this.error);
  e.preventDefault();
 };
 create.sort().forEach(function(path) {
  _IDBFS_loadRemoteEntry(store, path, function(err, entry) {
   if (err) return done(err);
   _IDBFS_storeLocalEntry(path, entry, done);
  });
 });
}

function _IDBFS_loadFS(callback) {
 _IDBFS_getRemoteSet(function(err, remote) {
  if (err) return callback(err);
  _IDBFS_reconcile(remote, callback);
 });
}

function _interop_AsyncLoadIndexedDB() {
 Module.setStatus("Preloading filesystem.. (2/2)");
 _IDBFS_loadFS(function(err) {
  if (err) window.cc_idbErr = err;
  Module.setStatus("");
  _interop_callVoidFunc("main_phase2");
 });
}

function _interop_AudioClose(ctxID) {
 var src = AUDIO.sources[ctxID - 1 | 0];
 if (src.source) src.source.stop();
 AUDIO.sources[ctxID - 1 | 0] = null;
}

function _interop_AudioCreate() {
 var src = {
  source: null,
  gain: AUDIO.context.createGain(),
  playing: false
 };
 AUDIO.sources.push(src);
 return AUDIO.sources.length | 0;
}

function _interop_AudioDescribe(errCode, buffer, bufferLen) {
 if (errCode > AUDIO.errors.length) return 0;
 var str = AUDIO.errors[errCode - 1];
 return stringToUTF8(str, buffer, bufferLen);
}

function _interop_AudioDownload(name) {
 var xhr = new XMLHttpRequest();
 xhr.open("GET", "/static/sounds/" + name + ".wav", true);
 xhr.responseType = "arraybuffer";
 xhr.onload = function() {
  var data = xhr.response;
  AUDIO.context.decodeAudioData(data, function(buffer) {
   AUDIO.buffers[name] = buffer;
  });
 };
 xhr.send();
}

function _interop_AudioPlay(ctxID, sndID, rate) {
 var src = AUDIO.sources[ctxID - 1 | 0];
 var name = UTF8ToString(sndID);
 if (!AUDIO.seen.hasOwnProperty(name)) {
  AUDIO.seen[name] = true;
  _interop_AudioDownload(name);
  return 0;
 }
 var buffer = AUDIO.buffers[name];
 if (!buffer) return 0;
 try {
  src.source = AUDIO.context.createBufferSource();
  src.source.buffer = buffer;
  src.source.playbackRate.value = rate / 100;
  src.source.connect(src.gain);
  src.gain.connect(AUDIO.context.destination);
  src.source.start();
  return 0;
 } catch (err) {
  return _interop_AudioLog(err);
 }
}

function _interop_AudioPoll(ctxID, inUse) {
 var src = AUDIO.sources[ctxID - 1 | 0];
 HEAP32[inUse >> 2] = src.playing;
 return 0;
}

function _interop_AudioVolume(ctxID, volume) {
 var src = AUDIO.sources[ctxID - 1 | 0];
 src.gain.gain.value = volume / 100;
}

function _interop_CanvasHeight() {
 return Module["canvas"].height;
}

function _interop_CanvasWidth() {
 return Module["canvas"].width;
}

function _interop_CloseKeyboard() {
 if (!window.cc_inputElem) return;
 window.cc_container.removeChild(window.cc_divElem);
 window.cc_container.removeChild(window.cc_inputElem);
 window.cc_divElem = null;
 window.cc_inputElem = null;
}

function _interop_DirectoryIter(raw) {
 var path = UTF8ToString(raw);
 try {
  var entries = CCFS.readdir(path);
  for (var i = 0; i < entries.length; i++) {
   var path = entries[i];
   if (path.indexOf(CCFS.currentPath) === 0) {
    path = path.substring(CCFS.currentPath.length + 1);
   }
   _interop_callStringFunc("Directory_IterCallback", path);
  }
  return 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_DirectorySetWorking(raw) {
 var path = UTF8ToString(raw);
 CCFS.chdir(path);
}

function _interop_DownloadAsync(urlStr, method, reqID) {
 var url = UTF8ToString(urlStr);
 var reqMethod = method == 1 ? "HEAD" : "GET";
 var onFinished = Module["_Http_OnFinishedAsync"];
 var onProgress = Module["_Http_OnUpdateProgress"];
 var xhr = new XMLHttpRequest();
 try {
  xhr.open(reqMethod, url);
 } catch (e) {
  console.log(e);
  return 1;
 }
 xhr.responseType = "arraybuffer";
 var getContentLength = function(e) {
  if (e.total) return e.total;
  try {
   var len = xhr.getResponseHeader("Content-Length");
   return parseInt(len, 10);
  } catch (ex) {
   return 0;
  }
 };
 xhr.onload = function(e) {
  var src = new Uint8Array(xhr.response);
  var len = src.byteLength;
  var data = _malloc(len);
  HEAPU8.set(src, data);
  onFinished(reqID, data, len || getContentLength(e), xhr.status);
 };
 xhr.onerror = function(e) {
  onFinished(reqID, 0, 0, xhr.status);
 };
 xhr.ontimeout = function(e) {
  onFinished(reqID, 0, 0, xhr.status);
 };
 xhr.onprogress = function(e) {
  onProgress(reqID, e.loaded, e.total);
 };
 try {
  xhr.send();
 } catch (e) {
  onFinished(reqID, 0, 0, 0);
 }
 return 0;
}

function _interop_SaveBlob(blob, name) {
 if (window.navigator.msSaveBlob) {
  window.navigator.msSaveBlob(blob, name);
  return;
 }
 var url = window.URL.createObjectURL(blob);
 var elem = document.createElement("a");
 elem.href = url;
 elem.download = name;
 elem.style.display = "none";
 document.body.appendChild(elem);
 elem.click();
 document.body.removeChild(elem);
 window.URL.revokeObjectURL(url);
}

function _interop_ShowSaveDialog(filename, filters, titles) {
 if (!window.showSaveFilePicker) return 0;
 var fileTypes = [];
 for (var i = 0; HEAP32[(filters >> 2) + i | 0]; i++) {
  var filter = HEAP32[(filters >> 2) + i | 0];
  var title = HEAP32[(titles >> 2) + i | 0];
  var filetype = {
   description: UTF8ToString(title),
   accept: {
    "applicaion/octet-stream": [ UTF8ToString(filter) ]
   }
  };
  fileTypes.push(filetype);
 }
 var path = null;
 var opts = {
  suggestedName: UTF8ToString(filename),
  types: fileTypes
 };
 window.showSaveFilePicker(opts).then(function(fileHandle) {
  path = "Downloads/" + fileHandle.name;
  return fileHandle.createWritable();
 }).then(function(writable) {
  _interop_callStringFunc("Window_OnFileUploaded", path);
  var data = CCFS.readFile(path);
  writable.write(data);
  return writable.close();
 }).catch(function(error) {
  _interop_callStringFunc("Platform_LogError", "&cError downloading file");
  _interop_callStringFunc("Platform_LogError", "   &c" + error);
 }).finally(function(result) {
  if (path) CCFS.unlink(path);
 });
 return 1;
}

function _interop_DownloadFile(filename, filters, titles) {
 try {
  if (_interop_ShowSaveDialog(filename, filters, titles)) return 0;
  var name = UTF8ToString(filename);
  var path = "Downloads/" + name;
  _interop_callStringFunc("Window_OnFileUploaded", path);
  var data = CCFS.readFile(path);
  var blob = new Blob([ data ], {
   type: "application/octet-stream"
  });
  _interop_SaveBlob(blob, UTF8ToString(filename));
  CCFS.unlink(path);
  return 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _interop_EnterFullscreen() {
 var canvas = Module["canvas"];
 canvas.style.width = "100%";
 canvas.style.height = "100%";
 try {
  navigator.keyboard.lock([ "Escape" ]);
 } catch (ex) {}
}

function _interop_FS_Init() {
 if (window.CCFS) return;
 window.MEMFS = {
  createNode: function(path) {
   var node = CCFS.createNode(path);
   node.usedBytes = 0;
   node.contents = null;
   node.timestamp = Date.now();
   return node;
  },
  getFileDataAsTypedArray: function(node) {
   if (!node.contents) return new Uint8Array();
   if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
   return new Uint8Array(node.contents);
  },
  expandFileStorage: function(node, newCapacity) {
   var prevCapacity = node.contents ? node.contents.length : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  },
  clearFileStorage: function(node) {
   node.contents = null;
   node.usedBytes = 0;
  },
  stream_read: function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  },
  stream_write: function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   var chunk = buffer.subarray(offset, offset + length);
   node.timestamp = Date.now();
   if (canOwn) {
    assert(position === 0, "canOwn must imply no weird position inside the file");
    node.contents = chunk;
    node.usedBytes = length;
   } else if (node.usedBytes === 0 && position === 0) {
    node.contents = new Uint8Array(chunk);
    node.usedBytes = length;
   } else if (position + length <= node.usedBytes) {
    node.contents.set(chunk, position);
   } else {
    MEMFS.expandFileStorage(node, position + length);
    node.contents.set(chunk, position);
    node.usedBytes = Math.max(node.usedBytes, position + length);
   }
   return length;
  }
 };
 window.CCFS = {
  streams: [],
  entries: {},
  currentPath: "/",
  ErrnoError: null,
  resolvePath: function(path) {
   if (path.charAt(0) !== "/") {
    path = CCFS.currentPath + "/" + path;
   }
   return path;
  },
  lookupPath: function(path) {
   path = CCFS.resolvePath(path);
   var node = CCFS.entries[path];
   if (!node) throw new CCFS.ErrnoError(2);
   return {
    path: path,
    node: node
   };
  },
  createNode: function(path) {
   var node = {
    path: path
   };
   CCFS.entries[path] = node;
   return node;
  },
  MODE_TYPE_FILE: 32768,
  isFile: function(mode) {
   return (mode & 61440) === CCFS.MODE_TYPE_FILE;
  },
  nextfd: function() {
   for (var fd = 0; fd <= 4096; fd++) {
    if (!CCFS.streams[fd]) return fd;
   }
   throw new CCFS.ErrnoError(24);
  },
  getStream: function(fd) {
   return CCFS.streams[fd];
  },
  createStream: function(stream) {
   var fd = CCFS.nextfd();
   stream.fd = fd;
   CCFS.streams[fd] = stream;
   return stream;
  },
  readdir: function(path) {
   path = CCFS.resolvePath(path) + "/";
   var entries = [];
   for (var entry in CCFS.entries) {
    if (entry.indexOf(path) !== 0) continue;
    entries.push(entry);
   }
   return entries;
  },
  unlink: function(path) {
   var lookup = CCFS.lookupPath(path);
   delete CCFS.entries[lookup.path];
  },
  utime: function(path, mtime) {
   var lookup = CCFS.lookupPath(path);
   var node = lookup.node;
   node.timestamp = mtime;
  },
  open: function(path, flags) {
   path = CCFS.resolvePath(path);
   var node = CCFS.entries[path];
   var created = false;
   if (flags & 64) {
    if (node) {
     if (flags & 128) {
      throw new CCFS.ErrnoError(17);
     }
    } else {
     node = MEMFS.createNode(path);
     created = true;
    }
   }
   if (!node) {
    throw new CCFS.ErrnoError(2);
   }
   if (flags & 512) {
    MEMFS.clearFileStorage(node);
    node.timestamp = Date.now();
   }
   flags &= ~(128 | 512);
   var stream = CCFS.createStream({
    node: node,
    path: path,
    flags: flags,
    position: 0
   });
   return stream;
  },
  close: function(stream) {
   if (CCFS.isClosed(stream)) {
    throw new CCFS.ErrnoError(9);
   }
   CCFS.streams[stream.fd] = null;
   stream.fd = null;
  },
  isClosed: function(stream) {
   return stream.fd === null;
  },
  llseek: function(stream, offset, whence) {
   if (CCFS.isClosed(stream)) {
    throw new CCFS.ErrnoError(9);
   }
   var position = offset;
   if (whence === 0) {} else if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    position += stream.node.usedBytes;
   }
   if (position < 0) {
    throw new CCFS.ErrnoError(22);
   }
   stream.position = position;
   return stream.position;
  },
  read: function(stream, buffer, offset, length) {
   if (length < 0) {
    throw new CCFS.ErrnoError(22);
   }
   if (CCFS.isClosed(stream)) {
    throw new CCFS.ErrnoError(9);
   }
   if ((stream.flags & 2097155) === 1) {
    throw new CCFS.ErrnoError(9);
   }
   var position = stream.position;
   var bytesRead = MEMFS.stream_read(stream, buffer, offset, length, position);
   stream.position += bytesRead;
   return bytesRead;
  },
  write: function(stream, buffer, offset, length, canOwn) {
   if (length < 0) {
    throw new CCFS.ErrnoError(22);
   }
   if (CCFS.isClosed(stream)) {
    throw new CCFS.ErrnoError(9);
   }
   if ((stream.flags & 2097155) === 0) {
    throw new CCFS.ErrnoError(9);
   }
   if (stream.flags & 1024) {
    CCFS.llseek(stream, 0, 2);
   }
   var position = stream.position;
   var bytesWritten = MEMFS.stream_write(stream, buffer, offset, length, position, canOwn);
   stream.position += bytesWritten;
   return bytesWritten;
  },
  readFile: function(path, opts) {
   opts = opts || {};
   opts.encoding = opts.encoding || "binary";
   var ret;
   var stream = CCFS.open(path, 0);
   var length = stream.node.usedBytes;
   var buf = new Uint8Array(length);
   CCFS.read(stream, buf, 0, length);
   if (opts.encoding === "utf8") {
    ret = UTF8ArrayToString(buf, 0);
   } else if (opts.encoding === "binary") {
    ret = buf;
   } else {
    throw new Error('Invalid encoding type "' + opts.encoding + '"');
   }
   CCFS.close(stream);
   return ret;
  },
  writeFile: function(path, data) {
   var stream = CCFS.open(path, 577);
   if (typeof data === "string") {
    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
    CCFS.write(stream, buf, 0, actualNumBytes, true);
   } else if (ArrayBuffer.isView(data)) {
    CCFS.write(stream, data, 0, data.byteLength, true);
   } else {
    throw new Error("Unsupported data type");
   }
   CCFS.close(stream);
  },
  chdir: function(path) {
   CCFS.currentPath = CCFS.resolvePath(path);
  },
  ensureErrnoError: function() {
   CCFS.ErrnoError = function ErrnoError(errno, node) {
    this.node = node;
    this.errno = errno;
   };
   CCFS.ErrnoError.prototype = new Error();
   CCFS.ErrnoError.prototype.constructor = CCFS.ErrnoError;
  }
 };
 CCFS.ensureErrnoError();
}

function _IDBFS_storeRemoteEntry(store, path, entry, callback) {
 var req = store.put(entry, path);
 req.onsuccess = function() {
  callback(null);
 };
 req.onerror = function(e) {
  callback(this.error);
  e.preventDefault();
 };
}

function _interop_SaveNode(path) {
 var callback = function(err) {
  if (!err) return;
  console.log(err);
  _interop_callStringFunc("Platform_LogError", "&cError saving " + path);
  _interop_callStringFunc("Platform_LogError", "   &c" + err);
 };
 var node, entry;
 try {
  var lookup = CCFS.lookupPath(path);
  node = lookup.node;
  node.contents = MEMFS.getFileDataAsTypedArray(node);
  entry = {
   timestamp: node.timestamp,
   mode: CCFS.MODE_TYPE_FILE,
   contents: node.contents
  };
 } catch (err) {
  return callback(err);
 }
 _IDBFS_getDB(function(err, db) {
  if (err) return callback(err);
  var transaction, store;
  try {
   transaction = db.transaction([ IDBFS_DB_STORE_NAME ], "readwrite");
   store = transaction.objectStore(IDBFS_DB_STORE_NAME);
  } catch (err) {
   return callback(err);
  }
  transaction.onerror = function(e) {
   callback(this.error);
   e.preventDefault();
  };
  _IDBFS_storeRemoteEntry(store, path, entry, callback);
 });
}

function _interop_FileClose(fd) {
 try {
  var stream = CCFS.getStream(fd);
  CCFS.close(stream);
  if ((stream.flags & 3) == 2) _interop_SaveNode(stream.path);
  return 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_FileCreate(raw, flags) {
 var path = UTF8ToString(raw);
 try {
  var stream = CCFS.open(path, flags);
  return stream.fd | 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_FileExists(raw) {
 var path = UTF8ToString(raw);
 path = CCFS.resolvePath(path);
 return path in CCFS.entries;
}

function _interop_FileLength(fd) {
 try {
  var stream = CCFS.getStream(fd);
  return stream.node.usedBytes | 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_FileRead(fd, dst, count) {
 try {
  var stream = CCFS.getStream(fd);
  return CCFS.read(stream, HEAP8, dst, count) | 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_FileSeek(fd, offset, whence) {
 try {
  var stream = CCFS.getStream(fd);
  return CCFS.llseek(stream, offset, whence) | 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_FileWrite(fd, src, count) {
 try {
  var stream = CCFS.getStream(fd);
  return CCFS.write(stream, HEAP8, src, count) | 0;
 } catch (e) {
  if (!(e instanceof CCFS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function _interop_ForceTouchPageLayout() {
 if (typeof forceTouchLayout === "function") forceTouchLayout();
}

function _interop_GetContainerID() {
 return document.getElementById("canvas_wrapper") ? 1 : 0;
}

function _interop_GetGpuRenderer(buffer, len) {
 var dbg = GLctx.getExtension("WEBGL_debug_renderer_info");
 var str = dbg ? GLctx.getParameter(dbg.UNMASKED_RENDERER_WEBGL) : "";
 stringToUTF8(str, buffer, len);
}

function _interop_GetLocalTime(time) {
 var date = new Date();
 HEAP32[(time | 0 + 0) >> 2] = date.getFullYear();
 HEAP32[(time | 0 + 4) >> 2] = date.getMonth() + 1 | 0;
 HEAP32[(time | 0 + 8) >> 2] = date.getDate();
 HEAP32[(time | 0 + 12) >> 2] = date.getHours();
 HEAP32[(time | 0 + 16) >> 2] = date.getMinutes();
 HEAP32[(time | 0 + 20) >> 2] = date.getSeconds();
}

function _interop_AudioLog(err) {
 console.log(err);
 window.AUDIO.errors.push("" + err);
 return window.AUDIO.errors.length | 0;
}

function _interop_InitAudio() {
 window.AUDIO = window.AUDIO || {
  context: null,
  sources: [],
  buffers: {},
  errors: [],
  seen: {}
 };
 if (window.AUDIO.context) return 0;
 try {
  if (window.AudioContext) {
   AUDIO.context = new window.AudioContext();
  } else {
   AUDIO.context = new window.webkitAudioContext();
  }
  return 0;
 } catch (err) {
  return _interop_AudioLog(err);
 }
}

function _interop_InitContainer() {
 var agent = navigator.userAgent;
 var canvas = Module["canvas"];
 window.cc_container = document.body;
 if (/Android/i.test(agent)) {
  var wrapper = document.createElement("div");
  wrapper.id = "canvas_wrapper";
  canvas.parentNode.insertBefore(wrapper, canvas);
  wrapper.appendChild(canvas);
  window.cc_container = wrapper;
 }
}

function _interop_InitFilesystem(buffer) {
 if (!window.cc_idbErr) return;
 var msg = "Error preloading IndexedDB:" + window.cc_idbErr + "\n\nPreviously saved settings/maps will be lost";
 _interop_callStringFunc("Platform_LogError", msg);
}

function _interop_callVoidFunc(func) {
 Module["_" + func]();
}

function _interop_callStringFunc(func, str) {
 var arg = 0;
 var stackTop = stackSave();
 if (str !== null && str !== undefined) {
  var len = str.length * 4 + 1;
  arg = stackAlloc(len);
  stringToUTF8(str, arg, len);
 }
 Module["_" + func](arg);
 stackRestore(stackTop);
}

function _interop_InitModule() {
 window.ERRNO_CODES = {
  ENOENT: 2,
  EBADF: 9,
  EAGAIN: 11,
  ENOMEM: 12,
  EEXIST: 17,
  EINVAL: 22
 };
}

function _interop_InitSockets() {
 window.SOCKETS = {
  EBADF: -8,
  EISCONN: -30,
  ENOTCONN: -53,
  EAGAIN: -6,
  EHOSTUNREACH: -23,
  EINPROGRESS: -26,
  EALREADY: -7,
  ECONNRESET: -15,
  EINVAL: -28,
  ECONNREFUSED: -14,
  sockets: []
 };
}

function _interop_IsAndroid() {
 return /Android/i.test(navigator.userAgent);
}

function _interop_IsHttpsOnly() {
 return location.protocol === "https:";
}

function _interop_IsIOS() {
 return /iPhone|iPad|iPod/i.test(navigator.userAgent) || navigator.platform === "MacIntel" && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;
}

function _interop_LoadIndexedDB() {}

function _interop_Log(msg, len) {
 Module.print(UTF8ArrayToString(HEAPU8, msg, len));
}

function _interop_OpenFileDialog(filter, action, folder) {
 var elem = window.cc_uploadElem;
 var root = UTF8ToString(folder);
 if (!elem) {
  elem = document.createElement("input");
  elem.setAttribute("type", "file");
  elem.setAttribute("style", "display: none");
  elem.accept = UTF8ToString(filter);
  elem.addEventListener("change", function(ev) {
   var files = ev.target.files;
   for (var i = 0; i < files.length; i++) {
    var reader = new FileReader();
    var name = files[i].name;
    reader.onload = function(e) {
     var data = new Uint8Array(e.target.result);
     var path = root + "/" + name;
     CCFS.writeFile(path, data);
     _interop_callStringFunc("Window_OnFileUploaded", path);
     if (action == 0) CCFS.unlink(path);
     if (action == 1) _interop_SaveNode(path);
    };
    reader.readAsArrayBuffer(files[i]);
   }
   window.cc_container.removeChild(window.cc_uploadElem);
   window.cc_uploadElem = null;
  }, false);
  window.cc_uploadElem = elem;
  window.cc_container.appendChild(elem);
 }
 elem.click();
}

function _interop_OpenKeyboard(text, flags, placeholder) {
 var elem = window.cc_inputElem;
 var shown = true;
 var type = flags & 255;
 if (!elem) {
  if (type == 1) {
   elem = document.createElement("input");
   elem.setAttribute("type", "text");
   elem.setAttribute("inputmode", "decimal");
  } else if (type == 3) {
   elem = document.createElement("input");
   elem.setAttribute("type", "text");
   elem.setAttribute("inputmode", "numeric");
   elem.setAttribute("pattern", "[0-9]*");
  } else {
   elem = document.createElement("textarea");
  }
  shown = false;
 }
 if (flags & 256) {
  elem.setAttribute("enterkeyhint", "send");
 }
 elem.setAttribute("style", "position:absolute; left:0; bottom:0; margin: 0px; width: 100%; background-color: #222222; border: none; color: white;");
 elem.setAttribute("placeholder", UTF8ToString(placeholder));
 elem.value = UTF8ToString(text);
 if (!shown) {
  elem.addEventListener("touchstart", function(ev) {
   ev.stopPropagation();
  }, false);
  elem.addEventListener("touchmove", function(ev) {
   ev.stopPropagation();
  }, false);
  elem.addEventListener("mousedown", function(ev) {
   ev.stopPropagation();
  }, false);
  elem.addEventListener("mousemove", function(ev) {
   ev.stopPropagation();
  }, false);
  elem.addEventListener("input", function(ev) {
   _interop_callStringFunc("Window_OnTextChanged", ev.target.value);
  }, false);
  window.cc_inputElem = elem;
  window.cc_divElem = document.createElement("div");
  window.cc_divElem.setAttribute("style", "position:absolute; left:0; top:0; width:100%; height:100%; background-color: black; opacity:0.4; resize:none; pointer-events:none;");
  window.cc_container.appendChild(window.cc_divElem);
  window.cc_container.appendChild(elem);
 }
 elem.focus();
 elem.click();
}

function _interop_OpenTab(url) {
 try {
  window.open(UTF8ToString(url));
 } catch (e) {
  console.log(e);
  return 1;
 }
 return 0;
}

function _interop_RequestCanvasResize() {
 if (typeof resizeGameCanvas === "function") resizeGameCanvas();
}

function _interop_ScreenHeight() {
 return screen.height;
}

function _interop_ScreenWidth() {
 return screen.width;
}

function _interop_SetFont(fontStr, size, flags) {
 if (!window.FONT_CANVAS) {
  window.FONT_CANVAS = document.createElement("canvas");
  window.FONT_CONTEXT = window.FONT_CANVAS.getContext("2d");
 }
 var prefix = "";
 if (flags & 1) prefix += "Bold ";
 size += 4;
 var font = UTF8ToString(fontStr);
 var ctx = window.FONT_CONTEXT;
 ctx.font = prefix + size + "px " + font;
 ctx.textAlign = "left";
 ctx.textBaseline = "top";
 return ctx;
}

function _interop_SetKeyboardText(text) {
 if (!window.cc_inputElem) return;
 var str = UTF8ToString(text);
 var cur = window.cc_inputElem.value;
 if (cur.length && cur[cur.length - 1] == "\n") {
  cur = cur.substring(0, cur.length - 1);
 }
 if (str != cur) window.cc_inputElem.value = str;
}

function _interop_SetPageTitle(title) {
 document.title = UTF8ToString(title);
}

function _interop_ShowDialog(title, msg) {
 alert(UTF8ToString(title) + "\n\n" + UTF8ToString(msg));
}

function _interop_SocketClose(sockFD) {
 var sock = SOCKETS.sockets[sockFD];
 if (!sock) return SOCKETS.EBADF;
 try {
  sock.socket.close();
 } catch (e) {}
 delete sock.socket;
 return 0;
}

function _interop_SocketConnect(sockFD, raw, port) {
 var addr = UTF8ToString(raw);
 var sock = SOCKETS.sockets[sockFD];
 if (!sock) return SOCKETS.EBADF;
 var ws = sock.socket;
 if (ws) {
  if (ws.readyState === ws.CONNECTING) return SOCKETS.EALREADY;
  return SOCKETS.EISCONN;
 }
 try {
  var parts = addr.split("/");
  var proto = _interop_IsHttpsOnly() ? "wss://" : "ws://";
  var url = proto + parts[0] + ":" + port + "/" + parts.slice(1).join("/");
  ws = new WebSocket(url, "ClassiCube");
  ws.binaryType = "arraybuffer";
 } catch (e) {
  return SOCKETS.EHOSTUNREACH;
 }
 sock.socket = ws;
 ws.onopen = function() {};
 ws.onclose = function() {};
 ws.onmessage = function(event) {
  var data = event.data;
  if (typeof data === "string") {
   var encoder = new TextEncoder();
   data = encoder.encode(data);
  } else {
   assert(data.byteLength !== undefined);
   if (data.byteLength == 0) {
    return;
   } else {
    data = new Uint8Array(data);
   }
  }
  sock.recv_queue.push(data);
 };
 ws.onerror = function(error) {
  sock.error = SOCKETS.ECONNREFUSED;
 };
 return SOCKETS.EINPROGRESS;
}

function _interop_SocketCreate() {
 var sock = {
  error: null,
  recv_queue: [],
  socket: null
 };
 SOCKETS.sockets.push(sock);
 return SOCKETS.sockets.length - 1 | 0;
}

function _interop_SocketRecv(sockFD, dst, length) {
 var sock = SOCKETS.sockets[sockFD];
 if (!sock) return SOCKETS.EBADF;
 var packet = sock.recv_queue.shift();
 if (!packet) {
  var ws = sock.socket;
  if (!ws || ws.readyState == ws.CLOSING || ws.readyState == ws.CLOSED) {
   return SOCKETS.ENOTCONN;
  } else {
   return SOCKETS.EAGAIN;
  }
 }
 var packetLength = packet.byteLength || packet.length;
 var packetOffset = packet.byteOffset || 0;
 var packetBuffer = packet.buffer || packet;
 var bytesRead = Math.min(length, packetLength);
 var msg = new Uint8Array(packetBuffer, packetOffset, bytesRead);
 if (bytesRead < packetLength) {
  var bytesRemaining = packetLength - bytesRead;
  packet = new Uint8Array(packetBuffer, packetOffset + bytesRead, bytesRemaining);
  sock.recv_queue.unshift(packet);
 }
 HEAPU8.set(msg, dst);
 return msg.byteLength;
}

function _interop_SocketSend(sockFD, src, length) {
 var sock = SOCKETS.sockets[sockFD];
 if (!sock) return SOCKETS.EBADF;
 var ws = sock.socket;
 if (!ws || ws.readyState === ws.CLOSING || ws.readyState === ws.CLOSED) {
  return SOCKETS.ENOTCONN;
 } else if (ws.readyState === ws.CONNECTING) {
  return SOCKETS.EAGAIN;
 }
 var data = new Uint8Array(length);
 for (var i = 0; i < length; i++) {
  data[i] = HEAP8[src + i];
 }
 try {
  ws.send(data);
  return length;
 } catch (e) {
  return SOCKETS.EINVAL;
 }
}

function _interop_SocketWritable(sockFD, writable) {
 HEAPU8[writable | 0] = 0;
 var sock = SOCKETS.sockets[sockFD];
 if (!sock) return SOCKETS.EBADF;
 var ws = sock.socket;
 if (!ws) return SOCKETS.ENOTCONN;
 if (ws.readyState === ws.OPEN) HEAPU8[writable | 0] = 1;
 return sock.error || 0;
}

function _interop_TakeScreenshot(path) {
 var name = UTF8ToString(path);
 var canvas = Module["canvas"];
 if (canvas.toBlob) {
  canvas.toBlob(function(blob) {
   _interop_SaveBlob(blob, name);
  });
 } else if (canvas.msToBlob) {
  _interop_SaveBlob(canvas.msToBlob(), name);
 }
}

function _interop_TextDraw(textStr, textLen, bmp, dstX, dstY, shadow, hexStr) {
 var text = UTF8ArrayToString(HEAPU8, textStr, textLen);
 var hex = UTF8ArrayToString(HEAPU8, hexStr, 7);
 var ctx = window.FONT_CONTEXT;
 var data = ctx.measureText(text);
 var text_width = Math.ceil(data.width) | 0;
 if (text_width > ctx.canvas.width) {
  var font = ctx.font;
  ctx.canvas.width = text_width;
  ctx.font = font;
  ctx.textAlign = "left";
  ctx.textBaseline = "top";
 }
 var text_offset = 0;
 ctx.fillStyle = hex;
 if (shadow) {
  text_offset = 1.3;
 }
 ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
 ctx.fillText(text, text_offset, text_offset);
 bmp = bmp | 0;
 dstX = dstX | 0;
 dstY = dstY | 0;
 var dst_pixels = HEAP32[(bmp + 0 | 0) >> 2] + (dstX << 2);
 var dst_width = HEAP32[(bmp + 4 | 0) >> 2];
 var dst_height = HEAP32[(bmp + 8 | 0) >> 2];
 var src = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
 var src_pixels = src.data;
 var src_width = src.width | 0;
 var src_height = src.height | 0;
 var img_width = Math.min(src_width, dst_width);
 var img_height = Math.min(src_height, dst_height);
 for (var y = 0; y < img_height; y++) {
  var yy = y + dstY;
  if (yy < 0 || yy >= dst_height) continue;
  var src_row = y * (src_width << 2) | 0;
  var dst_row = dst_pixels + yy * (dst_width << 2) | 0;
  for (var x = 0; x < img_width; x++) {
   var xx = x + dstX;
   if (xx < 0 || xx >= dst_width) continue;
   var I = src_pixels[src_row + (x << 2) + 3], invI = 255 - I | 0;
   HEAPU8[dst_row + (x << 2) + 0] = (src_pixels[src_row + (x << 2) + 0] * I >> 8) + (HEAPU8[dst_row + (x << 2) + 0] * invI >> 8);
   HEAPU8[dst_row + (x << 2) + 1] = (src_pixels[src_row + (x << 2) + 1] * I >> 8) + (HEAPU8[dst_row + (x << 2) + 1] * invI >> 8);
   HEAPU8[dst_row + (x << 2) + 2] = (src_pixels[src_row + (x << 2) + 2] * I >> 8) + (HEAPU8[dst_row + (x << 2) + 2] * invI >> 8);
   HEAPU8[dst_row + (x << 2) + 3] = I + (HEAPU8[dst_row + (x << 2) + 3] * invI >> 8);
  }
 }
 return data.width;
}

function _interop_TextWidth(textStr, textLen) {
 var text = UTF8ArrayToString(HEAPU8, textStr, textLen);
 var ctx = window.FONT_CONTEXT;
 var data = ctx.measureText(text);
 return data.width;
}

function _interop_TryGetClipboardText() {
 if (window.clipboardData) {
  var contents = window.clipboardData.getData("Text");
  _interop_callStringFunc("Window_StoreClipboardText", contents);
 }
}

function _interop_TrySetClipboardText(text) {
 if (window.clipboardData) {
  if (window.getSelection && window.getSelection().toString()) return;
  window.clipboardData.setData("Text", UTF8ToString(text));
 } else {
  window.cc_copyText = UTF8ToString(text);
 }
}

function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}

Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
 err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");
 Module["requestFullScreen"] = Module["requestFullscreen"];
 Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};

Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {
 Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
};

Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};

Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};

Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};

Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};

Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};

Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};

if (typeof dateNow !== "undefined") {
 _emscripten_get_now = dateNow;
} else if (typeof performance === "object" && performance && typeof performance["now"] === "function") {
 _emscripten_get_now = function() {
  return performance["now"]();
 };
} else {
 _emscripten_get_now = Date.now;
}

var GLctx;

GL.init();

var ASSERTIONS = false;

function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}

var decodeBase64 = typeof atob === "function" ? atob : function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
};

function intArrayFromBase64(s) {
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}

function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

var asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 Infinity: Infinity
};

var asmLibraryArg = {
 "_IDBFS_getDB": _IDBFS_getDB,
 "_IDBFS_getRemoteSet": _IDBFS_getRemoteSet,
 "_IDBFS_loadFS": _IDBFS_loadFS,
 "_IDBFS_loadRemoteEntry": _IDBFS_loadRemoteEntry,
 "_IDBFS_reconcile": _IDBFS_reconcile,
 "_IDBFS_storeLocalEntry": _IDBFS_storeLocalEntry,
 "_IDBFS_storeRemoteEntry": _IDBFS_storeRemoteEntry,
 "_JSEvents_requestFullscreen": _JSEvents_requestFullscreen,
 "_JSEvents_resizeCanvasForFullscreen": _JSEvents_resizeCanvasForFullscreen,
 "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize,
 "__emscripten_do_request_fullscreen": __emscripten_do_request_fullscreen,
 "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData,
 "__fillGamepadEventData": __fillGamepadEventData,
 "__fillMouseEventData": __fillMouseEventData,
 "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData,
 "__fillVisibilityChangeEventData": __fillVisibilityChangeEventData,
 "__findCanvasEventTarget": __findCanvasEventTarget,
 "__findEventTarget": __findEventTarget,
 "__get_canvas_element_size": __get_canvas_element_size,
 "__glGenObject": __glGenObject,
 "__registerBeforeUnloadEventCallback": __registerBeforeUnloadEventCallback,
 "__registerFocusEventCallback": __registerFocusEventCallback,
 "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback,
 "__registerKeyEventCallback": __registerKeyEventCallback,
 "__registerMouseEventCallback": __registerMouseEventCallback,
 "__registerRestoreOldStyle": __registerRestoreOldStyle,
 "__registerTouchEventCallback": __registerTouchEventCallback,
 "__registerUiEventCallback": __registerUiEventCallback,
 "__registerVisibilityChangeEventCallback": __registerVisibilityChangeEventCallback,
 "__registerWebGlEventCallback": __registerWebGlEventCallback,
 "__registerWheelEventCallback": __registerWheelEventCallback,
 "__requestPointerLock": __requestPointerLock,
 "__setLetterbox": __setLetterbox,
 "__set_canvas_element_size": __set_canvas_element_size,
 "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop,
 "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen,
 "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock,
 "_emscripten_get_canvas_element_size": _emscripten_get_canvas_element_size,
 "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
 "_emscripten_get_element_css_size": _emscripten_get_element_css_size,
 "_emscripten_get_fullscreen_status": _emscripten_get_fullscreen_status,
 "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
 "_emscripten_get_heap_size": _emscripten_get_heap_size,
 "_emscripten_get_now": _emscripten_get_now,
 "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
 "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status,
 "_emscripten_is_webgl_context_lost": _emscripten_is_webgl_context_lost,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy,
 "_emscripten_request_pointerlock": _emscripten_request_pointerlock,
 "_emscripten_resize_heap": _emscripten_resize_heap,
 "_emscripten_resume_main_loop": _emscripten_resume_main_loop,
 "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data,
 "_emscripten_set_beforeunload_callback_on_thread": _emscripten_set_beforeunload_callback_on_thread,
 "_emscripten_set_blur_callback_on_thread": _emscripten_set_blur_callback_on_thread,
 "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size,
 "_emscripten_set_element_css_size": _emscripten_set_element_css_size,
 "_emscripten_set_focus_callback_on_thread": _emscripten_set_focus_callback_on_thread,
 "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread,
 "_emscripten_set_keydown_callback_on_thread": _emscripten_set_keydown_callback_on_thread,
 "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread,
 "_emscripten_set_keyup_callback_on_thread": _emscripten_set_keyup_callback_on_thread,
 "_emscripten_set_main_loop": _emscripten_set_main_loop,
 "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
 "_emscripten_set_mousedown_callback_on_thread": _emscripten_set_mousedown_callback_on_thread,
 "_emscripten_set_mousemove_callback_on_thread": _emscripten_set_mousemove_callback_on_thread,
 "_emscripten_set_mouseup_callback_on_thread": _emscripten_set_mouseup_callback_on_thread,
 "_emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread,
 "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread,
 "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread,
 "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread,
 "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread,
 "_emscripten_set_visibilitychange_callback_on_thread": _emscripten_set_visibilitychange_callback_on_thread,
 "_emscripten_set_webglcontextlost_callback_on_thread": _emscripten_set_webglcontextlost_callback_on_thread,
 "_emscripten_set_wheel_callback_on_thread": _emscripten_set_wheel_callback_on_thread,
 "_emscripten_webgl_create_context": _emscripten_webgl_create_context,
 "_emscripten_webgl_destroy_context": _emscripten_webgl_destroy_context,
 "_emscripten_webgl_destroy_context_calling_thread": _emscripten_webgl_destroy_context_calling_thread,
 "_emscripten_webgl_do_create_context": _emscripten_webgl_do_create_context,
 "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
 "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
 "_exit": _exit,
 "_fetchTexturePackAsync": _fetchTexturePackAsync,
 "_gettimeofday": _gettimeofday,
 "_glAttachShader": _glAttachShader,
 "_glBindAttribLocation": _glBindAttribLocation,
 "_glBindBuffer": _glBindBuffer,
 "_glBindTexture": _glBindTexture,
 "_glBlendFunc": _glBlendFunc,
 "_glBufferData": _glBufferData,
 "_glBufferSubData": _glBufferSubData,
 "_glClear": _glClear,
 "_glClearColor": _glClearColor,
 "_glColorMask": _glColorMask,
 "_glCompileShader": _glCompileShader,
 "_glCreateProgram": _glCreateProgram,
 "_glCreateShader": _glCreateShader,
 "_glDeleteBuffers": _glDeleteBuffers,
 "_glDeleteProgram": _glDeleteProgram,
 "_glDeleteShader": _glDeleteShader,
 "_glDeleteTextures": _glDeleteTextures,
 "_glDepthFunc": _glDepthFunc,
 "_glDepthMask": _glDepthMask,
 "_glDetachShader": _glDetachShader,
 "_glDisable": _glDisable,
 "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
 "_glDrawArrays": _glDrawArrays,
 "_glDrawElements": _glDrawElements,
 "_glEnable": _glEnable,
 "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
 "_glGenBuffers": _glGenBuffers,
 "_glGenTextures": _glGenTextures,
 "_glGetIntegerv": _glGetIntegerv,
 "_glGetProgramInfoLog": _glGetProgramInfoLog,
 "_glGetProgramiv": _glGetProgramiv,
 "_glGetShaderInfoLog": _glGetShaderInfoLog,
 "_glGetShaderiv": _glGetShaderiv,
 "_glGetString": _glGetString,
 "_glGetUniformLocation": _glGetUniformLocation,
 "_glLinkProgram": _glLinkProgram,
 "_glShaderSource": _glShaderSource,
 "_glTexImage2D": _glTexImage2D,
 "_glTexParameteri": _glTexParameteri,
 "_glTexSubImage2D": _glTexSubImage2D,
 "_glUniform1f": _glUniform1f,
 "_glUniform2f": _glUniform2f,
 "_glUniform3f": _glUniform3f,
 "_glUniformMatrix4fv": _glUniformMatrix4fv,
 "_glUseProgram": _glUseProgram,
 "_glVertexAttribPointer": _glVertexAttribPointer,
 "_glViewport": _glViewport,
 "_interop_AddClipboardListeners": _interop_AddClipboardListeners,
 "_interop_AdjustXY": _interop_AdjustXY,
 "_interop_AsyncDownloadTexturePack": _interop_AsyncDownloadTexturePack,
 "_interop_AsyncLoadIndexedDB": _interop_AsyncLoadIndexedDB,
 "_interop_AudioClose": _interop_AudioClose,
 "_interop_AudioCreate": _interop_AudioCreate,
 "_interop_AudioDescribe": _interop_AudioDescribe,
 "_interop_AudioDownload": _interop_AudioDownload,
 "_interop_AudioLog": _interop_AudioLog,
 "_interop_AudioPlay": _interop_AudioPlay,
 "_interop_AudioPoll": _interop_AudioPoll,
 "_interop_AudioVolume": _interop_AudioVolume,
 "_interop_CanvasHeight": _interop_CanvasHeight,
 "_interop_CanvasWidth": _interop_CanvasWidth,
 "_interop_CloseKeyboard": _interop_CloseKeyboard,
 "_interop_DirectoryIter": _interop_DirectoryIter,
 "_interop_DirectorySetWorking": _interop_DirectorySetWorking,
 "_interop_DownloadAsync": _interop_DownloadAsync,
 "_interop_DownloadFile": _interop_DownloadFile,
 "_interop_EnterFullscreen": _interop_EnterFullscreen,
 "_interop_FS_Init": _interop_FS_Init,
 "_interop_FileClose": _interop_FileClose,
 "_interop_FileCreate": _interop_FileCreate,
 "_interop_FileExists": _interop_FileExists,
 "_interop_FileLength": _interop_FileLength,
 "_interop_FileRead": _interop_FileRead,
 "_interop_FileSeek": _interop_FileSeek,
 "_interop_FileWrite": _interop_FileWrite,
 "_interop_ForceTouchPageLayout": _interop_ForceTouchPageLayout,
 "_interop_GetContainerID": _interop_GetContainerID,
 "_interop_GetGpuRenderer": _interop_GetGpuRenderer,
 "_interop_GetLocalTime": _interop_GetLocalTime,
 "_interop_InitAudio": _interop_InitAudio,
 "_interop_InitContainer": _interop_InitContainer,
 "_interop_InitFilesystem": _interop_InitFilesystem,
 "_interop_InitModule": _interop_InitModule,
 "_interop_InitSockets": _interop_InitSockets,
 "_interop_IsAndroid": _interop_IsAndroid,
 "_interop_IsHttpsOnly": _interop_IsHttpsOnly,
 "_interop_IsIOS": _interop_IsIOS,
 "_interop_LoadIndexedDB": _interop_LoadIndexedDB,
 "_interop_Log": _interop_Log,
 "_interop_OpenFileDialog": _interop_OpenFileDialog,
 "_interop_OpenKeyboard": _interop_OpenKeyboard,
 "_interop_OpenTab": _interop_OpenTab,
 "_interop_RequestCanvasResize": _interop_RequestCanvasResize,
 "_interop_SaveBlob": _interop_SaveBlob,
 "_interop_SaveNode": _interop_SaveNode,
 "_interop_ScreenHeight": _interop_ScreenHeight,
 "_interop_ScreenWidth": _interop_ScreenWidth,
 "_interop_SetFont": _interop_SetFont,
 "_interop_SetKeyboardText": _interop_SetKeyboardText,
 "_interop_SetPageTitle": _interop_SetPageTitle,
 "_interop_ShowDialog": _interop_ShowDialog,
 "_interop_ShowSaveDialog": _interop_ShowSaveDialog,
 "_interop_SocketClose": _interop_SocketClose,
 "_interop_SocketConnect": _interop_SocketConnect,
 "_interop_SocketCreate": _interop_SocketCreate,
 "_interop_SocketRecv": _interop_SocketRecv,
 "_interop_SocketSend": _interop_SocketSend,
 "_interop_SocketWritable": _interop_SocketWritable,
 "_interop_TakeScreenshot": _interop_TakeScreenshot,
 "_interop_TextDraw": _interop_TextDraw,
 "_interop_TextWidth": _interop_TextWidth,
 "_interop_TryGetClipboardText": _interop_TryGetClipboardText,
 "_interop_TrySetClipboardText": _interop_TrySetClipboardText,
 "_interop_callStringFunc": _interop_callStringFunc,
 "_interop_callVoidFunc": _interop_callVoidFunc,
 "abort": abort,
 "demangle": demangle,
 "demangleAll": demangleAll,
 "emscriptenWebGLGet": emscriptenWebGLGet,
 "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
 "emscripten_realloc_buffer": emscripten_realloc_buffer,
 "getTempRet0": getTempRet0,
 "jsStackTrace": jsStackTrace,
 "setTempRet0": setTempRet0,
 "stackTrace": stackTrace,
 "stringToNewUTF8": stringToNewUTF8,
 "tempDoublePtr": tempDoublePtr
};

// EMSCRIPTEN_START_ASM


var asm = (/** @suppress {uselessCode} */ function(global,env,buffer) {

'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  _IDBFS_getDB=env._IDBFS_getDB,
  _IDBFS_getRemoteSet=env._IDBFS_getRemoteSet,
  _IDBFS_loadFS=env._IDBFS_loadFS,
  _IDBFS_loadRemoteEntry=env._IDBFS_loadRemoteEntry,
  _IDBFS_reconcile=env._IDBFS_reconcile,
  _IDBFS_storeLocalEntry=env._IDBFS_storeLocalEntry,
  _IDBFS_storeRemoteEntry=env._IDBFS_storeRemoteEntry,
  _JSEvents_requestFullscreen=env._JSEvents_requestFullscreen,
  _JSEvents_resizeCanvasForFullscreen=env._JSEvents_resizeCanvasForFullscreen,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __emscripten_do_request_fullscreen=env.__emscripten_do_request_fullscreen,
  __fillFullscreenChangeEventData=env.__fillFullscreenChangeEventData,
  __fillGamepadEventData=env.__fillGamepadEventData,
  __fillMouseEventData=env.__fillMouseEventData,
  __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData,
  __fillVisibilityChangeEventData=env.__fillVisibilityChangeEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __get_canvas_element_size=env.__get_canvas_element_size,
  __glGenObject=env.__glGenObject,
  __registerBeforeUnloadEventCallback=env.__registerBeforeUnloadEventCallback,
  __registerFocusEventCallback=env.__registerFocusEventCallback,
  __registerFullscreenChangeEventCallback=env.__registerFullscreenChangeEventCallback,
  __registerKeyEventCallback=env.__registerKeyEventCallback,
  __registerMouseEventCallback=env.__registerMouseEventCallback,
  __registerRestoreOldStyle=env.__registerRestoreOldStyle,
  __registerTouchEventCallback=env.__registerTouchEventCallback,
  __registerUiEventCallback=env.__registerUiEventCallback,
  __registerVisibilityChangeEventCallback=env.__registerVisibilityChangeEventCallback,
  __registerWebGlEventCallback=env.__registerWebGlEventCallback,
  __registerWheelEventCallback=env.__registerWheelEventCallback,
  __requestPointerLock=env.__requestPointerLock,
  __setLetterbox=env.__setLetterbox,
  __set_canvas_element_size=env.__set_canvas_element_size,
  _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop,
  _emscripten_exit_fullscreen=env._emscripten_exit_fullscreen,
  _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock,
  _emscripten_get_canvas_element_size=env._emscripten_get_canvas_element_size,
  _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio,
  _emscripten_get_element_css_size=env._emscripten_get_element_css_size,
  _emscripten_get_fullscreen_status=env._emscripten_get_fullscreen_status,
  _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads,
  _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status,
  _emscripten_is_webgl_context_lost=env._emscripten_is_webgl_context_lost,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_request_fullscreen_strategy=env._emscripten_request_fullscreen_strategy,
  _emscripten_request_pointerlock=env._emscripten_request_pointerlock,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_resume_main_loop=env._emscripten_resume_main_loop,
  _emscripten_sample_gamepad_data=env._emscripten_sample_gamepad_data,
  _emscripten_set_beforeunload_callback_on_thread=env._emscripten_set_beforeunload_callback_on_thread,
  _emscripten_set_blur_callback_on_thread=env._emscripten_set_blur_callback_on_thread,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_element_css_size=env._emscripten_set_element_css_size,
  _emscripten_set_focus_callback_on_thread=env._emscripten_set_focus_callback_on_thread,
  _emscripten_set_fullscreenchange_callback_on_thread=env._emscripten_set_fullscreenchange_callback_on_thread,
  _emscripten_set_keydown_callback_on_thread=env._emscripten_set_keydown_callback_on_thread,
  _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread,
  _emscripten_set_keyup_callback_on_thread=env._emscripten_set_keyup_callback_on_thread,
  _emscripten_set_main_loop=env._emscripten_set_main_loop,
  _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing,
  _emscripten_set_mousedown_callback_on_thread=env._emscripten_set_mousedown_callback_on_thread,
  _emscripten_set_mousemove_callback_on_thread=env._emscripten_set_mousemove_callback_on_thread,
  _emscripten_set_mouseup_callback_on_thread=env._emscripten_set_mouseup_callback_on_thread,
  _emscripten_set_resize_callback_on_thread=env._emscripten_set_resize_callback_on_thread,
  _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread,
  _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread,
  _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread,
  _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread,
  _emscripten_set_visibilitychange_callback_on_thread=env._emscripten_set_visibilitychange_callback_on_thread,
  _emscripten_set_webglcontextlost_callback_on_thread=env._emscripten_set_webglcontextlost_callback_on_thread,
  _emscripten_set_wheel_callback_on_thread=env._emscripten_set_wheel_callback_on_thread,
  _emscripten_webgl_create_context=env._emscripten_webgl_create_context,
  _emscripten_webgl_destroy_context=env._emscripten_webgl_destroy_context,
  _emscripten_webgl_destroy_context_calling_thread=env._emscripten_webgl_destroy_context_calling_thread,
  _emscripten_webgl_do_create_context=env._emscripten_webgl_do_create_context,
  _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes,
  _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current,
  _exit=env._exit,
  _fetchTexturePackAsync=env._fetchTexturePackAsync,
  _gettimeofday=env._gettimeofday,
  _glAttachShader=env._glAttachShader,
  _glBindAttribLocation=env._glBindAttribLocation,
  _glBindBuffer=env._glBindBuffer,
  _glBindTexture=env._glBindTexture,
  _glBlendFunc=env._glBlendFunc,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glColorMask=env._glColorMask,
  _glCompileShader=env._glCompileShader,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glDeleteBuffers=env._glDeleteBuffers,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDepthFunc=env._glDepthFunc,
  _glDepthMask=env._glDepthMask,
  _glDetachShader=env._glDetachShader,
  _glDisable=env._glDisable,
  _glDisableVertexAttribArray=env._glDisableVertexAttribArray,
  _glDrawArrays=env._glDrawArrays,
  _glDrawElements=env._glDrawElements,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glGenBuffers=env._glGenBuffers,
  _glGenTextures=env._glGenTextures,
  _glGetIntegerv=env._glGetIntegerv,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glShaderSource=env._glShaderSource,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glTexSubImage2D=env._glTexSubImage2D,
  _glUniform1f=env._glUniform1f,
  _glUniform2f=env._glUniform2f,
  _glUniform3f=env._glUniform3f,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _interop_AddClipboardListeners=env._interop_AddClipboardListeners,
  _interop_AdjustXY=env._interop_AdjustXY,
  _interop_AsyncDownloadTexturePack=env._interop_AsyncDownloadTexturePack,
  _interop_AsyncLoadIndexedDB=env._interop_AsyncLoadIndexedDB,
  _interop_AudioClose=env._interop_AudioClose,
  _interop_AudioCreate=env._interop_AudioCreate,
  _interop_AudioDescribe=env._interop_AudioDescribe,
  _interop_AudioDownload=env._interop_AudioDownload,
  _interop_AudioLog=env._interop_AudioLog,
  _interop_AudioPlay=env._interop_AudioPlay,
  _interop_AudioPoll=env._interop_AudioPoll,
  _interop_AudioVolume=env._interop_AudioVolume,
  _interop_CanvasHeight=env._interop_CanvasHeight,
  _interop_CanvasWidth=env._interop_CanvasWidth,
  _interop_CloseKeyboard=env._interop_CloseKeyboard,
  _interop_DirectoryIter=env._interop_DirectoryIter,
  _interop_DirectorySetWorking=env._interop_DirectorySetWorking,
  _interop_DownloadAsync=env._interop_DownloadAsync,
  _interop_DownloadFile=env._interop_DownloadFile,
  _interop_EnterFullscreen=env._interop_EnterFullscreen,
  _interop_FS_Init=env._interop_FS_Init,
  _interop_FileClose=env._interop_FileClose,
  _interop_FileCreate=env._interop_FileCreate,
  _interop_FileExists=env._interop_FileExists,
  _interop_FileLength=env._interop_FileLength,
  _interop_FileRead=env._interop_FileRead,
  _interop_FileSeek=env._interop_FileSeek,
  _interop_FileWrite=env._interop_FileWrite,
  _interop_ForceTouchPageLayout=env._interop_ForceTouchPageLayout,
  _interop_GetContainerID=env._interop_GetContainerID,
  _interop_GetGpuRenderer=env._interop_GetGpuRenderer,
  _interop_GetLocalTime=env._interop_GetLocalTime,
  _interop_InitAudio=env._interop_InitAudio,
  _interop_InitContainer=env._interop_InitContainer,
  _interop_InitFilesystem=env._interop_InitFilesystem,
  _interop_InitModule=env._interop_InitModule,
  _interop_InitSockets=env._interop_InitSockets,
  _interop_IsAndroid=env._interop_IsAndroid,
  _interop_IsHttpsOnly=env._interop_IsHttpsOnly,
  _interop_IsIOS=env._interop_IsIOS,
  _interop_LoadIndexedDB=env._interop_LoadIndexedDB,
  _interop_Log=env._interop_Log,
  _interop_OpenFileDialog=env._interop_OpenFileDialog,
  _interop_OpenKeyboard=env._interop_OpenKeyboard,
  _interop_OpenTab=env._interop_OpenTab,
  _interop_RequestCanvasResize=env._interop_RequestCanvasResize,
  _interop_SaveBlob=env._interop_SaveBlob,
  _interop_SaveNode=env._interop_SaveNode,
  _interop_ScreenHeight=env._interop_ScreenHeight,
  _interop_ScreenWidth=env._interop_ScreenWidth,
  _interop_SetFont=env._interop_SetFont,
  _interop_SetKeyboardText=env._interop_SetKeyboardText,
  _interop_SetPageTitle=env._interop_SetPageTitle,
  _interop_ShowDialog=env._interop_ShowDialog,
  _interop_ShowSaveDialog=env._interop_ShowSaveDialog,
  _interop_SocketClose=env._interop_SocketClose,
  _interop_SocketConnect=env._interop_SocketConnect,
  _interop_SocketCreate=env._interop_SocketCreate,
  _interop_SocketRecv=env._interop_SocketRecv,
  _interop_SocketSend=env._interop_SocketSend,
  _interop_SocketWritable=env._interop_SocketWritable,
  _interop_TakeScreenshot=env._interop_TakeScreenshot,
  _interop_TextDraw=env._interop_TextDraw,
  _interop_TextWidth=env._interop_TextWidth,
  _interop_TryGetClipboardText=env._interop_TryGetClipboardText,
  _interop_TrySetClipboardText=env._interop_TrySetClipboardText,
  _interop_callStringFunc=env._interop_callStringFunc,
  _interop_callVoidFunc=env._interop_callVoidFunc,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  emscriptenWebGLGet=env.emscriptenWebGLGet,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  emscripten_realloc_buffer=env.emscripten_realloc_buffer,
  jsStackTrace=env.jsStackTrace,
  stackTrace=env.stackTrace,
  stringToNewUTF8=env.stringToNewUTF8,
  STACKTOP = 1869024,
  STACK_MAX = 2131168,
  tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  HEAP8 = new Int8Array(newBuffer);
  HEAPU8 = new Uint8Array(newBuffer);
  HEAP16 = new Int16Array(newBuffer);
  HEAPU16 = new Uint16Array(newBuffer);
  HEAP32 = new Int32Array(newBuffer);
  HEAPF32 = new Float32Array(newBuffer);
  HEAPF64 = new Float64Array(newBuffer);

  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 do if (i1 >>> 0 < 245) {
  i10 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i1 = 3 ? i10 >>> 3 : i10;
  i12 = HEAP32[466995] | 0;
  i2 = i1 ? i12 >>> i1 : i12;
  if (i2 & 3 | 0) {
   i4 = (i2 & 1 ^ 1) + i1 | 0;
   i5 = 1868020 + (i4 << 1 << 2) | 0;
   i1 = i5 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i6 = i2 + 8 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   if ((i3 | 0) == (i5 | 0)) HEAP32[466995] = i12 & ~(1 << i4); else {
    HEAP32[i3 + 12 >> 2] = i5;
    HEAP32[i1 >> 2] = i3;
   }
   i14 = i4 << 3;
   HEAP32[i2 + 4 >> 2] = i14 | 3;
   i14 = i2 + i14 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
   i14 = i6;
   STACKTOP = i15;
   return i14 | 0;
  }
  i11 = HEAP32[466997] | 0;
  if (i10 >>> 0 > i11 >>> 0) {
   if (i2 | 0) {
    i4 = 2 << i1;
    i4 = i2 << i1 & (i4 | 0 - i4);
    i4 = (i4 & 0 - i4) + -1 | 0;
    i8 = (12 ? i4 >>> 12 : i4) & 16;
    i4 = i8 ? i4 >>> i8 : i4;
    i2 = (5 ? i4 >>> 5 : i4) & 8;
    i4 = i2 ? i4 >>> i2 : i4;
    i6 = (2 ? i4 >>> 2 : i4) & 4;
    i4 = i6 ? i4 >>> i6 : i4;
    i1 = (1 ? i4 >>> 1 : i4) & 2;
    i4 = i1 ? i4 >>> i1 : i4;
    i3 = (1 ? i4 >>> 1 : i4) & 1;
    i4 = (i2 | i8 | i6 | i1 | i3) + (i3 ? i4 >>> i3 : i4) | 0;
    i3 = 1868020 + (i4 << 1 << 2) | 0;
    i1 = i3 + 8 | 0;
    i6 = HEAP32[i1 >> 2] | 0;
    i8 = i6 + 8 | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    if ((i2 | 0) == (i3 | 0)) {
     i2 = i12 & ~(1 << i4);
     HEAP32[466995] = i2;
    } else {
     HEAP32[i2 + 12 >> 2] = i3;
     HEAP32[i1 >> 2] = i2;
     i2 = i12;
    }
    i14 = i4 << 3;
    i7 = i14 - i10 | 0;
    HEAP32[i6 + 4 >> 2] = i10 | 3;
    i5 = i6 + i10 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | 1;
    HEAP32[i6 + i14 >> 2] = i7;
    if (i11 | 0) {
     i4 = HEAP32[467e3] | 0;
     i1 = 3 ? i11 >>> 3 : i11;
     i3 = 1868020 + (i1 << 1 << 2) | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[466995] = i2 | i1;
      i1 = i3 + 8 | 0;
      i2 = i3;
     } else {
      i2 = i3 + 8 | 0;
      i1 = i2;
      i2 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i1 >> 2] = i4;
     HEAP32[i2 + 12 >> 2] = i4;
     HEAP32[i4 + 8 >> 2] = i2;
     HEAP32[i4 + 12 >> 2] = i3;
    }
    HEAP32[466997] = i7;
    HEAP32[467e3] = i5;
    i14 = i8;
    STACKTOP = i15;
    return i14 | 0;
   }
   i6 = HEAP32[466996] | 0;
   if (i6) {
    i9 = (i6 & 0 - i6) + -1 | 0;
    i5 = (12 ? i9 >>> 12 : i9) & 16;
    i9 = i5 ? i9 >>> i5 : i9;
    i4 = (5 ? i9 >>> 5 : i9) & 8;
    i9 = i4 ? i9 >>> i4 : i9;
    i7 = (2 ? i9 >>> 2 : i9) & 4;
    i9 = i7 ? i9 >>> i7 : i9;
    i2 = (1 ? i9 >>> 1 : i9) & 2;
    i9 = i2 ? i9 >>> i2 : i9;
    i8 = (1 ? i9 >>> 1 : i9) & 1;
    i9 = HEAP32[1868284 + ((i4 | i5 | i7 | i2 | i8) + (i8 ? i9 >>> i8 : i9) << 2) >> 2] | 0;
    i8 = (HEAP32[i9 + 4 >> 2] & -8) - i10 | 0;
    i2 = i9;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) break;
     }
     i2 = (HEAP32[i1 + 4 >> 2] & -8) - i10 | 0;
     i7 = i2 >>> 0 < i8 >>> 0;
     i8 = i7 ? i2 : i8;
     i2 = i1;
     i9 = i7 ? i1 : i9;
    }
    i7 = i9 + i10 | 0;
    if (i7 >>> 0 > i9 >>> 0) {
     i5 = HEAP32[i9 + 24 >> 2] | 0;
     i1 = HEAP32[i9 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i9 | 0)) {
      i2 = i9 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i9 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i3 = 0;
        break;
       }
      }
      while (1) {
       i4 = i1 + 20 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (!i3) {
        i4 = i1 + 16 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i4;
        }
       } else {
        i1 = i3;
        i2 = i4;
       }
      }
      HEAP32[i2 >> 2] = 0;
      i3 = i1;
     } else {
      i3 = HEAP32[i9 + 8 >> 2] | 0;
      HEAP32[i3 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i3;
      i3 = i1;
     } while (0);
     do if (i5 | 0) {
      i1 = HEAP32[i9 + 28 >> 2] | 0;
      i2 = 1868284 + (i1 << 2) | 0;
      if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
       HEAP32[i2 >> 2] = i3;
       if (!i3) {
        HEAP32[466996] = i6 & ~(1 << i1);
        break;
       }
      } else {
       i14 = i5 + 16 | 0;
       HEAP32[((HEAP32[i14 >> 2] | 0) == (i9 | 0) ? i14 : i5 + 20 | 0) >> 2] = i3;
       if (!i3) break;
      }
      HEAP32[i3 + 24 >> 2] = i5;
      i1 = HEAP32[i9 + 16 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
      i1 = HEAP32[i9 + 20 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
     } while (0);
     if (i8 >>> 0 < 16) {
      i14 = i8 + i10 | 0;
      HEAP32[i9 + 4 >> 2] = i14 | 3;
      i14 = i9 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i9 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i8 | 1;
      HEAP32[i7 + i8 >> 2] = i8;
      if (i11 | 0) {
       i4 = HEAP32[467e3] | 0;
       i1 = 3 ? i11 >>> 3 : i11;
       i3 = 1868020 + (i1 << 1 << 2) | 0;
       i1 = 1 << i1;
       if (!(i1 & i12)) {
        HEAP32[466995] = i1 | i12;
        i1 = i3 + 8 | 0;
        i2 = i3;
       } else {
        i2 = i3 + 8 | 0;
        i1 = i2;
        i2 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i1 >> 2] = i4;
       HEAP32[i2 + 12 >> 2] = i4;
       HEAP32[i4 + 8 >> 2] = i2;
       HEAP32[i4 + 12 >> 2] = i3;
      }
      HEAP32[466997] = i8;
      HEAP32[467e3] = i7;
     }
     i14 = i9 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
   }
  }
 } else if (i1 >>> 0 > 4294967231) i10 = -1; else {
  i1 = i1 + 11 | 0;
  i10 = i1 & -8;
  i4 = HEAP32[466996] | 0;
  if (i4) {
   i2 = 0 - i10 | 0;
   i1 = 8 ? i1 >>> 8 : i1;
   if (!i1) i8 = 0; else if (i10 >>> 0 > 16777215) i8 = 31; else {
    i12 = i1 + 1048320 | 0;
    i12 = (16 ? i12 >>> 16 : i12) & 8;
    i8 = i1 << i12;
    i11 = i8 + 520192 | 0;
    i11 = (16 ? i11 >>> 16 : i11) & 4;
    i8 = i8 << i11;
    i14 = i8 + 245760 | 0;
    i14 = (16 ? i14 >>> 16 : i14) & 2;
    i8 = i8 << i14;
    i8 = 14 - (i11 | i12 | i14) + (15 ? i8 >>> 15 : i8) | 0;
    i14 = i8 + 7 | 0;
    i8 = (i14 ? i10 >>> i14 : i10) & 1 | i8 << 1;
   }
   i1 = HEAP32[1868284 + (i8 << 2) >> 2] | 0;
   L79 : do if (!i1) {
    i3 = 0;
    i1 = 0;
    i14 = 61;
   } else {
    i3 = 0;
    i6 = i10 << ((i8 | 0) == 31 ? 0 : 25 - (1 ? i8 >>> 1 : i8) | 0);
    i7 = i1;
    i1 = 0;
    while (1) {
     i5 = (HEAP32[i7 + 4 >> 2] & -8) - i10 | 0;
     if (i5 >>> 0 < i2 >>> 0) if (!i5) {
      i2 = 0;
      i3 = i7;
      i1 = i7;
      i14 = 65;
      break L79;
     } else {
      i2 = i5;
      i1 = i7;
     }
     i14 = HEAP32[i7 + 20 >> 2] | 0;
     i7 = HEAP32[i7 + 16 + ((31 ? i6 >>> 31 : i6) << 2) >> 2] | 0;
     i3 = (i14 | 0) == 0 | (i14 | 0) == (i7 | 0) ? i3 : i14;
     if (!i7) {
      i14 = 61;
      break;
     } else i6 = i6 << 1;
    }
   } while (0);
   if ((i14 | 0) == 61) {
    if ((i3 | 0) == 0 & (i1 | 0) == 0) {
     i1 = 2 << i8;
     i1 = (i1 | 0 - i1) & i4;
     if (!i1) break;
     i3 = (i1 & 0 - i1) + -1 | 0;
     i9 = (12 ? i3 >>> 12 : i3) & 16;
     i3 = i9 ? i3 >>> i9 : i3;
     i8 = (5 ? i3 >>> 5 : i3) & 8;
     i3 = i8 ? i3 >>> i8 : i3;
     i11 = (2 ? i3 >>> 2 : i3) & 4;
     i3 = i11 ? i3 >>> i11 : i3;
     i12 = (1 ? i3 >>> 1 : i3) & 2;
     i3 = i12 ? i3 >>> i12 : i3;
     i1 = (1 ? i3 >>> 1 : i3) & 1;
     i3 = HEAP32[1868284 + ((i8 | i9 | i11 | i12 | i1) + (i1 ? i3 >>> i1 : i3) << 2) >> 2] | 0;
     i1 = 0;
    }
    if (!i3) {
     i7 = i2;
     i9 = i1;
    } else i14 = 65;
   }
   if ((i14 | 0) == 65) while (1) {
    i12 = (HEAP32[i3 + 4 >> 2] & -8) - i10 | 0;
    i5 = i12 >>> 0 < i2 >>> 0;
    i2 = i5 ? i12 : i2;
    i5 = i5 ? i3 : i1;
    i1 = HEAP32[i3 + 16 >> 2] | 0;
    if (!i1) i1 = HEAP32[i3 + 20 >> 2] | 0;
    if (!i1) {
     i7 = i2;
     i9 = i5;
     break;
    } else {
     i3 = i1;
     i1 = i5;
    }
   }
   if (i9) if (i7 >>> 0 < ((HEAP32[466997] | 0) - i10 | 0) >>> 0) {
    i8 = i9 + i10 | 0;
    if (i8 >>> 0 > i9 >>> 0) {
     i6 = HEAP32[i9 + 24 >> 2] | 0;
     i1 = HEAP32[i9 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i9 | 0)) {
      i2 = i9 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i9 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      }
      while (1) {
       i5 = i1 + 20 | 0;
       i3 = HEAP32[i5 >> 2] | 0;
       if (!i3) {
        i5 = i1 + 16 | 0;
        i3 = HEAP32[i5 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i5;
        }
       } else {
        i1 = i3;
        i2 = i5;
       }
      }
      HEAP32[i2 >> 2] = 0;
     } else {
      i14 = HEAP32[i9 + 8 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i14;
     } while (0);
     do if (i6) {
      i2 = HEAP32[i9 + 28 >> 2] | 0;
      i3 = 1868284 + (i2 << 2) | 0;
      if ((i9 | 0) == (HEAP32[i3 >> 2] | 0)) {
       HEAP32[i3 >> 2] = i1;
       if (!i1) {
        i4 = i4 & ~(1 << i2);
        HEAP32[466996] = i4;
        break;
       }
      } else {
       i14 = i6 + 16 | 0;
       HEAP32[((HEAP32[i14 >> 2] | 0) == (i9 | 0) ? i14 : i6 + 20 | 0) >> 2] = i1;
       if (!i1) break;
      }
      HEAP32[i1 + 24 >> 2] = i6;
      i2 = HEAP32[i9 + 16 >> 2] | 0;
      if (i2 | 0) {
       HEAP32[i1 + 16 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
      }
      i2 = HEAP32[i9 + 20 >> 2] | 0;
      if (i2) {
       HEAP32[i1 + 20 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
      }
     } while (0);
     L128 : do if (i7 >>> 0 < 16) {
      i14 = i7 + i10 | 0;
      HEAP32[i9 + 4 >> 2] = i14 | 3;
      i14 = i9 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i9 + 4 >> 2] = i10 | 3;
      HEAP32[i8 + 4 >> 2] = i7 | 1;
      HEAP32[i8 + i7 >> 2] = i7;
      i1 = 3 ? i7 >>> 3 : i7;
      if (i7 >>> 0 < 256) {
       i3 = 1868020 + (i1 << 1 << 2) | 0;
       i2 = HEAP32[466995] | 0;
       i1 = 1 << i1;
       if (!(i2 & i1)) {
        HEAP32[466995] = i2 | i1;
        i1 = i3 + 8 | 0;
        i2 = i3;
       } else {
        i2 = i3 + 8 | 0;
        i1 = i2;
        i2 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i1 >> 2] = i8;
       HEAP32[i2 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i2;
       HEAP32[i8 + 12 >> 2] = i3;
       break;
      }
      i1 = 8 ? i7 >>> 8 : i7;
      if (!i1) i3 = 0; else if (i7 >>> 0 > 16777215) i3 = 31; else {
       i13 = i1 + 1048320 | 0;
       i13 = (16 ? i13 >>> 16 : i13) & 8;
       i3 = i1 << i13;
       i12 = i3 + 520192 | 0;
       i12 = (16 ? i12 >>> 16 : i12) & 4;
       i3 = i3 << i12;
       i14 = i3 + 245760 | 0;
       i14 = (16 ? i14 >>> 16 : i14) & 2;
       i3 = i3 << i14;
       i3 = 14 - (i12 | i13 | i14) + (15 ? i3 >>> 15 : i3) | 0;
       i14 = i3 + 7 | 0;
       i3 = (i14 ? i7 >>> i14 : i7) & 1 | i3 << 1;
      }
      i1 = 1868284 + (i3 << 2) | 0;
      HEAP32[i8 + 28 >> 2] = i3;
      i2 = i8 + 16 | 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 >> 2] = 0;
      i2 = 1 << i3;
      if (!(i4 & i2)) {
       HEAP32[466996] = i4 | i2;
       HEAP32[i1 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i1;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break;
      }
      i1 = HEAP32[i1 >> 2] | 0;
      L145 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i7 | 0)) {
       i4 = i7 << ((i3 | 0) == 31 ? 0 : 25 - (1 ? i3 >>> 1 : i3) | 0);
       while (1) {
        i3 = i1 + 16 + ((31 ? i4 >>> 31 : i4) << 2) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) break;
        if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i7 | 0)) {
         i1 = i2;
         break L145;
        } else {
         i4 = i4 << 1;
         i1 = i2;
        }
       }
       HEAP32[i3 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i1;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break L128;
      } while (0);
      i13 = i1 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i8;
      HEAP32[i13 >> 2] = i8;
      HEAP32[i8 + 8 >> 2] = i14;
      HEAP32[i8 + 12 >> 2] = i1;
      HEAP32[i8 + 24 >> 2] = 0;
     } while (0);
     i14 = i9 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
   }
  }
 } while (0);
 i3 = HEAP32[466997] | 0;
 if (i3 >>> 0 >= i10 >>> 0) {
  i2 = i3 - i10 | 0;
  i1 = HEAP32[467e3] | 0;
  if (i2 >>> 0 > 15) {
   i14 = i1 + i10 | 0;
   HEAP32[467e3] = i14;
   HEAP32[466997] = i2;
   HEAP32[i14 + 4 >> 2] = i2 | 1;
   HEAP32[i1 + i3 >> 2] = i2;
   HEAP32[i1 + 4 >> 2] = i10 | 3;
  } else {
   HEAP32[466997] = 0;
   HEAP32[467e3] = 0;
   HEAP32[i1 + 4 >> 2] = i3 | 3;
   i14 = i1 + i3 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  }
  i14 = i1 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i6 = HEAP32[466998] | 0;
 if (i6 >>> 0 > i10 >>> 0) {
  i12 = i6 - i10 | 0;
  HEAP32[466998] = i12;
  i14 = HEAP32[467001] | 0;
  i13 = i14 + i10 | 0;
  HEAP32[467001] = i13;
  HEAP32[i13 + 4 >> 2] = i12 | 1;
  HEAP32[i14 + 4 >> 2] = i10 | 3;
  i14 = i14 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!(HEAP32[467113] | 0)) {
  HEAP32[467115] = 4096;
  HEAP32[467114] = 4096;
  HEAP32[467116] = -1;
  HEAP32[467117] = -1;
  HEAP32[467118] = 0;
  HEAP32[467106] = 0;
  HEAP32[467113] = i13 & -16 ^ 1431655768;
  i1 = 4096;
 } else i1 = HEAP32[467115] | 0;
 i7 = i10 + 48 | 0;
 i8 = i10 + 47 | 0;
 i5 = i1 + i8 | 0;
 i3 = 0 - i1 | 0;
 i9 = i5 & i3;
 if (i9 >>> 0 <= i10 >>> 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[467105] | 0;
 if (i1 | 0) {
  i12 = HEAP32[467103] | 0;
  i13 = i12 + i9 | 0;
  if (i13 >>> 0 <= i12 >>> 0 | i13 >>> 0 > i1 >>> 0) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 L178 : do if (!(HEAP32[467106] & 4)) {
  i2 = HEAP32[467001] | 0;
  L180 : do if (!i2) i14 = 128; else {
   i4 = 1868428;
   while (1) {
    i1 = HEAP32[i4 >> 2] | 0;
    if (i1 >>> 0 <= i2 >>> 0) if ((i1 + (HEAP32[i4 + 4 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) break;
    i1 = HEAP32[i4 + 8 >> 2] | 0;
    if (!i1) {
     i14 = 128;
     break L180;
    } else i4 = i1;
   }
   i1 = i5 - i6 & i3;
   if (i1 >>> 0 < 2147483647) {
    i2 = _sbrk(i1) | 0;
    if ((i2 | 0) == ((HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0)) {
     if ((i2 | 0) != (-1 | 0)) {
      i6 = i2;
      i14 = 145;
      break L178;
     }
    } else {
     i4 = i2;
     i14 = 136;
    }
   } else i1 = 0;
  } while (0);
  do if ((i14 | 0) == 128) {
   i5 = _sbrk(0) | 0;
   if ((i5 | 0) == (-1 | 0)) i1 = 0; else {
    i1 = i5;
    i2 = HEAP32[467114] | 0;
    i4 = i2 + -1 | 0;
    i1 = ((i4 & i1 | 0) == 0 ? 0 : (i4 + i1 & 0 - i2) - i1 | 0) + i9 | 0;
    i2 = HEAP32[467103] | 0;
    i4 = i1 + i2 | 0;
    if (i1 >>> 0 > i10 >>> 0 & i1 >>> 0 < 2147483647) {
     i3 = HEAP32[467105] | 0;
     if (i3 | 0) if (i4 >>> 0 <= i2 >>> 0 | i4 >>> 0 > i3 >>> 0) {
      i1 = 0;
      break;
     }
     i2 = _sbrk(i1) | 0;
     if ((i2 | 0) == (i5 | 0)) {
      i6 = i5;
      i14 = 145;
      break L178;
     } else {
      i4 = i2;
      i14 = 136;
     }
    } else i1 = 0;
   }
  } while (0);
  do if ((i14 | 0) == 136) {
   i3 = 0 - i1 | 0;
   if (!(i7 >>> 0 > i1 >>> 0 & (i1 >>> 0 < 2147483647 & (i4 | 0) != (-1 | 0)))) if ((i4 | 0) == (-1 | 0)) {
    i1 = 0;
    break;
   } else {
    i6 = i4;
    i14 = 145;
    break L178;
   }
   i2 = HEAP32[467115] | 0;
   i2 = i8 - i1 + i2 & 0 - i2;
   if (i2 >>> 0 >= 2147483647) {
    i6 = i4;
    i14 = 145;
    break L178;
   }
   if ((_sbrk(i2) | 0) == (-1 | 0)) {
    _sbrk(i3) | 0;
    i1 = 0;
    break;
   } else {
    i6 = i4;
    i1 = i2 + i1 | 0;
    i14 = 145;
    break L178;
   }
  } while (0);
  HEAP32[467106] = HEAP32[467106] | 4;
  i14 = 143;
 } else {
  i1 = 0;
  i14 = 143;
 } while (0);
 if ((i14 | 0) == 143) if (i9 >>> 0 < 2147483647) {
  i2 = _sbrk(i9) | 0;
  i13 = _sbrk(0) | 0;
  i4 = i13 - i2 | 0;
  i3 = i4 >>> 0 > (i10 + 40 | 0) >>> 0;
  if (!((i2 | 0) == (-1 | 0) | i3 ^ 1 | i2 >>> 0 < i13 >>> 0 & ((i2 | 0) != (-1 | 0) & (i13 | 0) != (-1 | 0)) ^ 1)) {
   i6 = i2;
   i1 = i3 ? i4 : i1;
   i14 = 145;
  }
 }
 if ((i14 | 0) == 145) {
  i2 = (HEAP32[467103] | 0) + i1 | 0;
  HEAP32[467103] = i2;
  if (i2 >>> 0 > (HEAP32[467104] | 0) >>> 0) HEAP32[467104] = i2;
  i7 = HEAP32[467001] | 0;
  L215 : do if (!i7) {
   i14 = HEAP32[466999] | 0;
   if ((i14 | 0) == 0 | i6 >>> 0 < i14 >>> 0) HEAP32[466999] = i6;
   HEAP32[467107] = i6;
   HEAP32[467108] = i1;
   HEAP32[467110] = 0;
   HEAP32[467004] = HEAP32[467113];
   HEAP32[467003] = -1;
   HEAP32[467008] = 1868020;
   HEAP32[467007] = 1868020;
   HEAP32[467010] = 1868028;
   HEAP32[467009] = 1868028;
   HEAP32[467012] = 1868036;
   HEAP32[467011] = 1868036;
   HEAP32[467014] = 1868044;
   HEAP32[467013] = 1868044;
   HEAP32[467016] = 1868052;
   HEAP32[467015] = 1868052;
   HEAP32[467018] = 1868060;
   HEAP32[467017] = 1868060;
   HEAP32[467020] = 1868068;
   HEAP32[467019] = 1868068;
   HEAP32[467022] = 1868076;
   HEAP32[467021] = 1868076;
   HEAP32[467024] = 1868084;
   HEAP32[467023] = 1868084;
   HEAP32[467026] = 1868092;
   HEAP32[467025] = 1868092;
   HEAP32[467028] = 1868100;
   HEAP32[467027] = 1868100;
   HEAP32[467030] = 1868108;
   HEAP32[467029] = 1868108;
   HEAP32[467032] = 1868116;
   HEAP32[467031] = 1868116;
   HEAP32[467034] = 1868124;
   HEAP32[467033] = 1868124;
   HEAP32[467036] = 1868132;
   HEAP32[467035] = 1868132;
   HEAP32[467038] = 1868140;
   HEAP32[467037] = 1868140;
   HEAP32[467040] = 1868148;
   HEAP32[467039] = 1868148;
   HEAP32[467042] = 1868156;
   HEAP32[467041] = 1868156;
   HEAP32[467044] = 1868164;
   HEAP32[467043] = 1868164;
   HEAP32[467046] = 1868172;
   HEAP32[467045] = 1868172;
   HEAP32[467048] = 1868180;
   HEAP32[467047] = 1868180;
   HEAP32[467050] = 1868188;
   HEAP32[467049] = 1868188;
   HEAP32[467052] = 1868196;
   HEAP32[467051] = 1868196;
   HEAP32[467054] = 1868204;
   HEAP32[467053] = 1868204;
   HEAP32[467056] = 1868212;
   HEAP32[467055] = 1868212;
   HEAP32[467058] = 1868220;
   HEAP32[467057] = 1868220;
   HEAP32[467060] = 1868228;
   HEAP32[467059] = 1868228;
   HEAP32[467062] = 1868236;
   HEAP32[467061] = 1868236;
   HEAP32[467064] = 1868244;
   HEAP32[467063] = 1868244;
   HEAP32[467066] = 1868252;
   HEAP32[467065] = 1868252;
   HEAP32[467068] = 1868260;
   HEAP32[467067] = 1868260;
   HEAP32[467070] = 1868268;
   HEAP32[467069] = 1868268;
   i14 = i1 + -40 | 0;
   i12 = i6 + 8 | 0;
   i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
   i13 = i6 + i12 | 0;
   i12 = i14 - i12 | 0;
   HEAP32[467001] = i13;
   HEAP32[466998] = i12;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i6 + i14 + 4 >> 2] = 40;
   HEAP32[467002] = HEAP32[467117];
  } else {
   i2 = 1868428;
   do {
    i3 = HEAP32[i2 >> 2] | 0;
    i4 = HEAP32[i2 + 4 >> 2] | 0;
    if ((i6 | 0) == (i3 + i4 | 0)) {
     i14 = 154;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i14 | 0) == 154) {
    i5 = i2 + 4 | 0;
    if (!(HEAP32[i2 + 12 >> 2] & 8)) if (i6 >>> 0 > i7 >>> 0 & i3 >>> 0 <= i7 >>> 0) {
     HEAP32[i5 >> 2] = i4 + i1;
     i14 = (HEAP32[466998] | 0) + i1 | 0;
     i12 = i7 + 8 | 0;
     i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
     i13 = i7 + i12 | 0;
     i12 = i14 - i12 | 0;
     HEAP32[467001] = i13;
     HEAP32[466998] = i12;
     HEAP32[i13 + 4 >> 2] = i12 | 1;
     HEAP32[i7 + i14 + 4 >> 2] = 40;
     HEAP32[467002] = HEAP32[467117];
     break;
    }
   }
   if (i6 >>> 0 < (HEAP32[466999] | 0) >>> 0) HEAP32[466999] = i6;
   i3 = i6 + i1 | 0;
   i2 = 1868428;
   do {
    if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) {
     i14 = 162;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i14 | 0) == 162) if (!(HEAP32[i2 + 12 >> 2] & 8)) {
    HEAP32[i2 >> 2] = i6;
    i11 = i2 + 4 | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i1;
    i11 = i6 + 8 | 0;
    i11 = i6 + ((i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7) | 0;
    i1 = i3 + 8 | 0;
    i1 = i3 + ((i1 & 7 | 0) == 0 ? 0 : 0 - i1 & 7) | 0;
    i9 = i11 + i10 | 0;
    i8 = i1 - i11 - i10 | 0;
    HEAP32[i11 + 4 >> 2] = i10 | 3;
    L238 : do if ((i7 | 0) == (i1 | 0)) {
     i14 = (HEAP32[466998] | 0) + i8 | 0;
     HEAP32[466998] = i14;
     HEAP32[467001] = i9;
     HEAP32[i9 + 4 >> 2] = i14 | 1;
    } else {
     if ((HEAP32[467e3] | 0) == (i1 | 0)) {
      i14 = (HEAP32[466997] | 0) + i8 | 0;
      HEAP32[466997] = i14;
      HEAP32[467e3] = i9;
      HEAP32[i9 + 4 >> 2] = i14 | 1;
      HEAP32[i9 + i14 >> 2] = i14;
      break;
     }
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if ((i2 & 3 | 0) == 1) {
      i7 = i2 & -8;
      i4 = 3 ? i2 >>> 3 : i2;
      L246 : do if (i2 >>> 0 < 256) {
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i3 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i3 | 0) == (i2 | 0)) {
        HEAP32[466995] = HEAP32[466995] & ~(1 << i4);
        break;
       } else {
        HEAP32[i2 + 12 >> 2] = i3;
        HEAP32[i3 + 8 >> 2] = i2;
        break;
       }
      } else {
       i6 = HEAP32[i1 + 24 >> 2] | 0;
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       do if ((i2 | 0) == (i1 | 0)) {
        i4 = i1 + 16 | 0;
        i3 = i4 + 4 | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i4 >> 2] | 0;
         if (!i2) {
          i2 = 0;
          break;
         } else i3 = i4;
        }
        while (1) {
         i5 = i2 + 20 | 0;
         i4 = HEAP32[i5 >> 2] | 0;
         if (!i4) {
          i5 = i2 + 16 | 0;
          i4 = HEAP32[i5 >> 2] | 0;
          if (!i4) break; else {
           i2 = i4;
           i3 = i5;
          }
         } else {
          i2 = i4;
          i3 = i5;
         }
        }
        HEAP32[i3 >> 2] = 0;
       } else {
        i14 = HEAP32[i1 + 8 >> 2] | 0;
        HEAP32[i14 + 12 >> 2] = i2;
        HEAP32[i2 + 8 >> 2] = i14;
       } while (0);
       if (!i6) break;
       i3 = HEAP32[i1 + 28 >> 2] | 0;
       i4 = 1868284 + (i3 << 2) | 0;
       do if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) {
        HEAP32[i4 >> 2] = i2;
        if (i2 | 0) break;
        HEAP32[466996] = HEAP32[466996] & ~(1 << i3);
        break L246;
       } else {
        i14 = i6 + 16 | 0;
        HEAP32[((HEAP32[i14 >> 2] | 0) == (i1 | 0) ? i14 : i6 + 20 | 0) >> 2] = i2;
        if (!i2) break L246;
       } while (0);
       HEAP32[i2 + 24 >> 2] = i6;
       i4 = i1 + 16 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (i3 | 0) {
        HEAP32[i2 + 16 >> 2] = i3;
        HEAP32[i3 + 24 >> 2] = i2;
       }
       i3 = HEAP32[i4 + 4 >> 2] | 0;
       if (!i3) break;
       HEAP32[i2 + 20 >> 2] = i3;
       HEAP32[i3 + 24 >> 2] = i2;
      } while (0);
      i1 = i1 + i7 | 0;
      i5 = i7 + i8 | 0;
     } else i5 = i8;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i9 + 4 >> 2] = i5 | 1;
     HEAP32[i9 + i5 >> 2] = i5;
     i1 = 3 ? i5 >>> 3 : i5;
     if (i5 >>> 0 < 256) {
      i3 = 1868020 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[466995] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[466995] = i2 | i1;
       i1 = i3 + 8 | 0;
       i2 = i3;
      } else {
       i2 = i3 + 8 | 0;
       i1 = i2;
       i2 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i1 >> 2] = i9;
      HEAP32[i2 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i2;
      HEAP32[i9 + 12 >> 2] = i3;
      break;
     }
     i1 = 8 ? i5 >>> 8 : i5;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i13 = i1 + 1048320 | 0;
      i13 = (16 ? i13 >>> 16 : i13) & 8;
      i4 = i1 << i13;
      i12 = i4 + 520192 | 0;
      i12 = (16 ? i12 >>> 16 : i12) & 4;
      i4 = i4 << i12;
      i14 = i4 + 245760 | 0;
      i14 = (16 ? i14 >>> 16 : i14) & 2;
      i4 = i4 << i14;
      i4 = 14 - (i12 | i13 | i14) + (15 ? i4 >>> 15 : i4) | 0;
      i14 = i4 + 7 | 0;
      i4 = (i14 ? i5 >>> i14 : i5) & 1 | i4 << 1;
     } while (0);
     i2 = 1868284 + (i4 << 2) | 0;
     HEAP32[i9 + 28 >> 2] = i4;
     i1 = i9 + 16 | 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 >> 2] = 0;
     i1 = HEAP32[466996] | 0;
     i3 = 1 << i4;
     if (!(i1 & i3)) {
      HEAP32[466996] = i1 | i3;
      HEAP32[i2 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i2;
      HEAP32[i9 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i9;
      break;
     }
     i1 = HEAP32[i2 >> 2] | 0;
     L291 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (1 ? i4 >>> 1 : i4) | 0);
      while (1) {
       i3 = i1 + 16 + ((31 ? i4 >>> 31 : i4) << 2) | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       if (!i2) break;
       if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i1 = i2;
        break L291;
       } else {
        i4 = i4 << 1;
        i1 = i2;
       }
      }
      HEAP32[i3 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i1;
      HEAP32[i9 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i9;
      break L238;
     } while (0);
     i13 = i1 + 8 | 0;
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i9;
     HEAP32[i13 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i14;
     HEAP32[i9 + 12 >> 2] = i1;
     HEAP32[i9 + 24 >> 2] = 0;
    } while (0);
    i14 = i11 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   i3 = 1868428;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0) {
     i2 = i2 + (HEAP32[i3 + 4 >> 2] | 0) | 0;
     if (i2 >>> 0 > i7 >>> 0) break;
    }
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i5 = i2 + -47 | 0;
   i3 = i5 + 8 | 0;
   i3 = i5 + ((i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7) | 0;
   i5 = i7 + 16 | 0;
   i3 = i3 >>> 0 < i5 >>> 0 ? i7 : i3;
   i14 = i3 + 8 | 0;
   i4 = i1 + -40 | 0;
   i12 = i6 + 8 | 0;
   i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
   i13 = i6 + i12 | 0;
   i12 = i4 - i12 | 0;
   HEAP32[467001] = i13;
   HEAP32[466998] = i12;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i6 + i4 + 4 >> 2] = 40;
   HEAP32[467002] = HEAP32[467117];
   i4 = i3 + 4 | 0;
   HEAP32[i4 >> 2] = 27;
   HEAP32[i14 >> 2] = HEAP32[467107];
   HEAP32[i14 + 4 >> 2] = HEAP32[467108];
   HEAP32[i14 + 8 >> 2] = HEAP32[467109];
   HEAP32[i14 + 12 >> 2] = HEAP32[467110];
   HEAP32[467107] = i6;
   HEAP32[467108] = i1;
   HEAP32[467110] = 0;
   HEAP32[467109] = i14;
   i1 = i3 + 24 | 0;
   do {
    i14 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i14 + 8 | 0) >>> 0 < i2 >>> 0);
   if ((i3 | 0) != (i7 | 0)) {
    i6 = i3 - i7 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -2;
    HEAP32[i7 + 4 >> 2] = i6 | 1;
    HEAP32[i3 >> 2] = i6;
    i1 = 3 ? i6 >>> 3 : i6;
    if (i6 >>> 0 < 256) {
     i3 = 1868020 + (i1 << 1 << 2) | 0;
     i2 = HEAP32[466995] | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[466995] = i2 | i1;
      i1 = i3 + 8 | 0;
      i2 = i3;
     } else {
      i2 = i3 + 8 | 0;
      i1 = i2;
      i2 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i1 >> 2] = i7;
     HEAP32[i2 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i2;
     HEAP32[i7 + 12 >> 2] = i3;
     break;
    }
    i1 = 8 ? i6 >>> 8 : i6;
    if (!i1) i4 = 0; else if (i6 >>> 0 > 16777215) i4 = 31; else {
     i13 = i1 + 1048320 | 0;
     i13 = (16 ? i13 >>> 16 : i13) & 8;
     i4 = i1 << i13;
     i12 = i4 + 520192 | 0;
     i12 = (16 ? i12 >>> 16 : i12) & 4;
     i4 = i4 << i12;
     i14 = i4 + 245760 | 0;
     i14 = (16 ? i14 >>> 16 : i14) & 2;
     i4 = i4 << i14;
     i4 = 14 - (i12 | i13 | i14) + (15 ? i4 >>> 15 : i4) | 0;
     i14 = i4 + 7 | 0;
     i4 = (i14 ? i6 >>> i14 : i6) & 1 | i4 << 1;
    }
    i3 = 1868284 + (i4 << 2) | 0;
    HEAP32[i7 + 28 >> 2] = i4;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i1 = HEAP32[466996] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[466996] = i1 | i2;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L325 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
     i4 = i6 << ((i4 | 0) == 31 ? 0 : 25 - (1 ? i4 >>> 1 : i4) | 0);
     while (1) {
      i3 = i1 + 16 + ((31 ? i4 >>> 31 : i4) << 2) | 0;
      i2 = HEAP32[i3 >> 2] | 0;
      if (!i2) break;
      if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i1 = i2;
       break L325;
      } else {
       i4 = i4 << 1;
       i1 = i2;
      }
     }
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i1;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break L215;
    } while (0);
    i13 = i1 + 8 | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    HEAP32[i14 + 12 >> 2] = i7;
    HEAP32[i13 >> 2] = i7;
    HEAP32[i7 + 8 >> 2] = i14;
    HEAP32[i7 + 12 >> 2] = i1;
    HEAP32[i7 + 24 >> 2] = 0;
   }
  } while (0);
  i1 = HEAP32[466998] | 0;
  if (i1 >>> 0 > i10 >>> 0) {
   i12 = i1 - i10 | 0;
   HEAP32[466998] = i12;
   i14 = HEAP32[467001] | 0;
   i13 = i14 + i10 | 0;
   HEAP32[467001] = i13;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i14 + 4 >> 2] = i10 | 3;
   i14 = i14 + 8 | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 i14 = ___errno_location() | 0;
 HEAP32[i14 >> 2] = 48;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}
function _Inflate_Process(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i14 = i27 + 8 | 0;
 i8 = i27 + 24 | 0;
 i11 = i27 + 32 | 0;
 i15 = i27 + 40 | 0;
 i17 = i27 + 44 | 0;
 i16 = i27 + 48 | 0;
 i20 = i27 + 52 | 0;
 i22 = i27 + 56 | 0;
 i19 = i27 + 10272 | 0;
 i21 = i27 + 60 | 0;
 i9 = i27 + 4 | 0;
 i12 = i27 + 1 | 0;
 i7 = i27 + 16 | 0;
 i13 = i27 + 12 | 0;
 i18 = i27 + 20 | 0;
 i23 = i27 + 36 | 0;
 i10 = i27 + 8576 | 0;
 i26 = i27 + 44736 | 0;
 i25 = i27 + 8256 | 0;
 i24 = i27 + 11968 | 0;
 L1 : while (1) {
  L3 : do switch (HEAP8[i27 >> 0] | 0) {
  case 13:
   break L1;
  case 0:
   {
    i2 = HEAP32[i14 >> 2] | 0;
    if (i2 >>> 0 < 3) {
     i1 = HEAP32[i7 >> 2] | 0;
     if (!i1) break L1;
     HEAP32[i7 >> 2] = i1 + -1;
     i3 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] << i2 | HEAP32[i9 >> 2];
     HEAP32[i9 >> 2] = i3;
     i2 = i2 + 8 | 0;
     HEAP32[i14 >> 2] = i2;
    } else i3 = HEAP32[i9 >> 2] | 0;
    i4 = 3 ? i3 >>> 3 : i3;
    HEAP32[i9 >> 2] = i4;
    i1 = i2 + -3 | 0;
    HEAP32[i14 >> 2] = i1;
    HEAP8[i12 >> 0] = i3 & 1;
    switch ((1 ? i3 >>> 1 : i3) & 3) {
    case 0:
     {
      i5 = i1 & 7;
      HEAP32[i9 >> 2] = i5 ? i4 >>> i5 : i4;
      HEAP32[i14 >> 2] = i1 - i5;
      HEAP8[i27 >> 0] = 1;
      break L3;
     }
    case 1:
     {
      _Huffman_Build(i10, 1552, 288) | 0;
      _Huffman_Build(i19, 1840, 32) | 0;
      if ((HEAP32[i7 >> 2] | 0) >>> 0 > 9) i1 = (HEAP32[i8 >> 2] | 0) >>> 0 > 257 ? 12 : 7; else i1 = 7;
      HEAP8[i27 >> 0] = i1;
      break L3;
     }
    case 2:
     {
      HEAP8[i27 >> 0] = 3;
      break L3;
     }
    case 3:
     {
      HEAP32[i26 >> 2] = -857812906;
      HEAP8[i27 >> 0] = 13;
      break L3;
     }
    default:
     {
      i6 = 123;
      break L1;
     }
    }
   }
  case 1:
   {
    i1 = HEAP32[i14 >> 2] | 0;
    if (i1 >>> 0 < 32) {
     i3 = HEAP32[i7 >> 2] | 0;
     do {
      if (!i3) break L1;
      i3 = i3 + -1 | 0;
      HEAP32[i7 >> 2] = i3;
      i2 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i2 + 1;
      i2 = HEAPU8[i2 >> 0] << i1 | HEAP32[i9 >> 2];
      HEAP32[i9 >> 2] = i2;
      i1 = i1 + 8 | 0;
      HEAP32[i14 >> 2] = i1;
     } while (i1 >>> 0 < 32);
    } else i2 = HEAP32[i9 >> 2] | 0;
    i3 = i2 & 65535;
    HEAP32[i9 >> 2] = 0;
    i1 = i1 + -32 | 0;
    HEAP32[i14 >> 2] = i1;
    if ((i3 | 0) != ((16 ? i2 >>> 16 : i2) ^ 65535 | 0)) {
     i6 = 22;
     break L1;
    }
    HEAP32[i11 >> 2] = i3;
    HEAP8[i27 >> 0] = 2;
    i6 = 24;
    break;
   }
  case 2:
   {
    i1 = HEAP32[i14 >> 2] | 0;
    i6 = 24;
    break;
   }
  case 3:
   {
    i2 = HEAP32[i14 >> 2] | 0;
    if (i2 >>> 0 < 14) {
     i3 = HEAP32[i7 >> 2] | 0;
     do {
      if (!i3) break L1;
      i3 = i3 + -1 | 0;
      HEAP32[i7 >> 2] = i3;
      i1 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i1 + 1;
      i1 = HEAPU8[i1 >> 0] << i2 | HEAP32[i9 >> 2];
      HEAP32[i9 >> 2] = i1;
      i2 = i2 + 8 | 0;
      HEAP32[i14 >> 2] = i2;
     } while (i2 >>> 0 < 14);
    } else i1 = HEAP32[i9 >> 2] | 0;
    HEAP32[i17 >> 2] = (i1 & 31) + 257;
    HEAP32[i16 >> 2] = ((5 ? i1 >>> 5 : i1) & 31) + 1;
    i6 = ((10 ? i1 >>> 10 : i1) & 15) + 4 | 0;
    HEAP32[i15 >> 2] = i6;
    HEAP32[i9 >> 2] = 14 ? i1 >>> 14 : i1;
    HEAP32[i14 >> 2] = i2 + -14;
    HEAP32[i11 >> 2] = 0;
    HEAP8[i27 >> 0] = 4;
    i2 = 0;
    i1 = i6;
    i6 = 45;
    break;
   }
  case 4:
   {
    i2 = HEAP32[i11 >> 2] | 0;
    i1 = HEAP32[i15 >> 2] | 0;
    if (i2 >>> 0 < i1 >>> 0) i6 = 45; else i6 = 51;
    break;
   }
  case 5:
   {
    i6 = 56;
    break;
   }
  case 6:
   {
    switch (HEAP32[i20 >> 2] | 0) {
    case 16:
     {
      i1 = HEAP32[i14 >> 2] | 0;
      if (i1 >>> 0 < 2) {
       i2 = HEAP32[i7 >> 2] | 0;
       if (!i2) break L1;
       HEAP32[i7 >> 2] = i2 + -1;
       i2 = HEAP32[i13 >> 2] | 0;
       HEAP32[i13 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] << i1 | HEAP32[i9 >> 2];
       HEAP32[i9 >> 2] = i2;
       i1 = i1 + 8 | 0;
       HEAP32[i14 >> 2] = i1;
      } else i2 = HEAP32[i9 >> 2] | 0;
      HEAP32[i9 >> 2] = 2 ? i2 >>> 2 : i2;
      HEAP32[i14 >> 2] = i1 + -2;
      i1 = HEAP32[i11 >> 2] | 0;
      if (!i1) {
       i6 = 75;
       break L1;
      }
      i3 = (i2 & 3) + 3 | 0;
      i2 = HEAP8[i1 + -1 + (i27 + 8256) >> 0] | 0;
      break;
     }
    case 17:
     {
      i1 = HEAP32[i14 >> 2] | 0;
      if (i1 >>> 0 < 3) {
       i2 = HEAP32[i7 >> 2] | 0;
       if (!i2) break L1;
       HEAP32[i7 >> 2] = i2 + -1;
       i2 = HEAP32[i13 >> 2] | 0;
       HEAP32[i13 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] << i1 | HEAP32[i9 >> 2];
       HEAP32[i9 >> 2] = i2;
       i1 = i1 + 8 | 0;
       HEAP32[i14 >> 2] = i1;
      } else i2 = HEAP32[i9 >> 2] | 0;
      HEAP32[i9 >> 2] = 3 ? i2 >>> 3 : i2;
      HEAP32[i14 >> 2] = i1 + -3;
      i3 = (i2 & 7) + 3 | 0;
      i2 = 0;
      break;
     }
    case 18:
     {
      i1 = HEAP32[i14 >> 2] | 0;
      if (i1 >>> 0 < 7) {
       i2 = HEAP32[i7 >> 2] | 0;
       if (!i2) break L1;
       HEAP32[i7 >> 2] = i2 + -1;
       i2 = HEAP32[i13 >> 2] | 0;
       HEAP32[i13 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] << i1 | HEAP32[i9 >> 2];
       HEAP32[i9 >> 2] = i2;
       i1 = i1 + 8 | 0;
       HEAP32[i14 >> 2] = i1;
      } else i2 = HEAP32[i9 >> 2] | 0;
      HEAP32[i9 >> 2] = 7 ? i2 >>> 7 : i2;
      HEAP32[i14 >> 2] = i1 + -7;
      i3 = (i2 & 127) + 11 | 0;
      i2 = 0;
      break;
     }
    default:
     {
      i6 = 87;
      break L1;
     }
    }
    i1 = HEAP32[i11 >> 2] | 0;
    if ((i1 + i3 | 0) >>> 0 > ((HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0) >>> 0) {
     i6 = 89;
     break L1;
    }
    _Mem_Set(i27 + 8256 + i1 | 0, i2, i3) | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i3;
    HEAP8[i27 >> 0] = 5;
    break;
   }
  case 7:
   {
    if (!(HEAP32[i8 >> 2] | 0)) break L1;
    i1 = _Huffman_Decode(i27, i10) | 0;
    if ((i1 | 0) < 256) {
     if ((i1 | 0) == -1) break L1;
     i5 = i1 & 255;
     HEAP8[HEAP32[i18 >> 2] >> 0] = i5;
     HEAP8[(HEAP32[i23 >> 2] | 0) + (i27 + 11968) >> 0] = i5;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1 & 32767;
     break L3;
    }
    if ((i1 | 0) == 256) {
     HEAP8[i27 >> 0] = (HEAP8[i12 >> 0] | 0) == 0 ? 0 : 13;
     break L3;
    } else {
     i4 = i1 + -257 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP8[i27 >> 0] = 8;
     i6 = 98;
     break L3;
    }
   }
  case 8:
   {
    i4 = HEAP32[i22 >> 2] | 0;
    i6 = 98;
    break;
   }
  case 9:
   {
    i6 = 104;
    break;
   }
  case 10:
   {
    i6 = 106;
    break;
   }
  case 11:
   {
    i6 = 112;
    break;
   }
  case 12:
   {
    _Inflate_InflateFast(i27);
    if ((HEAP8[i27 >> 0] | 0) == 12) {
     if ((HEAP32[i7 >> 2] | 0) >>> 0 > 9) i1 = (HEAP32[i8 >> 2] | 0) >>> 0 > 257 ? 12 : 7; else i1 = 7;
     HEAP8[i27 >> 0] = i1;
    }
    break;
   }
  default:
   {}
  } while (0);
  if ((i6 | 0) == 24) {
   i6 = 0;
   L77 : do if (i1 | 0) {
    i1 = HEAP32[i8 >> 2] | 0;
    do {
     if (!i1) break L77;
     if (!(HEAP32[i11 >> 2] | 0)) break L77;
     HEAP8[HEAP32[i18 >> 2] >> 0] = HEAP32[i9 >> 2];
     i1 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = 8 ? i1 >>> 8 : i1;
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -8;
     HEAP8[(HEAP32[i23 >> 2] | 0) + (i27 + 11968) >> 0] = HEAP8[HEAP32[i18 >> 2] >> 0] | 0;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1 & 32767;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     i1 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
     HEAP32[i8 >> 2] = i1;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
    } while ((HEAP32[i14 >> 2] | 0) != 0);
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) break;
   i2 = HEAP32[i8 >> 2] | 0;
   if (!i2) break;
   i2 = i1 >>> 0 < i2 >>> 0 ? i1 : i2;
   i1 = HEAP32[i11 >> 2] | 0;
   i2 = i2 >>> 0 < i1 >>> 0 ? i2 : i1;
   if (i2) {
    _Mem_Copy(HEAP32[i18 >> 2] | 0, HEAP32[i13 >> 2] | 0, i2) | 0;
    i4 = HEAP32[i23 >> 2] | 0;
    i1 = 32768 - i4 | 0;
    i5 = i1 >>> 0 < i2 >>> 0;
    i1 = i5 ? i1 : i2;
    _Mem_Copy(i27 + 11968 + i4 | 0, HEAP32[i18 >> 2] | 0, i1) | 0;
    if (i5) _Mem_Copy(i24, (HEAP32[i18 >> 2] | 0) + i1 | 0, i2 - i1 | 0) | 0;
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + i2 & 32767;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + i2;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - i2;
    i1 = (HEAP32[i11 >> 2] | 0) - i2 | 0;
    HEAP32[i11 >> 2] = i1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i2;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i2;
   }
   if (!i1) HEAP8[i27 >> 0] = (HEAP8[i12 >> 0] | 0) == 0 ? 0 : 13;
  } else if ((i6 | 0) == 45) {
   i6 = 0;
   i3 = HEAP32[i14 >> 2] | 0;
   while (1) {
    if (i3 >>> 0 < 3) {
     i4 = HEAP32[i7 >> 2] | 0;
     if (!i4) break L1;
     HEAP32[i7 >> 2] = i4 + -1;
     i4 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] << i3 | HEAP32[i9 >> 2];
     HEAP32[i9 >> 2] = i4;
     i3 = i3 + 8 | 0;
     HEAP32[i14 >> 2] = i3;
    } else i4 = HEAP32[i9 >> 2] | 0;
    HEAP8[(HEAPU8[1872 + i2 >> 0] | 0) + (i27 + 8256) >> 0] = i4 & 7;
    HEAP32[i9 >> 2] = 3 ? i4 >>> 3 : i4;
    i3 = i3 + -3 | 0;
    HEAP32[i14 >> 2] = i3;
    i2 = i2 + 1 | 0;
    HEAP32[i11 >> 2] = i2;
    if (i2 >>> 0 >= i1 >>> 0) {
     i6 = 51;
     break;
    }
   }
  } else if ((i6 | 0) == 98) {
   i6 = 0;
   i5 = HEAPU8[1904 + i4 >> 0] | 0;
   i2 = HEAP32[i14 >> 2] | 0;
   if (i2 >>> 0 < i5 >>> 0) {
    i3 = HEAP32[i7 >> 2] | 0;
    do {
     if (!i3) break L1;
     i3 = i3 + -1 | 0;
     HEAP32[i7 >> 2] = i3;
     i1 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] << i2 | HEAP32[i9 >> 2];
     HEAP32[i9 >> 2] = i1;
     i2 = i2 + 8 | 0;
     HEAP32[i14 >> 2] = i2;
    } while (i2 >>> 0 < i5 >>> 0);
   } else i1 = HEAP32[i9 >> 2] | 0;
   HEAP32[i22 >> 2] = (i1 & (1 << i5) + -1) + (HEAPU16[1936 + (i4 << 1) >> 1] | 0);
   HEAP32[i9 >> 2] = i5 ? i1 >>> i5 : i1;
   HEAP32[i14 >> 2] = i2 - i5;
   HEAP8[i27 >> 0] = 9;
   i6 = 104;
  }
  if ((i6 | 0) == 51) {
   if (i1 >>> 0 < 19) do {
    HEAP8[(HEAPU8[1872 + i1 >> 0] | 0) + (i27 + 8256) >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 19);
   HEAP32[i11 >> 2] = 0;
   HEAP8[i27 >> 0] = 5;
   i1 = _Huffman_Build(i10, i25, 19) | 0;
   if (!i1) i6 = 56; else {
    i6 = 55;
    break;
   }
  } else if ((i6 | 0) == 104) {
   i6 = 0;
   i5 = _Huffman_Decode(i27, i19) | 0;
   HEAP32[i21 >> 2] = i5;
   if ((i5 | 0) == -1) break;
   HEAP8[i27 >> 0] = 10;
   i6 = 106;
  }
  if ((i6 | 0) == 56) {
   i6 = 0;
   i2 = (HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   L120 : do if (i1 >>> 0 < i2 >>> 0) {
    while (1) {
     i1 = _Huffman_Decode(i27, i10) | 0;
     if ((i1 | 0) >= 16) break;
     if ((i1 | 0) == -1) break L1;
     HEAP8[(HEAP32[i11 >> 2] | 0) + (i27 + 8256) >> 0] = i1;
     i1 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
     HEAP32[i11 >> 2] = i1;
     if (i1 >>> 0 >= i2 >>> 0) break L120;
    }
    HEAP32[i20 >> 2] = i1;
    HEAP8[i27 >> 0] = 6;
    i1 = HEAP32[i11 >> 2] | 0;
   } while (0);
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[i11 >> 2] = 0;
    if ((HEAP32[i7 >> 2] | 0) >>> 0 > 9) i1 = (HEAP32[i8 >> 2] | 0) >>> 0 > 257 ? 12 : 7; else i1 = 7;
    HEAP8[i27 >> 0] = i1;
    i1 = _Huffman_Build(i10, i25, HEAP32[i17 >> 2] | 0) | 0;
    if (i1 | 0) {
     i6 = 66;
     break;
    }
    i1 = _Huffman_Build(i19, (HEAP32[i17 >> 2] | 0) + (i27 + 8256) | 0, HEAP32[i16 >> 2] | 0) | 0;
    if (i1 | 0) {
     i6 = 68;
     break;
    }
   }
  } else if ((i6 | 0) == 106) {
   i6 = 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i5 = HEAPU8[2e3 + i4 >> 0] | 0;
   i2 = HEAP32[i14 >> 2] | 0;
   if (i2 >>> 0 < i5 >>> 0) {
    i3 = HEAP32[i7 >> 2] | 0;
    do {
     if (!i3) break L1;
     i3 = i3 + -1 | 0;
     HEAP32[i7 >> 2] = i3;
     i1 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] << i2 | HEAP32[i9 >> 2];
     HEAP32[i9 >> 2] = i1;
     i2 = i2 + 8 | 0;
     HEAP32[i14 >> 2] = i2;
    } while (i2 >>> 0 < i5 >>> 0);
   } else i1 = HEAP32[i9 >> 2] | 0;
   HEAP32[i21 >> 2] = (i1 & (1 << i5) + -1) + (HEAPU16[2032 + (i4 << 1) >> 1] | 0);
   HEAP32[i9 >> 2] = i5 ? i1 >>> i5 : i1;
   HEAP32[i14 >> 2] = i2 - i5;
   HEAP8[i27 >> 0] = 11;
   i6 = 112;
  }
  if ((i6 | 0) == 112) {
   i6 = 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (!i1) break;
   i2 = HEAP32[i22 >> 2] | 0;
   i4 = i2 >>> 0 < i1 >>> 0 ? i2 : i1;
   i5 = HEAP32[i23 >> 2] | 0;
   i3 = i5 - (HEAP32[i21 >> 2] | 0) | 0;
   if (i4) {
    i1 = 0;
    do {
     i2 = HEAP8[(i3 + i1 & 32767) + (i27 + 11968) >> 0] | 0;
     HEAP8[HEAP32[i18 >> 2] >> 0] = i2;
     HEAP8[(i1 + i5 & 32767) + (i27 + 11968) >> 0] = i2;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     i1 = i1 + 1 | 0;
    } while (i1 >>> 0 < i4 >>> 0);
    i2 = HEAP32[i22 >> 2] | 0;
    i1 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i23 >> 2] = i5 + i4 & 32767;
   i5 = i2 - i4 | 0;
   HEAP32[i22 >> 2] = i5;
   i1 = i1 - i4 | 0;
   HEAP32[i8 >> 2] = i1;
   if (!i5) HEAP8[i27 >> 0] = i1 >>> 0 > 257 & (HEAP32[i7 >> 2] | 0) >>> 0 > 9 ? 12 : 7;
  }
 }
 if ((i6 | 0) == 22) {
  HEAP32[i26 >> 2] = -857812906;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 55) {
  HEAP32[i26 >> 2] = i1;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 66) {
  HEAP32[i26 >> 2] = i1;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 68) {
  HEAP32[i26 >> 2] = i1;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 75) {
  HEAP32[i26 >> 2] = -857812904;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 87) {
  HEAP32[i26 >> 2] = -857812903;
  HEAP8[i27 >> 0] = 13;
 } else if ((i6 | 0) == 89) {
  HEAP32[i26 >> 2] = -857812903;
  HEAP8[i27 >> 0] = 13;
 }
 return;
}

function _Png_Decode(i41, i37) {
 i41 = i41 | 0;
 i37 = i37 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i38 = 0, i39 = 0, i40 = 0, i42 = 0, i43 = 0, i44 = 0;
 i44 = STACKTOP;
 STACKTOP = STACKTOP + 46720 | 0;
 i38 = i44 + 1792 | 0;
 i42 = i44 + 768 | 0;
 i32 = i44;
 i36 = i44 + 46708 | 0;
 i2 = i44 + 1968 | 0;
 i33 = i44 + 1912 | 0;
 i34 = i44 + 1856 | 0;
 i39 = i44 + 46712 | 0;
 i43 = i41 + 4 | 0;
 HEAP32[i43 >> 2] = 0;
 i35 = i41 + 8 | 0;
 HEAP32[i35 >> 2] = 0;
 HEAP32[i41 >> 2] = 0;
 i1 = _Stream_Read(i37, i38, 8) | 0;
 L1 : do if (!i1) if (!((_Png_Detect(i38, 8) | 0) << 24 >> 24)) i1 = -857812961; else {
  i1 = 0;
  do {
   HEAP32[i42 + (i1 << 2) >> 2] = -16777216;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
  _Inflate_MakeStream2(i33, i2, i37);
  _ZLibHeader_Init(i39);
  i1 = _Stream_Read(i37, i38, 8) | 0;
  if (!i1) {
   i31 = i38 + 4 | 0;
   i30 = i37 + 12 | 0;
   i20 = i2 + 28 | 0;
   i29 = i39 + 1 | 0;
   i21 = i32 + 1 | 0;
   i22 = i32 + 3 | 0;
   i23 = i32 + 5 | 0;
   i24 = i38 + 8 | 0;
   i25 = i38 + 9 | 0;
   i26 = i38 + 10 | 0;
   i27 = i38 + 11 | 0;
   i28 = i38 + 12 | 0;
   i13 = 0;
   i15 = 0;
   i9 = 0;
   i11 = 0;
   i12 = 0;
   i14 = -1;
   i10 = 0;
   i16 = 0;
   i17 = 0;
   i18 = 0;
   i8 = 0;
   i19 = -16777216;
   L8 : while (1) {
    i2 = _Stream_GetU32_BE(i38) | 0;
    i1 = _Stream_GetU32_BE(i31) | 0;
    L10 : do if ((i1 | 0) < 1229472850) {
     if ((i1 | 0) >= 1229278788) switch (i1 | 0) {
     case 1229278788:
      {
       i1 = -857812950;
       break L1;
      }
     default:
      {
       i40 = 63;
       break L10;
      }
     }
     switch (i1 | 0) {
     case 1229209940:
      break;
     default:
      {
       i40 = 63;
       break L10;
      }
     }
     _Stream_ReadonlyPortion(i34, i37, i2);
     HEAP32[i20 >> 2] = i34;
     if (!(HEAP8[i29 >> 0] | 0)) do {
      i1 = _ZLibHeader_Read(i34, i39) | 0;
      if (i1 | 0) break L1;
     } while (!(HEAP8[i29 >> 0] | 0));
     if (!(HEAP32[i41 >> 2] | 0)) {
      i1 = -857812949;
      break L1;
     }
     if (i17 >>> 0 < (HEAP32[i35 >> 2] | 0) >>> 0) {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i33 >> 2] & 63](i33, i10 + i9 | 0, i11 - i9 | 0, i36) | 0;
      if (i1 | 0) break L1;
      i2 = HEAP32[i36 >> 2] | 0;
      if (!i2) {
       i4 = i15;
       i5 = i14;
       i6 = i16;
       i2 = i17;
       i7 = i18;
       i3 = i19;
      } else {
       i1 = i2 + i13 | 0;
       i9 = i2 + i9 | 0;
       L26 : do if (i1 >>> 0 < i18 >>> 0) i2 = i17; else {
        i7 = i14 << 24 >> 24 == 6;
        i2 = i17;
        do {
         if (i2 >>> 0 >= (HEAP32[i35 >> 2] | 0) >>> 0) break L26;
         i4 = i10 + (Math_imul(i2, i18) | 0) | 0;
         i3 = HEAP8[i4 >> 0] | 0;
         if ((i3 & 255) > 4) {
          i1 = -857812948;
          break L1;
         }
         do if (!i2) {
          _Png_ReconstructFirst(i3, i12, i4 + 1 | 0, i8);
          if (i7) i40 = 53;
         } else {
          i6 = i2 + -1 | 0;
          i5 = i10 + (Math_imul(i6, i18) | 0) + 1 | 0;
          _Png_Reconstruct(i3, i12, i4 + 1 | 0, i5, i8);
          if (!i7) break;
          i17 = HEAP32[i43 >> 2] | 0;
          i40 = (HEAP32[i41 >> 2] | 0) + ((Math_imul(i17, i6) | 0) << 2) | 0;
          FUNCTION_TABLE_viiii[i16 & 31](i17, i42, i5, i40);
          i40 = 53;
         } while (0);
         do if ((i40 | 0) == 53) {
          i40 = 0;
          if ((i2 | 0) != ((HEAP32[i35 >> 2] | 0) + -1 | 0)) break;
          i13 = HEAP32[i43 >> 2] | 0;
          i17 = (HEAP32[i41 >> 2] | 0) + ((Math_imul(i13, i2) | 0) << 2) | 0;
          FUNCTION_TABLE_viiii[i16 & 31](i13, i42, i4 + 1 | 0, i17);
         } while (0);
         i2 = i2 + 1 | 0;
         i1 = i1 - i18 | 0;
        } while (i1 >>> 0 >= i18 >>> 0);
       } while (0);
       if ((i9 | 0) == (i11 | 0)) break L8; else {
        i13 = i1;
        i4 = i15;
        i5 = i14;
        i6 = i16;
        i7 = i18;
        i3 = i19;
       }
      }
     } else {
      i4 = i15;
      i5 = i14;
      i6 = i16;
      i2 = i17;
      i7 = i18;
      i3 = i19;
     }
    } else {
     if ((i1 | 0) < 1347179589) {
      switch (i1 | 0) {
      case 1229472850:
       break;
      default:
       {
        i40 = 63;
        break L10;
       }
      }
      if ((i2 | 0) != 13) {
       i1 = -857812960;
       break L1;
      }
      i1 = _Stream_Read(i37, i38, 13) | 0;
      if (i1 | 0) break L1;
      i2 = _Stream_GetU32_BE(i38) | 0;
      HEAP32[i43 >> 2] = i2;
      i2 = _Stream_GetU32_BE(i31) | 0;
      HEAP32[i35 >> 2] = i2;
      i1 = HEAP32[i43 >> 2] | 0;
      if (i1 >>> 0 > 32768) {
       i1 = -857812959;
       break L1;
      }
      if (i2 >>> 0 > 32768) {
       i1 = -857812958;
       break L1;
      }
      i4 = HEAP8[i24 >> 0] | 0;
      i5 = HEAP8[i25 >> 0] | 0;
      if (i4 << 24 >> 24 == 16) {
       i1 = -857812879;
       break L1;
      }
      i6 = _Png_GetExpander(i5, i4) | 0;
      if (!i6) {
       i1 = -857812957;
       break L1;
      }
      if (HEAP8[i26 >> 0] | 0) {
       i1 = -857812956;
       break L1;
      }
      if (HEAP8[i27 >> 0] | 0) {
       i1 = -857812955;
       break L1;
      }
      if (HEAP8[i28 >> 0] | 0) {
       i1 = -857812954;
       break L1;
      }
      i3 = Math_imul(HEAPU8[24700 + (i5 & 255) >> 0] | 0, i4 & 255) | 0;
      i8 = (Math_imul(i3, i1) | 0) + 7 | 0;
      i8 = 3 ? i8 >> 3 : i8;
      i7 = i8 + 1 | 0;
      i1 = i1 << 2;
      i1 = _Mem_TryAlloc(i2, i7 >>> 0 > i1 >>> 0 ? i7 : i1) | 0;
      HEAP32[i41 >> 2] = i1;
      if (!i1) {
       i1 = -857812988;
       break L1;
      }
      i12 = i3 + 7 | 0;
      i11 = Math_imul(HEAP32[i35 >> 2] | 0, i7) | 0;
      i12 = (3 ? i12 >>> 3 : i12) & 255;
      i10 = i1;
      i2 = i17;
      i3 = i19;
      break;
     }
     if ((i1 | 0) < 1951551059) {
      switch (i1 | 0) {
      case 1347179589:
       break;
      default:
       {
        i40 = 63;
        break L10;
       }
      }
      if (!(i2 >>> 0 < 769 & ((i2 >>> 0) % 3 | 0 | 0) == 0)) {
       i1 = -857812953;
       break L1;
      }
      i1 = _Stream_Read(i37, i32, i2) | 0;
      if (i1 | 0) break L1;
      if (!i2) {
       i4 = i15;
       i5 = i14;
       i6 = i16;
       i2 = i17;
       i7 = i18;
       i3 = i19;
       break;
      }
      i1 = 0;
      while (1) {
       i7 = i42 + (((i1 >>> 0) / 3 | 0) << 2) | 0;
       HEAP32[i7 >> 2] = HEAPU8[i32 + (i1 + 2) >> 0] << 16 | (HEAPU8[i32 + (i1 + 1) >> 0] << 8 | (HEAP32[i7 >> 2] & -16777216 | HEAPU8[i32 + i1 >> 0]));
       i1 = i1 + 3 | 0;
       if (i1 >>> 0 >= i2 >>> 0) {
        i4 = i15;
        i5 = i14;
        i6 = i16;
        i2 = i17;
        i7 = i18;
        i3 = i19;
        break L10;
       }
      }
     }
     switch (i1 | 0) {
     case 1951551059:
      break;
     default:
      {
       i40 = 63;
       break L10;
      }
     }
     switch (i14 << 24 >> 24) {
     case 0:
      {
       if ((i2 | 0) != 2) {
        i1 = -857812952;
        break L1;
       }
       i1 = _Stream_Read(i37, i32, 2) | 0;
       if (i1 | 0) break L1;
       i3 = HEAPU8[i21 >> 0] | 0;
       i4 = i15;
       i5 = 0;
       i6 = i16;
       i2 = i17;
       i7 = i18;
       i3 = _ExpandRGB(i15, i3, i3, i3) | 0;
       break L10;
      }
     case 3:
      {
       if (i2 >>> 0 > 256) {
        i1 = -857812952;
        break L1;
       }
       i1 = _Stream_Read(i37, i32, i2) | 0;
       if (i1 | 0) break L1;
       if (!i2) {
        i4 = i15;
        i5 = 3;
        i6 = i16;
        i2 = i17;
        i7 = i18;
        i3 = i19;
        break L10;
       }
       i1 = 0;
       do {
        i14 = i42 + (i1 << 2) | 0;
        HEAP32[i14 >> 2] = HEAPU8[i32 + i1 >> 0] << 24 | HEAP32[i14 >> 2] & 16777215;
        i1 = i1 + 1 | 0;
       } while ((i1 | 0) != (i2 | 0));
       i4 = i15;
       i5 = 3;
       i6 = i16;
       i2 = i17;
       i7 = i18;
       i3 = i19;
       break;
      }
     case 2:
      {
       if ((i2 | 0) != 6) {
        i1 = -857812952;
        break L1;
       }
       i1 = _Stream_Read(i37, i32, 6) | 0;
       if (i1 | 0) break L1;
       i4 = i15;
       i5 = 2;
       i6 = i16;
       i2 = i17;
       i7 = i18;
       i3 = _ExpandRGB(i15, HEAPU8[i21 >> 0] | 0, HEAPU8[i22 >> 0] | 0, HEAPU8[i23 >> 0] | 0) | 0;
       break L10;
      }
     default:
      {
       i1 = -857812951;
       break L1;
      }
     }
    } while (0);
    if ((i40 | 0) == 63) {
     i40 = 0;
     i1 = FUNCTION_TABLE_iii[HEAP32[i30 >> 2] & 127](i37, i2) | 0;
     if (!i1) {
      i4 = i15;
      i5 = i14;
      i6 = i16;
      i2 = i17;
      i7 = i18;
      i3 = i19;
     } else break L1;
    }
    i1 = FUNCTION_TABLE_iii[HEAP32[i30 >> 2] & 127](i37, 4) | 0;
    if (i1 | 0) break L1;
    i1 = _Stream_Read(i37, i38, 8) | 0;
    if (!i1) {
     i15 = i4;
     i14 = i5;
     i16 = i6;
     i17 = i2;
     i18 = i7;
     i19 = i3;
    } else break L1;
   }
   if (i14 << 24 >> 24 != 6) {
    i1 = HEAP32[i35 >> 2] | 0;
    if ((i1 | 0) > 0) do {
     i40 = i1;
     i1 = i1 + -1 | 0;
     i38 = i10 + (Math_imul(i1, i18) | 0) | 0;
     i37 = HEAP32[i43 >> 2] | 0;
     i39 = (HEAP32[i41 >> 2] | 0) + ((Math_imul(i37, i1) | 0) << 2) | 0;
     FUNCTION_TABLE_viiii[i16 & 31](i37, i42, i38 + 1 | 0, i39);
    } while ((i40 | 0) > 1);
   }
   if (i19 >>> 0 > 16777215) i1 = 0; else {
    _ComputeTransparency(i41, i19);
    i1 = 0;
   }
  }
 } while (0);
 STACKTOP = i44;
 return i1 | 0;
}

function _CalcUnlight(i1, i2, i3, i4, i17) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i17 = i17 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i16 = i19 + 16 | 0;
 i18 = i19;
 _SetBrightness(0, i1, i2, i3, i17, 1);
 HEAP32[i16 >> 2] = i1;
 i15 = i16 + 4 | 0;
 HEAP32[i15 >> 2] = i2;
 i14 = i16 + 8 | 0;
 HEAP32[i14 >> 2] = i3;
 i13 = i16 + 12 | 0;
 HEAP8[i13 >> 0] = i4;
 _Queue_Enqueue(1688764, i16);
 if ((HEAP32[422195] | 0) > 0) {
  i11 = i18 + 4 | 0;
  i12 = i18 + 8 | 0;
  i6 = i18 + 12 | 0;
  i8 = 0;
  do {
   i9 = _Queue_Dequeue(1688764) | 0;
   HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   i9 = HEAP32[i16 >> 2] | 0;
   i10 = HEAP32[i15 >> 2] | 0;
   i5 = HEAP32[i14 >> 2] | 0;
   i7 = _World_GetBlock_446(i9, i10, i5) | 0;
   i4 = (i8 | 0) == 0 ? 0 : i7;
   i8 = i8 + 1 | 0;
   i3 = i9 + -1 | 0;
   do if ((i9 | 0) > 0) if ((_CanLightPass(i4, 1) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i3, i10, i5) | 0;
    if ((_CanLightPass(i1, 0) | 0) << 24 >> 24) {
     i2 = _GetBrightness(i3, i10, i5, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i3;
      HEAP32[i11 >> 2] = i10;
      HEAP32[i12 >> 2] = i5;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i2 & 255;
     if (i2 << 24 >> 24) {
      if ((i2 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i3, i10, i5, i17, 1);
       HEAP32[i18 >> 2] = i3;
       HEAP32[i11 >> 2] = i10;
       HEAP32[i12 >> 2] = i5;
       HEAP8[i6 >> 0] = i2;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 1) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i3, i10, i5) | 0, 0) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
   i2 = i9 + 1 | 0;
   do if ((i9 | 0) < (HEAP32[244736] | 0)) if ((_CanLightPass(i4, 0) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i2, i10, i5) | 0;
    if ((_CanLightPass(i1, 1) | 0) << 24 >> 24) {
     i3 = _GetBrightness(i2, i10, i5, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i2;
      HEAP32[i11 >> 2] = i10;
      HEAP32[i12 >> 2] = i5;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i3 & 255;
     if (i3 << 24 >> 24) {
      if ((i3 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i2, i10, i5, i17, 1);
       HEAP32[i18 >> 2] = i2;
       HEAP32[i11 >> 2] = i10;
       HEAP32[i12 >> 2] = i5;
       HEAP8[i6 >> 0] = i3;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 0) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i2, i10, i5) | 0, 1) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
   i3 = i10 + -1 | 0;
   do if ((i10 | 0) > 0) if ((_CanLightPass(i4, 5) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i9, i3, i5) | 0;
    if ((_CanLightPass(i1, 4) | 0) << 24 >> 24) {
     i2 = _GetBrightness(i9, i3, i5, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i9;
      HEAP32[i11 >> 2] = i3;
      HEAP32[i12 >> 2] = i5;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i2 & 255;
     if (i2 << 24 >> 24) {
      if ((i2 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i9, i3, i5, i17, 1);
       HEAP32[i18 >> 2] = i9;
       HEAP32[i11 >> 2] = i3;
       HEAP32[i12 >> 2] = i5;
       HEAP8[i6 >> 0] = i2;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 5) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i9, i3, i5) | 0, 4) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
   i2 = i10 + 1 | 0;
   do if ((i10 | 0) < (HEAP32[244737] | 0)) if ((_CanLightPass(i4, 4) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i9, i2, i5) | 0;
    if ((_CanLightPass(i1, 5) | 0) << 24 >> 24) {
     i3 = _GetBrightness(i9, i2, i5, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i9;
      HEAP32[i11 >> 2] = i2;
      HEAP32[i12 >> 2] = i5;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i3 & 255;
     if (i3 << 24 >> 24) {
      if ((i3 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i9, i2, i5, i17, 1);
       HEAP32[i18 >> 2] = i9;
       HEAP32[i11 >> 2] = i2;
       HEAP32[i12 >> 2] = i5;
       HEAP8[i6 >> 0] = i3;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 4) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i9, i2, i5) | 0, 5) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
   i3 = i5 + -1 | 0;
   do if ((i5 | 0) > 0) if ((_CanLightPass(i4, 3) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i9, i10, i3) | 0;
    if ((_CanLightPass(i1, 2) | 0) << 24 >> 24) {
     i2 = _GetBrightness(i9, i10, i3, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i9;
      HEAP32[i11 >> 2] = i10;
      HEAP32[i12 >> 2] = i3;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i2 & 255;
     if (i2 << 24 >> 24) {
      if ((i2 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i9, i10, i3, i17, 1);
       HEAP32[i18 >> 2] = i9;
       HEAP32[i11 >> 2] = i10;
       HEAP32[i12 >> 2] = i3;
       HEAP8[i6 >> 0] = i2;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 3) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i9, i10, i3) | 0, 2) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
   i3 = i5 + 1 | 0;
   do if ((i5 | 0) < (HEAP32[244738] | 0)) if ((_CanLightPass(i4, 2) | 0) << 24 >> 24) {
    i1 = _World_GetBlock_446(i9, i10, i3) | 0;
    if ((_CanLightPass(i1, 3) | 0) << 24 >> 24) {
     i2 = _GetBrightness(i9, i10, i3, i17) | 0;
     i1 = _GetBlockBrightness(i1, i17) | 0;
     if (i1 << 24 >> 24) {
      HEAP32[i18 >> 2] = i9;
      HEAP32[i11 >> 2] = i10;
      HEAP32[i12 >> 2] = i3;
      HEAP8[i6 >> 0] = i1;
      _Queue_Enqueue(1688728, i18);
     }
     i1 = i2 & 255;
     if (i2 << 24 >> 24) {
      if ((i2 & 255) < (HEAPU8[i13 >> 0] | 0)) {
       _SetBrightness(0, i9, i10, i3, i17, 1);
       HEAP32[i18 >> 2] = i9;
       HEAP32[i11 >> 2] = i10;
       HEAP32[i12 >> 2] = i3;
       HEAP8[i6 >> 0] = i2;
       _Queue_Enqueue(1688764, i18);
       break;
      }
      if ((_CanLightPass(i7, 2) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i9, i10, i3) | 0, 3) | 0) << 24 >> 24) {
       HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
       HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
       HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
       HEAP8[i6 >> 0] = i1 + 255;
       _Queue_Enqueue(1688728, i18);
      }
     }
    }
   } while (0);
  } while ((HEAP32[422195] | 0) > 0);
 }
 _FlushLightQueue(i17, 1);
 STACKTOP = i19;
 return;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i4 = HEAP32[466999] | 0;
 i1 = HEAP32[i1 + -4 >> 2] | 0;
 i2 = i1 & -8;
 i10 = i3 + i2 | 0;
 do if (!(i1 & 1)) {
  i5 = HEAP32[i3 >> 2] | 0;
  if (!(i1 & 3)) return;
  i6 = i3 + (0 - i5) | 0;
  i7 = i5 + i2 | 0;
  if (i6 >>> 0 < i4 >>> 0) return;
  if ((HEAP32[467e3] | 0) == (i6 | 0)) {
   i2 = i10 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   }
   HEAP32[466997] = i7;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i6 + i7 >> 2] = i7;
   return;
  }
  i3 = 3 ? i5 >>> 3 : i5;
  if (i5 >>> 0 < 256) {
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[466995] = HEAP32[466995] & ~(1 << i3);
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (!i5) {
   i8 = i6;
   i9 = i6;
   i2 = i7;
  } else {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 1868284 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[466996] = HEAP32[466996] & ~(1 << i1);
     i8 = i6;
     i9 = i6;
     i2 = i7;
     break;
    }
   } else {
    i9 = i5 + 16 | 0;
    HEAP32[((HEAP32[i9 >> 2] | 0) == (i6 | 0) ? i9 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) {
     i8 = i6;
     i9 = i6;
     i2 = i7;
     break;
    }
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) {
    i8 = i6;
    i9 = i6;
    i2 = i7;
   } else {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
    i8 = i6;
    i9 = i6;
    i2 = i7;
   }
  }
 } else {
  i8 = i3;
  i9 = i3;
 } while (0);
 if (i8 >>> 0 >= i10 >>> 0) return;
 i1 = i10 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 1)) return;
 if (!(i3 & 2)) {
  if ((HEAP32[467001] | 0) == (i10 | 0)) {
   i10 = (HEAP32[466998] | 0) + i2 | 0;
   HEAP32[466998] = i10;
   HEAP32[467001] = i9;
   HEAP32[i9 + 4 >> 2] = i10 | 1;
   if ((i9 | 0) != (HEAP32[467e3] | 0)) return;
   HEAP32[467e3] = 0;
   HEAP32[466997] = 0;
   return;
  }
  if ((HEAP32[467e3] | 0) == (i10 | 0)) {
   i10 = (HEAP32[466997] | 0) + i2 | 0;
   HEAP32[466997] = i10;
   HEAP32[467e3] = i8;
   HEAP32[i9 + 4 >> 2] = i10 | 1;
   HEAP32[i8 + i10 >> 2] = i10;
   return;
  }
  i5 = (i3 & -8) + i2 | 0;
  i4 = 3 ? i3 >>> 3 : i3;
  do if (i3 >>> 0 < 256) {
   i2 = HEAP32[i10 + 8 >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[466995] = HEAP32[466995] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i10 + 24 >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i10 | 0)) {
    i3 = i10 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i10 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i10 + 28 >> 2] | 0;
    i2 = 1868284 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[466996] = HEAP32[466996] & ~(1 << i1);
      break;
     }
    } else {
     i7 = i6 + 16 | 0;
     HEAP32[((HEAP32[i7 >> 2] | 0) == (i10 | 0) ? i7 : i6 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i2 = i10 + 16 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i9 + 4 >> 2] = i5 | 1;
  HEAP32[i8 + i5 >> 2] = i5;
  if ((i9 | 0) == (HEAP32[467e3] | 0)) {
   HEAP32[466997] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i3 & -2;
  HEAP32[i9 + 4 >> 2] = i2 | 1;
  HEAP32[i8 + i2 >> 2] = i2;
  i5 = i2;
 }
 i1 = 3 ? i5 >>> 3 : i5;
 if (i5 >>> 0 < 256) {
  i3 = 1868020 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[466995] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[466995] = i2 | i1;
   i1 = i3 + 8 | 0;
   i2 = i3;
  } else {
   i2 = i3 + 8 | 0;
   i1 = i2;
   i2 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i1 >> 2] = i9;
  HEAP32[i2 + 12 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i2;
  HEAP32[i9 + 12 >> 2] = i3;
  return;
 }
 i1 = 8 ? i5 >>> 8 : i5;
 if (!i1) i4 = 0; else if (i5 >>> 0 > 16777215) i4 = 31; else {
  i8 = i1 + 1048320 | 0;
  i8 = (16 ? i8 >>> 16 : i8) & 8;
  i4 = i1 << i8;
  i7 = i4 + 520192 | 0;
  i7 = (16 ? i7 >>> 16 : i7) & 4;
  i4 = i4 << i7;
  i10 = i4 + 245760 | 0;
  i10 = (16 ? i10 >>> 16 : i10) & 2;
  i4 = i4 << i10;
  i4 = 14 - (i7 | i8 | i10) + (15 ? i4 >>> 15 : i4) | 0;
  i10 = i4 + 7 | 0;
  i4 = (i10 ? i5 >>> i10 : i5) & 1 | i4 << 1;
 }
 i2 = 1868284 + (i4 << 2) | 0;
 HEAP32[i9 + 28 >> 2] = i4;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 i1 = HEAP32[466996] | 0;
 i3 = 1 << i4;
 L112 : do if (!(i1 & i3)) {
  HEAP32[466996] = i1 | i3;
  HEAP32[i2 >> 2] = i9;
  HEAP32[i9 + 24 >> 2] = i2;
  HEAP32[i9 + 12 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i9;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  L115 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (1 ? i4 >>> 1 : i4) | 0);
   while (1) {
    i3 = i1 + 16 + ((31 ? i4 >>> 31 : i4) << 2) | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) break;
    if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i1 = i2;
     break L115;
    } else {
     i4 = i4 << 1;
     i1 = i2;
    }
   }
   HEAP32[i3 >> 2] = i9;
   HEAP32[i9 + 24 >> 2] = i1;
   HEAP32[i9 + 12 >> 2] = i9;
   HEAP32[i9 + 8 >> 2] = i9;
   break L112;
  } while (0);
  i8 = i1 + 8 | 0;
  i10 = HEAP32[i8 >> 2] | 0;
  HEAP32[i10 + 12 >> 2] = i9;
  HEAP32[i8 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i10;
  HEAP32[i9 + 12 >> 2] = i1;
  HEAP32[i9 + 24 >> 2] = 0;
 } while (0);
 i10 = (HEAP32[467003] | 0) + -1 | 0;
 HEAP32[467003] = i10;
 if (i10 | 0) return;
 i1 = 1868436;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[467003] = -1;
 return;
}

function _dispose_chunk(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i2 + i3 | 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i4 = HEAP32[i2 >> 2] | 0;
  if (!(i1 & 3)) return;
  i6 = i2 + (0 - i4) | 0;
  i7 = i4 + i3 | 0;
  if ((HEAP32[467e3] | 0) == (i6 | 0)) {
   i2 = i9 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i8 = i6;
    i2 = i7;
    break;
   }
   HEAP32[466997] = i7;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i9 >> 2] = i7;
   return;
  }
  i3 = 3 ? i4 >>> 3 : i4;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[466995] = HEAP32[466995] & ~(1 << i3);
    i8 = i6;
    i2 = i7;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i6;
    i2 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (!i5) {
   i8 = i6;
   i2 = i7;
  } else {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 1868284 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[466996] = HEAP32[466996] & ~(1 << i1);
     i8 = i6;
     i2 = i7;
     break;
    }
   } else {
    i8 = i5 + 16 | 0;
    HEAP32[((HEAP32[i8 >> 2] | 0) == (i6 | 0) ? i8 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) {
     i8 = i6;
     i2 = i7;
     break;
    }
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) {
    i8 = i6;
    i2 = i7;
   } else {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
    i8 = i6;
    i2 = i7;
   }
  }
 } else {
  i8 = i2;
  i2 = i3;
 } while (0);
 i1 = i9 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 2)) {
  if ((HEAP32[467001] | 0) == (i9 | 0)) {
   i9 = (HEAP32[466998] | 0) + i2 | 0;
   HEAP32[466998] = i9;
   HEAP32[467001] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (HEAP32[467e3] | 0)) return;
   HEAP32[467e3] = 0;
   HEAP32[466997] = 0;
   return;
  }
  if ((HEAP32[467e3] | 0) == (i9 | 0)) {
   i9 = (HEAP32[466997] | 0) + i2 | 0;
   HEAP32[466997] = i9;
   HEAP32[467e3] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i8 + i9 >> 2] = i9;
   return;
  }
  i6 = (i3 & -8) + i2 | 0;
  i4 = 3 ? i3 >>> 3 : i3;
  do if (i3 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[466995] = HEAP32[466995] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i5 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i3 = i9 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i5 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 1868284 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[466996] = HEAP32[466996] & ~(1 << i1);
      break;
     }
    } else {
     i7 = i5 + 16 | 0;
     HEAP32[((HEAP32[i7 >> 2] | 0) == (i9 | 0) ? i7 : i5 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i5;
    i2 = i9 + 16 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i6 | 1;
  HEAP32[i8 + i6 >> 2] = i6;
  if ((i8 | 0) == (HEAP32[467e3] | 0)) {
   HEAP32[466997] = i6;
   return;
  } else i2 = i6;
 } else {
  HEAP32[i1 >> 2] = i3 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i8 + i2 >> 2] = i2;
 }
 i1 = 3 ? i2 >>> 3 : i2;
 if (i2 >>> 0 < 256) {
  i3 = 1868020 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[466995] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[466995] = i2 | i1;
   i1 = i3 + 8 | 0;
   i2 = i3;
  } else {
   i2 = i3 + 8 | 0;
   i1 = i2;
   i2 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i1 >> 2] = i8;
  HEAP32[i2 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i2;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = 8 ? i2 >>> 8 : i2;
 if (!i1) i5 = 0; else if (i2 >>> 0 > 16777215) i5 = 31; else {
  i7 = i1 + 1048320 | 0;
  i7 = (16 ? i7 >>> 16 : i7) & 8;
  i5 = i1 << i7;
  i6 = i5 + 520192 | 0;
  i6 = (16 ? i6 >>> 16 : i6) & 4;
  i5 = i5 << i6;
  i9 = i5 + 245760 | 0;
  i9 = (16 ? i9 >>> 16 : i9) & 2;
  i5 = i5 << i9;
  i5 = 14 - (i6 | i7 | i9) + (15 ? i5 >>> 15 : i5) | 0;
  i9 = i5 + 7 | 0;
  i5 = (i9 ? i2 >>> i9 : i2) & 1 | i5 << 1;
 }
 i3 = 1868284 + (i5 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i5;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i1 = HEAP32[466996] | 0;
 i4 = 1 << i5;
 if (!(i1 & i4)) {
  HEAP32[466996] = i1 | i4;
  HEAP32[i3 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i3;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 L104 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i2 | 0)) {
  i5 = i2 << ((i5 | 0) == 31 ? 0 : 25 - (1 ? i5 >>> 1 : i5) | 0);
  while (1) {
   i4 = i1 + 16 + ((31 ? i5 >>> 31 : i5) << 2) | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if (!i3) break;
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i2 | 0)) {
    i1 = i3;
    break L104;
   } else {
    i5 = i5 << 1;
    i1 = i3;
   }
  }
  HEAP32[i4 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 } while (0);
 i7 = i1 + 8 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 HEAP32[i9 + 12 >> 2] = i8;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i8 + 8 >> 2] = i9;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAP32[i8 + 24 >> 2] = 0;
 return;
}

function _PrepareChunk(i24, i1, i25) {
 i24 = i24 | 0;
 i1 = i1 | 0;
 i25 = i25 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i26 = 0;
 i20 = HEAP32[244733] | 0;
 i21 = i24 + 16 | 0;
 i21 = (i20 | 0) < (i21 | 0) ? i20 : i21;
 i20 = HEAP32[244734] | 0;
 i23 = i1 + 16 | 0;
 i23 = (i20 | 0) < (i23 | 0) ? i20 : i23;
 i20 = HEAP32[244735] | 0;
 i22 = i25 + 16 | 0;
 i22 = (i20 | 0) < (i22 | 0) ? i20 : i22;
 if ((i23 | 0) > (i1 | 0)) {
  i19 = (i22 | 0) > (i25 | 0);
  i20 = (i21 | 0) > (i24 | 0);
  i16 = 0;
  while (1) {
   if (i19) {
    i14 = (i16 * 324 | 0) + 324 | 0;
    i15 = i16 << 8;
    i13 = (i1 | 0) == 0;
    i17 = i25;
    i18 = 0;
    do {
     i2 = i18;
     i18 = i18 + 1 | 0;
     if (i20) {
      i10 = i2 << 4 | i15;
      i9 = (i17 | 0) == 0;
      i8 = i14 + (i18 * 18 | 0) | 1;
      i11 = i24;
      i12 = 0;
      while (1) {
       i4 = HEAP32[414115] | 0;
       i7 = HEAP16[i4 + (i8 << 1) >> 1] | 0;
       i3 = i7 & 65535;
       i2 = HEAP8[1006372 + i3 >> 0] | 0;
       do if (i2 << 24 >> 24 != 4) {
        i5 = (i10 | i12) * 6 | 0;
        if (i2 << 24 >> 24 == 5) {
         _AddSpriteVertices(i7);
         break;
        }
        HEAP32[414116] = i11;
        HEAP32[414117] = i1;
        HEAP32[414118] = i17;
        HEAP8[1868731] = HEAP8[994084 + i3 >> 0] | 0;
        i6 = i3 * 768 | 0;
        i2 = HEAP32[414112] | 0;
        i3 = i2 + i5 | 0;
        do if (!(HEAP8[i3 >> 0] | 0)) i26 = 15; else {
         if (!i11) {
          if ((i1 | 0) < (HEAP32[414106] | 0)) {
           i26 = 15;
           break;
          }
          if ((i7 & -4) << 16 >> 16 == 8 & (i1 | 0) < (HEAP32[414107] | 0)) {
           i26 = 15;
           break;
          }
         } else if (HEAP8[1058596 + (i6 + (HEAPU16[i4 + (i8 + -1 << 1) >> 1] | 0)) >> 0] & 1) {
          i26 = 15;
          break;
         }
         i4 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414110] & 7](i5, i11, i1, i17, i8, i7, 0) | 0) & 255;
         i2 = HEAP32[414112] | 0;
         HEAP8[i2 + i5 >> 0] = i4;
        } while (0);
        if ((i26 | 0) == 15) {
         i26 = 0;
         HEAP8[i3 >> 0] = 0;
        }
        i5 = i5 | 1;
        i3 = i2 + i5 | 0;
        do if (!(HEAP8[i3 >> 0] | 0)) i26 = 22; else {
         if ((i11 | 0) == (HEAP32[244736] | 0)) {
          if ((i1 | 0) < (HEAP32[414106] | 0)) {
           i26 = 22;
           break;
          }
          if ((i7 & -4) << 16 >> 16 == 8 & (i1 | 0) < (HEAP32[414107] | 0)) {
           i26 = 22;
           break;
          }
         } else if (HEAP8[1058596 + (i6 + (HEAPU16[(HEAP32[414115] | 0) + (i8 + 1 << 1) >> 1] | 0)) >> 0] & 2) {
          i26 = 22;
          break;
         }
         i4 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414110] & 7](i5, i11, i1, i17, i8, i7, 1) | 0) & 255;
         i2 = HEAP32[414112] | 0;
         HEAP8[i2 + i5 >> 0] = i4;
        } while (0);
        if ((i26 | 0) == 22) {
         i26 = 0;
         HEAP8[i3 >> 0] = 0;
        }
        i3 = i5 + 1 | 0;
        i2 = i2 + i3 | 0;
        do if (!(HEAP8[i2 >> 0] | 0)) i26 = 29; else {
         if (i9) {
          if ((i1 | 0) < (HEAP32[414106] | 0)) {
           i26 = 29;
           break;
          }
          if ((i7 & -4) << 16 >> 16 == 8 & (i1 | 0) < (HEAP32[414107] | 0)) {
           i26 = 29;
           break;
          }
         } else if (HEAP8[1058596 + (i6 + (HEAPU16[(HEAP32[414115] | 0) + (i8 + -18 << 1) >> 1] | 0)) >> 0] & 4) {
          i26 = 29;
          break;
         }
         i4 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414109] & 7](i3, i11, i1, i17, i8, i7, 2) | 0) & 255;
         i2 = HEAP32[414112] | 0;
         HEAP8[i2 + i3 >> 0] = i4;
        } while (0);
        if ((i26 | 0) == 29) {
         i26 = 0;
         HEAP8[i2 >> 0] = 0;
         i2 = HEAP32[414112] | 0;
        }
        i4 = i5 + 2 | 0;
        i3 = i2 + i4 | 0;
        do if (!(HEAP8[i3 >> 0] | 0)) i26 = 36; else {
         if ((i17 | 0) == (HEAP32[244738] | 0)) {
          if ((i1 | 0) < (HEAP32[414106] | 0)) {
           i26 = 36;
           break;
          }
          if ((i7 & -4) << 16 >> 16 == 8 & (i1 | 0) < (HEAP32[414107] | 0)) {
           i26 = 36;
           break;
          }
         } else if (HEAP8[1058596 + (i6 + (HEAPU16[(HEAP32[414115] | 0) + (i8 + 18 << 1) >> 1] | 0)) >> 0] & 8) {
          i26 = 36;
          break;
         }
         i3 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414109] & 7](i4, i11, i1, i17, i8, i7, 3) | 0) & 255;
         i2 = HEAP32[414112] | 0;
         HEAP8[i2 + i4 >> 0] = i3;
        } while (0);
        if ((i26 | 0) == 36) {
         i26 = 0;
         HEAP8[i3 >> 0] = 0;
        }
        i3 = i5 + 3 | 0;
        i2 = i2 + i3 | 0;
        if (i13 | (HEAP8[i2 >> 0] | 0) == 0) i26 = 40; else if (!(HEAP8[1058596 + (i6 + (HEAPU16[(HEAP32[414115] | 0) + (i8 + -324 << 1) >> 1] | 0)) >> 0] & 16)) {
         i4 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414109] & 7](i3, i11, i1, i17, i8, i7, 4) | 0) & 255;
         i2 = HEAP32[414112] | 0;
         HEAP8[i2 + i3 >> 0] = i4;
        } else i26 = 40;
        if ((i26 | 0) == 40) {
         i26 = 0;
         HEAP8[i2 >> 0] = 0;
         i2 = HEAP32[414112] | 0;
        }
        i3 = i5 + 4 | 0;
        i2 = i2 + i3 | 0;
        if (HEAP8[i2 >> 0] | 0) if (!(HEAP8[1058596 + (i6 + (HEAPU16[(HEAP32[414115] | 0) + (i8 + 324 << 1) >> 1] | 0)) >> 0] & 32)) if ((i7 & -4) << 16 >> 16 == 8) {
         i7 = (FUNCTION_TABLE_iiiiiii[HEAP32[414108] & 3](i3, i11, i1, i17, i8, i7) | 0) & 255;
         HEAP8[(HEAP32[414112] | 0) + i3 >> 0] = i7;
         break;
        } else {
         i7 = (FUNCTION_TABLE_iiiiiiii[HEAP32[414109] & 7](i3, i11, i1, i17, i8, i7, 5) | 0) & 255;
         HEAP8[(HEAP32[414112] | 0) + i3 >> 0] = i7;
         break;
        }
        HEAP8[i2 >> 0] = 0;
       } while (0);
       i11 = i11 + 1 | 0;
       if ((i11 | 0) >= (i21 | 0)) break; else {
        i8 = i8 + 1 | 0;
        i12 = i12 + 1 | 0;
       }
      }
     }
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) < (i22 | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i23 | 0)) break; else i16 = i16 + 1 | 0;
  }
 }
 return;
}

function _Inflate_InflateFast(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0;
 i22 = i23 + 11968 | 0;
 i21 = i23 + 36 | 0;
 i20 = HEAP32[i21 >> 2] | 0;
 i13 = i23 + 24 | 0;
 do if ((HEAP32[i13 >> 2] | 0) >>> 0 > 257) {
  i12 = i23 + 16 | 0;
  i17 = i23 + 8 | 0;
  i16 = i23 + 12 | 0;
  i14 = i23 + 4 | 0;
  i15 = i23 + 8576 | 0;
  i18 = i23 + 10272 | 0;
  i19 = i23 + 11972 | 0;
  i2 = 0;
  i1 = i20;
  do {
   i4 = HEAP32[i12 >> 2] | 0;
   if (!(i2 >>> 0 < 32510 & i4 >>> 0 > 9)) break;
   i5 = HEAP32[i17 >> 2] | 0;
   if (i5 >>> 0 < 16) {
    i8 = 15 - i5 & -8;
    i3 = HEAP32[i14 >> 2] | 0;
    i6 = HEAP32[i16 >> 2] | 0;
    i7 = i5;
    do {
     i4 = i4 + -1 | 0;
     HEAP32[i12 >> 2] = i4;
     i11 = i6;
     i6 = i6 + 1 | 0;
     HEAP32[i16 >> 2] = i6;
     i3 = HEAPU8[i11 >> 0] << i7 | i3;
     HEAP32[i14 >> 2] = i3;
     i7 = i7 + 8 | 0;
     HEAP32[i17 >> 2] = i7;
    } while (i7 >>> 0 < 16);
    i5 = i5 + 8 + i8 | 0;
   } else i3 = HEAP32[i14 >> 2] | 0;
   i11 = HEAP16[i23 + 8576 + ((i3 & 511) << 1) >> 1] | 0;
   i4 = i11 << 16 >> 16;
   if (i11 << 16 >> 16 > -1) {
    i11 = 9 ? i4 >> 9 : i4;
    HEAP32[i14 >> 2] = i11 ? i3 >>> i11 : i3;
    HEAP32[i17 >> 2] = i5 - i11;
    i3 = i4 & 511;
   } else i3 = _Huffman_UNSAFE_Decode_Slow(i23, i15) | 0;
   if (i3 >>> 0 < 257) {
    if ((i3 | 0) == 256) {
     i24 = 15;
     break;
    }
    HEAP8[i23 + 11968 + i1 >> 0] = i3;
    i3 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
    HEAP32[i13 >> 2] = i3;
    i2 = i2 + 1 | 0;
    i1 = i1 + 1 | 0;
   } else {
    i9 = i3 + -257 | 0;
    i10 = HEAPU8[1904 + i9 >> 0] | 0;
    i4 = HEAP32[i17 >> 2] | 0;
    if (i4 >>> 0 < i10 >>> 0) {
     i5 = i10 + -1 - i4 & -8;
     i6 = HEAP32[i12 >> 2] | 0;
     i7 = HEAP32[i16 >> 2] | 0;
     i8 = i4;
     i3 = HEAP32[i14 >> 2] | 0;
     do {
      i6 = i6 + -1 | 0;
      HEAP32[i12 >> 2] = i6;
      i11 = i7;
      i7 = i7 + 1 | 0;
      HEAP32[i16 >> 2] = i7;
      i3 = HEAPU8[i11 >> 0] << i8 | i3;
      HEAP32[i14 >> 2] = i3;
      i8 = i8 + 8 | 0;
      HEAP32[i17 >> 2] = i8;
     } while (i8 >>> 0 < i10 >>> 0);
     i4 = i4 + 8 + i5 | 0;
    } else i3 = HEAP32[i14 >> 2] | 0;
    i11 = (i3 & (1 << i10) + -1) + (HEAPU16[1936 + (i9 << 1) >> 1] | 0) | 0;
    i5 = i10 ? i3 >>> i10 : i3;
    HEAP32[i14 >> 2] = i5;
    i3 = i4 - i10 | 0;
    HEAP32[i17 >> 2] = i3;
    if (i3 >>> 0 < 16) {
     i7 = i4 + 8 + (i10 + 15 - i4 & -8) | 0;
     i4 = HEAP32[i12 >> 2] | 0;
     i6 = HEAP32[i16 >> 2] | 0;
     do {
      i4 = i4 + -1 | 0;
      HEAP32[i12 >> 2] = i4;
      i9 = i6;
      i6 = i6 + 1 | 0;
      HEAP32[i16 >> 2] = i6;
      i5 = HEAPU8[i9 >> 0] << i3 | i5;
      HEAP32[i14 >> 2] = i5;
      i3 = i3 + 8 | 0;
      HEAP32[i17 >> 2] = i3;
     } while (i3 >>> 0 < 16);
     i3 = i7 - i10 | 0;
    }
    i10 = HEAP16[i23 + 10272 + ((i5 & 511) << 1) >> 1] | 0;
    i4 = i10 << 16 >> 16;
    if (i10 << 16 >> 16 > -1) {
     i8 = 9 ? i4 >> 9 : i4;
     HEAP32[i14 >> 2] = i8 ? i5 >>> i8 : i5;
     i8 = i3 - i8 | 0;
     HEAP32[i17 >> 2] = i8;
     i10 = i4 & 511;
    } else {
     i10 = _Huffman_UNSAFE_Decode_Slow(i23, i18) | 0;
     i8 = HEAP32[i17 >> 2] | 0;
    }
    i9 = HEAPU8[2e3 + i10 >> 0] | 0;
    if (i8 >>> 0 < i9 >>> 0) {
     i4 = i9 + -1 - i8 & -8;
     i5 = HEAP32[i12 >> 2] | 0;
     i6 = HEAP32[i16 >> 2] | 0;
     i7 = i8;
     i3 = HEAP32[i14 >> 2] | 0;
     do {
      i5 = i5 + -1 | 0;
      HEAP32[i12 >> 2] = i5;
      i25 = i6;
      i6 = i6 + 1 | 0;
      HEAP32[i16 >> 2] = i6;
      i3 = HEAPU8[i25 >> 0] << i7 | i3;
      HEAP32[i14 >> 2] = i3;
      i7 = i7 + 8 | 0;
      HEAP32[i17 >> 2] = i7;
     } while (i7 >>> 0 < i9 >>> 0);
     i4 = i8 + 8 + i4 | 0;
    } else {
     i4 = i8;
     i3 = HEAP32[i14 >> 2] | 0;
    }
    i10 = HEAPU16[2032 + (i10 << 1) >> 1] | 0;
    HEAP32[i14 >> 2] = i9 ? i3 >>> i9 : i3;
    HEAP32[i17 >> 2] = i4 - i9;
    i4 = i1 - i10 - (i3 & (1 << i9) + 32767) | 0;
    i3 = i4 & 32767;
    i10 = i11 + i1 | 0;
    if (i10 >>> 0 < 32768 & i1 >>> 0 >= i3 >>> 0) {
     i9 = i23 + 11968 + i3 | 0;
     i4 = i23 + 11968 + i1 | 0;
     i6 = i11 & -4;
     if (!i6) {
      i3 = 0;
      i1 = i9;
     } else {
      i7 = i6 + -1 & -4;
      i8 = i7 + i3 | 0;
      i5 = i19 + (i1 + i7) | 0;
      i3 = 0;
      i1 = i9;
      while (1) {
       HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
       HEAP8[i4 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
       HEAP8[i4 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
       HEAP8[i4 + 3 >> 0] = HEAP8[i1 + 3 >> 0] | 0;
       i3 = i3 + 4 | 0;
       if (i3 >>> 0 >= i6 >>> 0) break; else {
        i4 = i4 + 4 | 0;
        i1 = i1 + 4 | 0;
       }
      }
      i4 = i5;
      i3 = i7 + 4 | 0;
      i1 = i19 + i8 | 0;
     }
     if (i3 >>> 0 < i11 >>> 0) while (1) {
      HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == (i11 | 0)) break; else {
       i4 = i4 + 1 | 0;
       i1 = i1 + 1 | 0;
      }
     }
    } else if (i11 | 0) {
     i3 = 0;
     do {
      HEAP8[(i3 + i1 & 32767) + (i23 + 11968) >> 0] = HEAP8[(i3 + i4 & 32767) + (i23 + 11968) >> 0] | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i11 | 0));
    }
    i3 = (HEAP32[i13 >> 2] | 0) - i11 | 0;
    HEAP32[i13 >> 2] = i3;
    i2 = i11 + i2 | 0;
    i1 = i10;
   }
   i1 = i1 & 32767;
  } while (i3 >>> 0 > 257);
  if ((i24 | 0) == 15) HEAP8[i23 >> 0] = (HEAP8[i23 + 1 >> 0] | 0) == 0 ? 0 : 13;
  HEAP32[i21 >> 2] = i1;
  if (i2 | 0) if ((i2 + i20 | 0) >>> 0 < 32768) {
   i25 = i23 + 20 | 0;
   _Mem_Copy(HEAP32[i25 >> 2] | 0, i23 + 11968 + i20 | 0, i2) | 0;
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + i2;
   break;
  } else {
   i24 = 32768 - i20 | 0;
   i25 = i23 + 20 | 0;
   _Mem_Copy(HEAP32[i25 >> 2] | 0, i23 + 11968 + i20 | 0, i24) | 0;
   i23 = (HEAP32[i25 >> 2] | 0) + i24 | 0;
   HEAP32[i25 >> 2] = i23;
   i24 = i2 - i24 | 0;
   _Mem_Copy(i23, i22, i24) | 0;
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + i24;
   break;
  }
 } while (0);
 return;
}

function _NotchyGen_Generate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 switch (HEAP32[422260] | 0) {
 case 0:
  {
   _NotchyGen_CreateHeightmap();
   HEAP32[422260] = (HEAP32[422260] | 0) + 1;
   i1 = _Stopwatch_Measure() | 0;
   i2 = getTempRet0() | 0;
   i4 = 978280;
   if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
    i4 = 978280;
    HEAP32[i4 >> 2] = i1;
    HEAP32[i4 + 4 >> 2] = i2;
   } else i3 = 4;
   break;
  }
 case 1:
  {
   i3 = 4;
   break;
  }
 case 2:
  {
   i3 = 6;
   break;
  }
 case 3:
  {
   i3 = 8;
   break;
  }
 case 4:
  {
   i3 = 10;
   break;
  }
 case 5:
  {
   i3 = 12;
   break;
  }
 case 6:
  {
   i3 = 14;
   break;
  }
 case 7:
  {
   i3 = 16;
   break;
  }
 case 8:
  {
   i3 = 18;
   break;
  }
 case 9:
  {
   i3 = 20;
   break;
  }
 case 10:
  {
   i3 = 22;
   break;
  }
 case 11:
  {
   i3 = 24;
   break;
  }
 case 12:
  {
   i3 = 26;
   break;
  }
 default:
  i3 = 28;
 }
 if ((i3 | 0) == 4) {
  _NotchyGen_CreateStrata();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 6;
 }
 if ((i3 | 0) == 6) {
  _NotchyGen_CarveCaves();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 8;
 }
 if ((i3 | 0) == 8) {
  _NotchyGen_CarveOreVeins(.8999999761581421, 32922, 16);
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 10;
 }
 if ((i3 | 0) == 10) {
  _NotchyGen_CarveOreVeins(.699999988079071, 32939, 15);
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 12;
 }
 if ((i3 | 0) == 12) {
  _NotchyGen_CarveOreVeins(.5, 32956, 14);
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 14;
 }
 if ((i3 | 0) == 14) {
  _NotchyGen_FloodFillWaterBorders();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 16;
 }
 if ((i3 | 0) == 16) {
  _NotchyGen_FloodFillWater();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 18;
 }
 if ((i3 | 0) == 18) {
  _NotchyGen_FloodFillLava();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 20;
 }
 if ((i3 | 0) == 20) {
  _NotchyGen_CreateSurfaceLayer();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 22;
 }
 if ((i3 | 0) == 22) {
  _NotchyGen_PlantFlowers();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 24;
 }
 if ((i3 | 0) == 24) {
  _NotchyGen_PlantMushrooms();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 26;
 }
 if ((i3 | 0) == 26) {
  _NotchyGen_PlantTrees();
  HEAP32[422260] = (HEAP32[422260] | 0) + 1;
  i1 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i4 = 978280;
  if ((_Stopwatch_ElapsedMS(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, i1, i2) | 0) > 100) {
   i4 = 978280;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
  } else i3 = 28;
 }
 if ((i3 | 0) == 28) {
  _Mem_Free(HEAP32[422261] | 0);
  HEAP32[422261] = 0;
  HEAP8[1868762] = 1;
 }
 return;
}

function _EnvRenderer_RenderWeather(d2) {
 d2 = +d2;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 i18 = i21;
 i19 = i21 + 972 | 0;
 i14 = HEAP32[466934] | 0;
 if (i14 | 0) {
  if (!(HEAP32[418844] | 0)) _InitWeatherHeightmap();
  if (!(HEAP32[418847] | 0)) {
   i20 = _Gfx_CreateDynamicVb(1, 648) | 0;
   HEAP32[418847] = i20;
  }
  _IVec3_Floor(i19, 1656632);
  i20 = i19 + 4 | 0;
  i1 = HEAP32[i20 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[418855] | 0) ? (HEAP32[i19 >> 2] | 0) == (HEAP32[418854] | 0) : 0) i3 = (HEAP32[i19 + 8 >> 2] | 0) != (HEAP32[418856] | 0); else i3 = 1;
  HEAP32[418854] = HEAP32[i19 >> 2];
  HEAP32[418855] = HEAP32[i19 + 4 >> 2];
  HEAP32[418856] = HEAP32[i19 + 8 >> 2];
  i8 = i1 + 64 | 0;
  i7 = HEAP32[244734] | 0;
  HEAP32[i20 >> 2] = (i7 | 0) > (i8 | 0) ? i7 : i8;
  d16 = +HEAPF32[418863] + d2;
  HEAPF32[418863] = d16;
  i8 = (i14 | 0) == 1;
  i7 = i8 & (i3 | d16 >= .25);
  i17 = i19 + 8 | 0;
  i5 = -4;
  i1 = 0;
  do {
   i6 = -4;
   do {
    i3 = (HEAP32[i19 >> 2] | 0) + i5 | 0;
    i4 = (HEAP32[i17 >> 2] | 0) + i6 | 0;
    d2 = +_GetRainHeight(i3, i4);
    if (!(d2 >= +(HEAP32[i20 >> 2] | 0))) {
     if (i7) _Particles_RainSnowEffect(+(i3 | 0), d2, +(i4 | 0));
     HEAP32[i18 + (i1 * 12 | 0) >> 2] = i5;
     HEAPF32[i18 + (i1 * 12 | 0) + 8 >> 2] = d2;
     HEAP32[i18 + (i1 * 12 | 0) + 4 >> 2] = i6;
     i1 = i1 + 1 | 0;
    }
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 5);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 5);
  _Gfx_BindTexture(i8 ? HEAP32[418859] | 0 : HEAP32[418860] | 0);
  if (i7) HEAPF32[418863] = 0.0;
  if (i1 | 0) {
   _Gfx_SetAlphaTest(0);
   _Gfx_SetDepthWrite(0);
   _Gfx_SetVertexFormat(1);
   i15 = i1 << 3;
   i3 = _Gfx_LockDynamicVb(HEAP32[418847] | 0, 1, i15) | 0;
   d16 = (i8 ? 1.0 : .20000000298023224) * +HEAPF32[466932] * +HEAPF64[122280];
   d13 = i8 ? 0.0 : .25;
   if ((i1 | 0) > 0) {
    i6 = (i14 | 0) == 2;
    i7 = HEAP32[466942] | 0;
    i8 = 0;
    while (1) {
     i4 = HEAP32[i18 + (i8 * 12 | 0) >> 2] | 0;
     d2 = +HEAPF32[i18 + (i8 * 12 | 0) + 8 >> 2];
     i5 = HEAP32[i18 + (i8 * 12 | 0) + 4 >> 2] | 0;
     d9 = +(HEAP32[i20 >> 2] | 0) - d2;
     d12 = +_CalcRainAlphaAt(+((Math_imul(i5, i5) | 0) + (Math_imul(i4, i4) | 0) | 0));
     d12 = d12 < 0.0 ? 0.0 : d12;
     i7 = (~~(d12 > 255.0 ? 255.0 : d12) & 255) << 24 | i7 & 16777215;
     i4 = (HEAP32[i19 >> 2] | 0) + i4 | 0;
     i5 = (HEAP32[i17 >> 2] | 0) + i5 | 0;
     if (i6) {
      _Random_Seed(978224, (i5 * 1217 | 0) + i4 & 2147483647);
      d11 = +HEAPF32[466932] * +HEAPF64[122280] * .5;
      d10 = d11 * (+_Random_Float(978224) * 2.0 + -1.0);
      d11 = d11 * (+_Random_Float(978224) * 2.0 + -1.0);
      d12 = d16 * (+_Random_Float(978224) * .75 + .25);
     } else {
      d10 = 0.0;
      d11 = 0.0;
      d12 = d16;
     }
     d23 = +(i5 & 1 | 0) * .5 + d12 - +(i4 & 15 | 0) * .0625;
     d12 = d2 / 6.0 + d23;
     d24 = d2 + d9;
     d23 = d24 / 6.0 + d23;
     d22 = +(i4 | 0);
     d25 = +(i5 | 0);
     d26 = +(i4 + 1 | 0);
     d9 = +(i5 + 1 | 0);
     HEAPF32[i3 >> 2] = d22;
     HEAPF32[i3 + 4 >> 2] = d2;
     HEAPF32[i3 + 8 >> 2] = d25;
     HEAP32[i3 + 12 >> 2] = i7;
     HEAPF32[i3 + 16 >> 2] = d10;
     d27 = d13 + d12;
     HEAPF32[i3 + 20 >> 2] = d27;
     HEAPF32[i3 + 24 >> 2] = d22;
     HEAPF32[i3 + 28 >> 2] = d24;
     HEAPF32[i3 + 32 >> 2] = d25;
     HEAP32[i3 + 36 >> 2] = i7;
     HEAPF32[i3 + 40 >> 2] = d10;
     d28 = d13 + d23;
     HEAPF32[i3 + 44 >> 2] = d28;
     HEAPF32[i3 + 48 >> 2] = d26;
     HEAPF32[i3 + 52 >> 2] = d24;
     HEAPF32[i3 + 56 >> 2] = d9;
     HEAP32[i3 + 60 >> 2] = i7;
     d10 = d10 + 1.0;
     HEAPF32[i3 + 64 >> 2] = d10;
     HEAPF32[i3 + 68 >> 2] = d28;
     HEAPF32[i3 + 72 >> 2] = d26;
     HEAPF32[i3 + 76 >> 2] = d2;
     HEAPF32[i3 + 80 >> 2] = d9;
     HEAP32[i3 + 84 >> 2] = i7;
     HEAPF32[i3 + 88 >> 2] = d10;
     HEAPF32[i3 + 92 >> 2] = d27;
     HEAPF32[i3 + 96 >> 2] = d26;
     HEAPF32[i3 + 100 >> 2] = d2;
     HEAPF32[i3 + 104 >> 2] = d25;
     HEAP32[i3 + 108 >> 2] = i7;
     d10 = d11 + 1.0;
     HEAPF32[i3 + 112 >> 2] = d10;
     HEAPF32[i3 + 116 >> 2] = d12;
     HEAPF32[i3 + 120 >> 2] = d26;
     HEAPF32[i3 + 124 >> 2] = d24;
     HEAPF32[i3 + 128 >> 2] = d25;
     HEAP32[i3 + 132 >> 2] = i7;
     HEAPF32[i3 + 136 >> 2] = d10;
     HEAPF32[i3 + 140 >> 2] = d23;
     HEAPF32[i3 + 144 >> 2] = d22;
     HEAPF32[i3 + 148 >> 2] = d24;
     HEAPF32[i3 + 152 >> 2] = d9;
     HEAP32[i3 + 156 >> 2] = i7;
     HEAPF32[i3 + 160 >> 2] = d11;
     HEAPF32[i3 + 164 >> 2] = d23;
     HEAPF32[i3 + 168 >> 2] = d22;
     HEAPF32[i3 + 172 >> 2] = d2;
     HEAPF32[i3 + 176 >> 2] = d9;
     HEAP32[i3 + 180 >> 2] = i7;
     HEAPF32[i3 + 184 >> 2] = d11;
     HEAPF32[i3 + 188 >> 2] = d12;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i1 | 0)) break; else i3 = i3 + 192 | 0;
    }
   }
   _Gfx_UnlockDynamicVb(HEAP32[418847] | 0);
   _Gfx_DrawVb_IndexedTris(i15);
   _Gfx_SetDepthWrite(1);
   _Gfx_SetAlphaTest(0);
  }
 }
 STACKTOP = i21;
 return;
}

function _Cw_Callback_5(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, d16 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i15;
 i4 = HEAP16[934359] | 0;
 do if (_String_CaselessEqualsConst((HEAP32[HEAP32[HEAP32[i14 >> 2] >> 2] >> 2] | 0) + 8 | 0, 31213) | 0) if (_String_CaselessEqualsConst((HEAP32[HEAP32[HEAP32[HEAP32[i14 >> 2] >> 2] >> 2] >> 2] | 0) + 8 | 0, 31217) | 0) {
  if (_String_CaselessEqualsConst((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) + 8 | 0, 47250) | 0) {
   i1 = i14 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 35631) | 0) {
    i14 = (_NbtTag_U16(i14) | 0) & 65535;
    HEAP32[422201] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35609) | 0) {
    i14 = (_NbtTag_U16(i14) | 0) & 65535;
    HEAP32[422202] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35599) | 0) {
    i14 = (_NbtTag_U16(i14) | 0) & 65535;
    HEAP32[422203] = i14;
    break;
   }
  }
  i13 = (_String_CaselessEqualsConst((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) + 8 | 0, 47148) | 0) == 0;
  if (!(i13 | (HEAP8[1868756] | 0) == 0)) {
   i1 = i14 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 31226) | 0) {
    i14 = (_NbtTag_U8(i14) | 0) & 255;
    HEAP16[934359] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31229) | 0) {
    i14 = _NbtTag_U16(i14) | 0;
    HEAP16[934359] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31233) | 0) {
    i14 = _NbtTag_U8(i14) | 0;
    HEAP8[1000996 + (i4 & 65535) >> 0] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 50967) | 0) {
    d16 = +_NbtTag_F32(i14);
    HEAPF32[1002532 + ((i4 & 65535) << 2) >> 2] = d16;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31245) | 0) {
    i14 = (_NbtTag_U8(i14) | 0) << 24 >> 24 == 0 & 1;
    HEAP8[993316 + (i4 & 65535) >> 0] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31260) | 0) {
    i14 = _Block_ReadBrightness(_NbtTag_U8(i14) | 0) | 0;
    HEAP8[994084 + (i4 & 65535) >> 0] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31271) | 0) {
    i14 = _NbtTag_U8(i14) | 0;
    HEAP8[1006372 + (i4 & 65535) >> 0] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31281) | 0) {
    i14 = _NbtTag_U8(i14) | 0;
    HEAP8[1010212 + (i4 & 65535) >> 0] = i14;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31287) | 0) {
    _NbtTag_String(i2, i14);
    _Block_SetName(i4, i2);
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31292) | 0) {
    i13 = _NbtTag_U8_Array(i14, 6) | 0;
    if (!i13) break;
    i12 = HEAP8[i13 >> 0] | 0;
    i11 = (i4 & 65535) * 6 | 0;
    i6 = 1047844 + (i11 + 5 << 1) | 0;
    HEAP16[i6 >> 1] = i12 & 255;
    i1 = HEAP8[i13 + 1 >> 0] | 0;
    i7 = 1047844 + (i11 + 4 << 1) | 0;
    HEAP16[i7 >> 1] = i1 & 255;
    i2 = HEAP8[i13 + 2 >> 0] | 0;
    i8 = 1047844 + (i11 << 1) | 0;
    HEAP16[i8 >> 1] = i2 & 255;
    i3 = HEAP8[i13 + 3 >> 0] | 0;
    i9 = 1047844 + ((i11 | 1) << 1) | 0;
    HEAP16[i9 >> 1] = i3 & 255;
    i4 = HEAP8[i13 + 4 >> 0] | 0;
    i10 = 1047844 + (i11 + 2 << 1) | 0;
    HEAP16[i10 >> 1] = i4 & 255;
    i5 = HEAP8[i13 + 5 >> 0] | 0;
    i11 = 1047844 + (i11 + 3 << 1) | 0;
    HEAP16[i11 >> 1] = i5 & 255;
    if ((HEAP32[i14 + 16 >> 2] | 0) >>> 0 <= 11) break;
    HEAP16[i6 >> 1] = HEAPU8[i13 + 6 >> 0] << 8 | i12 & 255;
    HEAP16[i7 >> 1] = HEAPU8[i13 + 7 >> 0] << 8 | i1 & 255;
    HEAP16[i8 >> 1] = HEAPU8[i13 + 8 >> 0] << 8 | i2 & 255;
    HEAP16[i9 >> 1] = HEAPU8[i13 + 9 >> 0] << 8 | i3 & 255;
    HEAP16[i10 >> 1] = HEAPU8[i13 + 10 >> 0] << 8 | i4 & 255;
    HEAP16[i11 >> 1] = HEAPU8[i13 + 11 >> 0] << 8 | i5 & 255;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31301) | 0) {
    i13 = _NbtTag_U8(i14) | 0;
    i14 = i4 & 65535;
    HEAP8[1007140 + i14 >> 0] = i13;
    HEAP8[1007908 + i14 >> 0] = i13 << 24 >> 24 == 6 ? 4 : i13;
    break;
   }
   if (!(_String_CaselessEqualsConst(i1, 51246) | 0)) {
    if (!(_String_CaselessEqualsConst(i1, 31311) | 0)) break;
    i1 = _NbtTag_U8_Array(i14, 6) | 0;
    if (!i1) break;
    i14 = i4 & 65535;
    HEAPF32[1010980 + (i14 * 12 | 0) >> 2] = +(HEAP8[i1 >> 0] | 0) * .0625;
    HEAPF32[1020196 + (i14 * 12 | 0) >> 2] = +(HEAP8[i1 + 3 >> 0] | 0) * .0625;
    HEAPF32[1010980 + (i14 * 12 | 0) + 4 >> 2] = +(HEAP8[i1 + 1 >> 0] | 0) * .0625;
    HEAPF32[1020196 + (i14 * 12 | 0) + 4 >> 2] = +(HEAP8[i1 + 4 >> 0] | 0) * .0625;
    HEAPF32[1010980 + (i14 * 12 | 0) + 8 >> 2] = +(HEAP8[i1 + 2 >> 0] | 0) * .0625;
    HEAPF32[1020196 + (i14 * 12 | 0) + 8 >> 2] = +(HEAP8[i1 + 5 >> 0] | 0) * .0625;
    break;
   }
   i3 = _NbtTag_U8_Array(i14, 4) | 0;
   if (i3 | 0) {
    i2 = i4 & 65535;
    i1 = 997924 + (i2 << 2) | 0;
    HEAPF32[i1 >> 2] = +((HEAPU8[i3 >> 0] | 0) + 1 | 0) * .0078125;
    switch (HEAP8[i3 >> 0] | 0) {
    case -1:
    case 0:
     {
      HEAPF32[i1 >> 2] = 0.0;
      break;
     }
    default:
     {}
    }
    HEAP32[994852 + (i2 << 2) >> 2] = HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 1 >> 0] | HEAPU8[i3 + 3 >> 0] << 16 | -16777216;
   }
  }
 } while (0);
 STACKTOP = i15;
 return;
}

function _NormalBuilder_RenderBlock(i1, i19, i20, i21) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0;
 i4 = HEAPU16[934358] | 0;
 i2 = HEAP8[1006372 + i4 >> 0] | 0;
 if (i2 << 24 >> 24 == 5) _Builder_DrawSprite(i19, i20, i21); else {
  i17 = HEAP32[414112] | 0;
  i3 = HEAP8[i17 + i1 >> 0] | 0;
  i6 = i3 & 255;
  i23 = HEAP8[i17 + (i1 + 1) >> 0] | 0;
  i8 = i23 & 255;
  i22 = HEAP8[i17 + (i1 + 2) >> 0] | 0;
  i10 = i22 & 255;
  i15 = HEAP8[i17 + (i1 + 3) >> 0] | 0;
  i12 = i15 & 255;
  i16 = HEAP8[i17 + (i1 + 4) >> 0] | 0;
  i14 = i16 & 255;
  i17 = HEAP8[i17 + (i1 + 5) >> 0] | 0;
  i18 = i17 & 255;
  i5 = i23 << 24 >> 24 == 0;
  i7 = i22 << 24 >> 24 == 0;
  i9 = i15 << 24 >> 24 == 0;
  i11 = i16 << 24 >> 24 == 0;
  i13 = i17 << 24 >> 24 == 0;
  if ((i23 | i3 | i22 | i15 | i16 | i17) << 24 >> 24) {
   i16 = HEAP8[994084 + i4 >> 0] | 0;
   i17 = (i2 << 24 >> 24 == 3 & 1) << 9;
   i15 = HEAPU8[1005604 + i4 >> 0] | 0;
   i23 = 1010980 + (i4 * 12 | 0) | 0;
   HEAP32[416818] = HEAP32[i23 >> 2];
   HEAP32[416819] = HEAP32[i23 + 4 >> 2];
   HEAP32[416820] = HEAP32[i23 + 8 >> 2];
   HEAPF32[416819] = 1.0 - +HEAPF32[416819];
   i23 = 1020196 + (i4 * 12 | 0) | 0;
   HEAP32[416821] = HEAP32[i23 >> 2];
   HEAP32[416822] = HEAP32[i23 + 4 >> 2];
   HEAP32[416823] = HEAP32[i23 + 8 >> 2];
   HEAPF32[416822] = 1.0 - +HEAPF32[416822];
   d24 = +HEAPF32[1029412 + (i4 * 12 | 0) + 4 >> 2];
   d30 = +HEAPF32[1029412 + (i4 * 12 | 0) + 8 >> 2];
   d29 = +HEAPF32[1038628 + (i4 * 12 | 0) >> 2];
   d27 = +HEAPF32[1038628 + (i4 * 12 | 0) + 4 >> 2];
   d25 = +HEAPF32[1038628 + (i4 * 12 | 0) + 8 >> 2];
   d28 = +(i19 | 0);
   HEAPF32[416824] = +HEAPF32[1029412 + (i4 * 12 | 0) >> 2] + d28;
   d26 = +(i20 | 0);
   HEAPF32[416825] = d24 + d26;
   d24 = +(i21 | 0);
   HEAPF32[416826] = d30 + d24;
   HEAPF32[416827] = d29 + d28;
   HEAPF32[416828] = d27 + d26;
   HEAPF32[416829] = d25 + d24;
   HEAP8[1667264] = HEAP8[1008676 + i4 >> 0] | 0;
   HEAP32[416817] = HEAP32[994852 + (i4 << 2) >> 2];
   if (i3 << 24 >> 24) {
    i2 = HEAP16[1047844 + (i4 * 6 << 1) >> 1] | 0;
    i1 = i15 & 1;
    i3 = i2 & 65535;
    i23 = HEAP32[460410] | 0;
    i3 = (i23 ? i3 >>> i23 : i3) + i17 | 0;
    do if (!(i16 << 24 >> 24)) if ((i1 | 0) > (i19 | 0)) {
     i1 = HEAP32[466943] | 0;
     break;
    } else {
     i1 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i19 - i1 | 0, i20, i21) | 0;
     break;
    } else i1 = -1; while (0);
    _Drawer_XMin(i6, i1, i2, 110944 + (i3 << 5) | 0);
   }
   if (!i5) {
    i2 = HEAP16[1047844 + (((HEAPU16[934358] | 0) * 6 | 1) << 1) >> 1] | 0;
    i1 = (1 ? i15 >>> 1 : i15) & 1;
    i3 = i2 & 65535;
    i23 = HEAP32[460410] | 0;
    i3 = (i23 ? i3 >>> i23 : i3) + i17 | 0;
    do if (!(i16 << 24 >> 24)) if (((HEAP32[244736] | 0) - i1 | 0) < (i19 | 0)) {
     i1 = HEAP32[466943] | 0;
     break;
    } else {
     i1 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i1 + i19 | 0, i20, i21) | 0;
     break;
    } else i1 = -1; while (0);
    _Drawer_XMax(i8, i1, i2, 110944 + (i3 << 5) + 4 | 0);
   }
   if (!i7) {
    i2 = HEAP16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 2 << 1) >> 1] | 0;
    i1 = (2 ? i15 >>> 2 : i15) & 1;
    i3 = i2 & 65535;
    i23 = HEAP32[460410] | 0;
    i3 = (i23 ? i3 >>> i23 : i3) + i17 | 0;
    do if (!(i16 << 24 >> 24)) if ((i1 | 0) > (i21 | 0)) {
     i1 = HEAP32[466944] | 0;
     break;
    } else {
     i1 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i19, i20, i21 - i1 | 0) | 0;
     break;
    } else i1 = -1; while (0);
    _Drawer_ZMin(i10, i1, i2, 110944 + (i3 << 5) + 8 | 0);
   }
   if (!i9) {
    i2 = HEAP16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 3 << 1) >> 1] | 0;
    i1 = (3 ? i15 >>> 3 : i15) & 1;
    i3 = i2 & 65535;
    i23 = HEAP32[460410] | 0;
    i3 = (i23 ? i3 >>> i23 : i3) + i17 | 0;
    do if (!(i16 << 24 >> 24)) if (((HEAP32[244738] | 0) - i1 | 0) < (i21 | 0)) {
     i1 = HEAP32[466944] | 0;
     break;
    } else {
     i1 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i19, i20, i1 + i21 | 0) | 0;
     break;
    } else i1 = -1; while (0);
    _Drawer_ZMax(i12, i1, i2, 110944 + (i3 << 5) + 12 | 0);
   }
   if (!i11) {
    i1 = HEAP16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 4 << 1) >> 1] | 0;
    i4 = i1 & 65535;
    i2 = HEAP32[460410] | 0;
    if (!(i16 << 24 >> 24)) i3 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i19, i20 - ((4 ? i15 >>> 4 : i15) & 1) | 0, i21) | 0; else i3 = -1;
    _Drawer_YMin(i14, i3, i1, 110944 + ((i2 ? i4 >>> i2 : i4) + i17 << 5) + 16 | 0);
   }
   if (!i13) {
    i2 = HEAP16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 5 << 1) >> 1] | 0;
    i4 = i2 & 65535;
    i3 = HEAP32[460410] | 0;
    if (!(i16 << 24 >> 24)) i1 = FUNCTION_TABLE_iiii[HEAP32[467175] & 63](i19, ((5 ? i15 >>> 5 : i15) & 1) + i20 | 0, i21) | 0; else i1 = -1;
    _Drawer_YMax(i18, i1, i2, 110944 + ((i3 ? i4 >>> i3 : i4) + i17 << 5) + 20 | 0);
   }
  }
 }
 return;
}

function _Builder_DrawSprite(i10, i11, i12) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 d4 = +(i10 | 0);
 d6 = +(i11 | 0);
 d7 = +(i12 | 0);
 d3 = d4 + .15625;
 d9 = d7 + .15625;
 d4 = d4 + .84375;
 d8 = d6 + 1.0;
 d7 = d7 + .84375;
 i2 = HEAPU16[934358] | 0;
 i5 = HEAPU16[1047844 + ((i2 * 6 | 1) << 1) >> 1] | 0;
 d13 = +HEAPF32[460411];
 d14 = d13 * +(HEAP32[460409] & i5 | 0);
 d13 = d13 * .9993749856948853 + d14;
 i1 = HEAP8[1010212 + i2 >> 0] | 0;
 if ((i1 & -2) << 24 >> 24 == 6) {
  _Random_Seed(978192, (i12 * 1217 | 0) + i10 & 2147483647);
  d17 = +(_Random_Range_86(-3) | 0) * .0625;
  d16 = +(_Random_Range_86(0) | 0) * .0625;
  d15 = +(_Random_Range_86(-3) | 0) * .0625;
  i1 = i1 << 24 >> 24 == 7;
  i2 = HEAPU16[934358] | 0;
  d3 = d3 + (d17 + -.10625000298023224);
  d4 = d4 + (d17 + .10625000298023224);
  d6 = i1 ? d6 - d16 : d6;
  d8 = i1 ? d8 - d16 : d8;
  d9 = d9 + (d15 + -.10625000298023224);
  d7 = d7 + (d15 + .10625000298023224);
 }
 i1 = HEAP32[460410] | 0;
 i5 = i1 ? i5 >>> i1 : i5;
 if (!(HEAP8[994084 + i2 >> 0] | 0)) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[467174] & 63](i10, i11, i12) | 0;
  i2 = HEAPU16[934358] | 0;
 } else i1 = -1;
 if (HEAP8[1008676 + i2 >> 0] | 0) i1 = _PackedCol_Tint(i1, HEAP32[994852 + (i2 << 2) >> 2] | 0) | 0;
 i10 = HEAP32[414113] | 0;
 i12 = 110944 + (i5 << 5) + 28 | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 i2 = i10 + (i11 * 24 | 0) | 0;
 HEAPF32[i2 >> 2] = d3;
 HEAPF32[i10 + (i11 * 24 | 0) + 4 >> 2] = d6;
 HEAPF32[i10 + (i11 * 24 | 0) + 8 >> 2] = d9;
 HEAP32[i10 + (i11 * 24 | 0) + 12 >> 2] = i1;
 HEAPF32[i10 + (i11 * 24 | 0) + 16 >> 2] = .9993749856948853;
 HEAPF32[i10 + (i11 * 24 | 0) + 20 >> 2] = d13;
 i2 = i2 + 24 | 0;
 HEAPF32[i2 >> 2] = d3;
 HEAPF32[i2 + 4 >> 2] = d8;
 HEAPF32[i2 + 8 >> 2] = d9;
 HEAP32[i2 + 12 >> 2] = i1;
 HEAPF32[i2 + 16 >> 2] = .9993749856948853;
 HEAPF32[i2 + 20 >> 2] = d14;
 i2 = i2 + 24 | 0;
 HEAPF32[i2 >> 2] = d4;
 HEAPF32[i2 + 4 >> 2] = d8;
 HEAPF32[i2 + 8 >> 2] = d7;
 HEAP32[i2 + 12 >> 2] = i1;
 HEAPF32[i2 + 16 >> 2] = 0.0;
 HEAPF32[i2 + 20 >> 2] = d14;
 i2 = i2 + 24 | 0;
 HEAPF32[i2 >> 2] = d4;
 HEAPF32[i2 + 4 >> 2] = d6;
 HEAPF32[i2 + 8 >> 2] = d7;
 HEAP32[i2 + 12 >> 2] = i1;
 HEAPF32[i2 + 16 >> 2] = 0.0;
 HEAPF32[i2 + 20 >> 2] = d13;
 i10 = HEAP32[110944 + (i5 << 5) + 24 >> 2] | 0;
 i10 = 2 ? i10 >> 2 : i10;
 i5 = i2 + 24 + -96 + (i10 * 24 | 0) | 0;
 HEAPF32[i5 >> 2] = d4;
 HEAPF32[i5 + 4 >> 2] = d6;
 HEAPF32[i5 + 8 >> 2] = d7;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = .9993749856948853;
 HEAPF32[i5 + 20 >> 2] = d13;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d4;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d7;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = .9993749856948853;
 HEAPF32[i5 + 20 >> 2] = d14;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d3;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d9;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = 0.0;
 HEAPF32[i5 + 20 >> 2] = d14;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d3;
 HEAPF32[i5 + 4 >> 2] = d6;
 HEAPF32[i5 + 8 >> 2] = d9;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = 0.0;
 HEAPF32[i5 + 20 >> 2] = d13;
 i5 = i5 + 24 + -96 + (i10 * 24 | 0) | 0;
 HEAPF32[i5 >> 2] = d3;
 HEAPF32[i5 + 4 >> 2] = d6;
 HEAPF32[i5 + 8 >> 2] = d7;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = .9993749856948853;
 HEAPF32[i5 + 20 >> 2] = d13;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d3;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d7;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = .9993749856948853;
 HEAPF32[i5 + 20 >> 2] = d14;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d4;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d9;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = 0.0;
 HEAPF32[i5 + 20 >> 2] = d14;
 i5 = i5 + 24 | 0;
 HEAPF32[i5 >> 2] = d4;
 HEAPF32[i5 + 4 >> 2] = d6;
 HEAPF32[i5 + 8 >> 2] = d9;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAPF32[i5 + 16 >> 2] = 0.0;
 HEAPF32[i5 + 20 >> 2] = d13;
 i10 = i5 + 24 + -96 + (i10 * 24 | 0) | 0;
 HEAPF32[i10 >> 2] = d4;
 HEAPF32[i10 + 4 >> 2] = d6;
 HEAPF32[i10 + 8 >> 2] = d9;
 HEAP32[i10 + 12 >> 2] = i1;
 HEAPF32[i10 + 16 >> 2] = .9993749856948853;
 HEAPF32[i10 + 20 >> 2] = d13;
 i10 = i10 + 24 | 0;
 HEAPF32[i10 >> 2] = d4;
 HEAPF32[i10 + 4 >> 2] = d8;
 HEAPF32[i10 + 8 >> 2] = d9;
 HEAP32[i10 + 12 >> 2] = i1;
 HEAPF32[i10 + 16 >> 2] = .9993749856948853;
 HEAPF32[i10 + 20 >> 2] = d14;
 i10 = i10 + 24 | 0;
 HEAPF32[i10 >> 2] = d3;
 HEAPF32[i10 + 4 >> 2] = d8;
 HEAPF32[i10 + 8 >> 2] = d7;
 HEAP32[i10 + 12 >> 2] = i1;
 HEAPF32[i10 + 16 >> 2] = 0.0;
 HEAPF32[i10 + 20 >> 2] = d14;
 i10 = i10 + 24 | 0;
 HEAPF32[i10 >> 2] = d3;
 HEAPF32[i10 + 4 >> 2] = d6;
 HEAPF32[i10 + 8 >> 2] = d7;
 HEAP32[i10 + 12 >> 2] = i1;
 HEAPF32[i10 + 16 >> 2] = 0.0;
 HEAPF32[i10 + 20 >> 2] = d13;
 HEAP32[i12 >> 2] = i11 + 4;
 return;
}

function _BlockEditCommand_Execute(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i7;
 i6 = i7 + 36 | 0;
 i4 = i7 + 40 | 0;
 i5 = i7 + 24 | 0;
 L1 : do if (!(_String_CaselessEqualsConst(i2, 26463) | 0)) {
  if (_String_CaselessEqualsConst(i2, 26928) | 0) {
   _Chat_AddRaw(26941);
   _Chat_AddRaw(26979);
   _Chat_AddRaw(27031);
   _Chat_AddRaw(27080);
   _Chat_AddRaw(27135);
   break;
  }
  if ((_String_UNSAFE_Split(i2, 32, i1, 3) | 0) < 3) {
   _Chat_AddRaw(27190);
   break;
  }
  i3 = _Block_Parse(i1) | 0;
  if ((i3 | 0) == -1) {
   _Chat_Add1(27265, i1);
   break;
  }
  i2 = i1 + 8 | 0;
  i1 = i1 + 16 | 0;
  do if (!(_String_CaselessEqualsConst(i2, 27317) | 0)) {
   if (_String_CaselessEqualsConst(i2, 27322) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    _Block_SetSide(HEAP32[i6 >> 2] & 65535, i3 & 65535);
    i5 = HEAP32[i6 >> 2] & 65535;
    i6 = i3 * 6 | 0;
    HEAP16[1047844 + (i6 + 5 << 1) >> 1] = i5;
    HEAP16[1047844 + (i6 + 4 << 1) >> 1] = i5;
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27326) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    _Block_SetSide(HEAP32[i6 >> 2] & 65535, i3 & 65535);
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27332) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + (i3 * 6 << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27337) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + ((i3 * 6 | 1) << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27343) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + ((i3 * 6 | 0) + 4 << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27350) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + ((i3 * 6 | 0) + 5 << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27354) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + ((i3 * 6 | 0) + 2 << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27360) | 0) {
    if (!((_BlockEditCommand_GetTexture(i1, i6) | 0) << 24 >> 24)) break L1;
    HEAP16[1047844 + ((i3 * 6 | 0) + 3 << 1) >> 1] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27365) | 0) {
    if (!((_BlockEditCommand_GetInt(i1, 27373, i6, 0, 7) | 0) << 24 >> 24)) break L1;
    HEAP8[1000996 + i3 >> 0] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27386) | 0) {
    if (!((_BlockEditCommand_GetInt(i1, 27395, i6, 0, 5) | 0) << 24 >> 24)) break L1;
    HEAP8[1006372 + i3 >> 0] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27405) | 0) {
    if (!((_BlockEditCommand_GetCoords(i1, i5) | 0) << 24 >> 24)) break L1;
    i6 = 1010980 + (i3 * 12 | 0) | 0;
    HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27409) | 0) {
    if (!((_BlockEditCommand_GetCoords(i1, i5) | 0) << 24 >> 24)) break L1;
    i6 = 1020196 + (i3 * 12 | 0) | 0;
    HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27413) | 0) {
    if (!((_BlockEditCommand_GetInt(i1, 39487, i6, 0, 9) | 0) << 24 >> 24)) break L1;
    HEAP8[1007908 + i3 >> 0] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27423) | 0) {
    if (!((_BlockEditCommand_GetInt(i1, 39487, i6, 0, 9) | 0) << 24 >> 24)) break L1;
    HEAP8[1007140 + i3 >> 0] = HEAP32[i6 >> 2];
    break;
   }
   if (_String_CaselessEqualsConst(i2, 27434) | 0) {
    if (!((_BlockEditCommand_GetBool(i1, 27445, i4) | 0) << 24 >> 24)) break L1;
    HEAP8[994084 + i3 >> 0] = HEAP8[i4 >> 0] | 0;
    break;
   }
   if (!(_String_CaselessEqualsConst(i2, 27461) | 0)) {
    _Chat_Add1(27486, i2);
    break L1;
   }
   if (!((_BlockEditCommand_GetBool(i1, 27473, i4) | 0) << 24 >> 24)) break L1;
   HEAP8[993316 + i3 >> 0] = HEAP8[i4 >> 0] | 0;
  } else _Block_SetName(i3 & 65535, i1); while (0);
  _Block_DefineCustom(i3 & 65535, 0);
 } else {
  _Chat_AddRaw(26474);
  _Chat_AddRaw(26503);
  _Chat_AddRaw(26543);
  _Chat_AddRaw(26599);
  _Chat_AddRaw(26654);
  _Chat_AddRaw(26712);
  _Chat_AddRaw(26761);
  _Chat_AddRaw(26806);
  _Chat_AddRaw(26867);
 } while (0);
 STACKTOP = i7;
 return;
}

function _Collisions_CollideWithReachableBlocks(i23, i24, i25, i26) {
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i22 = i35 + 72 | 0;
 i27 = i35 + 48 | 0;
 i28 = i35 + 36 | 0;
 i21 = i35 + 24 | 0;
 i32 = i35 + 12 | 0;
 i29 = i35 + 8 | 0;
 i30 = i35 + 4 | 0;
 i31 = i35;
 i1 = HEAP32[i23 >> 2] | 0;
 i33 = i1 + 111 | 0;
 i18 = HEAP8[i33 >> 0] | 0;
 HEAP8[i33 >> 0] = 0;
 i33 = i23 + 4 | 0;
 i19 = i23 + 5 | 0;
 i34 = i1 + 92 | 0;
 HEAP32[i33 >> 2] = 0;
 HEAP16[i33 + 4 >> 1] = 0;
 HEAP32[i28 >> 2] = HEAP32[i34 >> 2];
 HEAP32[i28 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
 HEAP32[i28 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
 if ((i24 | 0) > 0) {
  i33 = i21 + 4 | 0;
  i34 = i21 + 8 | 0;
  i20 = i22 + 12 | 0;
  i6 = i1 + 36 | 0;
  i8 = i32 + 4 | 0;
  i17 = i32 + 8 | 0;
  i1 = i27 + 12 | 0;
  i5 = i25 + 12 | 0;
  i9 = i27 + 4 | 0;
  i10 = i22 + 16 | 0;
  i11 = i27 + 16 | 0;
  i12 = i22 + 4 | 0;
  i13 = i27 + 8 | 0;
  i14 = i22 + 20 | 0;
  i15 = i27 + 20 | 0;
  i16 = i22 + 8 | 0;
  i7 = 0;
  do {
   i36 = HEAP32[5306] | 0;
   i37 = HEAP32[i36 + (i7 << 4) >> 2] | 0;
   i38 = HEAP32[i36 + (i7 << 4) + 4 >> 2] | 0;
   i36 = HEAP32[i36 + (i7 << 4) + 8 >> 2] | 0;
   HEAPF32[i21 >> 2] = +((3 ? i37 >> 3 : i37) | 0);
   HEAPF32[i33 >> 2] = +((4 ? i38 >> 4 : i38) | 0);
   HEAPF32[i34 >> 2] = +((3 ? i36 >> 3 : i36) | 0);
   i36 = i38 << 3 & 120 | i37 & 7 | i36 << 7 & 896;
   _Vec3_Add_328(i22, 1010980 + (i36 * 12 | 0) | 0, i21);
   _Vec3_Add_328(i20, 1020196 + (i36 * 12 | 0) | 0, i21);
   do if ((_AABB_Intersects(i26, i22) | 0) << 24 >> 24) {
    _Searcher_CalcTime(i6, i25, i22, i29, i30, i31);
    d4 = +HEAPF32[i29 >> 2];
    d3 = +HEAPF32[i30 >> 2];
    d2 = +HEAPF32[i31 >> 2];
    if (d4 > 1.0 | d3 > 1.0 | d2 > 1.0) {
     _Platform_LogConst(30905);
     d2 = +HEAPF32[i31 >> 2];
     d4 = +HEAPF32[i29 >> 2];
     d3 = +HEAPF32[i30 >> 2];
    };
    HEAP32[i32 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i32 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i32 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAPF32[i32 >> 2] = d4 * +HEAPF32[i32 >> 2];
    HEAPF32[i8 >> 2] = d3 * +HEAPF32[i8 >> 2];
    HEAPF32[i17 >> 2] = d2 * +HEAPF32[i17 >> 2];
    _Vec3_Add_328(i27, i25, i32);
    _Vec3_Add_328(i1, i5, i32);
    if (!(HEAP8[i19 >> 0] | 0)) {
     if (+HEAPF32[i9 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i10 >> 2]) {
      _Collisions_ClipYMax(i23, i22, i25, i26, i28);
      break;
     }
     if (+HEAPF32[i11 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i12 >> 2]) {
      _Collisions_ClipYMin(i23, i22, i25, i26, i28);
      break;
     }
     if (+HEAPF32[i27 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i20 >> 2]) {
      _Collisions_ClipXMax(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i1 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i22 >> 2]) {
      _Collisions_ClipXMin(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i13 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i14 >> 2]) {
      _Collisions_ClipZMax(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (!(+HEAPF32[i15 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i16 >> 2])) break;
     _Collisions_ClipZMin(i23, i22, i25, i18, i27, i26, i28);
     break;
    } else {
     if (+HEAPF32[i27 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i20 >> 2]) {
      _Collisions_ClipXMax(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i1 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i22 >> 2]) {
      _Collisions_ClipXMin(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i13 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i14 >> 2]) {
      _Collisions_ClipZMax(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i15 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i16 >> 2]) {
      _Collisions_ClipZMin(i23, i22, i25, i18, i27, i26, i28);
      break;
     }
     if (+HEAPF32[i9 >> 2] + 1.0000000474974513e-03 >= +HEAPF32[i10 >> 2]) {
      _Collisions_ClipYMax(i23, i22, i25, i26, i28);
      break;
     }
     if (!(+HEAPF32[i11 >> 2] + -1.0000000474974513e-03 <= +HEAPF32[i12 >> 2])) break;
     _Collisions_ClipYMin(i23, i22, i25, i26, i28);
     break;
    }
   } while (0);
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i24 | 0));
 }
 STACKTOP = i35;
 return;
}

function _Heightmap_CalculateCoverage(i18, i20, i19, i21, i2, i17) {
 i18 = i18 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = HEAP32[244734] | 0;
 i3 = i1 + -1 | 0;
 i1 = (i1 | 0) > 0;
 L1 : do if ((HEAP32[244744] | 0) < 256) if (i1) {
  i16 = (i21 | 0) > 0;
  i15 = (i19 | 0) > 0;
  i14 = HEAP32[424246] | 0;
  i1 = i2;
  while (1) {
   if ((i1 | 0) < 1) {
    i1 = 1;
    break L1;
   }
   i2 = HEAP32[244733] | 0;
   if (i16) {
    i13 = (Math_imul(i2, i20) | 0) + i18 | 0;
    i11 = (Math_imul((Math_imul(HEAP32[244735] | 0, i3) | 0) + i20 | 0, i2) | 0) + i18 | 0;
    i12 = 0;
    while (1) {
     if (i15) {
      i5 = Math_imul(i12, i19) | 0;
      i4 = i11;
      i6 = 0;
      i2 = 0;
      while (1) {
       i7 = HEAP32[i17 + (i5 << 2) >> 2] | 0;
       i2 = i7 + i2 | 0;
       i10 = i7 + i4 | 0;
       i9 = i7 + i5 | 0;
       if ((i2 | 0) < (i19 | 0)) {
        i4 = HEAPU8[(HEAP32[244730] | 0) + i10 >> 0] | 0;
        if (!(HEAP8[993316 + i4 >> 0] | 0)) {
         i4 = i9;
         i7 = i10;
         i6 = 0;
        } else {
         i8 = HEAPU8[1005604 + i4 >> 0] | 0;
         HEAP16[i14 + (i2 + i13 << 1) >> 1] = i3 - ((6 ? i8 >>> 6 : i8) & 1);
         i1 = i1 + -1 | 0;
         HEAP32[i17 + (i9 << 2) >> 2] = 0;
         i8 = i7 + i6 | 0;
         i4 = i9 - i8 | 0;
         i7 = i17 + (i4 << 2) | 0;
         i6 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
         if ((i2 - i8 + i6 | 0) < (i19 | 0)) {
          i4 = i17 + (i6 + i4 << 2) | 0;
          i5 = HEAP32[i4 >> 2] | 0;
          if (!i5) i8 = 0; else {
           HEAP32[i4 >> 2] = 0;
           i8 = i5;
           i6 = i5 + i6 | 0;
          }
         } else i8 = 0;
         HEAP32[i7 >> 2] = i6;
         i4 = i8 + i9 | 0;
         i7 = i8 + i10 | 0;
         i2 = i8 + i2 | 0;
        }
       } else {
        i4 = i9;
        i7 = i10;
        i6 = 0;
       }
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= (i19 | 0)) break; else {
        i5 = i4 + 1 | 0;
        i4 = i7 + 1 | 0;
       }
      }
     }
     i2 = HEAP32[244733] | 0;
     i12 = i12 + 1 | 0;
     if ((i12 | 0) == (i21 | 0)) break; else {
      i13 = i2 + i13 | 0;
      i11 = i2 + i11 | 0;
     }
    }
   }
   if ((i3 | 0) > 0) i3 = i3 + -1 | 0; else {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; else if (i1) {
  i15 = (i21 | 0) > 0;
  i16 = (i19 | 0) > 0;
  i14 = HEAP32[424246] | 0;
  i1 = i2;
  while (1) {
   if ((i1 | 0) < 1) {
    i1 = 1;
    break L1;
   }
   i2 = HEAP32[244733] | 0;
   if (i15) {
    i13 = (Math_imul(i2, i20) | 0) + i18 | 0;
    i11 = (Math_imul((Math_imul(HEAP32[244735] | 0, i3) | 0) + i20 | 0, i2) | 0) + i18 | 0;
    i12 = 0;
    while (1) {
     if (i16) {
      i5 = Math_imul(i12, i19) | 0;
      i4 = i11;
      i6 = 0;
      i2 = 0;
      while (1) {
       i7 = HEAP32[i17 + (i5 << 2) >> 2] | 0;
       i2 = i7 + i2 | 0;
       i10 = i7 + i4 | 0;
       i9 = i7 + i5 | 0;
       if ((i2 | 0) < (i19 | 0)) {
        i4 = HEAPU8[(HEAP32[244731] | 0) + i10 >> 0] << 8 | HEAPU8[(HEAP32[244730] | 0) + i10 >> 0];
        if (!(HEAP8[993316 + i4 >> 0] | 0)) {
         i4 = i9;
         i7 = i10;
         i6 = 0;
        } else {
         i8 = HEAPU8[1005604 + i4 >> 0] | 0;
         HEAP16[i14 + (i2 + i13 << 1) >> 1] = i3 - ((6 ? i8 >>> 6 : i8) & 1);
         i1 = i1 + -1 | 0;
         HEAP32[i17 + (i9 << 2) >> 2] = 0;
         i8 = i7 + i6 | 0;
         i4 = i9 - i8 | 0;
         i7 = i17 + (i4 << 2) | 0;
         i6 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
         if ((i2 - i8 + i6 | 0) < (i19 | 0)) {
          i4 = i17 + (i6 + i4 << 2) | 0;
          i5 = HEAP32[i4 >> 2] | 0;
          if (!i5) i8 = 0; else {
           HEAP32[i4 >> 2] = 0;
           i8 = i5;
           i6 = i5 + i6 | 0;
          }
         } else i8 = 0;
         HEAP32[i7 >> 2] = i6;
         i4 = i8 + i9 | 0;
         i7 = i8 + i10 | 0;
         i2 = i8 + i2 | 0;
        }
       } else {
        i4 = i9;
        i7 = i10;
        i6 = 0;
       }
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= (i19 | 0)) break; else {
        i5 = i4 + 1 | 0;
        i4 = i7 + 1 | 0;
       }
      }
     }
     i2 = HEAP32[244733] | 0;
     i12 = i12 + 1 | 0;
     if ((i12 | 0) == (i21 | 0)) break; else {
      i13 = i2 + i13 | 0;
      i11 = i2 + i11 | 0;
     }
    }
   }
   if ((i3 | 0) > 0) i3 = i3 + -1 | 0; else {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _Cw_Callback_4(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5;
 i4 = HEAP16[934359] | 0;
 do if (_String_CaselessEqualsConst((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 | 0, 31213) | 0) if (_String_CaselessEqualsConst((HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) + 8 | 0, 31217) | 0) {
  if (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 47303) | 0) if (_String_CaselessEqualsConst(i3 + 8 | 0, 31318) | 0) {
   d6 = +((_NbtTag_U16(i3) | 0) & 65535) * .03125;
   HEAPF32[36686] = d6;
   break;
  }
  if (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 47190) | 0) if (_String_CaselessEqualsConst(i3 + 8 | 0, 31327) | 0) {
   i4 = (_NbtTag_U8(i3) | 0) & 255;
   HEAP32[466934] = i4;
   break;
  }
  if (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 46819) | 0) {
   i1 = i3 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 31339) | 0) {
    i4 = (_NbtTag_U8(i3) | 0) & 255;
    HEAP16[933855] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31349) | 0) {
    i4 = (_NbtTag_U8(i3) | 0) & 255;
    HEAP16[933854] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31359) | 0) {
    i4 = (_NbtTag_I16(i3) | 0) << 16 >> 16;
    HEAP32[466928] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31369) | 0) {
    _NbtTag_String(i2, i3);
    if (HEAP16[i2 + 4 >> 1] | 0) _Server_RetrieveTexturePack(i2);
    break;
   }
  }
  if (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 46806) | 0) {
   i1 = i3 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 31349) | 0) {
    i4 = _NbtTag_U16(i3) | 0;
    HEAP16[933854] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31339) | 0) {
    i4 = _NbtTag_U16(i3) | 0;
    HEAP16[933855] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31380) | 0) {
    i4 = _NbtTag_I32(i3) | 0;
    HEAP32[466928] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31391) | 0) {
    i4 = _NbtTag_I32(i3) | 0;
    HEAP32[466929] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31403) | 0) {
    i4 = _NbtTag_I32(i3) | 0;
    HEAP32[466930] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31416) | 0) {
    d6 = +_NbtTag_F32(i3);
    HEAPF32[466931] = d6;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31428) | 0) {
    d6 = +_NbtTag_F32(i3);
    HEAPF32[466932] = d6;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31441) | 0) {
    d6 = +_NbtTag_F32(i3);
    HEAPF32[466933] = d6;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31453) | 0) {
    i4 = (_NbtTag_U8(i3) | 0) & 255;
    HEAP32[466935] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31460) | 0) {
    d6 = +_NbtTag_F32(i3);
    HEAPF32[466936] = d6;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31470) | 0) {
    d6 = +_NbtTag_F32(i3);
    HEAPF32[466937] = d6;
    break;
   }
  }
  if (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 47250) | 0) {
   i1 = i3 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 31480) | 0) {
    i4 = _Cw_ParseColor(-13159) | 0;
    HEAP32[466938] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31484) | 0) {
    i4 = _Cw_ParseColor(-1) | 0;
    HEAP32[466940] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 51246) | 0) {
    i4 = _Cw_ParseColor(-1) | 0;
    HEAP32[466939] = i4;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31490) | 0) {
    _Env_SetSunCol(_Cw_ParseColor(-1) | 0);
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31499) | 0) {
    _Env_SetShadowCol(_Cw_ParseColor(-6579301) | 0);
    break;
   }
   if (_String_CaselessEqualsConst(i1, 31507) | 0) {
    i4 = _Cw_ParseColor(-1) | 0;
    HEAP32[466941] = i4;
    break;
   }
  }
  i2 = (_String_CaselessEqualsConst((HEAP32[i3 >> 2] | 0) + 8 | 0, 47148) | 0) == 0;
  if (!(i2 | (HEAP8[1868756] | 0) == 0)) if (_String_CaselessStarts(i3 + 8 | 0, 14712) | 0) {
   i2 = i4 & 65535;
   i1 = 1010212 + i2 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) {
    i3 = 1006372 + i2 | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = 5;
   } else HEAP8[i1 >> 0] = 0;
   _Block_DefineCustom(i4, 0);
   HEAP8[1057060 + i2 >> 0] = 1;
   HEAP8[1057828 + i2 >> 0] = 1;
   _Event_RaiseVoid(1679884);
   HEAP16[934359] = 0;
  }
 } while (0);
 STACKTOP = i5;
 return;
}

function _Searcher_FindReachableBlocks(i1, i23, i24) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i30 = i31 + 64 | 0;
 i26 = i31 + 52 | 0;
 i25 = i31 + 40 | 0;
 i22 = i31 + 16 | 0;
 i27 = i31 + 8 | 0;
 i28 = i31 + 4 | 0;
 i29 = i31;
 i19 = i1 + 36 | 0;
 HEAP32[i30 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i30 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i30 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 _Entity_GetBounds(i1, i23);
 d9 = +HEAPF32[i30 >> 2];
 HEAPF32[i24 >> 2] = +HEAPF32[i23 >> 2] + (d9 < 0.0 ? d9 : 0.0);
 d10 = +HEAPF32[i30 + 4 >> 2];
 HEAPF32[i24 + 4 >> 2] = +HEAPF32[i23 + 4 >> 2] + (d10 < 0.0 ? d10 : 0.0);
 d12 = +HEAPF32[i30 + 8 >> 2];
 HEAPF32[i24 + 8 >> 2] = +HEAPF32[i23 + 8 >> 2] + (d12 < 0.0 ? d12 : 0.0);
 i19 = i24 + 12 | 0;
 HEAPF32[i19 >> 2] = (d9 > 0.0 ? d9 : 0.0) + +HEAPF32[i23 + 12 >> 2];
 HEAPF32[i24 + 16 >> 2] = (d10 > 0.0 ? d10 : 0.0) + +HEAPF32[i23 + 16 >> 2];
 HEAPF32[i24 + 20 >> 2] = (d12 > 0.0 ? d12 : 0.0) + +HEAPF32[i23 + 20 >> 2];
 _IVec3_Floor(i26, i24);
 _IVec3_Floor(i25, i19);
 i19 = i25 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i26 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = Math_imul(i4 + 1 - i1 | 0, (HEAP32[i25 >> 2] | 0) + 1 - (HEAP32[i26 >> 2] | 0) | 0) | 0;
 i20 = i25 + 8 | 0;
 i21 = i26 + 8 | 0;
 i2 = Math_imul(i2, (HEAP32[i20 >> 2] | 0) + 1 - (HEAP32[i21 >> 2] | 0) | 0) | 0;
 if (i2 >>> 0 > (HEAP32[5307] | 0) >>> 0) {
  _Searcher_Free();
  HEAP32[5307] = i2;
  i1 = _Mem_Alloc(i2, 16, 46532) | 0;
  HEAP32[5306] = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i4 = HEAP32[i19 >> 2] | 0;
  i2 = i1;
 } else {
  i18 = HEAP32[5306] | 0;
  i3 = i1;
  i2 = i18;
  i1 = i18;
 }
 if ((i3 | 0) <= (i4 | 0)) {
  i15 = i22 + 4 | 0;
  i17 = i22 + 8 | 0;
  i14 = i22 + 12 | 0;
  i16 = i22 + 16 | 0;
  i18 = i22 + 20 | 0;
  i2 = HEAP32[i20 >> 2] | 0;
  while (1) {
   i5 = HEAP32[i21 >> 2] | 0;
   if ((i5 | 0) <= (i2 | 0)) {
    d12 = +(i3 | 0);
    i13 = i3 << 4;
    i4 = HEAP32[i25 >> 2] | 0;
    while (1) {
     i6 = HEAP32[i26 >> 2] | 0;
     if ((i6 | 0) <= (i4 | 0)) {
      d10 = +(i5 | 0);
      i11 = i5 << 3;
      while (1) {
       i2 = (_World_GetPhysicsBlock(i6, i3, i5) | 0) & 65535;
       if ((HEAP8[1000996 + i2 >> 0] | 0) == 2) {
        d9 = +(i6 | 0);
        i4 = 1010980 + (i2 * 12 | 0) | 0;
        HEAP32[i22 >> 2] = HEAP32[i4 >> 2];
        HEAP32[i22 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
        HEAP32[i22 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
        HEAPF32[i22 >> 2] = +HEAPF32[i22 >> 2] + d9;
        HEAPF32[i15 >> 2] = +HEAPF32[i15 >> 2] + d12;
        HEAPF32[i17 >> 2] = +HEAPF32[i17 >> 2] + d10;
        i4 = 1020196 + (i2 * 12 | 0) | 0;
        HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
        HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
        HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
        HEAPF32[i14 >> 2] = +HEAPF32[i14 >> 2] + d9;
        HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] + d12;
        HEAPF32[i18 >> 2] = +HEAPF32[i18 >> 2] + d10;
        if ((_AABB_Intersects(i24, i22) | 0) << 24 >> 24) {
         _Searcher_CalcTime(i30, i23, i22, i27, i28, i29);
         d7 = +HEAPF32[i27 >> 2];
         d8 = +HEAPF32[i28 >> 2];
         d9 = +HEAPF32[i29 >> 2];
         if (!(d7 > 1.0 | d8 > 1.0 | d9 > 1.0)) {
          HEAP32[i1 >> 2] = i2 & 7 | i6 << 3;
          HEAP32[i1 + 4 >> 2] = (3 ? i2 >>> 3 : i2) & 15 | i13;
          HEAP32[i1 + 8 >> 2] = (7 ? i2 >>> 7 : i2) & 7 | i11;
          HEAPF32[i1 + 12 >> 2] = d7 * d7 + d8 * d8 + d9 * d9;
          i1 = i1 + 16 | 0;
         }
        }
       }
       i4 = HEAP32[i25 >> 2] | 0;
       if ((i6 | 0) < (i4 | 0)) i6 = i6 + 1 | 0; else break;
      }
      i2 = HEAP32[i20 >> 2] | 0;
     }
     if ((i5 | 0) < (i2 | 0)) i5 = i5 + 1 | 0; else break;
    }
    i4 = HEAP32[i19 >> 2] | 0;
   }
   if ((i3 | 0) < (i4 | 0)) i3 = i3 + 1 | 0; else break;
  }
  i2 = HEAP32[5306] | 0;
 }
 i30 = i1 - i2 | 0;
 i1 = 4 ? i30 >> 4 : i30;
 if (i30 | 0) _Searcher_QuickSort(0, i1 + -1 | 0);
 STACKTOP = i31;
 return i1 | 0;
}

function _Particles_BreakBlockEffect(i2, i31, i1) {
 i2 = i2 | 0;
 i31 = i31 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, d34 = 0.0, i35 = 0, d36 = 0.0, d37 = 0.0, d38 = 0.0, i39 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i33 + 40 | 0;
 i32 = i33 + 28 | 0;
 i30 = i33 + 16 | 0;
 i4 = i33;
 if (!(i1 << 16 >> 16)) {
  i1 = i31 & 65535;
  if ((HEAP8[1006372 + i1 >> 0] | 0) != 4) {
   _IVec3_ToVec3(i32, i2);
   i29 = HEAP16[1047844 + (i1 * 6 << 1) >> 1] | 0;
   _Atlas1D_TexRec(i4, i29, 1, i3);
   d28 = +HEAPF32[i4 >> 2];
   d21 = +HEAPF32[i4 + 4 >> 2];
   d27 = +HEAPF32[460411] * .0625;
   d24 = +HEAPF32[1010980 + (i1 * 12 | 0) >> 2];
   d25 = +HEAPF32[1010980 + (i1 * 12 | 0) + 4 >> 2];
   d26 = +HEAPF32[1010980 + (i1 * 12 | 0) + 8 >> 2];
   d22 = +HEAPF32[1020196 + (i1 * 12 | 0) >> 2];
   d23 = +HEAPF32[1020196 + (i1 * 12 | 0) + 4 >> 2];
   d12 = +HEAPF32[1020196 + (i1 * 12 | 0) + 8 >> 2];
   i3 = ~~(d24 * 16.0);
   i18 = ~~(d22 * 16.0);
   i2 = ~~(d26 * 16.0);
   i20 = ~~(d12 * 16.0);
   i2 = (i3 | 0) < (i2 | 0) ? i3 : i2;
   i3 = ~~(16.0 - d23 * 16.0);
   i20 = (i18 | 0) < (i20 | 0) ? i18 : i20;
   i18 = ~~(16.0 - d25 * 16.0);
   i15 = (i2 | 0) < 12 & (i20 | 0) > 12 ? 12 : i20;
   i4 = (i18 | 0) > 12 & (i3 | 0) < 12 ? 12 : i18;
   d7 = d28 + +(i20 | 0) * .0625;
   d8 = d21 + d27 * +(i18 | 0);
   i18 = i30 + 4 | 0;
   i20 = i30 + 8 | 0;
   d13 = d27 * 4.0;
   d14 = d27 * .009999999776482582;
   i16 = 0;
   do {
    d5 = +(i16 | 0) * .25;
    d9 = d5 + .125;
    d5 = d5 + -.5 + .125;
    i17 = 0;
    do {
     d6 = +(i17 | 0) * .25;
     d10 = d6 + .0625;
     d6 = d6 + .125;
     i19 = 0;
     do {
      d11 = +(i19 | 0) * .25;
      _Vec3_Create3(i30, d9, d10, d11 + .125);
      d34 = +HEAPF32[i30 >> 2];
      if (!(d34 < d24 | d34 > d22)) {
       d34 = +HEAPF32[i18 >> 2];
       if (!(d34 < d25 | d34 > d23)) {
        d34 = +HEAPF32[i20 >> 2];
        if (!(d34 < d26 | d34 > d12)) {
         i1 = HEAP32[431722] | 0;
         if ((i1 | 0) == 600) {
          _Terrain_RemoveAt(0);
          i1 = HEAP32[431722] | 0;
         }
         HEAP32[431722] = i1 + 1;
         d37 = d5 + (+_Random_Float(978296) * .4000000059604645 + -.20000000298023224);
         HEAPF32[847008 + (i1 << 6) >> 2] = d37;
         d37 = d6 + (+_Random_Float(978296) * .4000000059604645 + -.20000000298023224);
         HEAPF32[847008 + (i1 << 6) + 4 >> 2] = d37;
         d37 = d11 + -.5 + .125 + (+_Random_Float(978296) * .4000000059604645 + -.20000000298023224);
         HEAPF32[847008 + (i1 << 6) + 8 >> 2] = d37;
         d37 = d28 + +(_Random_Range_1727(i2, i15) | 0) * .0625;
         d36 = d21 + d27 * +(_Random_Range_1727(i3, i4) | 0);
         d11 = d37 + .25;
         d34 = d13 + d36;
         i39 = 847008 + (i1 << 6) + 16 | 0;
         _Vec3_Add_1728(i39, i32, i30);
         i35 = 847008 + (i1 << 6) + 28 | 0;
         HEAP32[i35 >> 2] = HEAP32[i39 >> 2];
         HEAP32[i35 + 4 >> 2] = HEAP32[i39 + 4 >> 2];
         HEAP32[i35 + 8 >> 2] = HEAP32[i39 + 8 >> 2];
         d38 = +_Random_Float(978296) * 1.2000000476837158 + .30000001192092896;
         HEAPF32[847008 + (i1 << 6) + 12 >> 2] = d38;
         HEAPF32[847008 + (i1 << 6) + 44 >> 2] = d37;
         HEAPF32[847008 + (i1 << 6) + 48 >> 2] = d36;
         HEAPF32[847008 + (i1 << 6) + 52 >> 2] = (d11 < d7 ? d11 : d7) + -6.249999860301614e-04;
         HEAPF32[847008 + (i1 << 6) + 56 >> 2] = (d34 < d8 ? d34 : d8) - d14;
         HEAP16[847008 + (i1 << 6) + 60 >> 1] = i29;
         HEAP16[847008 + (i1 << 6) + 62 >> 1] = i31;
         i35 = _Random_Next(978296, 30) | 0;
         HEAPF32[847008 + (i1 << 6) + 40 >> 2] = (i35 | 0) > 27 ? 12.0 : (i35 | 0) > 24 ? 10.0 : 8.0;
        }
       }
      }
      i19 = i19 + 1 | 0;
     } while ((i19 | 0) != 4);
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) != 4);
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) != 4);
  }
 }
 STACKTOP = i33;
 return;
}

function _DrawBitmappedTextCore(i28, i1, i4, i12, i2) {
 i28 = i28 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 1808 | 0;
 i10 = i31 + 1792 | 0;
 i27 = i31 + 1536 | 0;
 i29 = i31 + 512 | 0;
 i30 = i31;
 i5 = i1;
 i8 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i5 + 4 >> 2] | 0;
 i25 = i10;
 HEAP32[i25 >> 2] = i8;
 HEAP32[i25 + 4 >> 2] = i5;
 i25 = i1 + 8 | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 i13 = HEAP16[i1 + 4 >> 1] | 0;
 i26 = i13 & 65535;
 i3 = HEAP32[416933] | 0;
 i9 = i2 << 24 >> 24 != 0;
 if (i9) i3 = _GetShadowColor(i3) | 0;
 if (!((i5 & 65535) << 16 >> 16)) i24 = 0; else {
  i7 = i5 & 65535;
  i5 = 0;
  i6 = 0;
  do {
   i2 = HEAP8[i8 + i6 >> 0] | 0;
   if (i2 << 24 >> 24 == 38) {
    i1 = i6 + 1 | 0;
    if (!((_Drawer2D_ValidColorCodeAt(i10, i1) | 0) << 24 >> 24)) i11 = 9; else {
     i3 = HEAP32[1667324 + ((HEAPU8[i8 + i1 >> 0] | 0) << 2) >> 2] | 0;
     if (i9) i3 = _GetShadowColor(i3) | 0;
    }
   } else i11 = 9;
   if ((i11 | 0) == 9) {
    i11 = 0;
    HEAP8[i27 + i5 >> 0] = i2;
    HEAP32[i29 + (i5 << 2) >> 2] = i3;
    i1 = (_Drawer2D_Width(i26, i2) | 0) & 65535;
    HEAP16[i30 + (i5 << 1) >> 1] = i1;
    i5 = i5 + 1 | 0;
    i1 = i6;
   }
   i6 = i1 + 1 | 0;
  } while ((i6 | 0) < (i7 | 0));
  i1 = HEAP32[i25 >> 2] | 0;
  i24 = i5;
 }
 i22 = (((HEAP32[i1 + 8 >> 2] | 0) - i26 | 0) / 2 | 0) + i12 | 0;
 i23 = _Math_CeilDiv(i26, 8) | 0;
 if (i13 << 16 >> 16) {
  i19 = i28 + 8 | 0;
  i15 = HEAP32[3579] | 0;
  i20 = i28 + 4 | 0;
  i17 = (i24 | 0) > 0;
  i16 = HEAP32[417087] | 0;
  i21 = 0;
  do {
   i1 = i21 + i22 | 0;
   if (i1 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
    i18 = (Math_imul(i15, i21) | 0) / (i26 | 0) | 0;
    i7 = (HEAP32[i28 >> 2] | 0) + ((Math_imul(HEAP32[i20 >> 2] | 0, i1) | 0) << 2) | 0;
    if (i17) {
     i12 = 0;
     i14 = i4;
     while (1) {
      i6 = HEAPU8[i27 + i12 >> 0] | 0;
      i13 = Math_imul(i6 & 15, i15) | 0;
      i8 = (Math_imul(4 ? i6 >>> 4 : i6, i15) | 0) + i18 | 0;
      i8 = i16 + ((Math_imul(i8, HEAP32[417088] | 0) | 0) << 2) | 0;
      i6 = HEAP32[145264 + (i6 << 2) >> 2] | 0;
      i11 = HEAP16[i30 + (i12 << 1) >> 1] | 0;
      i9 = i11 & 65535;
      i1 = HEAP32[i29 + (i12 << 2) >> 2] | 0;
      if (i11 << 16 >> 16) {
       i10 = i1 & 255;
       i11 = (8 ? i1 >>> 8 : i1) & 255;
       i3 = (16 ? i1 >>> 16 : i1) & 255;
       i5 = 0;
       do {
        i1 = i8 + (((Math_imul(i5, i6) | 0) / (i9 | 0) | 0) + i13 << 2) | 0;
        i1 = HEAP32[i1 >> 2] | 0;
        if (i1 >>> 0 >= 16777216) {
         i2 = i5 + i14 | 0;
         if (i2 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
          i33 = (((Math_imul(i1 & 255, i10) | 0) >>> 0) / 255 | 0) & 255;
          i32 = (((Math_imul((8 ? i1 >>> 8 : i1) & 255, i11) | 0) >>> 0) / 255 | 0) << 8 & 65280;
          i1 = i33 | i1 & -16777216 | i32 | (((Math_imul((16 ? i1 >>> 16 : i1) & 255, i3) | 0) >>> 0) / 255 | 0) << 16 & 16711680;
          HEAP32[i7 + (i2 << 2) >> 2] = i1;
         }
        }
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) != (i9 | 0));
      }
      i12 = i12 + 1 | 0;
      if ((i12 | 0) == (i24 | 0)) break; else i14 = i14 + i23 + i9 | 0;
     }
    }
   }
   i21 = i21 + 1 | 0;
  } while ((i21 | 0) != (i26 | 0));
 }
 if (HEAP16[(HEAP32[i25 >> 2] | 0) + 6 >> 1] & 2) {
  i5 = i26 * 7 | 0;
  i5 = 3 ? i5 >>> 3 : i5;
  i6 = i22 + i5 | 0;
  i5 = i26 - i5 | 0;
  if ((i24 | 0) > 0) {
   i1 = 0;
   while (1) {
    i3 = HEAP32[i29 + (i1 << 2) >> 2] | 0;
    L42 : do if ((i1 | 0) < (i24 | 0)) {
     i2 = 0;
     do {
      i2 = i2 + i23 + (HEAPU16[i30 + (i1 << 1) >> 1] | 0) | 0;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) >= (i24 | 0)) break L42;
     } while ((i3 | 0) == (HEAP32[i29 + (i1 << 2) >> 2] | 0));
    } else i2 = 0; while (0);
    _Drawer2D_Fill(i28, i4, i6, i2, i5, i3);
    if ((i1 | 0) < (i24 | 0)) i4 = i2 + i4 | 0; else break;
   }
  }
 }
 STACKTOP = i31;
 return;
}

function _PhysicsComp_PhysicsTick(i13, i10) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 var d1 = 0.0, d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i14 + 12 | 0;
 i11 = i14;
 i12 = HEAP32[i13 + 8 >> 2] | 0;
 i8 = HEAP32[i13 + 24 >> 2] | 0;
 if (HEAP8[i8 + 34 >> 0] | 0) HEAP8[i12 + 111 >> 0] = 0;
 d7 = +_PhysicsComp_GetBaseSpeed(i13);
 d2 = d7 * (+_PhysicsComp_GetSpeed(i8, 8.0, HEAP8[i8 + 13 >> 0] | 0) / 5.0);
 d1 = d7 * +_PhysicsComp_GetSpeed(i8, 1.600000023841858, 1);
 d1 = d1 * +HEAPF32[i8 + 24 >> 2];
 d1 = d1 < -75.0 ? -75.0 : d1;
 d1 = d1 > 75.0 ? 75.0 : d1;
 d2 = d2 < d7 ? d7 : d2;
 do if (!(HEAP8[i8 + 19 >> 0] | 0)) {
  i4 = i8 + 1 | 0;
  d7 = d1;
 } else {
  i4 = i8 + 1 | 0;
  if ((HEAP8[i8 + 33 >> 0] | 0) == 0 | (HEAP8[i4 >> 0] | 0) != 0) d7 = d1; else {
   i3 = HEAP32[i13 + 4 >> 2] | 0;
   if ((i3 | 0) == 1) {
    d7 = d1 * 46.5;
    d2 = d2 * 7.5;
    break;
   } else {
    i3 = (i3 | 0) > 1;
    d7 = i3 ? d1 * 93.0 : d1;
    d2 = i3 ? d2 * 10.0 : d2;
    break;
   }
  }
 } while (0);
 if (!((_Entity_TouchesAnyWater(i12) | 0) << 24 >> 24)) i6 = 12; else if (!(HEAP8[i4 >> 0] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i9 >> 2] = HEAP32[3618];
  HEAP32[i9 + 4 >> 2] = HEAP32[3619];
  HEAP32[i9 + 8 >> 2] = HEAP32[3620];
  _PhysicsComp_MoveNormal(i13, i11, d7 * .019999999552965164, i9, .019999999552965164, d2);
 } else i6 = 12;
 do if ((i6 | 0) == 12) {
  if ((_Entity_TouchesAnyLava(i12) | 0) << 24 >> 24) if (!(HEAP8[i4 >> 0] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 >> 2] = HEAP32[3621];
   HEAP32[i9 + 4 >> 2] = HEAP32[3622];
   HEAP32[i9 + 8 >> 2] = HEAP32[3623];
   _PhysicsComp_MoveNormal(i13, i11, d7 * .019999999552965164, i9, .019999999552965164, d2);
   break;
  }
  i6 = (_Entity_TouchesAnyRope(i12) | 0) << 24 >> 24 == 0;
  i3 = (HEAP8[i4 >> 0] | 0) == 0;
  if (i6) if (i3) {
   d1 = (HEAP8[i12 + 111 >> 0] | 0) == 0 ? .019999999552965164 : .10000000149011612;
   i6 = 1;
  } else {
   d1 = .10000000149011612;
   i6 = 0;
  } else if (i3) {
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 >> 2] = HEAP32[3624];
   HEAP32[i9 + 4 >> 2] = HEAP32[3625];
   HEAP32[i9 + 8 >> 2] = HEAP32[3626];
   _PhysicsComp_MoveNormal(i13, i11, .03400000184774399, i9, .03400000184774399, d2);
   break;
  } else {
   d1 = .10000000149011612;
   i6 = 0;
  }
  if (!(HEAP8[i13 >> 0] | 0)) d5 = +HEAPF32[i13 + 32 >> 2]; else d5 = .019999999552965164;
  d1 = d7 * d1;
  i3 = i13 + 36 | 0;
  if (i6) {
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   _PhysicsComp_MoveNormal(i13, i11, d1, i9, d5, d2);
  } else {
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   _PhysicsComp_MoveFlying(i13, i11, d1, i9, d5, d2);
  }
  if ((_PhysicsComp_OnIce(i12) | 0) << 24 >> 24) if (!(HEAP8[i4 >> 0] | 0)) {
   i3 = i12 + 36 | 0;
   d2 = +HEAPF32[i3 >> 2];
   i11 = +Math_abs(+d2) > .25;
   i4 = i12 + 44 | 0;
   d1 = +HEAPF32[i4 >> 2];
   if (!(i11 | +Math_abs(+d1) > .25)) break;
   d5 = +Math_abs(+(.25 / d2));
   d7 = +Math_abs(+(.25 / d1));
   d7 = d5 < d7 ? d5 : d7;
   HEAPF32[i3 >> 2] = d2 * d7;
   HEAPF32[i4 >> 2] = d1 * d7;
   break;
  }
  if (!(HEAP8[i12 + 111 >> 0] | 0)) if (!(HEAP8[i8 + 35 >> 0] | 0)) break;
  i11 = i12 + 36 | 0;
  _Vec3_Mul3_344(i11, i11, i13 + 48 | 0);
 } while (0);
 if (HEAP8[i12 + 111 >> 0] | 0) HEAP32[i13 + 4 >> 2] = 0;
 STACKTOP = i14;
 return;
}

function _FlushLightQueue(i8, i10) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i14;
 if ((HEAP32[422186] | 0) > 0) {
  i11 = i9 + 4 | 0;
  i12 = i9 + 8 | 0;
  i7 = i9 + 12 | 0;
  do {
   i1 = _Queue_Dequeue(1688728) | 0;
   HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   i1 = HEAP32[i9 >> 2] | 0;
   i2 = HEAP32[i11 >> 2] | 0;
   i3 = HEAP32[i12 >> 2] | 0;
   i6 = _GetBrightness(i1, i2, i3, i8) | 0;
   i4 = HEAP8[i7 >> 0] | 0;
   if ((i6 & 255) < (i4 & 255)) {
    _SetBrightness(i4, i1, i2, i3, i8, i10);
    i2 = HEAP32[i9 >> 2] | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    i4 = HEAP32[i12 >> 2] | 0;
    i6 = _World_GetBlock_446(i2, i3, i4) | 0;
    i5 = (HEAP8[i7 >> 0] | 0) + -1 << 24 >> 24;
    HEAP8[i7 >> 0] = i5;
    if (i5 << 24 >> 24) {
     i1 = i2 + -1 | 0;
     HEAP32[i9 >> 2] = i1;
     if ((i2 | 0) > 0) if ((_CanLightPass(i6, 1) | 0) << 24 >> 24) if ((_CanLightPass(_World_GetBlock_446(i1, i3, i4) | 0, 0) | 0) << 24 >> 24) if (((_GetBrightness(i1, i3, i4, i8) | 0) & 255) < (i5 & 255)) {
      _Queue_Enqueue(1688728, i9);
      i1 = HEAP32[i9 >> 2] | 0;
     }
     i1 = i1 + 2 | 0;
     HEAP32[i9 >> 2] = i1;
     if ((i1 | 0) > (HEAP32[244736] | 0)) i13 = 16; else if (!((_CanLightPass(i6, 0) | 0) << 24 >> 24)) i13 = 16; else {
      i3 = HEAP32[i11 >> 2] | 0;
      i2 = HEAP32[i12 >> 2] | 0;
      if ((_CanLightPass(_World_GetBlock_446(i1, i3, i2) | 0, 1) | 0) << 24 >> 24) {
       i13 = _GetBrightness(i1, i3, i2, i8) | 0;
       if ((i13 & 255) < (HEAPU8[i7 >> 0] | 0)) {
        _Queue_Enqueue(1688728, i9);
        i1 = HEAP32[i9 >> 2] | 0;
        i13 = 16;
       } else i13 = 16;
      }
     }
     if ((i13 | 0) == 16) {
      i13 = 0;
      i3 = HEAP32[i11 >> 2] | 0;
     }
     i4 = i1 + -1 | 0;
     HEAP32[i9 >> 2] = i4;
     i1 = i3 + -1 | 0;
     HEAP32[i11 >> 2] = i1;
     if ((i3 | 0) > 0) if ((_CanLightPass(i6, 5) | 0) << 24 >> 24) {
      i2 = HEAP32[i12 >> 2] | 0;
      if ((_CanLightPass(_World_GetBlock_446(i4, i1, i2) | 0, 4) | 0) << 24 >> 24) {
       i5 = _GetBrightness(i4, i1, i2, i8) | 0;
       if ((i5 & 255) < (HEAPU8[i7 >> 0] | 0)) {
        _Queue_Enqueue(1688728, i9);
        i1 = HEAP32[i11 >> 2] | 0;
       }
      }
     }
     i1 = i1 + 2 | 0;
     HEAP32[i11 >> 2] = i1;
     if ((i1 | 0) > (HEAP32[244737] | 0)) i13 = 27; else if (!((_CanLightPass(i6, 4) | 0) << 24 >> 24)) i13 = 27; else {
      i2 = HEAP32[i9 >> 2] | 0;
      i3 = HEAP32[i12 >> 2] | 0;
      if ((_CanLightPass(_World_GetBlock_446(i2, i1, i3) | 0, 5) | 0) << 24 >> 24) {
       i13 = _GetBrightness(i2, i1, i3, i8) | 0;
       if ((i13 & 255) < (HEAPU8[i7 >> 0] | 0)) {
        _Queue_Enqueue(1688728, i9);
        i1 = HEAP32[i11 >> 2] | 0;
        i13 = 27;
       } else i13 = 27;
      }
     }
     if ((i13 | 0) == 27) {
      i13 = 0;
      i3 = HEAP32[i12 >> 2] | 0;
     }
     i4 = i1 + -1 | 0;
     HEAP32[i11 >> 2] = i4;
     i1 = i3 + -1 | 0;
     HEAP32[i12 >> 2] = i1;
     if ((i3 | 0) > 0) if ((_CanLightPass(i6, 3) | 0) << 24 >> 24) {
      i2 = HEAP32[i9 >> 2] | 0;
      if ((_CanLightPass(_World_GetBlock_446(i2, i4, i1) | 0, 2) | 0) << 24 >> 24) {
       i5 = _GetBrightness(i2, i4, i1, i8) | 0;
       if ((i5 & 255) < (HEAPU8[i7 >> 0] | 0)) {
        _Queue_Enqueue(1688728, i9);
        i1 = HEAP32[i12 >> 2] | 0;
       }
      }
     }
     i3 = i1 + 2 | 0;
     HEAP32[i12 >> 2] = i3;
     if ((i3 | 0) <= (HEAP32[244738] | 0)) if ((_CanLightPass(i6, 2) | 0) << 24 >> 24) {
      i1 = HEAP32[i9 >> 2] | 0;
      i2 = HEAP32[i11 >> 2] | 0;
      if ((_CanLightPass(_World_GetBlock_446(i1, i2, i3) | 0, 3) | 0) << 24 >> 24) {
       i6 = _GetBrightness(i1, i2, i3, i8) | 0;
       if ((i6 & 255) < (HEAPU8[i7 >> 0] | 0)) _Queue_Enqueue(1688728, i9);
      }
     }
    }
   }
  } while ((HEAP32[422186] | 0) > 0);
 }
 STACKTOP = i14;
 return;
}

function _RenderNormalBatch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i15 = Math_imul(HEAP32[424248] | 0, i1) | 0;
 if ((HEAP32[424265] | 0) > 0) {
  i13 = 362352 + i1 | 0;
  i14 = 0;
  do {
   i2 = HEAP32[(HEAP32[424254] | 0) + (i14 << 2) >> 2] | 0;
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if (i1 | 0) {
    i11 = HEAP32[i1 + (i15 * 20 | 0) >> 2] | 0;
    i10 = HEAP32[i1 + (i15 * 20 | 0) + 4 >> 2] | 0;
    i7 = HEAP16[i1 + (i15 * 20 | 0) + 12 >> 1] | 0;
    i6 = HEAP16[i1 + (i15 * 20 | 0) + 14 >> 1] | 0;
    i9 = HEAP16[i1 + (i15 * 20 | 0) + 16 >> 1] | 0;
    i8 = HEAP16[i1 + (i15 * 20 | 0) + 18 >> 1] | 0;
    if ((i11 | 0) >= 0) {
     i18 = HEAP16[i1 + (i15 * 20 | 0) + 10 >> 1] | 0;
     i17 = HEAP16[i1 + (i15 * 20 | 0) + 8 >> 1] | 0;
     HEAP8[i13 >> 0] = 1;
     _Gfx_BindVb_Textured(HEAP32[i2 + 8 >> 2] | 0);
     i5 = i10 + i11 | 0;
     i12 = i2 + 7 | 0;
     i1 = HEAP8[i12 >> 0] | 0;
     i3 = i17 & 65535;
     i4 = i18 & 65535;
     i2 = i18 << 16 >> 16 != 0 & (i1 & 2) != 0;
     i1 = i17 << 16 >> 16 != 0 & (i1 & 1) != 0;
     do if (i1 & i2) {
      _Gfx_SetFaceCulling(1);
      i1 = i3 + i4 | 0;
      _Gfx_DrawIndexedTris_T2fC4b(i1, i5);
      _Gfx_SetFaceCulling(0);
      i16 = 11;
     } else {
      if (i1) {
       _Gfx_DrawIndexedTris_T2fC4b(i3, i5);
       i1 = i3;
       i16 = 11;
       break;
      }
      if (i2) {
       _Gfx_DrawIndexedTris_T2fC4b(i4, i5 + i3 | 0);
       i1 = i4;
       i16 = 11;
      }
     } while (0);
     if ((i16 | 0) == 11) {
      i16 = 0;
      HEAP32[422210] = (HEAP32[422210] | 0) + i1;
     }
     i3 = i3 + i4 + i5 | 0;
     i1 = HEAP8[i12 >> 0] | 0;
     i5 = i7 & 65535;
     i4 = i6 & 65535;
     i2 = i6 << 16 >> 16 != 0 & (i1 & 8) != 0;
     i1 = i7 << 16 >> 16 != 0 & (i1 & 4) != 0;
     do if (i1 & i2) {
      _Gfx_SetFaceCulling(1);
      i1 = i4 + i5 | 0;
      _Gfx_DrawIndexedTris_T2fC4b(i1, i3);
      _Gfx_SetFaceCulling(0);
      i16 = 18;
     } else {
      if (i1) {
       _Gfx_DrawIndexedTris_T2fC4b(i5, i3);
       i1 = i5;
       i16 = 18;
       break;
      }
      if (i2) {
       _Gfx_DrawIndexedTris_T2fC4b(i4, i3 + i5 | 0);
       i1 = i4;
       i16 = 18;
      }
     } while (0);
     if ((i16 | 0) == 18) {
      i16 = 0;
      HEAP32[422210] = (HEAP32[422210] | 0) + i1;
     }
     i4 = i4 + i5 + i3 | 0;
     i2 = HEAP8[i12 >> 0] | 0;
     i1 = i9 & 65535;
     i5 = i8 & 65535;
     i3 = i8 << 16 >> 16 != 0 & (i2 & 32) != 0;
     i2 = i9 << 16 >> 16 != 0 & (i2 & 16) != 0;
     do if (i2 & i3) {
      _Gfx_SetFaceCulling(1);
      i1 = i5 + i1 | 0;
      _Gfx_DrawIndexedTris_T2fC4b(i1, i4);
      _Gfx_SetFaceCulling(0);
      i16 = 25;
     } else {
      if (i2) {
       _Gfx_DrawIndexedTris_T2fC4b(i1, i4);
       i16 = 25;
       break;
      }
      if (i3) {
       _Gfx_DrawIndexedTris_T2fC4b(i5, i4 + i1 | 0);
       i1 = i5;
       i16 = 25;
      }
     } while (0);
     if ((i16 | 0) == 25) {
      i16 = 0;
      HEAP32[422210] = (HEAP32[422210] | 0) + i1;
     }
     if (i10 | 0) {
      i3 = 2 ? i10 >> 2 : i10;
      _Gfx_SetFaceCulling(1);
      i1 = HEAP8[i12 >> 0] | 0;
      if (i1 & 6) {
       _Gfx_DrawIndexedTris_T2fC4b(i3, i11);
       HEAP32[422210] = (HEAP32[422210] | 0) + i3;
       i1 = HEAP8[i12 >> 0] | 0;
      }
      i2 = i3 + i11 | 0;
      if (i1 & 9) {
       _Gfx_DrawIndexedTris_T2fC4b(i3, i2);
       HEAP32[422210] = (HEAP32[422210] | 0) + i3;
       i1 = HEAP8[i12 >> 0] | 0;
      }
      i2 = i2 + i3 | 0;
      if (i1 & 5) {
       _Gfx_DrawIndexedTris_T2fC4b(i3, i2);
       HEAP32[422210] = (HEAP32[422210] | 0) + i3;
       i1 = HEAP8[i12 >> 0] | 0;
      }
      if (i1 & 10) {
       _Gfx_DrawIndexedTris_T2fC4b(i3, i2 + i3 | 0);
       HEAP32[422210] = (HEAP32[422210] | 0) + i3;
      }
      _Gfx_SetFaceCulling(0);
     }
    }
   }
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) < (HEAP32[424265] | 0));
 }
 return;
}

function _GZipHeader_Read(i5, i7) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i1 = HEAP8[i7 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 0:
  {
   i2 = i5 + 4 | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
   if (!i1) if ((HEAP8[i6 >> 0] | 0) == 31) {
    HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
    i4 = 11;
   } else i1 = -857812939;
   break;
  }
 case 1:
  {
   i2 = i5 + 4 | 0;
   i4 = 11;
   break;
  }
 case 2:
  {
   i2 = i5 + 4 | 0;
   i4 = 14;
   break;
  }
 case 3:
  {
   i1 = i5 + 4 | 0;
   i4 = 17;
   break;
  }
 case 4:
  {
   i4 = 20;
   break;
  }
 case 5:
  {
   i4 = 26;
   break;
  }
 case 6:
  {
   i1 = i5 + 4 | 0;
   i4 = 28;
   break;
  }
 case 8:
  {
   i4 = 30;
   break;
  }
 case 9:
  {
   i1 = 9;
   i2 = i7 + 4 | 0;
   i4 = 37;
   break;
  }
 case 7:
  {
   i1 = 7;
   i2 = i7 + 4 | 0;
   i4 = 44;
   break;
  }
 default:
  i1 = 0;
 }
 if ((i4 | 0) == 11) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
  if (!i1) if ((HEAP8[i6 >> 0] | 0) == -117) {
   HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   i4 = 14;
  } else i1 = -857812938;
 }
 if ((i4 | 0) == 14) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
  if (!i1) if ((HEAP8[i6 >> 0] | 0) == 8) {
   HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   i1 = i2;
   i4 = 17;
  } else i1 = -857812937;
 }
 if ((i4 | 0) == 17) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 127](i5, i6) | 0;
  if (!i1) {
   i3 = HEAPU8[i6 >> 0] | 0;
   HEAP32[i7 + 4 >> 2] = i3;
   if (!(i3 & 4)) {
    i1 = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
    HEAP8[i7 >> 0] = i1;
    i4 = 20;
   } else i1 = -857812936;
  }
 }
 L23 : do if ((i4 | 0) == 20) {
  i3 = i7 + 2 | 0;
  if ((HEAPU8[i3 >> 0] | 0) < 4) {
   i2 = i5 + 4 | 0;
   do {
    i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
    if (i1 | 0) break L23;
    i1 = (HEAP8[i3 >> 0] | 0) + 1 << 24 >> 24;
    HEAP8[i3 >> 0] = i1;
   } while ((i1 & 255) < 4);
   i1 = HEAP8[i7 >> 0] | 0;
  }
  HEAP8[i7 >> 0] = i1 + 1 << 24 >> 24;
  HEAP8[i3 >> 0] = 0;
  i4 = 26;
 } while (0);
 if ((i4 | 0) == 26) {
  i2 = i5 + 4 | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
  if (!i1) {
   HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   i1 = i2;
   i4 = 28;
  }
 }
 if ((i4 | 0) == 28) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 127](i5, i6) | 0;
  if (!i1) {
   i1 = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   HEAP8[i7 >> 0] = i1;
   i4 = 30;
  }
 }
 L38 : do if ((i4 | 0) == 30) {
  i2 = i7 + 4 | 0;
  if (HEAP32[i2 >> 2] & 8) {
   i3 = i5 + 4 | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i5, i6) | 0;
   if (i1 | 0) break;
   while (1) {
    if (!(HEAP8[i6 >> 0] | 0)) break;
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i5, i6) | 0;
    if (i1 | 0) break L38;
   }
   i1 = HEAP8[i7 >> 0] | 0;
  }
  i1 = i1 + 1 << 24 >> 24;
  HEAP8[i7 >> 0] = i1;
  i4 = 37;
 } while (0);
 L48 : do if ((i4 | 0) == 37) {
  if (HEAP32[i2 >> 2] & 16) {
   i3 = i5 + 4 | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i5, i6) | 0;
   if (i1 | 0) break;
   while (1) {
    if (!(HEAP8[i6 >> 0] | 0)) break;
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i5, i6) | 0;
    if (i1 | 0) break L48;
   }
   i1 = HEAP8[i7 >> 0] | 0;
  }
  i1 = i1 + 1 << 24 >> 24;
  HEAP8[i7 >> 0] = i1;
  i4 = 44;
 } while (0);
 L58 : do if ((i4 | 0) == 44) {
  i3 = i7 + 2 | 0;
  if (HEAP32[i2 >> 2] & 2) if ((HEAPU8[i3 >> 0] | 0) < 2) {
   i2 = i5 + 4 | 0;
   do {
    i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i5, i6) | 0;
    if (i1 | 0) break L58;
    i4 = (HEAP8[i3 >> 0] | 0) + 1 << 24 >> 24;
    HEAP8[i3 >> 0] = i4;
   } while ((i4 & 255) < 2);
   i1 = HEAP8[i7 >> 0] | 0;
  }
  HEAP8[i7 >> 0] = i1 + 1 << 24 >> 24;
  HEAP8[i3 >> 0] = 0;
  HEAP8[i7 + 1 >> 0] = 1;
  i1 = 0;
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _CustomModel_DrawPart(i19, i1, i17) {
 i19 = i19 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, d21 = 0.0;
 i18 = i19 + 100 | 0;
 if (HEAP8[i18 >> 0] | 0) {
  i2 = 0;
  do {
   i16 = 1714720 + (i2 << 2) | 0;
   HEAP32[833280 + (i2 << 2) >> 2] = HEAP32[i16 >> 2];
   HEAP32[i16 >> 2] = -1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 6);
 }
 HEAP8[1714760] = 3;
 i16 = i1 + 4 | 0;
 i13 = i19 + 4 | 0;
 i14 = i19 + 8 | 0;
 i15 = i19 + 12 | 0;
 i12 = 0;
 i1 = 0;
 i6 = 0;
 d4 = +HEAPF32[i19 + 16 >> 2] * .01745329238474369;
 d5 = +HEAPF32[i19 + 20 >> 2] * .01745329238474369;
 d3 = +HEAPF32[i19 + 24 >> 2] * .01745329238474369;
 while (1) {
  i2 = HEAP8[i19 + 92 + i12 >> 0] | 0;
  i9 = HEAP8[i19 + 96 + i12 >> 0] | 0;
  L8 : do if (!(i2 << 24 >> 24)) i2 = i6; else {
   d11 = +_CustomModel_GetAnimValue(i2, i19 + 28 + (i12 << 4) | 0, i17);
   L10 : do if (!(i6 << 24 >> 24)) {
    switch (i2 << 24 >> 24) {
    case 21:
    case 20:
    case 19:
    case 18:
    case 15:
    case 14:
    case 13:
    case 12:
     break;
    default:
     {
      i10 = 0;
      break L10;
     }
    }
    _Mem_Copy(833312, (HEAP32[i16 >> 2] | 0) + (HEAPU16[i19 >> 1] << 4) | 0, 384) | 0;
    i10 = 1;
   } else i10 = i6; while (0);
   switch (i2 << 24 >> 24) {
   case 19:
   case 18:
   case 13:
   case 12:
    {
     i6 = HEAP32[i16 >> 2] | 0;
     i7 = HEAPU16[i19 >> 1] | 0;
     i8 = 0;
     while (1) {
      i2 = i8 + i7 | 0;
      switch (i9 << 24 >> 24) {
      case 0:
       {
        i2 = i6 + (i2 << 4) | 0;
        i20 = 16;
        break;
       }
      case 1:
       {
        i2 = i6 + (i2 << 4) + 4 | 0;
        i20 = 16;
        break;
       }
      case 2:
       {
        i2 = i6 + (i2 << 4) + 8 | 0;
        i20 = 16;
        break;
       }
      default:
       {}
      }
      if ((i20 | 0) == 16) {
       i20 = 0;
       HEAPF32[i2 >> 2] = d11 + +HEAPF32[i2 >> 2];
      }
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == 24) {
       i2 = i10;
       break L8;
      }
     }
    }
   case 21:
   case 20:
   case 15:
   case 14:
    {
     i8 = 0;
     while (1) {
      i2 = HEAP32[i16 >> 2] | 0;
      i6 = i8 + (HEAPU16[i19 >> 1] | 0) | 0;
      switch (i9 << 24 >> 24) {
      case 0:
       {
        i7 = i13;
        i2 = i2 + (i6 << 4) | 0;
        i20 = 22;
        break;
       }
      case 1:
       {
        i7 = i14;
        i2 = i2 + (i6 << 4) + 4 | 0;
        i20 = 22;
        break;
       }
      case 2:
       {
        i7 = i15;
        i2 = i2 + (i6 << 4) + 8 | 0;
        i20 = 22;
        break;
       }
      default:
       {}
      }
      if ((i20 | 0) == 22) {
       i20 = 0;
       d21 = +_Math_Lerp(+HEAPF32[i7 >> 2], +HEAPF32[i2 >> 2], d11);
       HEAPF32[i2 >> 2] = d21;
      }
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == 24) {
       i2 = i10;
       break L8;
      }
     }
    }
   case 1:
    {
     i1 = 1;
     break;
    }
   default:
    {}
   }
   switch (i9 << 24 >> 24) {
   case 0:
    {
     i2 = i10;
     d4 = d4 + d11;
     break L8;
    }
   case 1:
    {
     i2 = i10;
     d5 = d5 + d11;
     break L8;
    }
   case 2:
    {
     i2 = i10;
     d3 = d3 + d11;
     break L8;
    }
   default:
    {
     i2 = i10;
     break L8;
    }
   }
  } while (0);
  i12 = i12 + 1 | 0;
  if ((i12 | 0) == 4) break; else i6 = i2;
 }
 if (i1 << 24 >> 24 == 0 & ((d3 != 0.0 | (d5 != 0.0 | d4 != 0.0)) ^ 1)) _Model_DrawPart(i19); else _Model_DrawRotate(d4, d5, d3, i19, i1);
 if (i2 << 24 >> 24) _Mem_Copy((HEAP32[i16 >> 2] | 0) + (HEAPU16[i19 >> 1] << 4) | 0, 833312, 384) | 0;
 if (HEAP8[i18 >> 0] | 0) {
  HEAP32[428680] = HEAP32[208320];
  HEAP32[428681] = HEAP32[208321];
  HEAP32[428682] = HEAP32[208322];
  HEAP32[428683] = HEAP32[208323];
  HEAP32[428684] = HEAP32[208324];
  HEAP32[428685] = HEAP32[208325];
 }
 return;
}

function _try_realloc_chunk(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i12 + 4 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i1 = i9 & -8;
 i6 = i12 + i1 | 0;
 if (!(i9 & 3)) {
  if (i11 >>> 0 < 256) {
   i12 = 0;
   return i12 | 0;
  }
  if (i1 >>> 0 >= (i11 + 4 | 0) >>> 0) if ((i1 - i11 | 0) >>> 0 <= HEAP32[467115] << 1 >>> 0) return i12 | 0;
  i12 = 0;
  return i12 | 0;
 }
 if (i1 >>> 0 >= i11 >>> 0) {
  i1 = i1 - i11 | 0;
  if (i1 >>> 0 <= 15) return i12 | 0;
  i8 = i12 + i11 | 0;
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i8 + 4 >> 2] = i1 | 3;
  i11 = i6 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i8, i1);
  return i12 | 0;
 }
 if ((HEAP32[467001] | 0) == (i6 | 0)) {
  i8 = (HEAP32[466998] | 0) + i1 | 0;
  i2 = i8 - i11 | 0;
  i1 = i12 + i11 | 0;
  if (i8 >>> 0 <= i11 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i1 + 4 >> 2] = i2 | 1;
  HEAP32[467001] = i1;
  HEAP32[466998] = i2;
  return i12 | 0;
 }
 if ((HEAP32[467e3] | 0) == (i6 | 0)) {
  i2 = (HEAP32[466997] | 0) + i1 | 0;
  if (i2 >>> 0 < i11 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = i2 - i11 | 0;
  if (i1 >>> 0 > 15) {
   i8 = i12 + i11 | 0;
   i2 = i12 + i2 | 0;
   HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
   HEAP32[i8 + 4 >> 2] = i1 | 1;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i8;
  } else {
   HEAP32[i10 >> 2] = i9 & 1 | i2 | 2;
   i2 = i12 + i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[466997] = i1;
  HEAP32[467e3] = i2;
  return i12 | 0;
 }
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 & 2 | 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = (i2 & -8) + i1 | 0;
 if (i7 >>> 0 < i11 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i7 - i11 | 0;
 i3 = 3 ? i2 >>> 3 : i2;
 do if (i2 >>> 0 < 256) {
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[466995] = HEAP32[466995] & ~(1 << i3);
   break;
  } else {
   HEAP32[i2 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i2;
   break;
  }
 } else {
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (i5 | 0) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 1868284 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[466996] = HEAP32[466996] & ~(1 << i1);
     break;
    }
   } else {
    i4 = i5 + 16 | 0;
    HEAP32[((HEAP32[i4 >> 2] | 0) == (i6 | 0) ? i4 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) break;
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
  }
 } while (0);
 if (i8 >>> 0 < 16) {
  HEAP32[i10 >> 2] = i9 & 1 | i7 | 2;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  return i12 | 0;
 } else {
  i6 = i12 + i11 | 0;
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i6 + 4 >> 2] = i8 | 3;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i6, i8);
  return i12 | 0;
 }
 return 0;
}

function _Cw_Save(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 i3 = i6;
 i2 = HEAP32[417347] | 0;
 i1 = _Nbt_WriteArray(_Nbt_WriteUInt8(_Nbt_WriteDict(i3, 31976) | 0, 31989, 1) | 0, 31538, 16) | 0;
 _Mem_Copy(i1, 978960, 16) | 0;
 i1 = _Nbt_WriteUInt16(i1 + 16 | 0, 35643, HEAP32[244733] & 65535) | 0;
 i1 = _Nbt_WriteUInt16(i1, 35645, HEAP32[244734] & 65535) | 0;
 i1 = _Nbt_WriteDict(_Nbt_WriteUInt16(i1, 35647, HEAP32[244735] & 65535) | 0, 31520) | 0;
 i1 = _Nbt_WriteInt32(i1, 31533, HEAP32[244754] | 0) | 0;
 HEAP8[i1 >> 0] = 0;
 i1 = _Nbt_WriteDict(i1 + 1 | 0, 50940) | 0;
 i1 = _Nbt_WriteUInt16(i1, 35643, ~~+HEAPF32[i2 + 4 >> 2] & 65535) | 0;
 i1 = _Nbt_WriteUInt16(i1, 35645, ~~+HEAPF32[i2 + 8 >> 2] & 65535) | 0;
 i1 = _Nbt_WriteUInt16(i1, 35647, ~~+HEAPF32[i2 + 12 >> 2] & 65535) | 0;
 i1 = _Nbt_WriteUInt8(i1, 35611, ~~(+HEAPF32[i2 + 448 >> 2] * 256.0 / 360.0) & 255) | 0;
 i1 = _Nbt_WriteUInt8(i1, 35627, ~~(+HEAPF32[i2 + 452 >> 2] * 256.0 / 360.0) & 255) | 0;
 HEAP8[i1 >> 0] = 0;
 i4 = i3;
 i1 = _Stream_Write(i5, i3, (_Nbt_WriteArray(i1 + 1 | 0, 31543, HEAP32[244732] | 0) | 0) - i4 | 0) | 0;
 L1 : do if (!i1) {
  i1 = _Stream_Write(i5, HEAP32[244730] | 0, HEAP32[244732] | 0) | 0;
  if (!i1) {
   if ((HEAP32[244730] | 0) != (HEAP32[244731] | 0)) {
    i1 = _Stream_Write(i5, i3, (_Nbt_WriteArray(i3, 31569, HEAP32[244732] | 0) | 0) - i4 | 0) | 0;
    if (i1 | 0) break;
    i1 = _Stream_Write(i5, HEAP32[244731] | 0, HEAP32[244732] | 0) | 0;
    if (i1 | 0) break;
   }
   i1 = _Nbt_WriteDict(_Nbt_WriteDict(_Nbt_WriteDict(i3, 31217) | 0, 31213) | 0, 47303) | 0;
   i1 = _Nbt_WriteUInt16(i1, 31318, ~~(+HEAPF32[i2 + 456 >> 2] * 32.0) & 65535) | 0;
   HEAP8[i1 >> 0] = 0;
   i1 = _Nbt_WriteDict(i1 + 1 | 0, 47190) | 0;
   i1 = _Nbt_WriteUInt8(i1, 31327, HEAP32[466934] & 255) | 0;
   HEAP8[i1 >> 0] = 0;
   i1 = _Nbt_WriteDict(i1 + 1 | 0, 47250) | 0;
   i1 = _Cw_WriteColor(i1, 31480, HEAP32[466938] | 0) | 0;
   i1 = _Cw_WriteColor(i1, 31484, HEAP32[466940] | 0) | 0;
   i1 = _Cw_WriteColor(i1, 51246, HEAP32[466939] | 0) | 0;
   i1 = _Cw_WriteColor(i1, 31499, HEAP32[466946] | 0) | 0;
   i1 = _Cw_WriteColor(i1, 31490, HEAP32[466942] | 0) | 0;
   i1 = _Cw_WriteColor(i1, 31507, HEAP32[466941] | 0) | 0;
   HEAP8[i1 >> 0] = 0;
   i1 = _Nbt_WriteDict(i1 + 1 | 0, 46819) | 0;
   i1 = _Nbt_WriteUInt8(i1, 31339, HEAP16[933855] & 255) | 0;
   i1 = _Nbt_WriteUInt8(i1, 31349, HEAP16[933854] & 255) | 0;
   i1 = _Nbt_WriteString(_Nbt_WriteUInt16(i1, 31359, HEAP32[466928] & 65535) | 0, 31369, 22388) | 0;
   HEAP8[i1 >> 0] = 0;
   i1 = _Nbt_WriteDict(i1 + 1 | 0, 46806) | 0;
   i1 = _Nbt_WriteUInt16(i1, 31349, HEAP16[933854] | 0) | 0;
   i1 = _Nbt_WriteUInt16(i1, 31339, HEAP16[933855] | 0) | 0;
   i1 = _Nbt_WriteInt32(i1, 31380, HEAP32[466928] | 0) | 0;
   i1 = _Nbt_WriteInt32(i1, 31391, HEAP32[466929] | 0) | 0;
   i1 = _Nbt_WriteInt32(i1, 31403, HEAP32[466930] | 0) | 0;
   i1 = _Nbt_WriteFloat(i1, 31416, +HEAPF32[466931]) | 0;
   i1 = _Nbt_WriteFloat(i1, 31428, +HEAPF32[466932]) | 0;
   i1 = _Nbt_WriteFloat(i1, 31441, +HEAPF32[466933]) | 0;
   i1 = _Nbt_WriteUInt8(i1, 31453, HEAP32[466935] & 255) | 0;
   i1 = _Nbt_WriteFloat(i1, 31460, +HEAPF32[466936]) | 0;
   i1 = _Nbt_WriteFloat(i1, 31470, +HEAPF32[466937]) | 0;
   HEAP8[i1 >> 0] = 0;
   i1 = _Stream_Write(i5, i3, (_Nbt_WriteDict(i1 + 1 | 0, 47148) | 0) - i4 | 0) | 0;
   if (!i1) {
    i2 = 767;
    while (1) {
     if ((_Block_IsCustomDefined(i2 & 65535) | 0) << 24 >> 24) {
      i1 = _Cw_WriteBockDef(i5, i2) | 0;
      if (i1 | 0) break L1;
     }
     if (i2 >>> 0 > 1) i2 = i2 + -1 | 0; else break;
    }
    i1 = _Stream_Write(i5, 1868745, 4) | 0;
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _RenderTranslucentBatch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = Math_imul(HEAP32[424248] | 0, i1) | 0;
 if ((HEAP32[424265] | 0) > 0) {
  i10 = 363376 + i1 | 0;
  i11 = 0;
  do {
   i8 = HEAP32[(HEAP32[424254] | 0) + (i11 << 2) >> 2] | 0;
   i1 = HEAP32[i8 + 16 >> 2] | 0;
   do if (i1 | 0) {
    i3 = HEAP32[i1 + (i13 * 20 | 0) >> 2] | 0;
    i5 = HEAP16[i1 + (i13 * 20 | 0) + 8 >> 1] | 0;
    i4 = HEAP16[i1 + (i13 * 20 | 0) + 10 >> 1] | 0;
    i6 = HEAP16[i1 + (i13 * 20 | 0) + 12 >> 1] | 0;
    i7 = HEAP16[i1 + (i13 * 20 | 0) + 14 >> 1] | 0;
    i12 = HEAP16[i1 + (i13 * 20 | 0) + 16 >> 1] | 0;
    i9 = HEAP16[i1 + (i13 * 20 | 0) + 18 >> 1] | 0;
    if ((i3 | 0) >= 0) {
     HEAP8[i10 >> 0] = 1;
     _Gfx_BindVb_Textured(HEAP32[i8 + 8 >> 2] | 0);
     if (!(HEAP8[1868794] | 0)) {
      i2 = HEAP8[i8 + 7 >> 0] | 0;
      i1 = i5 << 16 >> 16 != 0 & (i2 & 1) != 0;
      if (!(i2 & 2)) {
       if (i1) i14 = 12;
      } else i14 = 9;
     } else {
      i1 = i5 << 16 >> 16 != 0;
      i14 = 9;
     }
     do if ((i14 | 0) == 9) {
      i14 = 0;
      i2 = i4 << 16 >> 16 != 0;
      if (i2 & i1) {
       i2 = (i4 & 65535) + (i5 & 65535) | 0;
       _Gfx_DrawIndexedTris_T2fC4b(i2, i3);
       HEAP32[422210] = (HEAP32[422210] | 0) + i2;
       break;
      }
      if (i1) i14 = 12; else {
       i1 = i4 & 65535;
       if (i2) {
        _Gfx_DrawIndexedTris_T2fC4b(i1, i3 + (i5 & 65535) | 0);
        HEAP32[422210] = (HEAP32[422210] | 0) + i1;
       }
      }
     } while (0);
     if ((i14 | 0) == 12) {
      i14 = 0;
      i2 = i5 & 65535;
      _Gfx_DrawIndexedTris_T2fC4b(i2, i3);
      HEAP32[422210] = (HEAP32[422210] | 0) + i2;
     }
     i3 = i3 + (i5 & 65535) + (i4 & 65535) | 0;
     if (!(HEAP8[1868794] | 0)) {
      i5 = HEAP8[i8 + 7 >> 0] | 0;
      i1 = i6 << 16 >> 16 != 0 & (i5 & 4) != 0;
      if (!(i5 & 8)) {
       if (i1) i14 = 22;
      } else i14 = 19;
     } else {
      i1 = i6 << 16 >> 16 != 0;
      i14 = 19;
     }
     do if ((i14 | 0) == 19) {
      i14 = 0;
      i2 = i7 << 16 >> 16 != 0;
      if (i2 & i1) {
       i5 = (i7 & 65535) + (i6 & 65535) | 0;
       _Gfx_DrawIndexedTris_T2fC4b(i5, i3);
       HEAP32[422210] = (HEAP32[422210] | 0) + i5;
       break;
      }
      if (i1) i14 = 22; else {
       i1 = i7 & 65535;
       if (i2) {
        _Gfx_DrawIndexedTris_T2fC4b(i1, i3 + (i6 & 65535) | 0);
        HEAP32[422210] = (HEAP32[422210] | 0) + i1;
       }
      }
     } while (0);
     if ((i14 | 0) == 22) {
      i14 = 0;
      i5 = i6 & 65535;
      _Gfx_DrawIndexedTris_T2fC4b(i5, i3);
      HEAP32[422210] = (HEAP32[422210] | 0) + i5;
     }
     i3 = (i7 & 65535) + (i6 & 65535) + i3 | 0;
     if (!(HEAP8[1868794] | 0)) {
      i8 = HEAP8[i8 + 7 >> 0] | 0;
      i1 = i12 << 16 >> 16 != 0 & (i8 & 16) != 0;
      if (!(i8 & 32)) {
       if (!i1) break;
      } else i14 = 29;
     } else {
      i1 = i12 << 16 >> 16 != 0;
      i14 = 29;
     }
     if ((i14 | 0) == 29) {
      i14 = 0;
      i2 = i9 << 16 >> 16 != 0;
      if (i2 & i1) {
       i12 = (i9 & 65535) + (i12 & 65535) | 0;
       _Gfx_DrawIndexedTris_T2fC4b(i12, i3);
       HEAP32[422210] = (HEAP32[422210] | 0) + i12;
       break;
      }
      if (!i1) {
       i1 = i9 & 65535;
       if (!i2) break;
       _Gfx_DrawIndexedTris_T2fC4b(i1, i3 + (i12 & 65535) | 0);
       HEAP32[422210] = (HEAP32[422210] | 0) + i1;
       break;
      }
     }
     i12 = i12 & 65535;
     _Gfx_DrawIndexedTris_T2fC4b(i12, i3);
     HEAP32[422210] = (HEAP32[422210] | 0) + i12;
    }
   } while (0);
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (HEAP32[424265] | 0));
 }
 return;
}

function _PhysicsComp_UpdateVelocityState(i9) {
 i9 = i9 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i11;
 i8 = HEAP32[i9 + 8 >> 2] | 0;
 i10 = HEAP32[i9 + 24 >> 2] | 0;
 if (!(HEAP8[i10 + 1 >> 0] | 0)) {
  if (HEAP8[i9 + 2 >> 0] | 0) if ((_Entity_TouchesAnyRope(i8) | 0) << 24 >> 24) {
   i1 = i8 + 40 | 0;
   if (+HEAPF32[i1 >> 2] > .019999999552965164) HEAPF32[i1 >> 2] = .019999999552965164;
  }
 } else {
  i3 = i8 + 40 | 0;
  HEAPF32[i3 >> 2] = 0.0;
  if (!(HEAP8[i10 + 36 >> 0] | 0)) if (!(HEAP8[i9 + 2 >> 0] | 0)) i1 = ((HEAP8[i10 + 37 >> 0] | 0) != 0) << 31 >> 31; else i1 = 1; else i1 = 1;
  d6 = +(i1 | 0);
  d5 = d6 * .11999999731779099;
  d2 = d5 + 0.0;
  HEAPF32[i3 >> 2] = d2;
  if (HEAP8[i10 + 38 >> 0] | 0) if (HEAP8[i10 + 13 >> 0] | 0) {
   d2 = d5 + d2;
   HEAPF32[i3 >> 2] = d2;
  }
  if (HEAP8[i10 + 39 >> 0] | 0) if (HEAP8[i10 + 13 >> 0] | 0) HEAPF32[i3 >> 2] = d6 * .05999999865889549 + d2;
 }
 do if (!(HEAP8[i9 + 2 >> 0] | 0)) HEAP8[i9 + 1 >> 0] = 0; else {
  i3 = _Entity_TouchesAnyWater(i8) | 0;
  i1 = _Entity_TouchesAnyLava(i8) | 0;
  i4 = i1 << 24 >> 24 == 0;
  if ((i1 | i3) << 24 >> 24) {
   _Entity_GetBounds(i8, i7);
   i14 = i7 + 4 | 0;
   i3 = _Math_Floor(+HEAPF32[i14 >> 2]) | 0;
   i1 = i7 + 16 | 0;
   i12 = _Math_Floor(+HEAPF32[i1 >> 2]) | 0;
   i13 = (i3 | 0) < (i12 | 0) ? i3 + 1 | 0 : i12;
   d6 = +(i3 | 0);
   HEAPF32[i14 >> 2] = d6;
   HEAPF32[i1 >> 2] = d6;
   i3 = _Entity_TouchesAny(i7, 22) | 0;
   HEAPF32[i14 >> 2] = +(((i13 | 0) < (i12 | 0) ? i13 : i12) | 0);
   HEAPF32[i1 >> 2] = +(((i13 | 0) > (i12 | 0) ? i13 : i12) | 0);
   if (!(i3 << 24 >> 24 == 0 | (_Entity_TouchesAny(i7, 22) | 0) << 24 >> 24 != 0)) if (+_Math_Mod1(+HEAPF32[i8 + 8 >> 2]) >= .4000000059604645) {
    if (!((_Collisions_HitHorizontal(HEAP32[i9 + 28 >> 2] | 0) | 0) << 24 >> 24)) {
     i1 = i9 + 1 | 0;
     i3 = i8 + 40 | 0;
     if (HEAP8[i1 >> 0] | 0) HEAPF32[i3 >> 2] = (i4 ? .10000000149011612 : .20000000298023224) + +HEAPF32[i3 >> 2];
    } else {
     i1 = i8 + 40 | 0;
     HEAPF32[i1 >> 2] = (i4 ? .12999999523162842 : .30000001192092896) + +HEAPF32[i1 >> 2];
     i1 = i9 + 1 | 0;
    }
    HEAP8[i1 >> 0] = 0;
    break;
   }
   HEAP8[i9 + 1 >> 0] = 1;
   i1 = i8 + 40 | 0;
   d2 = +HEAPF32[i1 >> 2] + .03999999910593033;
   HEAPF32[i1 >> 2] = d2;
   if (HEAP8[i10 + 38 >> 0] | 0) if (HEAP8[i10 + 13 >> 0] | 0) {
    d2 = d2 + .03999999910593033;
    HEAPF32[i1 >> 2] = d2;
   }
   if (!(HEAP8[i10 + 39 >> 0] | 0)) break;
   if (!(HEAP8[i10 + 13 >> 0] | 0)) break;
   HEAPF32[i1 >> 2] = d2 + .019999999552965164;
   break;
  }
  if (!(HEAP8[i9 >> 0] | 0)) {
   if (!((_Entity_TouchesAnyRope(i8) | 0) << 24 >> 24)) {
    if (!(HEAP8[i8 + 111 >> 0] | 0)) break;
    _PhysicsComp_DoNormalJump(i9);
    break;
   }
   if (!(HEAP8[i10 + 38 >> 0] | 0)) d2 = .10000000149011612; else d2 = (HEAP8[i10 + 13 >> 0] | 0) == 0 ? .10000000149011612 : .15000000596046448;
   i14 = i8 + 40 | 0;
   HEAPF32[i14 >> 2] = d2 + +HEAPF32[i14 >> 2];
   HEAP8[i9 + 1 >> 0] = 0;
   break;
  }
  i1 = i8 + 40 | 0;
  d2 = +HEAPF32[i1 >> 2] + .03999999910593033;
  HEAPF32[i1 >> 2] = d2;
  if (HEAP8[i10 + 38 >> 0] | 0) if (HEAP8[i10 + 13 >> 0] | 0) {
   d2 = d2 + .03999999910593033;
   HEAPF32[i1 >> 2] = d2;
  }
  if (HEAP8[i10 + 39 >> 0] | 0) if (HEAP8[i10 + 13 >> 0] | 0) HEAPF32[i1 >> 2] = d2 + .019999999552965164;
  HEAP8[i9 + 1 >> 0] = 0;
 } while (0);
 STACKTOP = i11;
 return;
}

function _Cw_WriteBockDef(i8, i4) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 i5 = i10;
 i11 = i10 + 1040 | 0;
 i7 = i10 + 1032 | 0;
 i9 = i10 + 1024 | 0;
 i2 = 1006372 + i4 | 0;
 i3 = (HEAP8[i2 >> 0] | 0) == 5;
 HEAP32[i7 >> 2] = i11;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 9;
 _String_AppendConst(i7, 31514);
 _String_AppendHex(i7, (8 ? i4 >>> 8 : i4) & 255);
 i1 = i4 & 255;
 _String_AppendHex(i7, i1);
 HEAP8[i11 + 9 >> 0] = 0;
 i6 = i4 & 65535;
 i1 = _Nbt_WriteUInt16(_Nbt_WriteUInt8(_Nbt_WriteDict(i5, i11) | 0, 31226, i1) | 0, 31229, i6) | 0;
 i1 = _Nbt_WriteUInt8(i1, 31233, HEAP8[1000996 + i4 >> 0] | 0) | 0;
 i1 = _Nbt_WriteArray(_Nbt_WriteFloat(i1, 50967, +HEAPF32[1002532 + (i4 << 2) >> 2]) | 0, 31292, 12) | 0;
 i11 = i4 * 6 | 0;
 i12 = HEAP16[1047844 + (i11 + 5 << 1) >> 1] | 0;
 HEAP8[i1 >> 0] = i12;
 HEAP8[i1 + 6 >> 0] = 8 ? (i12 & 65535) >>> 8 : i12 & 65535;
 i12 = HEAP16[1047844 + (i11 + 4 << 1) >> 1] | 0;
 HEAP8[i1 + 1 >> 0] = i12;
 HEAP8[i1 + 7 >> 0] = 8 ? (i12 & 65535) >>> 8 : i12 & 65535;
 i12 = HEAP16[1047844 + (i11 << 1) >> 1] | 0;
 HEAP8[i1 + 2 >> 0] = i12;
 HEAP8[i1 + 8 >> 0] = 8 ? (i12 & 65535) >>> 8 : i12 & 65535;
 i12 = HEAP16[1047844 + ((i11 | 1) << 1) >> 1] | 0;
 HEAP8[i1 + 3 >> 0] = i12;
 HEAP8[i1 + 9 >> 0] = 8 ? (i12 & 65535) >>> 8 : i12 & 65535;
 i12 = HEAP16[1047844 + (i11 + 2 << 1) >> 1] | 0;
 HEAP8[i1 + 4 >> 0] = i12;
 HEAP8[i1 + 10 >> 0] = 8 ? (i12 & 65535) >>> 8 : i12 & 65535;
 i11 = HEAP16[1047844 + (i11 + 3 << 1) >> 1] | 0;
 HEAP8[i1 + 5 >> 0] = i11;
 HEAP8[i1 + 11 >> 0] = 8 ? (i11 & 65535) >>> 8 : i11 & 65535;
 i1 = _Nbt_WriteUInt8(i1 + 12 | 0, 31245, (HEAP8[993316 + i4 >> 0] | 0) == 0 & 1) | 0;
 i1 = _Nbt_WriteUInt8(i1, 31301, HEAP8[1007140 + i4 >> 0] | 0) | 0;
 i1 = _Nbt_WriteUInt8(i1, 31260, _Block_WriteFullBright(HEAP8[994084 + i4 >> 0] | 0) | 0) | 0;
 if (i3) {
  i3 = _Nbt_WriteUInt8(i1, 31281, 0) | 0;
  i1 = HEAPU8[1010212 + i4 >> 0] | 0;
  i2 = 1020196 + (i4 * 12 | 0) + 4 | 0;
 } else {
  i12 = 1020196 + (i4 * 12 | 0) + 4 | 0;
  i3 = _Nbt_WriteUInt8(i1, 31281, ~~(+HEAPF32[i12 >> 2] * 16.0) & 255) | 0;
  i1 = HEAPU8[i2 >> 0] | 0;
  i2 = i12;
 }
 i12 = _Nbt_WriteArray(_Nbt_WriteUInt8(i3, 31271, i1 & 255) | 0, 51246, 4) | 0;
 d17 = +HEAPF32[997924 + (i4 << 2) >> 2];
 i11 = HEAP32[994852 + (i4 << 2) >> 2] | 0;
 HEAP8[i12 >> 0] = d17 != 0.0 ? ~~(d17 * 128.0 + -1.0) & 255 : -1;
 HEAP8[i12 + 1 >> 0] = i11;
 HEAP8[i12 + 2 >> 0] = 8 ? i11 >>> 8 : i11;
 HEAP8[i12 + 3 >> 0] = 16 ? i11 >>> 16 : i11;
 i12 = _Nbt_WriteArray(i12 + 4 | 0, 31311, 6) | 0;
 d17 = +HEAPF32[1010980 + (i4 * 12 | 0) + 4 >> 2];
 d16 = +HEAPF32[1010980 + (i4 * 12 | 0) + 8 >> 2];
 d15 = +HEAPF32[1020196 + (i4 * 12 | 0) >> 2];
 d14 = +HEAPF32[i2 >> 2];
 d13 = +HEAPF32[1020196 + (i4 * 12 | 0) + 8 >> 2];
 HEAP8[i12 >> 0] = ~~(+HEAPF32[1010980 + (i4 * 12 | 0) >> 2] * 16.0);
 HEAP8[i12 + 1 >> 0] = ~~(d17 * 16.0);
 HEAP8[i12 + 2 >> 0] = ~~(d16 * 16.0);
 HEAP8[i12 + 3 >> 0] = ~~(d15 * 16.0);
 HEAP8[i12 + 4 >> 0] = ~~(d14 * 16.0);
 HEAP8[i12 + 5 >> 0] = ~~(d13 * 16.0);
 _Block_UNSAFE_GetName(i9, i6);
 i6 = i9;
 i9 = HEAP32[i6 + 4 >> 2] | 0;
 i11 = i7;
 HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i11 + 4 >> 2] = i9;
 i12 = _Nbt_WriteString(i12 + 6 | 0, 31287, i7) | 0;
 HEAP8[i12 >> 0] = 0;
 i12 = _Stream_Write(i8, i5, i12 + 1 - i5 | 0) | 0;
 STACKTOP = i10;
 return i12 | 0;
}

function _Adv_DrawZMax(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i6 = HEAPU16[934358] | 0;
 i8 = HEAPU16[1047844 + ((i6 * 6 | 0) + 3 << 1) >> 1] | 0;
 d15 = +HEAPF32[460411];
 d17 = d15 * +(HEAP32[460409] & i8 | 0);
 i14 = HEAP32[414130] | 0;
 d4 = +(i1 + -1 | 0);
 d16 = +HEAPF32[414133] * .9993749856948853 + d4;
 d2 = d17 + d15 * +HEAPF32[414134];
 d15 = d17 + d15 * +HEAPF32[414131] * .9993749856948853;
 i13 = HEAP32[460410] | 0;
 i8 = (i13 ? i8 >>> i13 : i8) + (HEAP32[414123] | 0) | 0;
 i13 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i12 = (19 ? i13 >>> 19 : i13) & 1;
 i7 = (22 ? i13 >>> 22 : i13) & 1;
 i11 = ((21 ? i13 >>> 21 : i13) & 1) + i7 | 0;
 i10 = i11 + i12 + ((18 ? i13 >>> 18 : i13) & 1) | 0;
 i9 = (25 ? i13 >>> 25 : i13) & 1;
 i11 = i11 + i9 + ((24 ? i13 >>> 24 : i13) & 1) | 0;
 i7 = ((23 ? i13 >>> 23 : i13) & 1) + i7 | 0;
 i12 = i7 + i12 + ((20 ? i13 >>> 20 : i13) & 1) | 0;
 i13 = i7 + i9 + ((26 ? i13 >>> 26 : i13) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i7 = HEAP32[143776 + (i13 << 2) >> 2] | 0;
  i1 = HEAP32[143776 + (i11 << 2) >> 2] | 0;
  i3 = HEAP32[143776 + (i10 << 2) >> 2] | 0;
  i5 = HEAP32[143776 + (i12 << 2) >> 2] | 0;
 } else {
  i7 = -1;
  i1 = -1;
  i3 = -1;
  i5 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i9 = HEAP32[994852 + (i6 << 2) >> 2] | 0;
  i3 = _PackedCol_Tint(i3, i9) | 0;
  i1 = _PackedCol_Tint(i1, i9) | 0;
  i7 = _PackedCol_Tint(i7, i9) | 0;
  i5 = _PackedCol_Tint(i5, i9) | 0;
 }
 i9 = 110944 + (i8 << 5) + 12 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[414129] | 0;
 if ((i13 + i10 | 0) >>> 0 > (i12 + i11 | 0) >>> 0) {
  i11 = HEAP32[414124] | 0;
  i13 = HEAP32[414128] | 0;
  HEAP32[i6 >> 2] = i11;
  HEAP32[i6 + 4 >> 2] = i13;
  HEAP32[i6 + 8 >> 2] = i8;
  HEAP32[i6 + 12 >> 2] = i5;
  HEAP32[i6 + 16 >> 2] = i14;
  HEAPF32[i6 + 20 >> 2] = d2;
  i12 = HEAP32[414125] | 0;
  HEAP32[i6 + 24 >> 2] = i11;
  HEAP32[i6 + 28 >> 2] = i12;
  HEAP32[i6 + 32 >> 2] = i8;
  HEAP32[i6 + 36 >> 2] = i3;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d15;
  d4 = +HEAPF32[414127] + d4;
  HEAPF32[i6 + 48 >> 2] = d4;
  HEAP32[i6 + 52 >> 2] = i12;
  HEAP32[i6 + 56 >> 2] = i8;
  HEAP32[i6 + 60 >> 2] = i1;
  HEAPF32[i6 + 64 >> 2] = d16;
  i3 = i13;
  i1 = i7;
 } else {
  d4 = +HEAPF32[414127] + d4;
  i13 = HEAP32[414128] | 0;
  HEAPF32[i6 >> 2] = d4;
  HEAP32[i6 + 4 >> 2] = i13;
  HEAP32[i6 + 8 >> 2] = i8;
  HEAP32[i6 + 12 >> 2] = i7;
  HEAPF32[i6 + 16 >> 2] = d16;
  HEAPF32[i6 + 20 >> 2] = d2;
  i12 = HEAP32[414124] | 0;
  HEAP32[i6 + 24 >> 2] = i12;
  HEAP32[i6 + 28 >> 2] = i13;
  HEAP32[i6 + 32 >> 2] = i8;
  HEAP32[i6 + 36 >> 2] = i5;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d2;
  i13 = HEAP32[414125] | 0;
  HEAP32[i6 + 48 >> 2] = i12;
  HEAP32[i6 + 52 >> 2] = i13;
  HEAP32[i6 + 56 >> 2] = i8;
  HEAP32[i6 + 60 >> 2] = i3;
  HEAP32[i6 + 64 >> 2] = i14;
  i3 = i13;
  d2 = d15;
 }
 HEAPF32[i6 + 68 >> 2] = d15;
 HEAPF32[i6 + 72 >> 2] = d4;
 HEAP32[i6 + 76 >> 2] = i3;
 HEAP32[i6 + 80 >> 2] = i8;
 HEAP32[i6 + 84 >> 2] = i1;
 HEAPF32[i6 + 88 >> 2] = d16;
 HEAPF32[i6 + 92 >> 2] = d2;
 HEAP32[i9 >> 2] = i6 + 96;
 return;
}

function _Adv_DrawYMax(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i6 = HEAPU16[934358] | 0;
 i8 = HEAPU16[1047844 + ((i6 * 6 | 0) + 5 << 1) >> 1] | 0;
 d15 = +HEAPF32[460411];
 d17 = d15 * +(HEAP32[460409] & i8 | 0);
 i14 = HEAP32[414130] | 0;
 d3 = +(i1 + -1 | 0);
 d16 = +HEAPF32[414133] * .9993749856948853 + d3;
 d2 = d17 + d15 * +HEAPF32[414132];
 d15 = d17 + d15 * +HEAPF32[414135] * .9993749856948853;
 i13 = HEAP32[460410] | 0;
 i8 = (i13 ? i8 >>> i13 : i8) + (HEAP32[414123] | 0) | 0;
 i13 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i12 = (11 ? i13 >>> 11 : i13) & 1;
 i7 = (14 ? i13 >>> 14 : i13) & 1;
 i11 = ((5 ? i13 >>> 5 : i13) & 1) + i7 | 0;
 i10 = i11 + i12 + ((2 ? i13 >>> 2 : i13) & 1) | 0;
 i9 = (17 ? i13 >>> 17 : i13) & 1;
 i11 = i11 + i9 + ((8 ? i13 >>> 8 : i13) & 1) | 0;
 i7 = ((23 ? i13 >>> 23 : i13) & 1) + i7 | 0;
 i12 = i7 + i12 + ((20 ? i13 >>> 20 : i13) & 1) | 0;
 i13 = i7 + i9 + ((26 ? i13 >>> 26 : i13) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i4 = HEAP32[143712 + (i10 << 2) >> 2] | 0;
  i1 = HEAP32[143712 + (i11 << 2) >> 2] | 0;
  i7 = HEAP32[143712 + (i13 << 2) >> 2] | 0;
  i5 = HEAP32[143712 + (i12 << 2) >> 2] | 0;
 } else {
  i4 = -1;
  i1 = -1;
  i7 = -1;
  i5 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i9 = HEAP32[994852 + (i6 << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i9) | 0;
  i1 = _PackedCol_Tint(i1, i9) | 0;
  i7 = _PackedCol_Tint(i7, i9) | 0;
  i5 = _PackedCol_Tint(i5, i9) | 0;
 }
 i9 = 110944 + (i8 << 5) + 20 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[414128] | 0;
 if ((i10 + i13 | 0) >>> 0 > (i12 + i11 | 0) >>> 0) {
  d3 = +HEAPF32[414127] + d3;
  i13 = HEAP32[414126] | 0;
  HEAPF32[i6 >> 2] = d3;
  HEAP32[i6 + 4 >> 2] = i8;
  HEAP32[i6 + 8 >> 2] = i13;
  HEAP32[i6 + 12 >> 2] = i1;
  HEAPF32[i6 + 16 >> 2] = d16;
  HEAPF32[i6 + 20 >> 2] = d2;
  i1 = HEAP32[414124] | 0;
  HEAP32[i6 + 24 >> 2] = i1;
  HEAP32[i6 + 28 >> 2] = i8;
  HEAP32[i6 + 32 >> 2] = i13;
  HEAP32[i6 + 36 >> 2] = i4;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d2;
  i4 = HEAP32[414129] | 0;
  HEAP32[i6 + 48 >> 2] = i1;
  HEAP32[i6 + 52 >> 2] = i8;
  HEAP32[i6 + 56 >> 2] = i4;
  HEAP32[i6 + 60 >> 2] = i5;
  HEAP32[i6 + 64 >> 2] = i14;
  d2 = d15;
  i1 = i7;
 } else {
  i12 = HEAP32[414124] | 0;
  i13 = HEAP32[414126] | 0;
  HEAP32[i6 >> 2] = i12;
  HEAP32[i6 + 4 >> 2] = i8;
  HEAP32[i6 + 8 >> 2] = i13;
  HEAP32[i6 + 12 >> 2] = i4;
  HEAP32[i6 + 16 >> 2] = i14;
  HEAPF32[i6 + 20 >> 2] = d2;
  i4 = HEAP32[414129] | 0;
  HEAP32[i6 + 24 >> 2] = i12;
  HEAP32[i6 + 28 >> 2] = i8;
  HEAP32[i6 + 32 >> 2] = i4;
  HEAP32[i6 + 36 >> 2] = i5;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d15;
  d3 = +HEAPF32[414127] + d3;
  HEAPF32[i6 + 48 >> 2] = d3;
  HEAP32[i6 + 52 >> 2] = i8;
  HEAP32[i6 + 56 >> 2] = i4;
  HEAP32[i6 + 60 >> 2] = i7;
  HEAPF32[i6 + 64 >> 2] = d16;
  i4 = i13;
 }
 HEAPF32[i6 + 68 >> 2] = d15;
 HEAPF32[i6 + 72 >> 2] = d3;
 HEAP32[i6 + 76 >> 2] = i8;
 HEAP32[i6 + 80 >> 2] = i4;
 HEAP32[i6 + 84 >> 2] = i1;
 HEAPF32[i6 + 88 >> 2] = d16;
 HEAPF32[i6 + 92 >> 2] = d2;
 HEAP32[i9 >> 2] = i6 + 96;
 return;
}

function _Adv_DrawYMin(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i6 = HEAPU16[934358] | 0;
 i8 = HEAPU16[1047844 + ((i6 * 6 | 0) + 4 << 1) >> 1] | 0;
 d2 = +HEAPF32[460411];
 d17 = d2 * +(HEAP32[460409] & i8 | 0);
 i14 = HEAP32[414130] | 0;
 d4 = +(i1 + -1 | 0);
 d15 = +HEAPF32[414133] * .9993749856948853 + d4;
 d16 = d17 + d2 * +HEAPF32[414132];
 d2 = d17 + d2 * +HEAPF32[414135] * .9993749856948853;
 i13 = HEAP32[460410] | 0;
 i8 = (i13 ? i8 >>> i13 : i8) + (HEAP32[414123] | 0) | 0;
 i13 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i12 = (9 ? i13 >>> 9 : i13) & 1;
 i7 = (12 ? i13 >>> 12 : i13) & 1;
 i11 = ((3 ? i13 >>> 3 : i13) & 1) + i7 | 0;
 i10 = i11 + (i13 & 1) + i12 | 0;
 i9 = (15 ? i13 >>> 15 : i13) & 1;
 i11 = i11 + i9 + ((6 ? i13 >>> 6 : i13) & 1) | 0;
 i7 = ((21 ? i13 >>> 21 : i13) & 1) + i7 | 0;
 i12 = i7 + i12 + ((18 ? i13 >>> 18 : i13) & 1) | 0;
 i13 = i7 + i9 + ((24 ? i13 >>> 24 : i13) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i5 = HEAP32[143808 + (i12 << 2) >> 2] | 0;
  i7 = HEAP32[143808 + (i13 << 2) >> 2] | 0;
  i1 = HEAP32[143808 + (i11 << 2) >> 2] | 0;
  i3 = HEAP32[143808 + (i10 << 2) >> 2] | 0;
 } else {
  i5 = -1;
  i7 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i9 = HEAP32[994852 + (i6 << 2) >> 2] | 0;
  i3 = _PackedCol_Tint(i3, i9) | 0;
  i1 = _PackedCol_Tint(i1, i9) | 0;
  i7 = _PackedCol_Tint(i7, i9) | 0;
  i5 = _PackedCol_Tint(i5, i9) | 0;
 }
 i9 = 110944 + (i8 << 5) + 16 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[414125] | 0;
 if ((i12 + i11 | 0) >>> 0 > (i10 + i13 | 0) >>> 0) {
  d4 = +HEAPF32[414127] + d4;
  i13 = HEAP32[414129] | 0;
  HEAPF32[i6 >> 2] = d4;
  HEAP32[i6 + 4 >> 2] = i8;
  HEAP32[i6 + 8 >> 2] = i13;
  HEAP32[i6 + 12 >> 2] = i7;
  HEAPF32[i6 + 16 >> 2] = d15;
  HEAPF32[i6 + 20 >> 2] = d2;
  i12 = HEAP32[414124] | 0;
  HEAP32[i6 + 24 >> 2] = i12;
  HEAP32[i6 + 28 >> 2] = i8;
  HEAP32[i6 + 32 >> 2] = i13;
  HEAP32[i6 + 36 >> 2] = i5;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d2;
  i13 = HEAP32[414126] | 0;
  HEAP32[i6 + 48 >> 2] = i12;
  HEAP32[i6 + 52 >> 2] = i8;
  HEAP32[i6 + 56 >> 2] = i13;
  HEAP32[i6 + 60 >> 2] = i3;
  HEAP32[i6 + 64 >> 2] = i14;
  i3 = i13;
  d2 = d16;
 } else {
  i11 = HEAP32[414124] | 0;
  i13 = HEAP32[414129] | 0;
  HEAP32[i6 >> 2] = i11;
  HEAP32[i6 + 4 >> 2] = i8;
  HEAP32[i6 + 8 >> 2] = i13;
  HEAP32[i6 + 12 >> 2] = i5;
  HEAP32[i6 + 16 >> 2] = i14;
  HEAPF32[i6 + 20 >> 2] = d2;
  i12 = HEAP32[414126] | 0;
  HEAP32[i6 + 24 >> 2] = i11;
  HEAP32[i6 + 28 >> 2] = i8;
  HEAP32[i6 + 32 >> 2] = i12;
  HEAP32[i6 + 36 >> 2] = i3;
  HEAP32[i6 + 40 >> 2] = i14;
  HEAPF32[i6 + 44 >> 2] = d16;
  d4 = +HEAPF32[414127] + d4;
  HEAPF32[i6 + 48 >> 2] = d4;
  HEAP32[i6 + 52 >> 2] = i8;
  HEAP32[i6 + 56 >> 2] = i12;
  HEAP32[i6 + 60 >> 2] = i1;
  HEAPF32[i6 + 64 >> 2] = d15;
  i3 = i13;
  i1 = i7;
 }
 HEAPF32[i6 + 68 >> 2] = d16;
 HEAPF32[i6 + 72 >> 2] = d4;
 HEAP32[i6 + 76 >> 2] = i8;
 HEAP32[i6 + 80 >> 2] = i3;
 HEAP32[i6 + 84 >> 2] = i1;
 HEAPF32[i6 + 88 >> 2] = d15;
 HEAPF32[i6 + 92 >> 2] = d2;
 HEAP32[i9 >> 2] = i6 + 96;
 return;
}

function _Adv_DrawXMax(i15) {
 i15 = i15 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0;
 i5 = HEAPU16[934358] | 0;
 i8 = HEAPU16[1047844 + ((i5 * 6 | 1) << 1) >> 1] | 0;
 d16 = +HEAPF32[460411];
 d18 = d16 * +(HEAP32[460409] & i8 | 0);
 d17 = +(i15 | 0) - +HEAPF32[414132];
 d1 = (1.0 - +HEAPF32[414135]) * .9993749856948853;
 d4 = d18 + d16 * +HEAPF32[414134];
 d16 = d18 + d16 * +HEAPF32[414131] * .9993749856948853;
 i13 = HEAP32[460410] | 0;
 i8 = (i13 ? i8 >>> i13 : i8) + (HEAP32[414123] | 0) | 0;
 i13 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i12 = (7 ? i13 >>> 7 : i13) & 1;
 i9 = (16 ? i13 >>> 16 : i13) & 1;
 i11 = ((15 ? i13 >>> 15 : i13) & 1) + i9 | 0;
 i10 = i11 + i12 + ((6 ? i13 >>> 6 : i13) & 1) | 0;
 i14 = (25 ? i13 >>> 25 : i13) & 1;
 i11 = i11 + i14 + ((24 ? i13 >>> 24 : i13) & 1) | 0;
 i9 = ((17 ? i13 >>> 17 : i13) & 1) + i9 | 0;
 i12 = i9 + i12 + ((8 ? i13 >>> 8 : i13) & 1) | 0;
 i13 = i9 + i14 + ((26 ? i13 >>> 26 : i13) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i2 = HEAP32[143744 + (i10 << 2) >> 2] | 0;
  i3 = HEAP32[143744 + (i12 << 2) >> 2] | 0;
  i7 = HEAP32[143744 + (i13 << 2) >> 2] | 0;
  i6 = HEAP32[143744 + (i11 << 2) >> 2] | 0;
 } else {
  i2 = -1;
  i3 = -1;
  i7 = -1;
  i6 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i14 = HEAP32[994852 + (i5 << 2) >> 2] | 0;
  i2 = _PackedCol_Tint(i2, i14) | 0;
  i3 = _PackedCol_Tint(i3, i14) | 0;
  i7 = _PackedCol_Tint(i7, i14) | 0;
  i6 = _PackedCol_Tint(i6, i14) | 0;
 }
 i14 = 110944 + (i8 << 5) + 4 | 0;
 i8 = HEAP32[i14 >> 2] | 0;
 i9 = HEAP32[414127] | 0;
 i5 = HEAP32[414128] | 0;
 if ((i10 + i13 | 0) >>> 0 > (i11 + i12 | 0) >>> 0) {
  i13 = HEAP32[414126] | 0;
  HEAP32[i8 >> 2] = i9;
  HEAP32[i8 + 4 >> 2] = i5;
  HEAP32[i8 + 8 >> 2] = i13;
  HEAP32[i8 + 12 >> 2] = i3;
  HEAPF32[i8 + 16 >> 2] = d17;
  HEAPF32[i8 + 20 >> 2] = d4;
  d18 = +HEAPF32[414129] + +(i15 + -1 | 0);
  HEAP32[i8 + 24 >> 2] = i9;
  HEAP32[i8 + 28 >> 2] = i5;
  HEAPF32[i8 + 32 >> 2] = d18;
  HEAP32[i8 + 36 >> 2] = i7;
  HEAPF32[i8 + 40 >> 2] = d1;
  HEAPF32[i8 + 44 >> 2] = d4;
  i5 = HEAP32[414125] | 0;
  HEAP32[i8 + 48 >> 2] = i9;
  HEAP32[i8 + 52 >> 2] = i5;
  HEAPF32[i8 + 56 >> 2] = d18;
  i7 = i13;
  d4 = d16;
  i3 = i2;
  i2 = i6;
 } else {
  d18 = +HEAPF32[414129] + +(i15 + -1 | 0);
  HEAP32[i8 >> 2] = i9;
  HEAP32[i8 + 4 >> 2] = i5;
  HEAPF32[i8 + 8 >> 2] = d18;
  HEAP32[i8 + 12 >> 2] = i7;
  HEAPF32[i8 + 16 >> 2] = d1;
  HEAPF32[i8 + 20 >> 2] = d4;
  i15 = HEAP32[414125] | 0;
  HEAP32[i8 + 24 >> 2] = i9;
  HEAP32[i8 + 28 >> 2] = i15;
  HEAPF32[i8 + 32 >> 2] = d18;
  HEAP32[i8 + 36 >> 2] = i6;
  HEAPF32[i8 + 40 >> 2] = d1;
  HEAPF32[i8 + 44 >> 2] = d16;
  i7 = HEAP32[414126] | 0;
  HEAP32[i8 + 48 >> 2] = i9;
  HEAP32[i8 + 52 >> 2] = i15;
  HEAP32[i8 + 56 >> 2] = i7;
  d1 = d17;
 }
 HEAP32[i8 + 60 >> 2] = i2;
 HEAPF32[i8 + 64 >> 2] = d1;
 HEAPF32[i8 + 68 >> 2] = d16;
 HEAP32[i8 + 72 >> 2] = i9;
 HEAP32[i8 + 76 >> 2] = i5;
 HEAP32[i8 + 80 >> 2] = i7;
 HEAP32[i8 + 84 >> 2] = i3;
 HEAPF32[i8 + 88 >> 2] = d17;
 HEAPF32[i8 + 92 >> 2] = d4;
 HEAP32[i14 >> 2] = i8 + 96;
 return;
}

function _Adv_DrawXMin(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0;
 i5 = HEAPU16[934358] | 0;
 i8 = HEAPU16[1047844 + (i5 * 6 << 1) >> 1] | 0;
 d16 = +HEAPF32[460411];
 d18 = d16 * +(HEAP32[460409] & i8 | 0);
 i15 = HEAP32[414132] | 0;
 d4 = +(i1 + -1 | 0);
 d17 = +HEAPF32[414135] * .9993749856948853 + d4;
 d2 = d18 + d16 * +HEAPF32[414134];
 d16 = d18 + d16 * +HEAPF32[414131] * .9993749856948853;
 i14 = HEAP32[460410] | 0;
 i8 = (i14 ? i8 >>> i14 : i8) + (HEAP32[414123] | 0) | 0;
 i14 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i13 = (1 ? i14 >>> 1 : i14) & 1;
 i9 = (10 ? i14 >>> 10 : i14) & 1;
 i12 = ((9 ? i14 >>> 9 : i14) & 1) + i9 | 0;
 i11 = i12 + (i14 & 1) + i13 | 0;
 i10 = (19 ? i14 >>> 19 : i14) & 1;
 i12 = i12 + i10 + ((18 ? i14 >>> 18 : i14) & 1) | 0;
 i9 = ((11 ? i14 >>> 11 : i14) & 1) + i9 | 0;
 i13 = i9 + i13 + ((2 ? i14 >>> 2 : i14) & 1) | 0;
 i14 = i9 + i10 + ((20 ? i14 >>> 20 : i14) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = HEAP32[143744 + (i11 << 2) >> 2] | 0;
  i6 = HEAP32[143744 + (i13 << 2) >> 2] | 0;
  i7 = HEAP32[143744 + (i14 << 2) >> 2] | 0;
  i1 = HEAP32[143744 + (i12 << 2) >> 2] | 0;
 } else {
  i3 = -1;
  i6 = -1;
  i7 = -1;
  i1 = -1;
 }
 if (!(HEAP8[1868732] | 0)) i10 = i3; else {
  i9 = HEAP32[994852 + (i5 << 2) >> 2] | 0;
  i10 = _PackedCol_Tint(i3, i9) | 0;
  i6 = _PackedCol_Tint(i6, i9) | 0;
  i7 = _PackedCol_Tint(i7, i9) | 0;
  i1 = _PackedCol_Tint(i1, i9) | 0;
 }
 i9 = 110944 + (i8 << 5) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[414124] | 0;
 i3 = HEAP32[414128] | 0;
 if ((i11 + i14 | 0) >>> 0 > (i12 + i13 | 0) >>> 0) {
  i13 = HEAP32[414126] | 0;
  HEAP32[i5 >> 2] = i8;
  HEAP32[i5 + 4 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i13;
  HEAP32[i5 + 12 >> 2] = i6;
  HEAP32[i5 + 16 >> 2] = i15;
  HEAPF32[i5 + 20 >> 2] = d2;
  i14 = HEAP32[414125] | 0;
  HEAP32[i5 + 24 >> 2] = i8;
  HEAP32[i5 + 28 >> 2] = i14;
  HEAP32[i5 + 32 >> 2] = i13;
  HEAP32[i5 + 36 >> 2] = i10;
  HEAP32[i5 + 40 >> 2] = i15;
  HEAPF32[i5 + 44 >> 2] = d16;
  d4 = +HEAPF32[414129] + d4;
  HEAP32[i5 + 48 >> 2] = i8;
  HEAP32[i5 + 52 >> 2] = i14;
  HEAPF32[i5 + 56 >> 2] = d4;
  HEAP32[i5 + 60 >> 2] = i1;
  HEAPF32[i5 + 64 >> 2] = d17;
  i1 = i7;
 } else {
  d4 = +HEAPF32[414129] + d4;
  HEAP32[i5 >> 2] = i8;
  HEAP32[i5 + 4 >> 2] = i3;
  HEAPF32[i5 + 8 >> 2] = d4;
  HEAP32[i5 + 12 >> 2] = i7;
  HEAPF32[i5 + 16 >> 2] = d17;
  HEAPF32[i5 + 20 >> 2] = d2;
  i14 = HEAP32[414126] | 0;
  HEAP32[i5 + 24 >> 2] = i8;
  HEAP32[i5 + 28 >> 2] = i3;
  HEAP32[i5 + 32 >> 2] = i14;
  HEAP32[i5 + 36 >> 2] = i6;
  HEAP32[i5 + 40 >> 2] = i15;
  HEAPF32[i5 + 44 >> 2] = d2;
  i3 = HEAP32[414125] | 0;
  HEAP32[i5 + 48 >> 2] = i8;
  HEAP32[i5 + 52 >> 2] = i3;
  HEAP32[i5 + 56 >> 2] = i14;
  HEAP32[i5 + 60 >> 2] = i10;
  HEAP32[i5 + 64 >> 2] = i15;
  d2 = d16;
 }
 HEAPF32[i5 + 68 >> 2] = d16;
 HEAP32[i5 + 72 >> 2] = i8;
 HEAP32[i5 + 76 >> 2] = i3;
 HEAPF32[i5 + 80 >> 2] = d4;
 HEAP32[i5 + 84 >> 2] = i1;
 HEAPF32[i5 + 88 >> 2] = d17;
 HEAPF32[i5 + 92 >> 2] = d2;
 HEAP32[i9 >> 2] = i5 + 96;
 return;
}

function _MapNativeKey(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 HEAP32[i2 >> 2] = i1;
 L1 : do if (!((i1 + -48 | 0) >>> 0 < 10 | (i1 + -65 | 0) >>> 0 < 26)) {
  if ((i1 + -112 | 0) >>> 0 < 24) {
   i1 = i1 + -111 | 0;
   break;
  }
  if ((i1 + -96 | 0) >>> 0 < 10) {
   i1 = i1 + 5 | 0;
   break;
  }
  do switch (i1 | 0) {
  case 8:
   {
    i1 = 94;
    break L1;
   }
  case 9:
   {
    i1 = 95;
    break L1;
   }
  case 13:
   {
    i1 = (i3 | 0) == 3 ? 116 : 91;
    break L1;
   }
  case 16:
   {
    i1 = (i3 | 0) == 2 ? 37 : 36;
    break L1;
   }
  case 17:
   {
    i1 = (i3 | 0) == 2 ? 39 : 38;
    break L1;
   }
  case 18:
   {
    i1 = (i3 | 0) == 2 ? 41 : 40;
    break L1;
   }
  case 19:
   {
    i1 = 99;
    break L1;
   }
  case 20:
   {
    i1 = 96;
    break L1;
   }
  case 27:
   {
    i1 = 92;
    break L1;
   }
  case 32:
   {
    i1 = 93;
    break L1;
   }
  case 33:
   {
    i1 = 62;
    break L1;
   }
  case 34:
   {
    i1 = 63;
    break L1;
   }
  case 35:
   {
    i1 = 61;
    break L1;
   }
  case 36:
   {
    i1 = 60;
    break L1;
   }
  case 37:
   {
    i1 = 46;
    break L1;
   }
  case 38:
   {
    i1 = 44;
    break L1;
   }
  case 39:
   {
    i1 = 47;
    break L1;
   }
  case 40:
   {
    i1 = 45;
    break L1;
   }
  case 44:
   {
    i1 = 98;
    break L1;
   }
  case 45:
   {
    i1 = 58;
    break L1;
   }
  case 46:
   {
    i1 = 59;
    break L1;
   }
  case 59:
   {
    i1 = 31;
    break L1;
   }
  case 61:
   {
    i1 = 27;
    break L1;
   }
  case 91:
   {
    i1 = (i3 | 0) == 2 ? 43 : 42;
    break L1;
   }
  case 106:
   {
    i1 = 112;
    break L1;
   }
  case 107:
   {
    i1 = 114;
    break L1;
   }
  case 109:
   {
    i1 = 113;
    break L1;
   }
  case 110:
   {
    i1 = 115;
    break L1;
   }
  case 111:
   {
    i1 = 111;
    break L1;
   }
  case 144:
   {
    i1 = 100;
    break L1;
   }
  case 145:
   {
    i1 = 97;
    break L1;
   }
  case 173:
   {
    i1 = 26;
    break L1;
   }
  case 188:
   {
    i1 = 33;
    break L1;
   }
  case 190:
   {
    i1 = 34;
    break L1;
   }
  case 191:
   {
    i1 = 30;
    break L1;
   }
  case 192:
   {
    i1 = 25;
    break L1;
   }
  case 219:
   {
    i1 = 28;
    break L1;
   }
  case 220:
   {
    i1 = 35;
    break L1;
   }
  case 221:
   {
    i1 = 29;
    break L1;
   }
  case 222:
   {
    i1 = 32;
    break L1;
   }
  case 181:
   {
    i1 = 130;
    break L1;
   }
  case 182:
   {
    i1 = 132;
    break L1;
   }
  case 183:
   {
    i1 = 131;
    break L1;
   }
  case 174:
   {
    i1 = 132;
    break L1;
   }
  case 175:
   {
    i1 = 131;
    break L1;
   }
  case 176:
   {
    i1 = 134;
    break L1;
   }
  case 177:
   {
    i1 = 135;
    break L1;
   }
  case 178:
   {
    i1 = 137;
    break L1;
   }
  case 179:
   {
    i1 = 136;
    break L1;
   }
  case 186:
   {
    i1 = 31;
    break L1;
   }
  case 187:
   {
    i1 = 27;
    break L1;
   }
  case 189:
   {
    i1 = 26;
    break L1;
   }
  default:
   {
    _Platform_Log1(53313, i2);
    i1 = 0;
    break L1;
   }
  } while (0);
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function _Adv_DrawZMin(i14) {
 i14 = i14 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0;
 i5 = HEAPU16[934358] | 0;
 i9 = HEAPU16[1047844 + ((i5 * 6 | 0) + 2 << 1) >> 1] | 0;
 d6 = +HEAPF32[460411];
 d7 = d6 * +(HEAP32[460409] & i9 | 0);
 d1 = +(i14 | 0) - +HEAPF32[414130];
 d18 = (1.0 - +HEAPF32[414133]) * .9993749856948853;
 d17 = d7 + d6 * +HEAPF32[414134];
 d6 = d7 + d6 * +HEAPF32[414131] * .9993749856948853;
 i13 = HEAP32[460410] | 0;
 i9 = (i13 ? i9 >>> i13 : i9) + (HEAP32[414123] | 0) | 0;
 i13 = HEAP32[(HEAP32[414122] | 0) + (HEAP32[414136] << 2) >> 2] | 0;
 i11 = (1 ? i13 >>> 1 : i13) & 1;
 i15 = (4 ? i13 >>> 4 : i13) & 1;
 i12 = ((3 ? i13 >>> 3 : i13) & 1) + i15 | 0;
 i10 = i12 + (i13 & 1) + i11 | 0;
 i15 = ((5 ? i13 >>> 5 : i13) & 1) + i15 | 0;
 i11 = i15 + i11 + ((2 ? i13 >>> 2 : i13) & 1) | 0;
 i16 = (7 ? i13 >>> 7 : i13) & 1;
 i12 = i12 + i16 + ((6 ? i13 >>> 6 : i13) & 1) | 0;
 i13 = i15 + i16 + ((8 ? i13 >>> 8 : i13) & 1) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i4 = HEAP32[143776 + (i10 << 2) >> 2] | 0;
  i3 = HEAP32[143776 + (i12 << 2) >> 2] | 0;
  i8 = HEAP32[143776 + (i13 << 2) >> 2] | 0;
  i2 = HEAP32[143776 + (i11 << 2) >> 2] | 0;
 } else {
  i4 = -1;
  i3 = -1;
  i8 = -1;
  i2 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i16 = HEAP32[994852 + (i5 << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i16) | 0;
  i3 = _PackedCol_Tint(i3, i16) | 0;
  i8 = _PackedCol_Tint(i8, i16) | 0;
  i2 = _PackedCol_Tint(i2, i16) | 0;
 }
 i16 = 110944 + (i9 << 5) + 8 | 0;
 i9 = HEAP32[i16 >> 2] | 0;
 i15 = HEAP32[414126] | 0;
 if ((i13 + i10 | 0) >>> 0 > (i11 + i12 | 0) >>> 0) {
  d7 = +HEAPF32[414127] + +(i14 + -1 | 0);
  i5 = HEAP32[414125] | 0;
  HEAPF32[i9 >> 2] = d7;
  HEAP32[i9 + 4 >> 2] = i5;
  HEAP32[i9 + 8 >> 2] = i15;
  HEAP32[i9 + 12 >> 2] = i3;
  HEAPF32[i9 + 16 >> 2] = d18;
  HEAPF32[i9 + 20 >> 2] = d6;
  i3 = HEAP32[414124] | 0;
  HEAP32[i9 + 24 >> 2] = i3;
  HEAP32[i9 + 28 >> 2] = i5;
  HEAP32[i9 + 32 >> 2] = i15;
  HEAP32[i9 + 36 >> 2] = i4;
  HEAPF32[i9 + 40 >> 2] = d1;
  HEAPF32[i9 + 44 >> 2] = d6;
  i5 = HEAP32[414128] | 0;
  HEAP32[i9 + 48 >> 2] = i3;
  i4 = i5;
  d6 = d17;
  i3 = i8;
 } else {
  i12 = HEAP32[414124] | 0;
  i13 = HEAP32[414125] | 0;
  HEAP32[i9 >> 2] = i12;
  HEAP32[i9 + 4 >> 2] = i13;
  HEAP32[i9 + 8 >> 2] = i15;
  HEAP32[i9 + 12 >> 2] = i4;
  HEAPF32[i9 + 16 >> 2] = d1;
  HEAPF32[i9 + 20 >> 2] = d6;
  i5 = HEAP32[414128] | 0;
  HEAP32[i9 + 24 >> 2] = i12;
  HEAP32[i9 + 28 >> 2] = i5;
  HEAP32[i9 + 32 >> 2] = i15;
  HEAP32[i9 + 36 >> 2] = i2;
  HEAPF32[i9 + 40 >> 2] = d1;
  HEAPF32[i9 + 44 >> 2] = d17;
  d7 = +HEAPF32[414127] + +(i14 + -1 | 0);
  HEAPF32[i9 + 48 >> 2] = d7;
  i4 = i13;
  i2 = i8;
  d1 = d18;
 }
 HEAP32[i9 + 52 >> 2] = i5;
 HEAP32[i9 + 56 >> 2] = i15;
 HEAP32[i9 + 60 >> 2] = i2;
 HEAPF32[i9 + 64 >> 2] = d1;
 HEAPF32[i9 + 68 >> 2] = d17;
 HEAPF32[i9 + 72 >> 2] = d7;
 HEAP32[i9 + 76 >> 2] = i4;
 HEAP32[i9 + 80 >> 2] = i15;
 HEAP32[i9 + 84 >> 2] = i3;
 HEAPF32[i9 + 88 >> 2] = d18;
 HEAPF32[i9 + 92 >> 2] = d6;
 HEAP32[i16 >> 2] = i9 + 96;
 return;
}

function _Animations_ReadDescription(i1, i21) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 2336 | 0;
 i17 = i22 + 2296 | 0;
 i18 = i22 + 2048 | 0;
 i15 = i22 + 2304 | 0;
 i19 = i22 + 2321 | 0;
 i20 = i22 + 2320 | 0;
 i14 = i22 + 2240 | 0;
 HEAP16[i15 >> 1] = 0;
 HEAP16[i15 + 2 >> 1] = 0;
 HEAP16[i15 + 4 >> 1] = 0;
 HEAP16[i15 + 6 >> 1] = 0;
 HEAP16[i15 + 8 >> 1] = 0;
 HEAP16[i15 + 10 >> 1] = 0;
 HEAP16[i15 + 12 >> 1] = 0;
 HEAP16[i15 + 14 >> 1] = 0;
 HEAP32[i17 >> 2] = i22 + 2112;
 i16 = i17 + 4 | 0;
 HEAP16[i16 >> 1] = 0;
 HEAP16[i17 + 6 >> 1] = 128;
 _Stream_ReadonlyBuffered(i14, i1, i22, 2048);
 i2 = i18 + 8 | 0;
 i3 = i18 + 16 | 0;
 i11 = i15 + 2 | 0;
 i4 = i18 + 24 | 0;
 i12 = i15 + 4 | 0;
 i5 = i18 + 32 | 0;
 i10 = i15 + 6 | 0;
 i6 = i18 + 40 | 0;
 i13 = i15 + 10 | 0;
 i7 = i18 + 48 | 0;
 i9 = i15 + 14 | 0;
 L1 : while (1) {
  i8 = _Stream_ReadLine(i14, i17) | 0;
  if ((i8 | 0) < 0) {
   i1 = 27;
   break;
  }
  switch (i8 | 0) {
  case 0:
   break;
  default:
   {
    i1 = 3;
    break L1;
   }
  }
  do if (HEAP16[i16 >> 1] | 0) if ((HEAP8[HEAP32[i17 >> 2] >> 0] | 0) != 35) {
   if ((_String_UNSAFE_Split(i17, 32, i18, 7) | 0) < 7) {
    _Chat_Add1(24030, i17);
    break;
   }
   i8 = (_Convert_ParseUInt8(i18, i19) | 0) << 24 >> 24 == 0;
   if (i8 | (HEAPU8[i19 >> 0] | 0) > 15) {
    _Chat_Add1(24066, i18);
    break;
   }
   i8 = (_Convert_ParseUInt8(i2, i20) | 0) << 24 >> 24 == 0;
   if (i8 | (HEAPU8[i20 >> 0] | 0) > 31) {
    _Chat_Add1(24098, i2);
    break;
   }
   if (!((_Convert_ParseUInt16(i3, i11) | 0) << 24 >> 24)) {
    _Chat_Add1(24130, i3);
    break;
   }
   if (!((_Convert_ParseUInt16(i4, i12) | 0) << 24 >> 24)) {
    _Chat_Add1(24163, i4);
    break;
   }
   i8 = (_Convert_ParseUInt16(i5, i10) | 0) << 24 >> 24 == 0;
   if (i8 | (HEAP16[i10 >> 1] | 0) == 0) {
    _Chat_Add1(24196, i5);
    break;
   }
   if (!((_Convert_ParseUInt16(i6, i13) | 0) << 24 >> 24)) {
    _Chat_Add1(24226, i6);
    break;
   }
   if (!((_Convert_ParseUInt16(i7, i9) | 0) << 24 >> 24)) {
    _Chat_Add1(24258, i7);
    break;
   }
   i1 = HEAP32[247113] | 0;
   if ((i1 | 0) == 512) {
    i1 = 24;
    break L1;
   }
   HEAP16[i15 >> 1] = (HEAPU8[i20 >> 0] << 4) + (HEAPU8[i19 >> 0] | 0);
   HEAP32[247113] = i1 + 1;
   i8 = 53504 + (i1 << 4) | 0;
   HEAP16[i8 >> 1] = HEAP16[i15 >> 1] | 0;
   HEAP16[i8 + 2 >> 1] = HEAP16[i15 + 2 >> 1] | 0;
   HEAP16[i8 + 4 >> 1] = HEAP16[i15 + 4 >> 1] | 0;
   HEAP16[i8 + 6 >> 1] = HEAP16[i15 + 6 >> 1] | 0;
   HEAP16[i8 + 8 >> 1] = HEAP16[i15 + 8 >> 1] | 0;
   HEAP16[i8 + 10 >> 1] = HEAP16[i15 + 10 >> 1] | 0;
   HEAP16[i8 + 12 >> 1] = HEAP16[i15 + 12 >> 1] | 0;
   HEAP16[i8 + 14 >> 1] = HEAP16[i15 + 14 >> 1] | 0;
  } while (0);
 }
 if ((i1 | 0) == 24) _Chat_AddRaw(24289); else if ((i1 | 0) == 27) switch (i8 | 0) {
 case -857812991:
  break;
 default:
  i1 = 3;
 }
 if ((i1 | 0) == 3) _Logger_SysWarn2(i8, 51358, i21);
 STACKTOP = i22;
 return;
}

function _ProcessGamepadButtons(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i1 | 0) > 0) {
  _Gamepad_SetButton(i3, 149, HEAP32[i2 + 1040 >> 2] | 0);
  if ((i1 | 0) == 1) i4 = 4; else {
   _Gamepad_SetButton(i3, 150, HEAP32[i2 + 1044 >> 2] | 0);
   if ((i1 | 0) > 2) {
    _Gamepad_SetButton(i3, 151, HEAP32[i2 + 1048 >> 2] | 0);
    if ((i1 | 0) == 3) i4 = 8; else {
     _Gamepad_SetButton(i3, 152, HEAP32[i2 + 1052 >> 2] | 0);
     if ((i1 | 0) > 4) {
      _Gamepad_SetButton(i3, 164, HEAP32[i2 + 1056 >> 2] | 0);
      if ((i1 | 0) == 5) i4 = 12; else {
       _Gamepad_SetButton(i3, 165, HEAP32[i2 + 1060 >> 2] | 0);
       if ((i1 | 0) > 6) {
        _Gamepad_SetButton(i3, 153, HEAP32[i2 + 1064 >> 2] | 0);
        if ((i1 | 0) == 7) i4 = 16; else {
         _Gamepad_SetButton(i3, 154, HEAP32[i2 + 1068 >> 2] | 0);
         if ((i1 | 0) > 8) {
          _Gamepad_SetButton(i3, 163, HEAP32[i2 + 1072 >> 2] | 0);
          if ((i1 | 0) == 9) i4 = 20; else {
           _Gamepad_SetButton(i3, 162, HEAP32[i2 + 1076 >> 2] | 0);
           if ((i1 | 0) > 10) {
            _Gamepad_SetButton(i3, 166, HEAP32[i2 + 1080 >> 2] | 0);
            if ((i1 | 0) == 11) i4 = 24; else {
             _Gamepad_SetButton(i3, 167, HEAP32[i2 + 1084 >> 2] | 0);
             if ((i1 | 0) > 12) {
              _Gamepad_SetButton(i3, 160, HEAP32[i2 + 1088 >> 2] | 0);
              if ((i1 | 0) == 13) i4 = 28; else {
               _Gamepad_SetButton(i3, 161, HEAP32[i2 + 1092 >> 2] | 0);
               if ((i1 | 0) > 14) {
                _Gamepad_SetButton(i3, 158, HEAP32[i2 + 1096 >> 2] | 0);
                if ((i1 | 0) == 15) i1 = 0; else i1 = HEAP32[i2 + 1100 >> 2] | 0;
               } else i4 = 30;
              }
             } else i4 = 26;
            }
           } else i4 = 22;
          }
         } else i4 = 18;
        }
       } else i4 = 14;
      }
     } else i4 = 10;
    }
   } else i4 = 6;
  }
 } else {
  _Gamepad_SetButton(i3, 149, 0);
  i4 = 4;
 }
 if ((i4 | 0) == 4) {
  _Gamepad_SetButton(i3, 150, 0);
  i4 = 6;
 }
 if ((i4 | 0) == 6) {
  _Gamepad_SetButton(i3, 151, 0);
  i4 = 8;
 }
 if ((i4 | 0) == 8) {
  _Gamepad_SetButton(i3, 152, 0);
  i4 = 10;
 }
 if ((i4 | 0) == 10) {
  _Gamepad_SetButton(i3, 164, 0);
  i4 = 12;
 }
 if ((i4 | 0) == 12) {
  _Gamepad_SetButton(i3, 165, 0);
  i4 = 14;
 }
 if ((i4 | 0) == 14) {
  _Gamepad_SetButton(i3, 153, 0);
  i4 = 16;
 }
 if ((i4 | 0) == 16) {
  _Gamepad_SetButton(i3, 154, 0);
  i4 = 18;
 }
 if ((i4 | 0) == 18) {
  _Gamepad_SetButton(i3, 163, 0);
  i4 = 20;
 }
 if ((i4 | 0) == 20) {
  _Gamepad_SetButton(i3, 162, 0);
  i4 = 22;
 }
 if ((i4 | 0) == 22) {
  _Gamepad_SetButton(i3, 166, 0);
  i4 = 24;
 }
 if ((i4 | 0) == 24) {
  _Gamepad_SetButton(i3, 167, 0);
  i4 = 26;
 }
 if ((i4 | 0) == 26) {
  _Gamepad_SetButton(i3, 160, 0);
  i4 = 28;
 }
 if ((i4 | 0) == 28) {
  _Gamepad_SetButton(i3, 161, 0);
  i4 = 30;
 }
 if ((i4 | 0) == 30) {
  _Gamepad_SetButton(i3, 158, 0);
  i1 = 0;
 }
 _Gamepad_SetButton(i3, 159, i1);
 return;
}

function _Nbt_ReadTag(i4, i3, i7, i1, i10, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i12;
 i6 = i12 + 233 | 0;
 i5 = i12 + 228 | 0;
 L1 : do if (!(i4 << 24 >> 24)) i1 = 0; else {
  HEAP8[i11 + 4 >> 0] = i4;
  HEAP32[i11 >> 2] = i1;
  i8 = i11 + 16 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i11 + 224 >> 2] = i2;
  i1 = i11 + 8 | 0;
  HEAP32[i1 >> 2] = i11 + 156;
  HEAP16[i11 + 12 >> 1] = 0;
  HEAP16[i11 + 14 >> 1] = 64;
  if (i3 << 24 >> 24) {
   i1 = _Nbt_ReadString(i7, i1) | 0;
   if (i1 | 0) break;
  }
  L6 : do switch (i4 << 24 >> 24) {
  case 1:
   {
    i1 = FUNCTION_TABLE_iii[HEAP32[i7 + 4 >> 2] & 127](i7, i11 + 20 | 0) | 0;
    i9 = 26;
    break;
   }
  case 2:
   {
    i1 = _Stream_Read(i7, i5, 2) | 0;
    i9 = _Stream_GetU16_BE(i5) | 0;
    HEAP16[i11 + 20 >> 1] = i9;
    i9 = 26;
    break;
   }
  case 5:
  case 3:
   {
    i1 = _Stream_ReadU32_BE(i7, i11 + 20 | 0) | 0;
    i9 = 26;
    break;
   }
  case 6:
  case 4:
   {
    i1 = FUNCTION_TABLE_iii[HEAP32[i7 + 12 >> 2] & 127](i7, 8) | 0;
    i9 = 26;
    break;
   }
  case 7:
   {
    i1 = _Stream_ReadU32_BE(i7, i8) | 0;
    if (i1 | 0) break L1;
    i1 = HEAP32[i8 >> 2] | 0;
    if (i1 >>> 0 < 65) {
     i1 = _Stream_Read(i7, i11 + 20 | 0, i1) | 0;
     i9 = 26;
     break L6;
    }
    i1 = _Mem_TryAlloc(i1, 1) | 0;
    i2 = i11 + 20 | 0;
    HEAP32[i2 >> 2] = i1;
    if (!i1) {
     i1 = -857812988;
     break L1;
    }
    i1 = _Stream_Read(i7, i1, HEAP32[i8 >> 2] | 0) | 0;
    if (i1 | 0) {
     _Mem_Free(HEAP32[i2 >> 2] | 0);
     break L1;
    }
    break;
   }
  case 8:
   {
    i1 = i11 + 20 | 0;
    HEAP32[i1 >> 2] = i11 + 28;
    HEAP16[i11 + 24 >> 1] = 0;
    HEAP16[i11 + 26 >> 1] = 128;
    i1 = _Nbt_ReadString(i7, i1) | 0;
    i9 = 26;
    break;
   }
  case 9:
   {
    i1 = _Stream_Read(i7, i5, 5) | 0;
    if (i1 | 0) break L1;
    HEAP8[i6 >> 0] = HEAP8[i5 >> 0] | 0;
    i2 = _Stream_GetU32_BE(i5 + 1 | 0) | 0;
    if (i2 | 0) {
     i3 = 0;
     do {
      i1 = _Nbt_ReadTag(HEAP8[i6 >> 0] | 0, 0, i7, i11, i10, i3) | 0;
      i3 = i3 + 1 | 0;
      if (i1 | 0) break L1;
     } while (i3 >>> 0 < i2 >>> 0);
    }
    break;
   }
  case 10:
   {
    i2 = i7 + 4 | 0;
    i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i7, i6) | 0;
    if (i1 | 0) break L1;
    while (1) {
     i1 = HEAP8[i6 >> 0] | 0;
     if (!(i1 << 24 >> 24)) break L6;
     i1 = _Nbt_ReadTag(i1, 1, i7, i11, i10, 0) | 0;
     if (i1 | 0) break L1;
     i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i7, i6) | 0;
     if (i1 | 0) break L1;
    }
   }
  default:
   {
    i1 = -857812912;
    break L1;
   }
  } while (0);
  if ((i9 | 0) == 26) if (i1 | 0) break;
  i1 = i11 + 220 | 0;
  HEAP32[i1 >> 2] = 0;
  FUNCTION_TABLE_vi[i10 & 511](i11);
  if ((HEAP32[i8 >> 2] | 0) >>> 0 >= 65) _Mem_Free(HEAP32[i11 + 20 >> 2] | 0);
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function _ChatInputWidget_TabKey(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i11 = i19 + 368 | 0;
 i9 = i19 + 256 | 0;
 i17 = i19;
 i6 = i19 + 352 | 0;
 i18 = i19 + 344 | 0;
 i10 = i19 + 360 | 0;
 i7 = i19 + 336 | 0;
 i15 = i19 + 328 | 0;
 i13 = i19 + 320 | 0;
 i14 = i16 + 160 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i1 | 0) == -1) i8 = (HEAPU16[i16 + 68 >> 1] | 0) + -1 | 0; else i8 = i1;
 i12 = i16 + 64 | 0;
 i2 = HEAP32[i12 >> 2] | 0;
 i4 = (i8 | 0) > -1;
 do if (i4) {
  i1 = i8;
  while (1) {
   if (!((_ChatInputWidget_IsNameChar(HEAP8[i2 + i1 >> 0] | 0) | 0) << 24 >> 24)) break;
   i3 = i1 + -1 | 0;
   if ((i1 | 0) > 0) i1 = i3; else {
    i1 = i3;
    break;
   }
  }
  i5 = i1 + 1 | 0;
  if (i4 & (i1 | 0) < (i8 | 0)) {
   i3 = i8 + 1 | 0;
   _String_UNSAFE_Substring(i6, i12, i5, i3 - i5 | 0);
   _Chat_AddOf(1841616, 257);
   HEAP32[i10 >> 2] = 0;
   i2 = 0;
   do {
    i1 = HEAP16[1669392 + (i2 << 1) >> 1] | 0;
    if (i1 << 16 >> 16) {
     _StringsBuffer_UNSAFE_Get(i7, 1670160, (i1 & 65535) + -3 | 0);
     i20 = i7;
     i1 = HEAP32[i20 + 4 >> 2] | 0;
     i4 = i18;
     HEAP32[i4 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i4 + 4 >> 2] = i1;
     if (_String_CaselessContains(i18, i6) | 0) {
      i20 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i20 + 1;
      HEAP8[i17 + i20 >> 0] = i2;
     }
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 256);
   i1 = HEAP32[i10 >> 2] | 0;
   if ((i1 | 0) != 1) {
    if ((i1 | 0) <= 1) break;
    HEAP32[i11 >> 2] = i9;
    i2 = i11 + 4 | 0;
    HEAP16[i2 >> 1] = 0;
    HEAP16[i11 + 6 >> 1] = 64;
    _String_Format1(i11, 51617, i10);
    L21 : do if ((HEAP32[i10 >> 2] | 0) > 0) {
     i1 = 0;
     do {
      _StringsBuffer_UNSAFE_Get(i13, 1670160, (HEAPU16[1669392 + ((HEAPU8[i17 + i1 >> 0] | 0) << 1) >> 1] | 0) + -3 | 0);
      i15 = i13;
      i20 = HEAP32[i15 + 4 >> 2] | 0;
      i16 = i18;
      HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i16 + 4 >> 2] = i20;
      if (((i20 & 65535) + (HEAPU16[i2 >> 1] | 0) | 0) >>> 0 > 63) break L21;
      _String_AppendString(i11, i18);
      _String_Append(i11, 32);
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (HEAP32[i10 >> 2] | 0));
    } while (0);
    _Chat_AddOf(i11, 257);
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   i2 = ((i1 | 0) == -1 ? i3 : i8) - i5 | 0;
   if ((i2 | 0) > 0) {
    i1 = 0;
    do {
     _String_DeleteAt(i12, i5);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i2 | 0));
    i1 = HEAP32[i14 >> 2] | 0;
   }
   if ((i1 | 0) != -1) HEAP32[i14 >> 2] = i1 - i2;
   _StringsBuffer_UNSAFE_Get(i15, 1670160, (HEAPU16[1669392 + ((HEAPU8[i17 >> 0] | 0) << 1) >> 1] | 0) + -3 | 0);
   i17 = HEAP32[i15 + 4 >> 2] | 0;
   i20 = i18;
   HEAP32[i20 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i20 + 4 >> 2] = i17;
   _InputWidget_AppendText(i16, i18);
  }
 } while (0);
 STACKTOP = i19;
 return;
}

function _Zip_Extract(i12, i7, i6, i8, i9) {
 i12 = i12 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = i14 + 8 | 0;
 i5 = i14 + 4 | 0;
 i11 = i14;
 HEAP32[i11 >> 2] = 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i12 + 24 >> 2] & 127](i12, i5) | 0;
 L1 : do if (!i1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i4 = i1 >>> 0 < 257 ? i1 : 257;
  if ((i4 | 0) > 22) {
   i3 = i12 + 16 | 0;
   if (FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i12, i1 + -22 | 0) | 0) {
    i1 = -857812946;
    break;
   }
   i2 = 22;
   while (1) {
    i1 = _Stream_ReadU32_LE(i12, i11) | 0;
    if (i1 | 0) break L1;
    i1 = HEAP32[i11 >> 2] | 0;
    i2 = i2 + 1 | 0;
    if (!((i1 | 0) != 101010256 & i2 >>> 0 < i4 >>> 0)) break;
    if (FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i12, (HEAP32[i5 >> 2] | 0) - i2 | 0) | 0) {
     i1 = -857812946;
     break L1;
    }
   }
   i1 = (i1 | 0) == 101010256;
  } else i1 = 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i13 + 4 >> 2] = i7;
  HEAP32[i13 + 8 >> 2] = i6;
  i6 = i13 + 12 | 0;
  HEAP32[i6 >> 2] = i8;
  HEAP32[i13 + 16 >> 2] = i9;
  if (i1) {
   i1 = _Zip_ReadEndOfCentralDirectory(i13) | 0;
   if (!i1) {
    i5 = i12 + 16 | 0;
    if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 127](i12, HEAP32[i13 + 28 >> 2] | 0) | 0)) {
     i4 = i13 + 20 | 0;
     HEAP32[i4 >> 2] = 0;
     i3 = i13 + 24 | 0;
     if ((HEAP32[i3 >> 2] | 0) > 0) {
      i2 = 0;
      do {
       i1 = _Stream_ReadU32_LE(i12, i11) | 0;
       if (i1 | 0) break L1;
       i1 = HEAP32[i11 >> 2] | 0;
       if ((i1 | 0) >= 101010256) {
        i10 = 27;
        break;
       }
       switch (i1 | 0) {
       case 33639248:
        break;
       default:
        {
         i1 = -857812943;
         break L1;
        }
       }
       i1 = _Zip_ReadCentralDirectory(i13) | 0;
       i2 = i2 + 1 | 0;
       if (i1 | 0) break L1;
      } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
      if ((i10 | 0) == 27) switch (i1 | 0) {
      case 101010256:
       break;
      default:
       {
        i1 = -857812943;
        break L1;
       }
      }
      i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) > 0) {
       i2 = HEAP32[i6 >> 2] | 0;
       i3 = 0;
       while (1) {
        if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 127](i12, HEAP32[i2 + (i3 * 12 | 0) + 8 >> 2] | 0) | 0) {
         i1 = -857812942;
         break L1;
        }
        i1 = _Stream_ReadU32_LE(i12, i11) | 0;
        if (i1 | 0) break L1;
        if ((HEAP32[i11 >> 2] | 0) != 67324752) {
         i1 = -857812941;
         break L1;
        }
        i1 = _Zip_ReadLocalFileHeader(i13, i2 + (i3 * 12 | 0) | 0) | 0;
        i3 = i3 + 1 | 0;
        if (i1 | 0) break L1;
        if ((i3 | 0) >= (i4 | 0)) {
         i1 = 0;
         break;
        }
       }
      } else i1 = 0;
     } else i1 = 0;
    } else i1 = -857812944;
   }
  } else i1 = -857812945;
 } while (0);
 STACKTOP = i14;
 return i1 | 0;
}

function _Model_DrawRotate(d1, d2, d3, i4, i5) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, d25 = 0.0, d26 = 0.0;
 i24 = HEAP32[428691] | 0;
 i8 = HEAP32[i24 + 4 >> 2] | 0;
 i9 = HEAP16[i4 >> 1] | 0;
 i6 = HEAP32[428693] | 0;
 i24 = i24 + 36 | 0;
 i7 = HEAP32[i24 >> 2] | 0;
 d23 = -d1;
 d22 = +_Math_CosF(d23);
 d23 = +_Math_SinF(d23);
 d21 = -d2;
 d20 = +_Math_CosF(d21);
 d21 = +_Math_SinF(d21);
 d18 = -d3;
 d19 = +_Math_CosF(d18);
 d18 = +_Math_SinF(d18);
 d15 = +HEAPF32[i4 + 4 >> 2];
 d16 = +HEAPF32[i4 + 8 >> 2];
 d17 = +HEAPF32[i4 + 12 >> 2];
 i13 = HEAP16[i4 + 2 >> 1] | 0;
 i14 = i13 & 65535;
 L1 : do if (i13 << 16 >> 16) {
  i13 = i5 << 24 >> 24 == 0;
  i12 = HEAP8[1714760] | 0;
  i7 = i6 + (i7 * 24 | 0) | 0;
  i11 = 0;
  i4 = i8 + ((i9 & 65535) << 4) | 0;
  while (1) {
   i5 = HEAP16[i4 + 12 >> 1] | 0;
   i6 = HEAP16[i4 + 14 >> 1] | 0;
   d3 = +HEAPF32[i4 >> 2] - d15;
   d2 = +HEAPF32[i4 + 4 >> 2] - d16;
   d1 = +HEAPF32[i4 + 8 >> 2] - d17;
   switch (i12 << 24 >> 24) {
   case 0:
    {
     d10 = d19 * d3 + d18 * d2;
     d3 = d19 * d2 - d18 * d3;
     d25 = d20 * d1 + d21 * d10;
     d10 = d20 * d10 - d21 * d1;
     d2 = d22 * d3 + d23 * d25;
     d1 = d22 * d25 - d23 * d3;
     break;
    }
   case 1:
    {
     d26 = d22 * d2 + d23 * d1;
     d25 = d22 * d1 - d23 * d2;
     d1 = d19 * d3 + d18 * d26;
     d10 = d20 * d1 - d21 * d25;
     d2 = d19 * d26 - d18 * d3;
     d1 = d20 * d25 + d21 * d1;
     break;
    }
   case 2:
    {
     d10 = d20 * d3 - d21 * d1;
     d26 = d21 * d3 + d20 * d1;
     d1 = d19 * d2 - d18 * d10;
     d10 = d18 * d2 + d19 * d10;
     d2 = d23 * d26 + d22 * d1;
     d1 = d22 * d26 - d23 * d1;
     break;
    }
   case 3:
    {
     d26 = d22 * d2 + d23 * d1;
     d1 = d22 * d1 - d23 * d2;
     d2 = d20 * d3 - d21 * d1;
     d10 = d18 * d26 + d19 * d2;
     d2 = d19 * d26 - d18 * d2;
     d1 = d21 * d3 + d20 * d1;
     break;
    }
   default:
    d10 = d3;
   }
   if (i13) d3 = d10; else {
    d25 = +HEAPF32[428688];
    d26 = +HEAPF32[428689];
    d3 = d10 * d25 - d1 * d26;
    d1 = d1 * d25 + d10 * d26;
   }
   HEAPF32[i7 >> 2] = d15 + d3;
   HEAPF32[i7 + 4 >> 2] = d16 + d2;
   HEAPF32[i7 + 8 >> 2] = d17 + d1;
   HEAP32[i7 + 12 >> 2] = HEAP32[1714720 + ((2 ? i11 >>> 2 : i11) << 2) >> 2];
   i9 = i5 & 65535;
   d26 = +HEAPF32[428686];
   HEAPF32[i7 + 16 >> 2] = d26 * +(i9 & 32767 | 0) - +((15 ? i9 >>> 15 : i9) | 0) * .009999999776482582 * d26;
   i9 = i6 & 65535;
   d26 = +HEAPF32[428687];
   HEAPF32[i7 + 20 >> 2] = d26 * +(i9 & 32767 | 0) - +((15 ? i9 >>> 15 : i9) | 0) * .009999999776482582 * d26;
   i11 = i11 + 1 | 0;
   if ((i11 | 0) == (i14 | 0)) break L1; else {
    i7 = i7 + 24 | 0;
    i4 = i4 + 16 | 0;
   }
  }
 } while (0);
 HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + i14;
 return;
}

function _Builder_MakeChunk(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 59584 | 0;
 i17 = i20 + 47904 | 0;
 i4 = i20 + 23328 | 0;
 i1 = i20 + 59568 | 0;
 i3 = HEAPU16[i8 >> 1] | 0;
 i18 = i3 + -8 | 0;
 i6 = HEAPU16[i8 + 2 >> 1] | 0;
 i9 = i6 + -8 | 0;
 i7 = HEAPU16[i8 + 4 >> 1] | 0;
 i19 = i7 + -8 | 0;
 HEAP32[414115] = i17;
 HEAP32[414112] = i4;
 HEAP32[414121] = i20;
 FUNCTION_TABLE_v[HEAP32[414120] & 127]();
 if ((i18 | 0) == 0 | (i9 | 0) == 0 | (i19 | 0) == 0) i5 = 5; else if ((i3 + 8 | 0) < (HEAP32[244733] | 0)) if ((i6 + 8 | 0) < (HEAP32[244734] | 0)) if ((i7 + 8 | 0) < (HEAP32[244735] | 0)) i2 = (_ReadChunkData(i18, i9, i19, i1) | 0) << 24 >> 24 == 0; else i5 = 5; else i5 = 5; else i5 = 5;
 if ((i5 | 0) == 5) {
  _Mem_Set(i17, 0, 11664) | 0;
  _ReadBorderChunkData(i18, i9, i19, i1);
  i2 = 1;
 }
 i16 = HEAP8[i1 >> 0] | 0;
 i15 = i8 + 6 | 0;
 HEAP8[i15 >> 0] = HEAP8[i15 >> 0] & -9 | i16 << 3 & 8;
 if (i2 & i16 << 24 >> 24 == 0) {
  FUNCTION_TABLE_viii[HEAP32[467167] & 31](i3 + -9 | 0, i6 + -9 | 0, i7 + -9 | 0);
  _Mem_Set(i4, 1, 24576) | 0;
  i1 = HEAP32[244733] | 0;
  i16 = i3 + 8 | 0;
  i16 = (i1 | 0) < (i16 | 0) ? i1 : i16;
  i1 = HEAP32[244734] | 0;
  i15 = i6 + 8 | 0;
  i15 = (i1 | 0) < (i15 | 0) ? i1 : i15;
  i1 = HEAP32[244735] | 0;
  i14 = i7 + 8 | 0;
  i14 = (i1 | 0) < (i14 | 0) ? i1 : i14;
  HEAP32[414119] = i16;
  HEAP32[414114] = i14;
  _PrepareChunk(i18, i9, i19);
  i1 = _Builder_TotalVerticesCount() | 0;
  if (i1 | 0) {
   _OutputChunkPartsMeta(i18, i9, i19, i8);
   i12 = i1 + 1 | 0;
   i11 = _Gfx_CreateVb(1, i12) | 0;
   i13 = i8 + 8 | 0;
   HEAP32[i13 >> 2] = i11;
   i12 = _Gfx_LockVb(i11, 1, i12) | 0;
   HEAP32[414113] = i12;
   _DefaultPostStretchChunk();
   if ((i9 | 0) < (i15 | 0)) {
    i11 = (i19 | 0) < (i14 | 0);
    i12 = (i18 | 0) < (i16 | 0);
    i7 = 0;
    while (1) {
     if (i11) {
      i5 = (i7 * 324 | 0) + 324 | 0;
      i6 = i7 << 8;
      i8 = i19;
      i10 = 0;
      do {
       i1 = i10;
       i10 = i10 + 1 | 0;
       if (i12) {
        i2 = i1 << 4 | i6;
        i1 = i5 + (i10 * 18 | 0) | 1;
        i3 = i18;
        i4 = 0;
        while (1) {
         i21 = HEAP16[i17 + (i1 << 1) >> 1] | 0;
         HEAP16[934358] = i21;
         if ((HEAP8[1006372 + (i21 & 65535) >> 0] | 0) != 4) {
          HEAP32[414136] = i1;
          FUNCTION_TABLE_viiii[HEAP32[414111] & 31]((i2 | i4) * 6 | 0, i3, i9, i8);
         }
         i3 = i3 + 1 | 0;
         if ((i3 | 0) >= (i16 | 0)) break; else {
          i1 = i1 + 1 | 0;
          i4 = i4 + 1 | 0;
         }
        }
       }
       i8 = i8 + 1 | 0;
      } while ((i8 | 0) < (i14 | 0));
     }
     i9 = i9 + 1 | 0;
     if ((i9 | 0) >= (i15 | 0)) break; else i7 = i7 + 1 | 0;
    }
   }
   _Gfx_UnlockVb(HEAP32[i13 >> 2] | 0);
  }
 }
 STACKTOP = i20;
 return;
}

function _Deflate_FlushBlock(i18, i1) {
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = i18 + 115576 | 0;
 if (!(HEAP8[i2 >> 0] | 0)) {
  HEAP8[i2 >> 0] = 1;
  i16 = i18 + 4 | 0;
  i15 = HEAP32[i16 >> 2] | 0;
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 3 << i15;
  HEAP32[i16 >> 2] = i15 + 3;
 }
 i2 = i18 + 17272 | 0;
 L4 : do if ((i1 | 0) > 3) {
  i16 = i18 + 888 | 0;
  i12 = i18 + 16 | 0;
  i13 = i18 + 20 | 0;
  i15 = i18 + 33656 | 0;
  i14 = i18 + 12 | 0;
  while (1) {
   i10 = _Deflate_Hash(i2) | 0;
   i6 = (i1 | 0) < 258 ? i1 : 258;
   i10 = i18 + 41848 + (i10 << 1) | 0;
   i8 = HEAP16[i10 >> 1] | 0;
   if (!(i8 << 16 >> 16)) {
    i11 = 2;
    i5 = 0;
   } else {
    i4 = 2;
    i5 = 0;
    i7 = 0;
    i3 = i8 & 65535;
    while (1) {
     i9 = _Deflate_MatchLen(i18 + 888 + i3 | 0, i2, i6) | 0;
     i11 = (i9 | 0) > (i4 | 0);
     i4 = i11 ? i9 : i4;
     i5 = i11 ? i3 : i5;
     i3 = HEAP16[i18 + 50040 + (i3 << 1) >> 1] | 0;
     i7 = i7 + 1 | 0;
     if (!(i7 >>> 0 < 5 & i3 << 16 >> 16 != 0)) {
      i11 = i4;
      break;
     } else i3 = i3 & 65535;
    }
   }
   i9 = i2 - i16 | 0;
   HEAP16[i10 >> 1] = i9;
   HEAP16[i18 + 50040 + (i9 << 1) >> 1] = i8;
   L13 : do if (!i5) {
    i3 = i1 + -1 | 0;
    i1 = i2 + 1 | 0;
    i17 = 15;
   } else {
    i8 = i2 + 1 | 0;
    i4 = i18 + 41848 + ((_Deflate_Hash(i8) | 0) << 1) | 0;
    i4 = HEAP16[i4 >> 1] | 0;
    i3 = i1 + -1 | 0;
    i6 = (i3 | 0) < 258 ? i3 : 258;
    if (i4 << 16 >> 16) {
     i7 = 0;
     i4 = i4 & 65535;
     while (1) {
      if ((_Deflate_MatchLen(i18 + 888 + i4 | 0, i8, i6) | 0) > (i11 | 0)) {
       i1 = i8;
       i17 = 15;
       break L13;
      }
      i4 = HEAP16[i18 + 50040 + (i4 << 1) >> 1] | 0;
      i7 = i7 + 1 | 0;
      if (!(i7 >>> 0 < 5 & i4 << 16 >> 16 != 0)) break; else i4 = i4 & 65535;
     }
    }
    _Deflate_LenDist(i18, i11, i9 - i5 | 0);
    i2 = i2 + i11 | 0;
    i3 = i1 - i11 | 0;
   } while (0);
   if ((i17 | 0) == 15) {
    i17 = 0;
    _Deflate_Lit(i18, HEAPU8[i2 >> 0] | 0);
    i2 = i1;
   }
   i1 = HEAP32[i12 >> 2] | 0;
   if (i1 >>> 0 <= 19) {
    i1 = _Stream_Write(HEAP32[i13 >> 2] | 0, i15, 8192 - i1 | 0) | 0;
    HEAP32[i14 >> 2] = i15;
    HEAP32[i12 >> 2] = 8192;
    if (i1 | 0) break L4;
   }
   if ((i3 | 0) > 3) i1 = i3; else {
    i1 = i3;
    i17 = 19;
    break;
   }
  }
 } else i17 = 19; while (0);
 if ((i17 | 0) == 19) {
  if ((i1 | 0) > 0) while (1) {
   _Deflate_Lit(i18, HEAPU8[i2 >> 0] | 0);
   if ((i1 | 0) > 1) {
    i2 = i2 + 1 | 0;
    i1 = i1 + -1 | 0;
   } else break;
  }
  i16 = i18 + 33656 | 0;
  i17 = i18 + 16 | 0;
  i1 = _Stream_Write(HEAP32[i18 + 20 >> 2] | 0, i16, 8192 - (HEAP32[i17 >> 2] | 0) | 0) | 0;
  HEAP32[i18 + 12 >> 2] = i16;
  HEAP32[i17 >> 2] = 8192;
  _Deflate_MoveBlock(i18);
 }
 return i1 | 0;
}

function _CPE_DefineModelPart(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = i9;
 i5 = _CustomModel_Get(HEAPU8[i4 >> 0] | 0) | 0;
 if (i5 | 0) if (HEAP8[i5 + 138 >> 0] | 0) {
  i6 = i5 + 139 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  i7 = i5 + 188 | 0;
  if ((i1 & 255) < (HEAPU8[i7 >> 0] | 0)) {
   d10 = +_GetFloat(i4 + 1 | 0);
   HEAPF32[i8 >> 2] = d10;
   d10 = +_GetFloat(i4 + 5 | 0);
   HEAPF32[i8 + 4 >> 2] = d10;
   d10 = +_GetFloat(i4 + 9 | 0);
   HEAPF32[i8 + 8 >> 2] = d10;
   d10 = +_GetFloat(i4 + 13 | 0);
   HEAPF32[i8 + 12 >> 2] = d10;
   d10 = +_GetFloat(i4 + 17 | 0);
   HEAPF32[i8 + 16 >> 2] = d10;
   d10 = +_GetFloat(i4 + 21 | 0);
   HEAPF32[i8 + 20 >> 2] = d10;
   i2 = i4 + 25 | 0;
   i3 = 0;
   do {
    i11 = i3 << 3;
    i12 = _Stream_GetU16_BE(i2 + i11 | 0) | 0;
    HEAP16[i8 + 24 + (i3 << 1) >> 1] = i12;
    i12 = _Stream_GetU16_BE(i2 + (i11 | 2) | 0) | 0;
    HEAP16[i8 + 36 + (i3 << 1) >> 1] = i12;
    i12 = _Stream_GetU16_BE(i2 + (i11 | 4) | 0) | 0;
    HEAP16[i8 + 48 + (i3 << 1) >> 1] = i12;
    i11 = _Stream_GetU16_BE(i2 + (i11 | 6) | 0) | 0;
    HEAP16[i8 + 60 + (i3 << 1) >> 1] = i11;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != 6);
   i3 = i1 & 255;
   d10 = +_GetFloat(i4 + 73 | 0);
   HEAPF32[i8 + 72 >> 2] = d10;
   d10 = +_GetFloat(i4 + 77 | 0);
   HEAPF32[i8 + 76 >> 2] = d10;
   d10 = +_GetFloat(i4 + 81 | 0);
   HEAPF32[i8 + 80 >> 2] = d10;
   d10 = +_GetFloat(i4 + 85 | 0);
   HEAPF32[i5 + 192 + (i3 * 104 | 0) + 16 >> 2] = d10;
   d10 = +_GetFloat(i4 + 89 | 0);
   HEAPF32[i5 + 192 + (i3 * 104 | 0) + 20 >> 2] = d10;
   d10 = +_GetFloat(i4 + 93 | 0);
   HEAPF32[i5 + 192 + (i3 * 104 | 0) + 24 >> 2] = d10;
   if ((HEAP8[21285] | 0) == 1) HEAP8[i8 + 84 >> 0] = HEAP8[i4 + 102 >> 0] | 0; else {
    HEAP8[i8 + 84 >> 0] = HEAP8[i4 + 165 >> 0] | 0;
    i1 = i4 + 97 | 0;
    i2 = 0;
    while (1) {
     i12 = HEAP8[i1 >> 0] | 0;
     HEAP8[i5 + 192 + (i3 * 104 | 0) + 92 + i2 >> 0] = i12 & 63;
     HEAP8[i5 + 192 + (i3 * 104 | 0) + 96 + i2 >> 0] = 6 ? (i12 & 255) >>> 6 : i12 & 255;
     d10 = +_GetFloat(i1 + 1 | 0);
     HEAPF32[i5 + 192 + (i3 * 104 | 0) + 28 + (i2 << 4) >> 2] = d10;
     d10 = +_GetFloat(i1 + 5 | 0);
     HEAPF32[i5 + 192 + (i3 * 104 | 0) + 28 + (i2 << 4) + 4 >> 2] = d10;
     d10 = +_GetFloat(i1 + 9 | 0);
     HEAPF32[i5 + 192 + (i3 * 104 | 0) + 28 + (i2 << 4) + 8 >> 2] = d10;
     d10 = +_GetFloat(i1 + 13 | 0);
     HEAPF32[i5 + 192 + (i3 * 104 | 0) + 28 + (i2 << 4) + 12 >> 2] = d10;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == 4) break; else i1 = i1 + 17 | 0;
    }
   }
   _CustomModel_BuildPart(i5, i8);
   i12 = (HEAP8[i6 >> 0] | 0) + 1 << 24 >> 24;
   HEAP8[i6 >> 0] = i12;
   if (i12 << 24 >> 24 == (HEAP8[i7 >> 0] | 0)) _CustomModel_Register(i5);
  }
 }
 STACKTOP = i9;
 return;
}

function _Particles_CustomEffect(i19, d22, d23, d24, d1, d2, d3) {
 i19 = i19 | 0;
 d22 = +d22;
 d23 = +d23;
 d24 = +d24;
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i20 = i25 + 24 | 0;
 i18 = i25 + 12 | 0;
 i21 = i25;
 i16 = HEAP8[833696 + (i19 * 52 | 0) + 21 >> 0] | 0;
 i17 = i16 & 255;
 HEAPF32[i21 >> 2] = d1;
 HEAPF32[i21 + 4 >> 2] = d2;
 HEAPF32[i21 + 8 >> 2] = d3;
 if (i16 << 24 >> 24) {
  i13 = i20 + 4 | 0;
  i15 = i20 + 8 | 0;
  i12 = 833696 + (i19 * 52 | 0) + 32 | 0;
  i11 = 833696 + (i19 * 52 | 0) + 36 | 0;
  i14 = i18 + 4 | 0;
  i16 = i18 + 8 | 0;
  i5 = 833696 + (i19 * 52 | 0) + 44 | 0;
  i8 = 833696 + (i19 * 52 | 0) + 48 | 0;
  i9 = 833696 + (i19 * 52 | 0) + 24 | 0;
  i10 = 833696 + (i19 * 52 | 0) + 28 | 0;
  i6 = 833696 + (i19 * 52 | 0) + 22 | 0;
  i7 = 0;
  do {
   i4 = HEAP32[431723] | 0;
   if ((i4 | 0) == 600) {
    _Custom_RemoveAt(0);
    i4 = HEAP32[431723] | 0;
   }
   HEAP32[431723] = i4 + 1;
   i26 = 885408 + (i4 * 52 | 0) | 0;
   HEAP32[885408 + (i4 * 52 | 0) + 44 >> 2] = i19;
   d3 = +_Random_Float(978296) + -.5;
   HEAPF32[i20 >> 2] = d3;
   d3 = +_Random_Float(978296) + -.5;
   HEAPF32[i13 >> 2] = d3;
   d3 = +_Random_Float(978296) + -.5;
   HEAPF32[i15 >> 2] = d3;
   _Vec3_Normalise(i20);
   d3 = +_Math_Exp2(+_Math_Log2(+_Random_Float(978296)) / 3.0);
   d3 = +HEAPF32[i12 >> 2] * d3;
   i28 = 885408 + (i4 * 52 | 0) + 16 | 0;
   HEAPF32[i28 >> 2] = +HEAPF32[i20 >> 2] * d3 + d22;
   HEAPF32[885408 + (i4 * 52 | 0) + 20 >> 2] = d3 * +HEAPF32[i13 >> 2] + d23;
   HEAPF32[885408 + (i4 * 52 | 0) + 24 >> 2] = d3 * +HEAPF32[i15 >> 2] + d24;
   _Vec3_Sub_1737(i18, i28, i21);
   _Vec3_Normalise(i18);
   d3 = +HEAPF32[i11 >> 2];
   HEAPF32[i26 >> 2] = +HEAPF32[i18 >> 2] * d3;
   HEAPF32[885408 + (i4 * 52 | 0) + 4 >> 2] = d3 * +HEAPF32[i14 >> 2];
   HEAPF32[885408 + (i4 * 52 | 0) + 8 >> 2] = d3 * +HEAPF32[i16 >> 2];
   i27 = 885408 + (i4 * 52 | 0) + 28 | 0;
   HEAP32[i27 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
   d3 = +HEAPF32[i5 >> 2];
   d2 = d3 * +HEAPF32[i8 >> 2];
   d2 = d3 + d2 * ((+_Random_Float(978296) + -.5) * 2.0);
   HEAPF32[885408 + (i4 * 52 | 0) + 12 >> 2] = d2;
   HEAPF32[885408 + (i4 * 52 | 0) + 48 >> 2] = d2;
   d2 = +HEAPF32[i9 >> 2];
   d3 = d2 * +HEAPF32[i10 >> 2];
   d3 = d2 + d3 * ((+_Random_Float(978296) + -.5) * 2.0);
   HEAPF32[885408 + (i4 * 52 | 0) + 40 >> 2] = d3;
   HEAP8[1868796] = HEAP8[i6 >> 0] | 0;
   if ((_IntersectsBlock(i26, 28) | 0) << 24 >> 24) HEAP32[431723] = (HEAP32[431723] | 0) + -1;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i17 | 0));
 }
 STACKTOP = i25;
 return;
}

function _Lvl_ReadCustomBlocks(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i20 = i23;
 i21 = i23 + 4096 | 0;
 i2 = HEAP32[244733] | 0;
 i17 = i2 & -16;
 i1 = HEAP32[244734] | 0;
 i18 = i1 & -16;
 i3 = HEAP32[244735] | 0;
 i19 = i3 & -16;
 L1 : do if ((i1 | 0) > 0) {
  i16 = i22 + 4 | 0;
  i15 = 0;
  while (1) {
   i14 = i15;
   i15 = i15 + 16 | 0;
   if ((i3 | 0) > 0) {
    i13 = (i15 | 0) > (i18 | 0);
    i12 = 0;
    do {
     i11 = i12;
     i12 = i12 + 16 | 0;
     if ((i2 | 0) > 0) {
      i10 = (i12 | 0) > (i19 | 0);
      i8 = 0;
      while (1) {
       i1 = FUNCTION_TABLE_iii[HEAP32[i16 >> 2] & 127](i22, i21) | 0;
       if (i1 | 0) break L1;
       L14 : do if ((HEAP8[i21 >> 0] | 0) == 1) {
        i1 = _Stream_Read(i22, i20, 4096) | 0;
        if (i1 | 0) break L1;
        i2 = HEAP32[244735] | 0;
        i9 = (Math_imul(i2, i14) | 0) + i11 | 0;
        i4 = HEAP32[244733] | 0;
        i9 = (Math_imul(i9, i4) | 0) + i8 | 0;
        i1 = i8 + 16 | 0;
        if (!(i10 | (i13 | (i1 | 0) > (i17 | 0)))) {
         i3 = 0;
         while (1) {
          i4 = (i3 & 15 | i9) + (Math_imul((Math_imul(i2, (8 ? i3 >>> 8 : i3) & 15) | 0) + ((4 ? i3 >>> 4 : i3) & 15) | 0, i4) | 0) | 0;
          i4 = (HEAP32[244730] | 0) + i4 | 0;
          i2 = HEAP8[i4 >> 0] | 0;
          if (i2 << 24 >> 24 == -93) i2 = HEAP8[i20 + i3 >> 0] | 0;
          HEAP8[i4 >> 0] = i2;
          i3 = i3 + 1 | 0;
          if ((i3 | 0) == 4096) break L14;
          i2 = HEAP32[244735] | 0;
          i4 = HEAP32[244733] | 0;
         }
        }
        i2 = 0;
        while (1) {
         i5 = i2 & 15;
         i6 = (8 ? i2 >>> 8 : i2) & 15;
         i7 = (4 ? i2 >>> 4 : i2) & 15;
         if ((i5 | i8 | 0) < (i4 | 0)) if ((i6 | i14 | 0) < (HEAP32[244734] | 0)) {
          i3 = HEAP32[244735] | 0;
          if ((i7 | i11 | 0) < (i3 | 0)) {
           i4 = (i5 | i9) + (Math_imul((Math_imul(i3, i6) | 0) + i7 | 0, i4) | 0) | 0;
           i4 = (HEAP32[244730] | 0) + i4 | 0;
           i3 = HEAP8[i4 >> 0] | 0;
           if (i3 << 24 >> 24 == -93) i3 = HEAP8[i20 + i2 >> 0] | 0;
           HEAP8[i4 >> 0] = i3;
          }
         }
         i2 = i2 + 1 | 0;
         if ((i2 | 0) == 4096) break L14;
         i4 = HEAP32[244733] | 0;
        }
       } else i1 = i8 + 16 | 0; while (0);
       i2 = HEAP32[244733] | 0;
       if ((i1 | 0) < (i2 | 0)) i8 = i1; else break;
      }
      i3 = HEAP32[244735] | 0;
     }
    } while ((i12 | 0) < (i3 | 0));
    i1 = HEAP32[244734] | 0;
   }
   if ((i15 | 0) >= (i1 | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 STACKTOP = i23;
 return i1 | 0;
}

function _String_Format4(i8, i7, i1, i2, i3, i4) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i9;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i6 + 12 >> 2] = i4;
 i5 = i8 + 4 | 0;
 i2 = 0;
 i3 = 0;
 L1 : while (1) {
  i1 = HEAP8[i7 + i2 >> 0] | 0;
  L3 : do switch (i1 << 24 >> 24) {
  case 0:
   break L1;
  case 37:
   {
    i4 = i3 + 1 | 0;
    i1 = HEAP32[i6 + (i3 << 2) >> 2] | 0;
    i3 = i2 + 1 | 0;
    do switch (HEAP8[i7 + i3 >> 0] | 0) {
    case 98:
     {
      _String_AppendInt(i8, HEAPU8[i1 >> 0] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 105:
     {
      _String_AppendInt(i8, HEAP32[i1 >> 2] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 102:
     {
      i2 = i2 + 2 | 0;
      _String_AppendFloat(i8, +HEAPF32[i1 >> 2], (HEAP8[i7 + i2 >> 0] | 0) + -48 | 0);
      i1 = i4;
      break L3;
     }
    case 112:
     {
      i2 = i2 + 2 | 0;
      _String_AppendPaddedInt(i8, HEAP32[i1 >> 2] | 0, (HEAP8[i7 + i2 >> 0] | 0) + -48 | 0);
      i1 = i4;
      break L3;
     }
    case 116:
     {
      _String_AppendBool(i8, HEAP8[i1 >> 0] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 99:
     {
      _String_AppendConst(i8, i1);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 115:
     {
      _String_AppendString(i8, i1);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 114:
     {
      _String_Append(i8, HEAP8[i1 >> 0] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 120:
     {
      _String_Hex32(i8, HEAP32[i1 >> 2] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 104:
     {
      _String_Hex32(i8, HEAP32[i1 >> 2] | 0);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 101:
     {
      i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 + 65535 | 0) >>> 0 < 131071) {
       _String_AppendInt(i8, i1);
       i2 = i3;
       i1 = i4;
       break L3;
      } else {
       _String_Hex32(i8, i1);
       i2 = i3;
       i1 = i4;
       break L3;
      }
     }
    case 37:
     {
      _String_Append(i8, 37);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    case 78:
     {
      i1 = HEAP32[i8 >> 2] | 0;
      i2 = HEAP16[i5 >> 1] | 0;
      HEAP16[i5 >> 1] = i2 + 1 << 16 >> 16;
      HEAP8[i1 + (i2 & 65535) >> 0] = 0;
      i2 = i3;
      i1 = i4;
      break L3;
     }
    default:
     {
      _Process_Abort2(0, 49220);
      i2 = i3;
      i1 = i4;
      break L3;
     }
    } while (0);
   }
  default:
   {
    _String_Append(i8, i1);
    i1 = i3;
   }
  } while (0);
  i2 = i2 + 1 | 0;
  i3 = i1;
 }
 STACKTOP = i9;
 return;
}

function _RayTrace(i24, i21, i1, d2, i20) {
 i24 = i24 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i23 = i26 + 24 | 0;
 i22 = i26 + 12 | 0;
 i25 = i26;
 _RayTracer_Init(i24, i21, i1);
 d27 = +HEAPF32[i21 >> 2];
 L1 : do if (d27 != d27 | 0.0 != 0.0) i1 = 0; else {
  i18 = i21 + 4 | 0;
  d27 = +HEAPF32[i18 >> 2];
  if (d27 != d27 | 0.0 != 0.0) i1 = 0; else {
   i19 = i21 + 8 | 0;
   d27 = +HEAPF32[i19 >> 2];
   if (d27 != d27 | 0.0 != 0.0) i1 = 0; else {
    _IVec3_Floor(i22, i21);
    i17 = (_World_ContainsXZ_1764(HEAP32[i22 >> 2] | 0, HEAP32[i22 + 8 >> 2] | 0) | 0) << 24 >> 24 != 0;
    i17 = i17 & (HEAP32[i22 + 4 >> 2] | 0) > -1;
    d2 = d2 * d2;
    i9 = i24 + 4 | 0;
    i13 = i24 + 8 | 0;
    i10 = i25 + 4 | 0;
    i14 = i25 + 8 | 0;
    i7 = i24 + 60 | 0;
    i6 = i24 + 36 | 0;
    i5 = i24 + 48 | 0;
    i11 = i24 + 40 | 0;
    i12 = i24 + 52 | 0;
    i15 = i24 + 44 | 0;
    i16 = i24 + 56 | 0;
    i8 = 0;
    do {
     i1 = HEAP32[i24 >> 2] | 0;
     i3 = HEAP32[i9 >> 2] | 0;
     i4 = HEAP32[i13 >> 2] | 0;
     HEAPF32[i25 >> 2] = +(i1 | 0);
     HEAPF32[i10 >> 2] = +(i3 | 0);
     HEAPF32[i14 >> 2] = +(i4 | 0);
     if (i17) i1 = _Picking_GetInside(i1, i3, i4) | 0; else {
      HEAP32[i23 >> 2] = HEAP32[i22 >> 2];
      HEAP32[i23 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
      HEAP32[i23 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
      i1 = _Picking_GetOutside(i1, i3, i4, i23) | 0;
     }
     HEAP16[i7 >> 1] = i1;
     _Vec3_Add_1765(i6, i25, 1029412 + ((i1 & 65535) * 12 | 0) | 0);
     _Vec3_Add_1765(i5, i25, 1038628 + ((HEAPU16[i7 >> 1] | 0) * 12 | 0) | 0);
     d29 = +HEAPF32[i21 >> 2];
     d32 = +Math_abs(+(d29 - +HEAPF32[i6 >> 2]));
     d29 = +Math_abs(+(d29 - +HEAPF32[i5 >> 2]));
     d28 = +HEAPF32[i18 >> 2];
     d31 = +Math_abs(+(d28 - +HEAPF32[i11 >> 2]));
     d28 = +Math_abs(+(d28 - +HEAPF32[i12 >> 2]));
     d27 = +HEAPF32[i19 >> 2];
     d30 = +Math_abs(+(d27 - +HEAPF32[i15 >> 2]));
     d27 = +Math_abs(+(d27 - +HEAPF32[i16 >> 2]));
     d29 = d32 < d29 ? d32 : d29;
     d28 = d31 < d28 ? d31 : d28;
     d27 = d30 < d27 ? d30 : d27;
     if (d29 * d29 + d28 * d28 + d27 * d27 > d2) {
      i1 = 0;
      break L1;
     }
     if ((FUNCTION_TABLE_ii[i20 & 63](i24) | 0) << 24 >> 24) {
      i1 = 1;
      break L1;
     }
     _RayTracer_Step(i24);
     i8 = i8 + 1 | 0;
    } while (i8 >>> 0 < 25e3);
    _Process_Abort2(0, 46556);
    i1 = 0;
   }
  }
 } while (0);
 STACKTOP = i26;
 return i1 | 0;
}

function _ReadBorderChunkData(i15, i16, i17, i18) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = HEAP32[244730] | 0;
 L1 : do if ((HEAP32[244744] | 0) < 256) {
  i11 = i15 + -1 | 0;
  i10 = HEAP32[414115] | 0;
  i1 = 1;
  i12 = -1;
  while (1) {
   i8 = i12 + i16 | 0;
   L5 : do if ((i8 | 0) >= 0) {
    if ((i8 | 0) >= (HEAP32[244734] | 0)) break L1;
    i9 = (i12 * 324 | 0) + 342 | 0;
    i7 = -1;
    while (1) {
     i3 = i7 + i17 | 0;
     L10 : do if ((i3 | 0) >= 0) {
      i2 = HEAP32[244735] | 0;
      if ((i3 | 0) >= (i2 | 0)) break L5;
      i4 = (Math_imul(i2, i8) | 0) + i3 | 0;
      i6 = HEAP32[244733] | 0;
      i3 = i9 + (i7 * 18 | 0) | 0;
      i4 = i11 + (Math_imul(i6, i4) | 0) | 0;
      i5 = -1;
      while (1) {
       i2 = i5 + i15 | 0;
       if ((i2 | 0) >= 0) {
        if ((i2 | 0) >= (i6 | 0)) break L10;
        i2 = HEAP8[i14 + i4 >> 0] | 0;
        if (!(i1 << 24 >> 24)) i1 = 0; else i1 = (HEAP8[1006372 + (i2 & 255) >> 0] | 0) == 4;
        HEAP16[i10 + (i3 << 1) >> 1] = i2 & 255;
        i1 = i1 & 1;
       }
       if ((i5 | 0) < 16) {
        i3 = i3 + 1 | 0;
        i4 = i4 + 1 | 0;
        i5 = i5 + 1 | 0;
       } else break;
      }
     } while (0);
     if ((i7 | 0) < 16) i7 = i7 + 1 | 0; else break;
    }
   } while (0);
   if ((i12 | 0) < 16) i12 = i12 + 1 | 0; else break;
  }
 } else {
  i10 = HEAP32[244731] | 0;
  i12 = i15 + -1 | 0;
  i11 = HEAP32[414115] | 0;
  i1 = 1;
  i13 = -1;
  while (1) {
   i8 = i13 + i16 | 0;
   L27 : do if ((i8 | 0) >= 0) {
    if ((i8 | 0) >= (HEAP32[244734] | 0)) break L1;
    i9 = (i13 * 324 | 0) + 342 | 0;
    i7 = -1;
    while (1) {
     i3 = i7 + i17 | 0;
     L32 : do if ((i3 | 0) >= 0) {
      i2 = HEAP32[244735] | 0;
      if ((i3 | 0) >= (i2 | 0)) break L27;
      i4 = (Math_imul(i2, i8) | 0) + i3 | 0;
      i6 = HEAP32[244733] | 0;
      i3 = i9 + (i7 * 18 | 0) | 0;
      i4 = i12 + (Math_imul(i6, i4) | 0) | 0;
      i5 = -1;
      while (1) {
       i2 = i5 + i15 | 0;
       if ((i2 | 0) >= 0) {
        if ((i2 | 0) >= (i6 | 0)) break L32;
        i2 = HEAPU8[i10 + i4 >> 0] << 8 | HEAPU8[i14 + i4 >> 0];
        if (!(i1 << 24 >> 24)) i1 = 0; else i1 = (HEAP8[1006372 + i2 >> 0] | 0) == 4;
        HEAP16[i11 + (i3 << 1) >> 1] = i2;
        i1 = i1 & 1;
       }
       if ((i5 | 0) < 16) {
        i3 = i3 + 1 | 0;
        i4 = i4 + 1 | 0;
        i5 = i5 + 1 | 0;
       } else break;
      }
     } while (0);
     if ((i7 | 0) < 16) i7 = i7 + 1 | 0; else break;
    }
   } while (0);
   if ((i13 | 0) < 16) i13 = i13 + 1 | 0; else break;
  }
 } while (0);
 HEAP8[i18 >> 0] = i1;
 return;
}

function _Lvl_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 44832 | 0;
 i2 = i6;
 i5 = i6 + 44816 | 0;
 i4 = i6 + 44760 | 0;
 _Inflate_MakeStream2(i4, i6 + 20 | 0, i1);
 i1 = _Map_SkipGZipHeader(i1) | 0;
 L1 : do if (!i1) {
  i1 = _Stream_Read(i4, i2, 18) | 0;
  if (!i1) if ((_Stream_GetU16_LE(i2) | 0) << 16 >> 16 == 1874) {
   i1 = (_Stream_GetU16_LE(i2 + 2 | 0) | 0) & 65535;
   HEAP32[244733] = i1;
   i1 = (_Stream_GetU16_LE(i2 + 4 | 0) | 0) & 65535;
   HEAP32[244735] = i1;
   i1 = (_Stream_GetU16_LE(i2 + 6 | 0) | 0) & 65535;
   HEAP32[244734] = i1;
   HEAP8[(HEAP32[422204] | 0) + 28 >> 0] = 7;
   d7 = +((_Stream_GetU16_LE(i2 + 8 | 0) | 0) & 65535);
   HEAPF32[HEAP32[422204] >> 2] = d7;
   d7 = +((_Stream_GetU16_LE(i2 + 10 | 0) | 0) & 65535);
   HEAPF32[(HEAP32[422204] | 0) + 8 >> 2] = d7;
   d7 = +((_Stream_GetU16_LE(i2 + 12 | 0) | 0) & 65535);
   i1 = HEAP32[422204] | 0;
   HEAPF32[i1 + 4 >> 2] = d7;
   HEAPF32[i1 + 16 >> 2] = +(HEAPU8[i2 + 14 >> 0] | 0) * 360.0 * .00390625;
   HEAPF32[i1 + 12 >> 2] = +(HEAPU8[i2 + 15 >> 0] | 0) * 360.0 * .00390625;
   i1 = _Map_ReadBlocks(i4) | 0;
   if (!i1) {
    i2 = HEAP32[244730] | 0;
    i1 = HEAP32[244732] | 0;
    if ((i1 & -4 | 0) > 0) {
     i1 = 0;
     while (1) {
      HEAP8[i2 >> 0] = HEAP8[3104 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
      i3 = i2 + 1 | 0;
      HEAP8[i3 >> 0] = HEAP8[3104 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
      i3 = i2 + 2 | 0;
      HEAP8[i3 >> 0] = HEAP8[3104 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
      i3 = i2 + 3 | 0;
      HEAP8[i3 >> 0] = HEAP8[3104 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
      i2 = i2 + 4 | 0;
      i3 = i1 + 4 | 0;
      i1 = HEAP32[244732] | 0;
      if ((i3 | 0) < (i1 & -4 | 0)) i1 = i3; else break;
     }
    } else i3 = 0;
    if ((i3 | 0) < (i1 | 0)) {
     i1 = i3;
     while (1) {
      HEAP8[i2 >> 0] = HEAP8[3104 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) >= (HEAP32[244732] | 0)) break; else i2 = i2 + 1 | 0;
     }
    }
    i1 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 127](i4, i5) | 0;
    L16 : do if ((i1 | 0) < 0) switch (i1 | 0) {
    case -857812991:
     {
      i1 = 0;
      break L1;
     }
    default:
     {}
    } else {
     switch (i1 | 0) {
     case 0:
      break;
     default:
      break L16;
     }
     if ((HEAP8[i5 >> 0] | 0) != -67) {
      i1 = 0;
      break L1;
     }
     i1 = _Lvl_ReadCustomBlocks(i4) | 0;
     if ((i1 | 0) != -857812991) break L1;
     _Chat_AddRaw(31876);
     _Chat_AddRaw(31927);
     i1 = 0;
     break L1;
    } while (0);
   }
  } else i1 = -857812931;
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _TreeGen_Grow(i12, i15, i16, i11, i14, i13) {
 i12 = i12 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i11 + i15 | 0;
 i9 = i10 + -2 | 0;
 i2 = i10 + -4 | 0;
 if ((i2 | 0) < (i9 | 0)) {
  i1 = 0;
  do {
   i6 = -2;
   do {
    i5 = i6 + i16 | 0;
    i4 = -2;
    do {
     i3 = i4 + i12 | 0;
     if ((_Math_AbsI_645(i4) | 0) == 2) if ((_Math_AbsI_645(i6) | 0) == 2) {
      if (+_Random_Float(HEAP32[422263] | 0) >= .5) {
       HEAP32[i14 + (i1 * 12 | 0) >> 2] = i3;
       HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i2;
       HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i5;
       HEAP8[i13 + i1 >> 0] = 18;
       i1 = i1 + 1 | 0;
      }
     } else i7 = 9; else i7 = 9;
     if ((i7 | 0) == 9) {
      i7 = 0;
      HEAP32[i14 + (i1 * 12 | 0) >> 2] = i3;
      HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i2;
      HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i5;
      HEAP8[i13 + i1 >> 0] = 18;
      i1 = i1 + 1 | 0;
     }
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != 3);
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 3);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i9 | 0));
  i2 = i9;
 } else i1 = 0;
 if ((i2 | 0) < (i10 | 0)) do {
  i8 = (i2 | 0) == (i9 | 0);
  i7 = -1;
  do {
   i5 = i7 + i16 | 0;
   i6 = (i7 | 0) == 0;
   i4 = -1;
   do {
    i3 = i4 + i12 | 0;
    if (i6 | (i4 | 0) == 0) {
     HEAP32[i14 + (i1 * 12 | 0) >> 2] = i3;
     HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i2;
     HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i5;
     HEAP8[i13 + i1 >> 0] = 18;
     i1 = i1 + 1 | 0;
    } else if (i8) if (+_Random_Float(HEAP32[422263] | 0) >= .5) {
     HEAP32[i14 + (i1 * 12 | 0) >> 2] = i3;
     HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i9;
     HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i5;
     HEAP8[i13 + i1 >> 0] = 18;
     i1 = i1 + 1 | 0;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 2);
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 2);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i10 | 0));
 i4 = i11 + -1 | 0;
 HEAP32[i14 + (i1 * 12 | 0) >> 2] = i12;
 if ((i11 | 0) > 1) {
  i3 = i1 + i11 | 0;
  i2 = 0;
  do {
   HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i2 + i15;
   HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i16;
   HEAP8[i13 + i1 >> 0] = 17;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   HEAP32[i14 + (i1 * 12 | 0) >> 2] = i12;
  } while ((i2 | 0) != (i4 | 0));
  i1 = i3 + -1 | 0;
 }
 HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2] = i15 + -1;
 HEAP32[i14 + (i1 * 12 | 0) + 8 >> 2] = i16;
 HEAP8[i13 + i1 >> 0] = 3;
 return i1 + 1 | 0;
}

function _Dat_LoadFormat2(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 70512 | 0;
 i2 = i7 + 70508 | 0;
 i4 = i7 + 70456 | 0;
 i5 = i7 + 70448 | 0;
 i6 = i7 + 70440 | 0;
 i1 = _Stream_Read(i3, i2, 4) | 0;
 if (!i1) {
  HEAP32[422205] = i7;
  HEAP32[422206] = 0;
  HEAP32[422207] = 8257536;
  if ((_Stream_GetU16_BE(i2) | 0) << 16 >> 16 == -21267) if ((_Stream_GetU16_BE(i2 + 2 | 0) | 0) << 16 >> 16 == 5) {
   i1 = _Java_ReadObject(i3, i4) | 0;
   if (!i1) if ((HEAP8[i4 >> 0] | 0) == 115) {
    i1 = HEAP32[i4 + 4 >> 2] | 0;
    i2 = i1 + 52 | 0;
    if ((HEAP32[i2 >> 2] | 0) > 0) {
     i4 = 0;
     do {
      i3 = i1 + 56 + (i4 * 60 | 0) | 0;
      _String_FromRaw(i6, i1 + 56 + (i4 * 60 | 0) + 1 | 0, 48);
      i10 = i6;
      i9 = HEAP32[i10 + 4 >> 2] | 0;
      i8 = i5;
      HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
      HEAP32[i8 + 4 >> 2] = i9;
      do if (!(_String_CaselessEqualsConst(i5, 31750) | 0)) {
       if (_String_CaselessEqualsConst(i5, 31756) | 0) {
        i10 = _Java_I32(i3) | 0;
        HEAP32[244735] = i10;
        break;
       }
       if (_String_CaselessEqualsConst(i5, 31797) | 0) {
        i10 = _Java_I32(i3) | 0;
        HEAP32[244734] = i10;
        break;
       }
       if (_String_CaselessEqualsConst(i5, 31770) | 0) {
        if ((HEAP8[i3 >> 0] | 0) != 91) _Process_Abort2(0, 31803);
        HEAP32[244730] = HEAP32[i1 + 56 + (i4 * 60 | 0) + 52 >> 2];
        HEAP32[244732] = HEAP32[i1 + 56 + (i4 * 60 | 0) + 56 >> 2];
        break;
       }
       if (_String_CaselessEqualsConst(i5, 31830) | 0) {
        d11 = +(_Java_I32(i3) | 0);
        i10 = HEAP32[422204] | 0;
        HEAPF32[i10 >> 2] = d11;
        HEAP8[i10 + 28 >> 0] = 1;
        break;
       }
       if (_String_CaselessEqualsConst(i5, 31837) | 0) {
        d11 = +(_Java_I32(i3) | 0);
        i10 = HEAP32[422204] | 0;
        HEAPF32[i10 + 4 >> 2] = d11;
        HEAP8[i10 + 28 >> 0] = 1;
        break;
       }
       if (_String_CaselessEqualsConst(i5, 31844) | 0) {
        d11 = +(_Java_I32(i3) | 0);
        i10 = HEAP32[422204] | 0;
        HEAPF32[i10 + 8 >> 2] = d11;
        HEAP8[i10 + 28 >> 0] = 1;
       }
      } else {
       i10 = _Java_I32(i3) | 0;
       HEAP32[244733] = i10;
      } while (0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) < (HEAP32[i2 >> 2] | 0));
     i1 = 0;
    } else i1 = 0;
   } else i1 = -857812926;
  } else i1 = -857812927; else i1 = -857812928;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _Matrix_Mul(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0;
 d35 = +HEAPF32[i1 >> 2];
 d34 = +HEAPF32[i1 + 4 >> 2];
 d33 = +HEAPF32[i1 + 8 >> 2];
 d32 = +HEAPF32[i1 + 12 >> 2];
 d31 = +HEAPF32[i1 + 16 >> 2];
 d30 = +HEAPF32[i1 + 20 >> 2];
 d29 = +HEAPF32[i1 + 24 >> 2];
 d28 = +HEAPF32[i1 + 28 >> 2];
 d27 = +HEAPF32[i1 + 32 >> 2];
 d26 = +HEAPF32[i1 + 36 >> 2];
 d25 = +HEAPF32[i1 + 40 >> 2];
 d24 = +HEAPF32[i1 + 44 >> 2];
 d11 = +HEAPF32[i1 + 48 >> 2];
 d9 = +HEAPF32[i1 + 52 >> 2];
 d7 = +HEAPF32[i1 + 56 >> 2];
 d5 = +HEAPF32[i1 + 60 >> 2];
 d23 = +HEAPF32[i3 >> 2];
 d19 = +HEAPF32[i3 + 4 >> 2];
 d15 = +HEAPF32[i3 + 8 >> 2];
 d10 = +HEAPF32[i3 + 12 >> 2];
 d22 = +HEAPF32[i3 + 16 >> 2];
 d18 = +HEAPF32[i3 + 20 >> 2];
 d14 = +HEAPF32[i3 + 24 >> 2];
 d8 = +HEAPF32[i3 + 28 >> 2];
 d21 = +HEAPF32[i3 + 32 >> 2];
 d17 = +HEAPF32[i3 + 36 >> 2];
 d13 = +HEAPF32[i3 + 40 >> 2];
 d6 = +HEAPF32[i3 + 44 >> 2];
 d20 = +HEAPF32[i3 + 48 >> 2];
 d16 = +HEAPF32[i3 + 52 >> 2];
 d12 = +HEAPF32[i3 + 56 >> 2];
 d4 = +HEAPF32[i3 + 60 >> 2];
 HEAPF32[i2 >> 2] = d35 * d23 + d34 * d22 + d33 * d21 + d32 * d20;
 HEAPF32[i2 + 4 >> 2] = d35 * d19 + d34 * d18 + d33 * d17 + d32 * d16;
 HEAPF32[i2 + 8 >> 2] = d35 * d15 + d34 * d14 + d33 * d13 + d32 * d12;
 HEAPF32[i2 + 12 >> 2] = d35 * d10 + d34 * d8 + d33 * d6 + d32 * d4;
 HEAPF32[i2 + 16 >> 2] = d31 * d23 + d30 * d22 + d29 * d21 + d28 * d20;
 HEAPF32[i2 + 20 >> 2] = d31 * d19 + d30 * d18 + d29 * d17 + d28 * d16;
 HEAPF32[i2 + 24 >> 2] = d31 * d15 + d30 * d14 + d29 * d13 + d28 * d12;
 HEAPF32[i2 + 28 >> 2] = d31 * d10 + d30 * d8 + d29 * d6 + d28 * d4;
 HEAPF32[i2 + 32 >> 2] = d27 * d23 + d26 * d22 + d25 * d21 + d24 * d20;
 HEAPF32[i2 + 36 >> 2] = d27 * d19 + d26 * d18 + d25 * d17 + d24 * d16;
 HEAPF32[i2 + 40 >> 2] = d27 * d15 + d26 * d14 + d25 * d13 + d24 * d12;
 HEAPF32[i2 + 44 >> 2] = d27 * d10 + d26 * d8 + d25 * d6 + d24 * d4;
 HEAPF32[i2 + 48 >> 2] = d11 * d23 + d9 * d22 + d7 * d21 + d5 * d20;
 HEAPF32[i2 + 52 >> 2] = d11 * d19 + d9 * d18 + d7 * d17 + d5 * d16;
 HEAPF32[i2 + 56 >> 2] = d11 * d15 + d9 * d14 + d7 * d13 + d5 * d12;
 HEAPF32[i2 + 60 >> 2] = d11 * d10 + d9 * d8 + d7 * d6 + d5 * d4;
 return;
}

function _LocalPlayer_Tick(i8, d7) {
 i8 = i8 | 0;
 d7 = +d7;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i14 + 32 | 0;
 i10 = i14 + 20 | 0;
 i12 = i14 + 16 | 0;
 i13 = i14;
 i11 = i14 + 4 | 0;
 i6 = i8 + 460 | 0;
 HEAPF32[i12 >> 2] = 0.0;
 HEAPF32[i13 >> 2] = 0.0;
 if (HEAP8[978980] | 0) {
  if (!(HEAP8[i6 + 9 >> 0] | 0)) d1 = .5; else if (!(HEAP8[i6 + 10 >> 0] | 0)) d1 = .5; else d1 = (HEAP8[i6 + 13 >> 0] | 0) == 0 ? .5 : 1.0;
  HEAPF32[i8 + 724 >> 2] = d1;
  i3 = i8 + 436 | 0;
  i5 = i8 + 36 | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i3 = HEAP8[i8 + 111 >> 0] | 0;
  _LocalInterpComp_AdvanceState(i8 + 648 | 0, i8);
  _LocalPlayer_HandleInput(i8, i12, i13);
  i4 = i6 + 34 | 0;
  if (!(HEAP8[i4 >> 0] | 0)) {
   i15 = (HEAP8[i6 + 35 >> 0] | 0) != 0;
   i2 = i6 + 1 | 0;
   HEAP8[i2 >> 0] = i15 & 1;
   if (!i15) if (HEAP8[i6 + 20 >> 0] | 0) _PhysicsComp_DoEntityPush(i8);
  } else {
   i2 = i6 + 1 | 0;
   HEAP8[i2 >> 0] = 1;
  }
  if (!(HEAP8[i6 + 32 >> 0] | 0)) if ((HEAP8[i4 >> 0] | 0) != 0 & +HEAPF32[i12 >> 2] == 0.0 & +HEAPF32[i13 >> 2] == 0.0) {
   HEAPF32[i5 >> 2] = 0.0;
   HEAPF32[i8 + 40 >> 2] = 0.0;
   HEAPF32[i8 + 44 >> 2] = 0.0;
  }
  i15 = i8 + 728 | 0;
  _PhysicsComp_UpdateVelocityState(i15);
  _Vec3_RotateY3(i11, +HEAPF32[i12 >> 2], 0.0, +HEAPF32[i13 >> 2], +HEAPF32[i8 + 20 >> 2] * .01745329238474369);
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  _PhysicsComp_PhysicsTick(i15, i9);
  if (HEAP8[i2 >> 0] | 0) HEAPF32[i8 + 40 >> 2] = 0.0;
  i15 = i8 + 384 | 0;
  i12 = i8 + 4 | 0;
  HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i13 = i8 + 352 | 0;
  HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  _AnimatedComp_Update(i8, i10, i9, d7);
  _TiltComp_Update(i8, i8 + 640 | 0, d7);
  _Entity_CheckSkin(i8);
  _SoundComp_Tick(i8, i3);
 }
 STACKTOP = i14;
 return;
}

function _NetInterpComp_SetLocation(i5, i14, i4) {
 i5 = i5 | 0;
 i14 = i14 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i15 = 0, d16 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i15 + 16 | 0;
 i13 = i15;
 d6 = +HEAPF32[i5 + 76 >> 2];
 i7 = i5 + 80 | 0;
 d8 = +HEAPF32[i7 >> 2];
 i9 = i5 + 84 | 0;
 d10 = +HEAPF32[i9 >> 2];
 i11 = i5 + 88 | 0;
 d12 = +HEAPF32[i11 >> 2];
 i1 = i5 + 76 | 0;
 i3 = HEAPU8[i14 + 28 >> 0] | 0;
 if (i3 & 1 | 0) _NetInterpComp_SetPosition(i5, i14, i4, i3 & 96);
 if (i3 & 8 | 0) {
  d16 = +_Math_ClampAngle(+HEAPF32[i14 + 20 >> 2]);
  HEAPF32[i9 >> 2] = d16;
 }
 if (i3 & 16 | 0) {
  d16 = +_Math_ClampAngle(+HEAPF32[i14 + 24 >> 2]);
  HEAPF32[i11 >> 2] = d16;
 }
 if (i3 & 2 | 0) {
  d16 = +_Math_ClampAngle(+HEAPF32[i14 + 12 >> 2]);
  HEAPF32[i1 >> 2] = d16;
 }
 if (i3 & 4 | 0) {
  d16 = +_Math_ClampAngle(+HEAPF32[i14 + 16 >> 2]);
  HEAPF32[i7 >> 2] = d16;
 }
 if (!(i3 & 128)) {
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i4 + 364 >> 2] = i3;
  i14 = HEAP32[i7 >> 2] | 0;
  HEAP32[i4 + 368 >> 2] = i14;
  i9 = HEAP32[i9 >> 2] | 0;
  HEAP32[i4 + 372 >> 2] = i9;
  i13 = HEAP32[i11 >> 2] | 0;
  HEAP32[i4 + 380 >> 2] = i13;
  HEAP32[i4 + 376 >> 2] = i14;
  HEAP32[i4 + 396 >> 2] = i3;
  HEAP32[i4 + 400 >> 2] = i14;
  HEAP32[i4 + 404 >> 2] = i9;
  HEAP32[i4 + 412 >> 2] = i13;
  HEAP32[i4 + 408 >> 2] = i14;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 96 >> 2] = 0;
 } else {
  d16 = +_Math_LerpAngle(d10, +HEAPF32[i9 >> 2], .5);
  HEAPF32[i13 + 8 >> 2] = d16;
  d16 = +_Math_LerpAngle(d12, +HEAPF32[i11 >> 2], .5);
  HEAPF32[i13 + 12 >> 2] = d16;
  d16 = +_Math_LerpAngle(d6, +HEAPF32[i1 >> 2], .5);
  HEAPF32[i13 >> 2] = d16;
  d16 = +_Math_LerpAngle(d8, +HEAPF32[i7 >> 2], .5);
  HEAPF32[i13 + 4 >> 2] = d16;
  HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
  _NetInterpComp_AddAngles(i5, i2);
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  _NetInterpComp_AddAngles(i5, i2);
  _InterpComp_AddRotY(i5, +_Math_LerpAngle(d8, +HEAPF32[i7 >> 2], .3333333432674408));
  _InterpComp_AddRotY(i5, +_Math_LerpAngle(d8, +HEAPF32[i7 >> 2], .6666666865348816));
  _InterpComp_AddRotY(i5, +_Math_LerpAngle(d8, +HEAPF32[i7 >> 2], 1.0));
 }
 STACKTOP = i15;
 return;
}

function _Modern_RenderBlock(i1, i15, i16, i17) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i14 = HEAPU16[934358] | 0;
 i7 = HEAP8[1006372 + i14 >> 0] | 0;
 if (i7 << 24 >> 24 == 5) _Builder_DrawSprite(i15, i16, i17); else {
  i18 = HEAP32[414112] | 0;
  i8 = HEAP8[i18 + i1 >> 0] | 0;
  i11 = i8 & 255;
  i22 = HEAP8[i18 + (i1 + 1) >> 0] | 0;
  i12 = i22 & 255;
  i21 = HEAP8[i18 + (i1 + 2) >> 0] | 0;
  i13 = i21 & 255;
  i20 = HEAP8[i18 + (i1 + 3) >> 0] | 0;
  i9 = i20 & 255;
  i19 = HEAP8[i18 + (i1 + 4) >> 0] | 0;
  i10 = i19 & 255;
  i18 = HEAP8[i18 + (i1 + 5) >> 0] | 0;
  i1 = i18 & 255;
  i2 = i22 << 24 >> 24 == 0;
  i3 = i21 << 24 >> 24 == 0;
  i4 = i20 << 24 >> 24 == 0;
  i5 = i19 << 24 >> 24 == 0;
  i6 = i18 << 24 >> 24 == 0;
  if ((i22 | i8 | i21 | i20 | i19 | i18) << 24 >> 24) {
   HEAP8[1868731] = HEAP8[994084 + i14 >> 0] | 0;
   HEAP32[414123] = (i7 << 24 >> 24 == 3 & 1) << 9;
   HEAP8[1868732] = HEAP8[1008676 + i14 >> 0] | 0;
   d23 = +HEAPF32[1029412 + (i14 * 12 | 0) + 4 >> 2];
   d29 = +HEAPF32[1029412 + (i14 * 12 | 0) + 8 >> 2];
   d28 = +HEAPF32[1038628 + (i14 * 12 | 0) >> 2];
   d26 = +HEAPF32[1038628 + (i14 * 12 | 0) + 4 >> 2];
   d24 = +HEAPF32[1038628 + (i14 * 12 | 0) + 8 >> 2];
   d27 = +(i15 | 0);
   HEAPF32[414124] = +HEAPF32[1029412 + (i14 * 12 | 0) >> 2] + d27;
   d25 = +(i16 | 0);
   HEAPF32[414125] = d23 + d25;
   d23 = +(i17 | 0);
   HEAPF32[414126] = d29 + d23;
   HEAPF32[414127] = d28 + d27;
   HEAPF32[414128] = d26 + d25;
   HEAPF32[414129] = d24 + d23;
   i22 = 1010980 + (i14 * 12 | 0) | 0;
   HEAP32[414130] = HEAP32[i22 >> 2];
   HEAP32[414131] = HEAP32[i22 + 4 >> 2];
   HEAP32[414132] = HEAP32[i22 + 8 >> 2];
   i22 = 1020196 + (i14 * 12 | 0) | 0;
   HEAP32[414133] = HEAP32[i22 >> 2];
   HEAP32[414134] = HEAP32[i22 + 4 >> 2];
   HEAP32[414135] = HEAP32[i22 + 8 >> 2];
   HEAPF32[414131] = 1.0 - +HEAPF32[414131];
   HEAPF32[414134] = 1.0 - +HEAPF32[414134];
   if (i8 << 24 >> 24) _Modern_DrawXMin(i11, i15, i16, i17);
   if (!i2) _Modern_DrawXMax(i12, i15, i16, i17);
   if (!i3) _Modern_DrawZMin(i13, i15, i16, i17);
   if (!i4) _Modern_DrawZMax(i9, i15, i16, i17);
   if (!i5) _Modern_DrawYMin(i10, i15, i16, i17);
   if (!i6) _Modern_DrawYMax(i1, i15, i16, i17);
  }
 }
 return;
}

function _Png_Reconstruct(i1, i2, i11, i10, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 switch (i1 << 24 >> 24) {
 case 1:
  {
   i1 = i2 & 255;
   if (i1 >>> 0 < i3 >>> 0) {
    i3 = i3 - i1 | 0;
    i2 = 0;
    while (1) {
     i10 = i11 + i1 | 0;
     HEAP8[i10 >> 0] = (HEAPU8[i10 >> 0] | 0) + (HEAPU8[i11 + i2 >> 0] | 0);
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 case 2:
  {
   if (i3 | 0) {
    i1 = 0;
    do {
     i9 = i11 + i1 | 0;
     HEAP8[i9 >> 0] = (HEAPU8[i9 >> 0] | 0) + (HEAPU8[i10 + i1 >> 0] | 0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i3 | 0));
   }
   break;
  }
 case 3:
  {
   i1 = i2 & 255;
   if (!(i2 << 24 >> 24)) i1 = 0; else {
    i2 = 0;
    do {
     i8 = HEAPU8[i10 + i2 >> 0] | 0;
     i9 = i11 + i2 | 0;
     HEAP8[i9 >> 0] = (1 ? i8 >>> 1 : i8) + (HEAPU8[i9 >> 0] | 0);
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
   }
   if (i1 >>> 0 < i3 >>> 0) {
    i3 = i3 - i1 | 0;
    i2 = 0;
    while (1) {
     i8 = (HEAPU8[i11 + i2 >> 0] | 0) + (HEAPU8[i10 + i1 >> 0] | 0) | 0;
     i9 = i11 + i1 | 0;
     HEAP8[i9 >> 0] = (1 ? i8 >>> 1 : i8) + (HEAPU8[i9 >> 0] | 0);
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 case 4:
  {
   i1 = i2 & 255;
   if (!(i2 << 24 >> 24)) i1 = 0; else {
    i2 = 0;
    do {
     i9 = i11 + i2 | 0;
     HEAP8[i9 >> 0] = (HEAPU8[i9 >> 0] | 0) + (HEAPU8[i10 + i2 >> 0] | 0);
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
   }
   if (i1 >>> 0 < i3 >>> 0) {
    i9 = i3 - i1 | 0;
    i8 = 0;
    while (1) {
     i2 = HEAPU8[i11 + i8 >> 0] | 0;
     i6 = HEAPU8[i10 + i1 >> 0] | 0;
     i7 = HEAPU8[i10 + i8 >> 0] | 0;
     i5 = i6 + i2 - i7 | 0;
     i3 = _Math_AbsI(i5 - i2 | 0) | 0;
     i4 = _Math_AbsI(i5 - i6 | 0) | 0;
     i5 = _Math_AbsI(i5 - i7 | 0) | 0;
     do if ((i3 | 0) > (i4 | 0) | (i3 | 0) > (i5 | 0)) {
      i2 = i11 + i1 | 0;
      i3 = HEAPU8[i2 >> 0] | 0;
      if ((i4 | 0) > (i5 | 0)) {
       i3 = i3 + i7 | 0;
       break;
      } else {
       i3 = i3 + i6 | 0;
       break;
      }
     } else {
      i7 = i11 + i1 | 0;
      i3 = (HEAPU8[i7 >> 0] | 0) + i2 | 0;
      i2 = i7;
     } while (0);
     HEAP8[i2 >> 0] = i3;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i9 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 default:
  {}
 }
 return;
}

function _InputWidget_UpdateCaret(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i10 = i13 + 96 | 0;
 i9 = i13 + 80 | 0;
 i6 = i13 + 72 | 0;
 i11 = i13 + 64 | 0;
 i1 = i12 + 172 | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  _DrawTextArgs_Make(i9, 23288, HEAP32[i12 + 40 >> 2] | 0, 1);
  _Drawer2D_MakeTextTexture(i1, i9);
  i8 = (HEAPU16[i12 + 180 >> 1] | 0) * 3 | 0;
  HEAP32[i12 + 148 >> 2] = 2 ? i8 >>> 2 : i8;
 }
 i3 = i12 + 44 | 0;
 i8 = (FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 63]() | 0) << 6;
 i2 = i12 + 160 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) >= (i8 | 0)) {
  HEAP32[i2 >> 2] = -1;
  i1 = -1;
 }
 i8 = i12 + 152 | 0;
 i7 = i12 + 156 | 0;
 _WordWrap_GetCoords(i1, i12 + 72 | 0, FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 63]() | 0, i8, i7);
 _DrawTextArgs_MakeEmpty(i9, HEAP32[i12 + 40 >> 2] | 0, 0);
 HEAPF32[i12 + 200 >> 2] = 0.0;
 i5 = i12 + 180 | 0;
 HEAP16[i5 >> 1] = HEAP32[i12 + 148 >> 2];
 if ((HEAP32[i8 >> 2] | 0) == 64) {
  i1 = HEAP32[i7 >> 2] | 0;
  i3 = i1;
  i2 = 64;
  i1 = HEAP32[i12 + 96 + (i1 << 2) >> 2] | 0;
 } else {
  HEAP32[i10 >> 2] = i13;
  i4 = i10 + 4 | 0;
  HEAP16[i4 >> 1] = 0;
  HEAP16[i10 + 6 >> 1] = 64;
  _InputWidget_FormatLine(i12, HEAP32[i7 >> 2] | 0, i10);
  _String_UNSAFE_Substring(i6, i10, 0, HEAP32[i8 >> 2] | 0);
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = i9;
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = _Drawer2D_TextWidth(i9) | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  if (!i3) i1 = (HEAP32[i12 + 140 >> 2] | 0) + i1 | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  if ((i2 | 0) < (HEAPU16[i4 >> 1] | 0 | 0)) {
   _String_UNSAFE_Substring(i11, i10, i2, 1);
   i2 = HEAP32[i11 + 4 >> 2] | 0;
   i3 = i9;
   HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i3 + 4 >> 2] = i2;
   HEAP8[i9 + 12 >> 0] = 1;
   i3 = (_Drawer2D_TextWidth(i9) | 0) & 65535;
   HEAP16[i5 >> 1] = i3;
   i3 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
 }
 HEAP16[i12 + 176 >> 1] = (HEAP32[i12 + 4 >> 2] | 0) + i1 + (HEAPU8[i12 + 145 >> 0] | 0);
 i1 = (HEAP32[i12 + 164 >> 2] | 0) + (HEAPU16[i12 + 118 >> 1] | 0) + (Math_imul(HEAP32[i12 + 108 >> 2] | 0, i3) | 0) & 65535;
 HEAP16[i12 + 178 >> 1] = i1;
 i1 = _InputWidget_GetLastCol(i12, i2, i3) | 0;
 if (!(i1 << 24 >> 24)) i1 = _PackedCol_Scale(-1, .800000011920929) | 0; else i1 = HEAP32[1667324 + ((i1 & 255) << 2) >> 2] | 0;
 HEAP32[i12 + 168 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function _Modern_DrawYMin(i1, i7, i2, i8) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0;
 i10 = HEAPU16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 4 << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 i14 = HEAP32[414130] | 0;
 d13 = +(i1 + -1 | 0);
 d11 = +HEAPF32[414133] * .9993749856948853 + d13;
 d12 = d15 + d9 * +HEAPF32[414132];
 d9 = d15 + d9 * +HEAPF32[414135] * .9993749856948853;
 i6 = HEAP32[460410] | 0;
 i10 = (i6 ? i10 >>> i6 : i10) + (HEAP32[414123] | 0) | 0;
 i6 = i2 + -1 | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i7, i6, i8) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorYMin(i5, i7, i6, i8, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorYMin(i5, i7, i6, i8, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorYMin(i5, i7, i6, i8, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorYMin(i5, i7, i6, i8, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) + 16 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[414125] | 0;
 i16 = HEAP32[414124] | 0;
 i7 = HEAP32[414129] | 0;
 HEAP32[i8 >> 2] = i16;
 HEAP32[i8 + 4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 HEAP32[i8 + 12 >> 2] = i3;
 HEAP32[i8 + 16 >> 2] = i14;
 HEAPF32[i8 + 20 >> 2] = d9;
 i5 = HEAP32[414126] | 0;
 HEAP32[i8 + 24 >> 2] = i16;
 HEAP32[i8 + 28 >> 2] = i6;
 HEAP32[i8 + 32 >> 2] = i5;
 HEAP32[i8 + 36 >> 2] = i4;
 HEAP32[i8 + 40 >> 2] = i14;
 HEAPF32[i8 + 44 >> 2] = d12;
 d15 = +HEAPF32[414127] + d13;
 HEAPF32[i8 + 48 >> 2] = d15;
 HEAP32[i8 + 52 >> 2] = i6;
 HEAP32[i8 + 56 >> 2] = i5;
 HEAP32[i8 + 60 >> 2] = i2;
 HEAPF32[i8 + 64 >> 2] = d11;
 HEAPF32[i8 + 68 >> 2] = d12;
 HEAPF32[i8 + 72 >> 2] = d15;
 HEAP32[i8 + 76 >> 2] = i6;
 HEAP32[i8 + 80 >> 2] = i7;
 HEAP32[i8 + 84 >> 2] = i1;
 HEAPF32[i8 + 88 >> 2] = d11;
 HEAPF32[i8 + 92 >> 2] = d9;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _Modern_DrawYMax(i1, i7, i2, i8) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0;
 i10 = HEAPU16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 5 << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 i14 = HEAP32[414130] | 0;
 d13 = +(i1 + -1 | 0);
 d11 = +HEAPF32[414133] * .9993749856948853 + d13;
 d12 = d15 + d9 * +HEAPF32[414132];
 d9 = d15 + d9 * +HEAPF32[414135] * .9993749856948853;
 i5 = HEAP32[460410] | 0;
 i10 = (i5 ? i10 >>> i5 : i10) + (HEAP32[414123] | 0) | 0;
 i5 = i2 + 1 | 0;
 i6 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i7, i5, i8) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorYMax(i6, i7, i5, i8, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorYMax(i6, i7, i5, i8, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorYMax(i6, i7, i5, i8, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorYMax(i6, i7, i5, i8, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) + 20 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[414128] | 0;
 i16 = HEAP32[414124] | 0;
 i7 = HEAP32[414126] | 0;
 HEAP32[i8 >> 2] = i16;
 HEAP32[i8 + 4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 HEAP32[i8 + 12 >> 2] = i4;
 HEAP32[i8 + 16 >> 2] = i14;
 HEAPF32[i8 + 20 >> 2] = d12;
 i5 = HEAP32[414129] | 0;
 HEAP32[i8 + 24 >> 2] = i16;
 HEAP32[i8 + 28 >> 2] = i6;
 HEAP32[i8 + 32 >> 2] = i5;
 HEAP32[i8 + 36 >> 2] = i3;
 HEAP32[i8 + 40 >> 2] = i14;
 HEAPF32[i8 + 44 >> 2] = d9;
 d15 = +HEAPF32[414127] + d13;
 HEAPF32[i8 + 48 >> 2] = d15;
 HEAP32[i8 + 52 >> 2] = i6;
 HEAP32[i8 + 56 >> 2] = i5;
 HEAP32[i8 + 60 >> 2] = i1;
 HEAPF32[i8 + 64 >> 2] = d11;
 HEAPF32[i8 + 68 >> 2] = d9;
 HEAPF32[i8 + 72 >> 2] = d15;
 HEAP32[i8 + 76 >> 2] = i6;
 HEAP32[i8 + 80 >> 2] = i7;
 HEAP32[i8 + 84 >> 2] = i2;
 HEAPF32[i8 + 88 >> 2] = d11;
 HEAPF32[i8 + 92 >> 2] = d12;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _Modern_DrawZMin(i12, i7, i8, i1) {
 i12 = i12 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0;
 i10 = HEAPU16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 2 << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 d14 = +(i12 | 0) - +HEAPF32[414130];
 d13 = (1.0 - +HEAPF32[414133]) * .9993749856948853;
 d11 = d15 + d9 * +HEAPF32[414134];
 d9 = d15 + d9 * +HEAPF32[414131] * .9993749856948853;
 i6 = HEAP32[460410] | 0;
 i10 = (i6 ? i10 >>> i6 : i10) + (HEAP32[414123] | 0) | 0;
 i6 = i1 + -1 | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i7, i8, i6) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorZ(i5, i7, i8, i6, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorZ(i5, i7, i8, i6, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorZ(i5, i7, i8, i6, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorZ(i5, i7, i8, i6, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) + 8 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i7 = HEAP32[414126] | 0;
 i16 = HEAP32[414124] | 0;
 i6 = HEAP32[414125] | 0;
 HEAP32[i8 >> 2] = i16;
 HEAP32[i8 + 4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 HEAP32[i8 + 12 >> 2] = i4;
 HEAPF32[i8 + 16 >> 2] = d14;
 HEAPF32[i8 + 20 >> 2] = d9;
 i5 = HEAP32[414128] | 0;
 HEAP32[i8 + 24 >> 2] = i16;
 HEAP32[i8 + 28 >> 2] = i5;
 HEAP32[i8 + 32 >> 2] = i7;
 HEAP32[i8 + 36 >> 2] = i3;
 HEAPF32[i8 + 40 >> 2] = d14;
 HEAPF32[i8 + 44 >> 2] = d11;
 d15 = +HEAPF32[414127] + +(i12 + -1 | 0);
 HEAPF32[i8 + 48 >> 2] = d15;
 HEAP32[i8 + 52 >> 2] = i5;
 HEAP32[i8 + 56 >> 2] = i7;
 HEAP32[i8 + 60 >> 2] = i1;
 HEAPF32[i8 + 64 >> 2] = d13;
 HEAPF32[i8 + 68 >> 2] = d11;
 HEAPF32[i8 + 72 >> 2] = d15;
 HEAP32[i8 + 76 >> 2] = i6;
 HEAP32[i8 + 80 >> 2] = i7;
 HEAP32[i8 + 84 >> 2] = i2;
 HEAPF32[i8 + 88 >> 2] = d13;
 HEAPF32[i8 + 92 >> 2] = d9;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _Modern_DrawXMax(i12, i1, i7, i8) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0;
 i10 = HEAPU16[1047844 + (((HEAPU16[934358] | 0) * 6 | 1) << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 d14 = +(i12 | 0) - +HEAPF32[414132];
 d13 = (1.0 - +HEAPF32[414135]) * .9993749856948853;
 d11 = d15 + d9 * +HEAPF32[414134];
 d9 = d15 + d9 * +HEAPF32[414131] * .9993749856948853;
 i5 = HEAP32[460410] | 0;
 i10 = (i5 ? i10 >>> i5 : i10) + (HEAP32[414123] | 0) | 0;
 i5 = i1 + 1 | 0;
 i6 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i5, i7, i8) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorX(i6, i5, i7, i8, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorX(i6, i5, i7, i8, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorX(i6, i5, i7, i8, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorX(i6, i5, i7, i8, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) + 4 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[414127] | 0;
 i7 = HEAP32[414128] | 0;
 d15 = +HEAPF32[414129] + +(i12 + -1 | 0);
 HEAP32[i8 >> 2] = i6;
 HEAP32[i8 + 4 >> 2] = i7;
 HEAPF32[i8 + 8 >> 2] = d15;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAPF32[i8 + 16 >> 2] = d13;
 HEAPF32[i8 + 20 >> 2] = d11;
 i5 = HEAP32[414125] | 0;
 HEAP32[i8 + 24 >> 2] = i6;
 HEAP32[i8 + 28 >> 2] = i5;
 HEAPF32[i8 + 32 >> 2] = d15;
 HEAP32[i8 + 36 >> 2] = i3;
 HEAPF32[i8 + 40 >> 2] = d13;
 HEAPF32[i8 + 44 >> 2] = d9;
 i12 = HEAP32[414126] | 0;
 HEAP32[i8 + 48 >> 2] = i6;
 HEAP32[i8 + 52 >> 2] = i5;
 HEAP32[i8 + 56 >> 2] = i12;
 HEAP32[i8 + 60 >> 2] = i4;
 HEAPF32[i8 + 64 >> 2] = d14;
 HEAPF32[i8 + 68 >> 2] = d9;
 HEAP32[i8 + 72 >> 2] = i6;
 HEAP32[i8 + 76 >> 2] = i7;
 HEAP32[i8 + 80 >> 2] = i12;
 HEAP32[i8 + 84 >> 2] = i2;
 HEAPF32[i8 + 88 >> 2] = d14;
 HEAPF32[i8 + 92 >> 2] = d11;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _Modern_DrawZMax(i1, i7, i8, i2) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i10 = HEAPU16[1047844 + (((HEAPU16[934358] | 0) * 6 | 0) + 3 << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 i14 = HEAP32[414130] | 0;
 d13 = +(i1 + -1 | 0);
 d11 = +HEAPF32[414133] * .9993749856948853 + d13;
 d12 = d15 + d9 * +HEAPF32[414134];
 d9 = d15 + d9 * +HEAPF32[414131] * .9993749856948853;
 i5 = HEAP32[460410] | 0;
 i10 = (i5 ? i10 >>> i5 : i10) + (HEAP32[414123] | 0) | 0;
 i5 = i2 + 1 | 0;
 i6 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i7, i8, i5) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorZ(i6, i7, i8, i5, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorZ(i6, i7, i8, i5, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorZ(i6, i7, i8, i5, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorZ(i6, i7, i8, i5, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) + 12 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i7 = HEAP32[414129] | 0;
 d15 = +HEAPF32[414127] + d13;
 i6 = HEAP32[414128] | 0;
 HEAPF32[i8 >> 2] = d15;
 HEAP32[i8 + 4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAPF32[i8 + 16 >> 2] = d11;
 HEAPF32[i8 + 20 >> 2] = d12;
 i5 = HEAP32[414124] | 0;
 HEAP32[i8 + 24 >> 2] = i5;
 HEAP32[i8 + 28 >> 2] = i6;
 HEAP32[i8 + 32 >> 2] = i7;
 HEAP32[i8 + 36 >> 2] = i3;
 HEAP32[i8 + 40 >> 2] = i14;
 HEAPF32[i8 + 44 >> 2] = d12;
 i6 = HEAP32[414125] | 0;
 HEAP32[i8 + 48 >> 2] = i5;
 HEAP32[i8 + 52 >> 2] = i6;
 HEAP32[i8 + 56 >> 2] = i7;
 HEAP32[i8 + 60 >> 2] = i4;
 HEAP32[i8 + 64 >> 2] = i14;
 HEAPF32[i8 + 68 >> 2] = d9;
 HEAPF32[i8 + 72 >> 2] = d15;
 HEAP32[i8 + 76 >> 2] = i6;
 HEAP32[i8 + 80 >> 2] = i7;
 HEAP32[i8 + 84 >> 2] = i2;
 HEAPF32[i8 + 88 >> 2] = d11;
 HEAPF32[i8 + 92 >> 2] = d9;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _PhysicsComp_LowestModifier(i14, i13, i2) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i11 = i21 + 52 | 0;
 i10 = i21 + 40 | 0;
 i12 = i21 + 16 | 0;
 i15 = i21;
 _IVec3_Floor(i11, i13);
 _IVec3_Floor(i10, i13 + 12 | 0);
 i16 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = (i16 | 0) > 0 ? i16 : 0;
 i16 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[244736] | 0;
 i5 = (i16 | 0) < (i5 | 0) ? i16 : i5;
 HEAP32[i10 >> 2] = i5;
 i16 = i11 + 4 | 0;
 i7 = HEAP32[i16 >> 2] | 0;
 i7 = (i7 | 0) > 0 ? i7 : 0;
 HEAP32[i16 >> 2] = i7;
 i16 = i10 + 4 | 0;
 i18 = HEAP32[i16 >> 2] | 0;
 i4 = HEAP32[244737] | 0;
 i4 = (i18 | 0) < (i4 | 0) ? i18 : i4;
 HEAP32[i16 >> 2] = i4;
 i18 = i11 + 8 | 0;
 i6 = HEAP32[i18 >> 2] | 0;
 i6 = (i6 | 0) > 0 ? i6 : 0;
 HEAP32[i18 >> 2] = i6;
 i19 = i10 + 8 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 i3 = HEAP32[244738] | 0;
 i3 = (i20 | 0) < (i3 | 0) ? i20 : i3;
 HEAP32[i19 >> 2] = i3;
 L1 : do if ((i7 | 0) > (i4 | 0)) d1 = 1.0e9; else {
  i17 = i15 + 4 | 0;
  i20 = i15 + 8 | 0;
  i9 = i2 << 24 >> 24 != 0;
  i8 = i12 + 12 | 0;
  i2 = i5;
  d1 = 1.0e9;
  while (1) {
   HEAPF32[i17 >> 2] = +(i7 | 0);
   if ((i6 | 0) <= (i3 | 0)) {
    while (1) {
     HEAPF32[i20 >> 2] = +(i6 | 0);
     i4 = HEAP32[i11 >> 2] | 0;
     if ((i4 | 0) <= (i2 | 0)) {
      while (1) {
       HEAPF32[i15 >> 2] = +(i4 | 0);
       i5 = _World_GetBlock_346(i4, i7, i6) | 0;
       i2 = i5 & 65535;
       if (i5 << 16 >> 16) if (i9 | (HEAP8[1000996 + i2 >> 0] | 0) != 2) {
        _Vec3_Add_328(i12, i15, 1010980 + (i2 * 12 | 0) | 0);
        _Vec3_Add_328(i8, i15, 1020196 + (i2 * 12 | 0) | 0);
        if ((_AABB_Intersects(i12, i13) | 0) << 24 >> 24) {
         d22 = +HEAPF32[1002532 + (i2 << 2) >> 2];
         d1 = d1 < d22 ? d1 : d22;
         if ((HEAP8[1001764 + i2 >> 0] | 0) == 1) HEAP8[i14 >> 0] = 1;
        }
       }
       i2 = HEAP32[i10 >> 2] | 0;
       if ((i4 | 0) < (i2 | 0)) i4 = i4 + 1 | 0; else break;
      }
      i3 = HEAP32[i19 >> 2] | 0;
     }
     if ((i6 | 0) < (i3 | 0)) i6 = i6 + 1 | 0; else break;
    }
    i4 = HEAP32[i16 >> 2] | 0;
   }
   if ((i7 | 0) >= (i4 | 0)) break L1;
   i6 = HEAP32[i18 >> 2] | 0;
   i7 = i7 + 1 | 0;
  }
 } while (0);
 STACKTOP = i21;
 return +d1;
}

function _Modern_DrawXMin(i1, i2, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i10 = HEAPU16[1047844 + ((HEAPU16[934358] | 0) * 6 << 1) >> 1] | 0;
 d9 = +HEAPF32[460411];
 d15 = d9 * +(HEAP32[460409] & i10 | 0);
 i14 = HEAP32[414132] | 0;
 d13 = +(i1 + -1 | 0);
 d11 = +HEAPF32[414135] * .9993749856948853 + d13;
 d12 = d15 + d9 * +HEAPF32[414134];
 d9 = d15 + d9 * +HEAPF32[414131] * .9993749856948853;
 i6 = HEAP32[460410] | 0;
 i10 = (i6 ? i10 >>> i6 : i10) + (HEAP32[414123] | 0) | 0;
 i6 = i2 + -1 | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i6, i7, i8) | 0;
 if (!(HEAP8[1868731] | 0)) {
  i3 = _Modern_GetColorX(i5, i6, i7, i8, -1, -1) | 0;
  if (!(HEAP8[1868731] | 0)) {
   i2 = _Modern_GetColorX(i5, i6, i7, i8, 1, -1) | 0;
   if (!(HEAP8[1868731] | 0)) {
    i1 = _Modern_GetColorX(i5, i6, i7, i8, 1, 1) | 0;
    if (!(HEAP8[1868731] | 0)) {
     i4 = i3;
     i3 = _Modern_GetColorX(i5, i6, i7, i8, -1, 1) | 0;
    } else {
     i4 = i3;
     i3 = -1;
    }
   } else {
    i4 = i3;
    i1 = -1;
    i3 = -1;
   }
  } else {
   i4 = i3;
   i2 = -1;
   i1 = -1;
   i3 = -1;
  }
 } else {
  i4 = -1;
  i2 = -1;
  i1 = -1;
  i3 = -1;
 }
 if (HEAP8[1868732] | 0) {
  i8 = HEAP32[994852 + (HEAPU16[934358] << 2) >> 2] | 0;
  i4 = _PackedCol_Tint(i4, i8) | 0;
  i2 = _PackedCol_Tint(i2, i8) | 0;
  i1 = _PackedCol_Tint(i1, i8) | 0;
  i3 = _PackedCol_Tint(i3, i8) | 0;
 }
 i10 = 110944 + (i10 << 5) | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[414124] | 0;
 i7 = HEAP32[414128] | 0;
 d15 = +HEAPF32[414129] + d13;
 HEAP32[i8 >> 2] = i6;
 HEAP32[i8 + 4 >> 2] = i7;
 HEAPF32[i8 + 8 >> 2] = d15;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAPF32[i8 + 16 >> 2] = d11;
 HEAPF32[i8 + 20 >> 2] = d12;
 i5 = HEAP32[414126] | 0;
 HEAP32[i8 + 24 >> 2] = i6;
 HEAP32[i8 + 28 >> 2] = i7;
 HEAP32[i8 + 32 >> 2] = i5;
 HEAP32[i8 + 36 >> 2] = i2;
 HEAP32[i8 + 40 >> 2] = i14;
 HEAPF32[i8 + 44 >> 2] = d12;
 i7 = HEAP32[414125] | 0;
 HEAP32[i8 + 48 >> 2] = i6;
 HEAP32[i8 + 52 >> 2] = i7;
 HEAP32[i8 + 56 >> 2] = i5;
 HEAP32[i8 + 60 >> 2] = i4;
 HEAP32[i8 + 64 >> 2] = i14;
 HEAPF32[i8 + 68 >> 2] = d9;
 HEAP32[i8 + 72 >> 2] = i6;
 HEAP32[i8 + 76 >> 2] = i7;
 HEAPF32[i8 + 80 >> 2] = d15;
 HEAP32[i8 + 84 >> 2] = i3;
 HEAPF32[i8 + 88 >> 2] = d11;
 HEAPF32[i8 + 92 >> 2] = d9;
 HEAP32[i10 >> 2] = i8 + 96;
 return;
}

function _TabListOverlay_QuickSort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i12;
 i10 = HEAP32[455455] | 0;
 if ((i1 | 0) < (i2 | 0)) do {
  i9 = HEAPU16[1821824 + (((i1 + i2 | 0) / 2 | 0) << 1) >> 1] | 0;
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     i6 = 1821824 + (i3 << 1) | 0;
     i7 = i3 + 1 | 0;
     if ((FUNCTION_TABLE_iii[i10 & 127](i9, HEAPU16[i6 >> 1] | 0) | 0) > 0) i3 = i7; else break;
    }
    i8 = i4;
    while (1) {
     i5 = 1821824 + (i8 << 1) | 0;
     i4 = i8 + -1 | 0;
     if ((FUNCTION_TABLE_iii[i10 & 127](i9, HEAPU16[i5 >> 1] | 0) | 0) < 0) i8 = i4; else break;
    }
    if ((i3 | 0) > (i8 | 0)) i4 = i8; else {
     i13 = HEAP16[i6 >> 1] | 0;
     HEAP16[i6 >> 1] = HEAP16[i5 >> 1] | 0;
     HEAP16[i5 >> 1] = i13;
     i6 = 1822848 + (i3 * 28 | 0) | 0;
     HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     HEAP32[i11 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
     HEAP32[i11 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
     HEAP32[i11 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
     i3 = 1822848 + (i8 * 28 | 0) | 0;
     HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
     HEAP32[i6 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
     HEAP32[i6 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
     HEAP32[i6 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
     HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i3 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
     HEAP32[i3 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
     HEAP32[i3 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
     HEAP32[i3 + 24 >> 2] = HEAP32[i11 + 24 >> 2];
     i3 = i7;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _TabListOverlay_QuickSort(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _TabListOverlay_QuickSort(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 STACKTOP = i12;
 return;
}

function _TextGroupWidget_Reduce(i10, i16, i12, i18) {
 i10 = i10 | 0;
 i16 = i16 | 0;
 i12 = i12 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i15 = i20 + 272 | 0;
 i19 = i20 + 256 | 0;
 i13 = i20 + 128 | 0;
 i11 = i20;
 i14 = i20 + 264 | 0;
 i9 = i20 + 248 | 0;
 HEAP32[i19 >> 2] = i18;
 i17 = i10 + 40 | 0;
 if ((HEAP32[i17 >> 2] | 0) > 0) {
  i8 = i9 + 4 | 0;
  i7 = 0;
  i6 = 0;
  while (1) {
   _TextGroupWidget_UNSAFE_Get(i9, i10, i7);
   i5 = HEAP32[i9 >> 2] | 0;
   i4 = HEAPU16[i8 >> 1] | 0;
   i4 = i4 >>> 0 < 96 ? i4 : 96;
   i1 = i13 + (i7 << 2) | 0;
   HEAP32[i1 >> 2] = -1;
   i2 = i11 + (i7 << 2) | 0;
   HEAP32[i2 >> 2] = -1;
   i3 = i4 + i6 | 0;
   if (!i4) i3 = i6; else {
    HEAP32[i1 >> 2] = i6;
    _Mem_Copy(i16 + i6 | 0, i5, i4) | 0;
    HEAP32[i2 >> 2] = i3;
   }
   i7 = i7 + 1 | 0;
   if ((i7 | 0) >= (HEAP32[i17 >> 2] | 0)) break; else i6 = i3;
  }
  i5 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
  i4 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
 } else {
  i5 = 0;
  i4 = 0;
  i3 = 0;
 }
 i2 = i14 + 2 | 0;
 i1 = _TextGroupWidget_NextUrl(i16, i3, 0) | 0;
 HEAP16[i14 >> 1] = 0;
 HEAP16[i2 >> 1] = i1;
 HEAP16[i15 >> 1] = HEAP16[i14 >> 1] | 0;
 HEAP16[i15 + 2 >> 1] = HEAP16[i14 + 2 >> 1] | 0;
 HEAP16[i15 + 4 >> 1] = HEAP16[i14 + 4 >> 1] | 0;
 HEAP16[i15 + 6 >> 1] = HEAP16[i14 + 6 >> 1] | 0;
 _TextGroupWidget_Output(i15, i5, i4, i19);
 if ((i1 | 0) != (i3 | 0)) do {
  i12 = _TextGroupWidget_UrlEnd(i16, i3, i13, HEAP32[i17 >> 2] | 0, i1) | 0;
  HEAP16[i14 >> 1] = i1;
  HEAP16[i2 >> 1] = i12 - i1 | 32768;
  HEAP16[i15 >> 1] = HEAP16[i14 >> 1] | 0;
  HEAP16[i15 + 2 >> 1] = HEAP16[i14 + 2 >> 1] | 0;
  HEAP16[i15 + 4 >> 1] = HEAP16[i14 + 4 >> 1] | 0;
  HEAP16[i15 + 6 >> 1] = HEAP16[i14 + 6 >> 1] | 0;
  _TextGroupWidget_Output(i15, i5, i4, i19);
  i1 = _TextGroupWidget_NextUrl(i16, i3, i12) | 0;
  HEAP16[i14 >> 1] = i12;
  HEAP16[i2 >> 1] = i1 - i12;
  HEAP16[i15 >> 1] = HEAP16[i14 >> 1] | 0;
  HEAP16[i15 + 2 >> 1] = HEAP16[i14 + 2 >> 1] | 0;
  HEAP16[i15 + 4 >> 1] = HEAP16[i14 + 4 >> 1] | 0;
  HEAP16[i15 + 6 >> 1] = HEAP16[i14 + 6 >> 1] | 0;
  _TextGroupWidget_Output(i15, i5, i4, i19);
 } while ((i1 | 0) != (i3 | 0));
 i19 = (HEAP32[i19 >> 2] | 0) - i18 | 0;
 STACKTOP = i20;
 return (3 ? i19 >> 3 : i19) | 0;
}

function _Adv_RenderBlock(i1, i15, i16, i17) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i14 = HEAPU16[934358] | 0;
 i7 = HEAP8[1006372 + i14 >> 0] | 0;
 if (i7 << 24 >> 24 == 5) _Builder_DrawSprite(i15, i16, i17); else {
  i18 = HEAP32[414112] | 0;
  i8 = HEAP8[i18 + i1 >> 0] | 0;
  i11 = i8 & 255;
  i22 = HEAP8[i18 + (i1 + 1) >> 0] | 0;
  i12 = i22 & 255;
  i21 = HEAP8[i18 + (i1 + 2) >> 0] | 0;
  i13 = i21 & 255;
  i20 = HEAP8[i18 + (i1 + 3) >> 0] | 0;
  i9 = i20 & 255;
  i19 = HEAP8[i18 + (i1 + 4) >> 0] | 0;
  i10 = i19 & 255;
  i18 = HEAP8[i18 + (i1 + 5) >> 0] | 0;
  i1 = i18 & 255;
  i2 = i22 << 24 >> 24 == 0;
  i3 = i21 << 24 >> 24 == 0;
  i4 = i20 << 24 >> 24 == 0;
  i5 = i19 << 24 >> 24 == 0;
  i6 = i18 << 24 >> 24 == 0;
  if ((i22 | i8 | i21 | i20 | i19 | i18) << 24 >> 24) {
   HEAP8[1868731] = HEAP8[994084 + i14 >> 0] | 0;
   HEAP32[414123] = (i7 << 24 >> 24 == 3 & 1) << 9;
   HEAP8[1868732] = HEAP8[1008676 + i14 >> 0] | 0;
   d23 = +HEAPF32[1029412 + (i14 * 12 | 0) + 4 >> 2];
   d29 = +HEAPF32[1029412 + (i14 * 12 | 0) + 8 >> 2];
   d28 = +HEAPF32[1038628 + (i14 * 12 | 0) >> 2];
   d26 = +HEAPF32[1038628 + (i14 * 12 | 0) + 4 >> 2];
   d24 = +HEAPF32[1038628 + (i14 * 12 | 0) + 8 >> 2];
   d27 = +(i15 | 0);
   HEAPF32[414124] = +HEAPF32[1029412 + (i14 * 12 | 0) >> 2] + d27;
   d25 = +(i16 | 0);
   HEAPF32[414125] = d23 + d25;
   d23 = +(i17 | 0);
   HEAPF32[414126] = d29 + d23;
   HEAPF32[414127] = d28 + d27;
   HEAPF32[414128] = d26 + d25;
   HEAPF32[414129] = d24 + d23;
   i22 = 1010980 + (i14 * 12 | 0) | 0;
   HEAP32[414130] = HEAP32[i22 >> 2];
   HEAP32[414131] = HEAP32[i22 + 4 >> 2];
   HEAP32[414132] = HEAP32[i22 + 8 >> 2];
   i22 = 1020196 + (i14 * 12 | 0) | 0;
   HEAP32[414133] = HEAP32[i22 >> 2];
   HEAP32[414134] = HEAP32[i22 + 4 >> 2];
   HEAP32[414135] = HEAP32[i22 + 8 >> 2];
   HEAPF32[414131] = 1.0 - +HEAPF32[414131];
   HEAPF32[414134] = 1.0 - +HEAPF32[414134];
   if (i8 << 24 >> 24) _Adv_DrawXMin(i11);
   if (!i2) _Adv_DrawXMax(i12);
   if (!i3) _Adv_DrawZMin(i13);
   if (!i4) _Adv_DrawZMax(i9);
   if (!i5) _Adv_DrawYMin(i10);
   if (!i6) _Adv_DrawYMax(i1);
  }
 }
 return;
}

function _ChatScreen_PointerDown(i7, i3, i5, i6) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i4 = i8 + 256 | 0;
 i2 = i8;
 do if (!(HEAP8[1868760] | 0)) {
  i1 = (HEAP8[1689553] | 0) != 0;
  if (!(HEAP8[i7 + 4 >> 0] | 0)) {
   if (!i1) {
    i1 = 0;
    break;
   }
   HEAP32[i4 >> 2] = i2;
   HEAP16[i4 + 4 >> 1] = 0;
   HEAP16[i4 + 6 >> 1] = 256;
   i1 = _TextGroupWidget_GetSelected(i7 + 1108 | 0, i4, i5, i6) | 0;
   if (!((_Utils_IsUrlPrefix(i4) | 0) << 24 >> 24)) {
    i1 = 0;
    break;
   }
   if (+HEAPF64[144672 + (((HEAP32[i7 + 44 >> 2] | 0) + i1 & 31) << 3) >> 3] + 10.0 < +HEAPF64[122280]) {
    i1 = 0;
    break;
   }
   _UrlWarningOverlay_Show(i4);
   i1 = 1;
   break;
  }
  if (i1) {
   if (_Widget_Contains(i7 + 2560 | 0, i5, i6) | 0) {
    _ChatScreen_EnterChatInput(i7, 0);
    i1 = 1;
    break;
   }
   if (_Widget_Contains(i7 + 2644 | 0, i5, i6) | 0) {
    _ChatScreen_EnterChatInput(i7, 1);
    i1 = 1;
    break;
   }
   if (_Widget_Contains(i7 + 2728 | 0, i5, i6) | 0) {
    _ChatScreen_ToggleAltInput(i7);
    i1 = 1;
    break;
   }
  }
  i1 = i7 + 1108 | 0;
  if (!(_Widget_Contains(i1, i5, i6) | 0)) {
   i1 = i7 + 1292 | 0;
   if (HEAP8[i7 + 1312 >> 0] | 0) if (_Widget_Contains(i1, i5, i6) | 0) {
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1, i3, i5, i6) | 0;
    _ChatScreen_UpdateChatYOffsets(i7);
    i1 = 1;
    break;
   }
   i1 = i7 + 324 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1, i3, i5, i6) | 0;
   i1 = 1;
   break;
  }
  i3 = _TextGroupWidget_UsedHeight(i1) | 0;
  if (!(_Gui_Contains(HEAP32[i7 + 1112 >> 2] | 0, (HEAP32[i7 + 1116 >> 2] | 0) - i3 + (HEAP32[i7 + 1124 >> 2] | 0) | 0, HEAP32[i7 + 1120 >> 2] | 0, i3, i5, i6) | 0)) i1 = 0; else {
   HEAP32[i4 >> 2] = i2;
   i7 = i4 + 4 | 0;
   HEAP16[i7 >> 1] = 0;
   HEAP16[i4 + 6 >> 1] = 256;
   _TextGroupWidget_GetSelected(i1, i4, i5, i6) | 0;
   if (!(HEAP16[i7 >> 1] | 0)) i1 = 0; else {
    if (!((_Utils_IsUrlPrefix(i4) | 0) << 24 >> 24 == 0 | 1 == 0)) {
     _UrlWarningOverlay_Show(i4);
     i1 = 1;
     break;
    }
    if (!(HEAP8[1689500] | 0)) i1 = 1; else {
     _ChatScreen_AppendInput(i4);
     i1 = 1;
    }
   }
  }
 } else i1 = 0; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _NotchyGen_PlantTrees() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 i13 = i15 + 96 | 0;
 i11 = i15;
 HEAP32[422262] = HEAP32[422257];
 HEAP32[422263] = 978288;
 i1 = HEAP32[244733] | 0;
 i10 = Math_imul(HEAP32[244735] | 0, i1) | 0;
 i14 = (i10 | 0) / 4e3 | 0;
 HEAP32[422258] = 32973;
 L1 : do if ((i10 | 0) > 3999) {
  d12 = +(i14 | 0);
  i2 = 0;
  while (1) {
   HEAPF32[422259] = +(i2 | 0) / d12;
   i5 = _Random_Next(978288, i1) | 0;
   i6 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
   i7 = 0;
   do {
    i8 = 0;
    i9 = i5;
    i10 = i6;
    do {
     i4 = _Random_Next(978288, 6) | 0;
     i9 = i4 - (_Random_Next(978288, 6) | 0) + i9 | 0;
     i4 = _Random_Next(978288, 6) | 0;
     i10 = i4 - (_Random_Next(978288, 6) | 0) + i10 | 0;
     if ((_World_ContainsXZ_640(i9, i10) | 0) << 24 >> 24) if (!(+_Random_Float(978288) >= .25)) {
      i1 = (HEAP32[422261] | 0) + ((Math_imul(HEAP32[244733] | 0, i10) | 0) + i9 << 1) | 0;
      i1 = HEAP16[i1 >> 1] | 0;
      i3 = (i1 << 16 >> 16) + 1 | 0;
      if ((i3 | 0) < (HEAP32[244734] | 0)) {
       i4 = (_Random_Next(978288, 3) | 0) + 5 | 0;
       if (i1 << 16 >> 16 > -1) {
        i1 = (Math_imul(HEAP32[244735] | 0, i3) | 0) + i10 | 0;
        i1 = (Math_imul(i1, HEAP32[244733] | 0) | 0) + i9 | 0;
        if ((HEAP8[(HEAP32[422257] | 0) + (i1 - (HEAP32[244739] | 0)) >> 0] | 0) == 2) if ((_TreeGen_CanGrow(i9, i3, i10, i4) | 0) << 24 >> 24) {
         i1 = _TreeGen_Grow(i9, i3, i10, i4, i13, i11) | 0;
         if ((i1 | 0) > 0) {
          i3 = 0;
          do {
           i4 = Math_imul(HEAP32[244735] | 0, HEAP32[i13 + (i3 * 12 | 0) + 4 >> 2] | 0) | 0;
           i4 = Math_imul(i4 + (HEAP32[i13 + (i3 * 12 | 0) + 8 >> 2] | 0) | 0, HEAP32[244733] | 0) | 0;
           HEAP8[(HEAP32[422257] | 0) + (i4 + (HEAP32[i13 + (i3 * 12 | 0) >> 2] | 0)) >> 0] = HEAP8[i11 + i3 >> 0] | 0;
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i1 | 0));
         }
        }
       }
      }
     }
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != 20);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != 20);
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i14 | 0)) break L1;
   i1 = HEAP32[244733] | 0;
  }
 } while (0);
 STACKTOP = i15;
 return;
}

function _MPConnection_Tick(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7;
 L1 : do if (!(HEAP8[1841573] | 0)) {
  if (HEAP8[1868803] | 0) {
   _MPConnection_TickConnect(i1);
   break;
  }
  i1 = _Socket_Read(HEAP32[5574] | 0, HEAP32[460401] | 0, 16384, i2) | 0;
  do if (!i1) {
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    if (!(+HEAPF64[122364] + 30.0 < +HEAPF64[122280])) break;
    _MPConnection_Disconnect();
    break L1;
   }
   i5 = (HEAP32[460401] | 0) + i1 | 0;
   HEAPF64[122364] = +HEAPF64[122280];
   L12 : do if (i5 >>> 0 > 956272 >>> 0) {
    i1 = 956272;
    while (1) {
     i3 = HEAP8[i1 >> 0] | 0;
     L16 : do if ((HEAP8[1868799] | 0) != 0 & (HEAP8[1868804] | 0) == 32) {
      switch (i3 << 24 >> 24) {
      case -1:
      case 0:
       break;
      default:
       {
        i6 = 14;
        break L16;
       }
      }
      _Platform_LogConst(48617);
      _LocalPlayer_ResetJumpVelocity(HEAP32[417347] | 0);
      i1 = i1 + 1 | 0;
     } else i6 = 14; while (0);
     if ((i6 | 0) == 14) {
      i6 = 0;
      i2 = i3 & 255;
      i4 = 1726908 + (i2 << 1) | 0;
      if ((i1 + (HEAPU16[i4 >> 1] | 0) | 0) >>> 0 > i5 >>> 0) {
       i3 = i1;
       break L12;
      }
      i2 = HEAP32[1727420 + (i2 << 2) >> 2] | 0;
      if (!i2) break;
      HEAP8[1868804] = i3;
      FUNCTION_TABLE_vi[i2 & 511](i1 + 1 | 0);
      i1 = i1 + (HEAPU16[i4 >> 1] | 0) | 0;
     }
     if (i1 >>> 0 >= i5 >>> 0) {
      i3 = i1;
      break L12;
     }
    }
    _DisconnectInvalidOpcode(i3);
    break L1;
   } else i3 = 956272; while (0);
   i2 = i5 - i3 | 0;
   if ((i2 | 0) > 0) {
    i1 = 0;
    do {
     HEAP8[956272 + i1 >> 0] = HEAP8[i3 + i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i2 | 0));
   }
   HEAP32[460401] = 956272 + i2;
  } else {
   i1 = (i1 | 0) == (HEAP32[5932] | 0) ? 0 : i1;
   if (!((i1 | 0) == (HEAP32[5933] | 0) | (i1 | 0) == 0)) {
    _DisconnectReadFailed(i1);
    break L1;
   }
  } while (0);
  if (HEAP32[460399] | 0) {
   _Platform_Log1(48666, 1841596);
   _MPConnection_Disconnect();
   break;
  }
  i6 = HEAP32[460402] | 0;
  HEAP32[460402] = i6 + 1;
  if (!((i6 | 0) % 3 | 0)) {
   _TexturePack_CheckPending();
   _Protocol_Tick();
  }
 } while (0);
 STACKTOP = i7;
 return;
}

function _CPE_ExtEntry(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4 + 8 | 0;
 i3 = i4;
 _UNSAFE_GetString(i2, i1);
 HEAP32[i3 >> 2] = HEAPU8[i1 + 67 >> 0];
 _Platform_Log2(46865, i2, i3);
 HEAP32[454524] = (HEAP32[454524] | 0) + -1;
 _CPE_SendCpeExtInfoReply();
 i2 = _CPEExtensions_Find(i2) | 0;
 do if (i2 | 0) {
  i5 = HEAPU8[i2 + 4 >> 0] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = (i1 | 0) > (i5 | 0) ? i5 : i1;
  HEAP8[i2 + 5 >> 0] = i1;
  if ((i2 | 0) == 21336) {
   HEAP8[1841574] = 1;
   break;
  }
  if ((i2 | 0) == 21344) {
   HEAP8[1841575] = 1;
   break;
  }
  if ((i2 | 0) == 21328) {
   if ((i1 & 255 | 0) == 1) break;
   HEAP16[863484] = (HEAPU16[863484] | 0) + 4;
   break;
  }
  if ((i2 | 0) == 21352) {
   HEAP8[1841576] = 1;
   break;
  }
  if ((i2 | 0) == 21360) {
   HEAP8[1841577] = 1;
   break;
  }
  if ((i2 | 0) == 21288) {
   if ((i1 & 255 | 0) == 1) break;
   HEAP16[863491] = (HEAPU16[863491] | 0) + 3;
   break;
  }
  if ((i2 | 0) == 21312) {
   HEAP16[863462] = (HEAPU16[863462] | 0) + 6;
   HEAP16[863461] = (HEAPU16[863461] | 0) + 6;
   HEAP16[863487] = (HEAPU16[863487] | 0) + 6;
   HEAP16[863500] = (HEAPU16[863500] | 0) + 6;
   HEAP16[863508] = (HEAPU16[863508] | 0) + 6;
   break;
  }
  if ((i2 | 0) == 21368) {
   HEAP16[863456] = (HEAPU16[863456] | 0) + 4;
   break;
  }
  if ((i2 | 0) == 21320) {
   if ((i1 & 255 | 0) == 1) break;
   HEAP16[863494] = (HEAPU16[863494] | 0) + 64;
   break;
  }
  if ((i2 | 0) == 21280) {
   if ((i1 & 255 | 0) != 2) break;
   HEAP16[863505] = 167;
   break;
  }
  if ((i2 | 0) == 21376) {
   HEAP8[1841592] = 1;
   break;
  }
  if ((i2 | 0) == 21304) {
   HEAP16[863489] = (HEAPU16[863489] | 0) + 3;
   HEAP16[863491] = (HEAPU16[863491] | 0) + 6;
   break;
  }
  if (!((i2 | 0) != 21296 | (HEAP8[1868756] | 0) == 0)) {
   HEAP16[863460] = (HEAPU16[863460] | 0) + 1;
   HEAP16[863474] = (HEAPU16[863474] | 0) + 1;
   HEAP16[863482] = (HEAPU16[863482] | 0) + 1;
   HEAP16[863489] = (HEAPU16[863489] | 0) + 1;
   HEAP16[863490] = (HEAPU16[863490] | 0) + 1;
   HEAP16[863491] = (HEAPU16[863491] | 0) + 1;
   HEAP16[863498] = (HEAPU16[863498] | 0) + 2;
   HEAP16[863492] = (HEAPU16[863492] | 0) + 64;
   HEAP16[863499] = (HEAPU16[863499] | 0) + 1;
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _ReadChunkData(i1, i18, i19, i20) {
 i1 = i1 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = HEAP32[244730] | 0;
 if ((HEAP32[244744] | 0) < 256) {
  i14 = i1 + -1 | 0;
  i10 = HEAP32[414115] | 0;
  i8 = HEAP32[244735] | 0;
  i9 = HEAP32[244733] | 0;
  i2 = 1;
  i1 = 1;
  i11 = 18;
  i15 = -1;
  while (1) {
   i13 = (i15 * 324 | 0) + 324 | 0;
   i12 = Math_imul(i8, i15 + i18 | 0) | 0;
   i6 = i11;
   i7 = -1;
   while (1) {
    i5 = i7;
    i7 = i7 + 1 | 0;
    i4 = i13 + (i7 * 18 | 0) | 0;
    i5 = i14 + (Math_imul(i5 + i19 + i12 | 0, i9) | 0) | 0;
    while (1) {
     i3 = HEAP8[i17 + i5 >> 0] | 0;
     if (!(i2 << 24 >> 24)) i2 = 0; else i2 = (HEAP8[1006372 + (i3 & 255) >> 0] | 0) == 4;
     i2 = i2 & 1;
     if (!(i1 << 24 >> 24)) i1 = 0; else i1 = (HEAP8[1009444 + (i3 & 255) >> 0] | 0) != 0;
     i1 = i1 & 1;
     HEAP16[i10 + (i4 << 1) >> 1] = i3 & 255;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i6 | 0)) break; else i5 = i5 + 1 | 0;
    }
    if ((i7 | 0) == 17) break; else i6 = i6 + 18 | 0;
   }
   i15 = i15 + 1 | 0;
   if ((i15 | 0) == 17) break; else i11 = i11 + 324 | 0;
  }
 } else {
  i16 = HEAP32[244731] | 0;
  i14 = i1 + -1 | 0;
  i10 = HEAP32[414115] | 0;
  i8 = HEAP32[244735] | 0;
  i9 = HEAP32[244733] | 0;
  i2 = 1;
  i1 = 1;
  i11 = 18;
  i15 = -1;
  while (1) {
   i13 = (i15 * 324 | 0) + 324 | 0;
   i12 = Math_imul(i8, i15 + i18 | 0) | 0;
   i6 = i11;
   i7 = -1;
   while (1) {
    i4 = i7;
    i7 = i7 + 1 | 0;
    i3 = i13 + (i7 * 18 | 0) | 0;
    i4 = i14 + (Math_imul(i4 + i19 + i12 | 0, i9) | 0) | 0;
    while (1) {
     i5 = HEAPU8[i16 + i4 >> 0] << 8 | HEAPU8[i17 + i4 >> 0];
     if (!(i2 << 24 >> 24)) i2 = 0; else i2 = (HEAP8[1006372 + i5 >> 0] | 0) == 4;
     i2 = i2 & 1;
     if (!(i1 << 24 >> 24)) i1 = 0; else i1 = (HEAP8[1009444 + i5 >> 0] | 0) != 0;
     i1 = i1 & 1;
     HEAP16[i10 + (i3 << 1) >> 1] = i5;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i6 | 0)) break; else i4 = i4 + 1 | 0;
    }
    if ((i7 | 0) == 17) break; else i6 = i6 + 18 | 0;
   }
   i15 = i15 + 1 | 0;
   if ((i15 | 0) == 17) break; else i11 = i11 + 324 | 0;
  }
 }
 HEAP8[i20 >> 0] = i2;
 return i1 | 0;
}

function _BuildMapSides() {
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i9;
 i7 = i9 + 64 | 0;
 if (HEAP8[978980] | 0) if (!(HEAP8[1689213] & 16)) {
  i2 = HEAPU16[933855] | 0;
  if ((HEAP8[1006372 + i2 >> 0] | 0) != 4) {
   _CalcBorderRects(i8);
   HEAP32[418864] = 0;
   i1 = 0;
   do {
    i6 = _CalcNumVertices(HEAP32[i8 + (i1 << 4) + 8 >> 2] | 0, HEAP32[i8 + (i1 << 4) + 12 >> 2] | 0) | 0;
    HEAP32[418864] = (HEAP32[418864] | 0) + i6;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   i6 = (HEAP32[466929] | 0) + (HEAP32[466928] | 0) | 0;
   i5 = _CalcNumVertices(HEAP32[244733] | 0, HEAP32[244735] | 0) | 0;
   HEAP32[418864] = (HEAP32[418864] | 0) + i5;
   i5 = HEAP32[244733] | 0;
   i1 = _Math_AbsI_377(i6) | 0;
   i5 = (_CalcNumVertices(i5, i1) | 0) << 1;
   HEAP32[418864] = (HEAP32[418864] | 0) + i5;
   i1 = (_CalcNumVertices(HEAP32[244735] | 0, i1) | 0) << 1;
   i1 = (HEAP32[418864] | 0) + i1 | 0;
   HEAP32[418864] = i1;
   i1 = _Gfx_CreateVb(1, i1) | 0;
   HEAP32[418850] = i1;
   i1 = _Gfx_LockVb(i1, 1, HEAP32[418864] | 0) | 0;
   HEAP32[i7 >> 2] = i1;
   i1 = (HEAP8[994084 + i2 >> 0] | 0) == 0 ? HEAP32[466946] | 0 : -1;
   if (HEAP8[1008676 + i2 >> 0] | 0) i1 = _PackedCol_Tint(i1, HEAP32[994852 + (i2 << 2) >> 2] | 0) | 0;
   d4 = +(i6 | 0);
   i5 = 1029412 + (i2 * 12 | 0) + 4 | 0;
   i3 = 1010980 + (i2 * 12 | 0) + 4 | 0;
   i2 = 0;
   do {
    i11 = HEAP32[i8 + (i2 << 4) >> 2] | 0;
    i10 = HEAP32[i8 + (i2 << 4) + 4 >> 2] | 0;
    _DrawBorderY(i11, i10, (HEAP32[i8 + (i2 << 4) + 8 >> 2] | 0) + i11 | 0, (HEAP32[i8 + (i2 << 4) + 12 >> 2] | 0) + i10 | 0, d4, i1, 0.0, +HEAPF32[i5 >> 2] - +HEAPF32[i3 >> 2], i7);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 4);
   i11 = (i6 | 0) < 0;
   i10 = i11 ? i6 : 0;
   i11 = i11 ? 0 : i6;
   _DrawBorderY(0, 0, HEAP32[244733] | 0, HEAP32[244735] | 0, 0.0, i1, 0.0, 0.0, i7);
   _DrawBorderZ(0, HEAP32[244733] | 0, i10, i11, i1, i7);
   _DrawBorderZ(HEAP32[244735] | 0, HEAP32[244733] | 0, i10, i11, i1, i7);
   _DrawBorderX(0, HEAP32[244735] | 0, i10, i11, i1, i7);
   _DrawBorderX(HEAP32[244733] | 0, HEAP32[244735] | 0, i10, i11, i1, i7);
   _Gfx_UnlockVb(HEAP32[418850] | 0);
  }
 }
 STACKTOP = i9;
 return;
}

function _ButtonWidget_Render(i10, d1) {
 i10 = i10 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i11;
 i8 = i10 + 20 | 0;
 if (!(HEAP8[i8 >> 0] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[5767];
  HEAP32[i3 + 4 >> 2] = HEAP32[5768];
  HEAP32[i3 + 8 >> 2] = HEAP32[5769];
  HEAP32[i3 + 12 >> 2] = HEAP32[5770];
  HEAP32[i3 + 16 >> 2] = HEAP32[5771];
  HEAP32[i3 + 20 >> 2] = HEAP32[5772];
  HEAP32[i3 + 24 >> 2] = HEAP32[5773];
 } else {
  HEAP32[i3 >> 2] = HEAP32[5760];
  HEAP32[i3 + 4 >> 2] = HEAP32[5761];
  HEAP32[i3 + 8 >> 2] = HEAP32[5762];
  HEAP32[i3 + 12 >> 2] = HEAP32[5763];
  HEAP32[i3 + 16 >> 2] = HEAP32[5764];
  HEAP32[i3 + 20 >> 2] = HEAP32[5765];
  HEAP32[i3 + 24 >> 2] = HEAP32[5766];
 }
 i9 = i10 + 21 | 0;
 if (HEAP8[i9 >> 0] & 1) {
  HEAP32[i3 >> 2] = HEAP32[5774];
  HEAP32[i3 + 4 >> 2] = HEAP32[5775];
  HEAP32[i3 + 8 >> 2] = HEAP32[5776];
  HEAP32[i3 + 12 >> 2] = HEAP32[5777];
  HEAP32[i3 + 16 >> 2] = HEAP32[5778];
  HEAP32[i3 + 20 >> 2] = HEAP32[5779];
  HEAP32[i3 + 24 >> 2] = HEAP32[5780];
 }
 i4 = (HEAP8[1689492] | 0) == 0 ? HEAP32[422380] | 0 : HEAP32[422381] | 0;
 HEAP32[i3 >> 2] = i4;
 i7 = i3 + 4 | 0;
 HEAP16[i7 >> 1] = HEAP32[i10 + 4 >> 2];
 i5 = i10 + 12 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i3 + 8 | 0;
 HEAP16[i6 >> 1] = i2;
 HEAP16[i3 + 6 >> 1] = HEAP32[i10 + 8 >> 2];
 HEAP16[i3 + 10 >> 1] = HEAP32[i10 + 16 >> 2];
 if ((i2 | 0) > 399) _Texture_Render(i3); else {
  d1 = +(i2 | 0) / 400.0 / (+HEAPF32[466958] * 2.0);
  _Gfx_BindTexture(i4);
  HEAP16[i6 >> 1] = (HEAP32[i5 >> 2] | 0) / 2 | 0;
  i2 = i3 + 12 | 0;
  HEAPF32[i2 >> 2] = 0.0;
  i4 = i3 + 20 | 0;
  HEAPF32[i4 >> 2] = d1 * .78125;
  i6 = i10 + 68 | 0;
  _Gfx_Draw2DTexture(i3, HEAP32[i6 >> 2] | 0);
  HEAP16[i7 >> 1] = ((HEAP32[i5 >> 2] | 0) / 2 | 0) + (HEAPU16[i7 >> 1] | 0);
  HEAPF32[i2 >> 2] = (1.0 - d1) * .78125;
  HEAPF32[i4 >> 2] = .78125;
  _Gfx_Draw2DTexture(i3, HEAP32[i6 >> 2] | 0);
 }
 i3 = i10 + 40 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  if (!(HEAP8[i9 >> 0] & 1)) i2 = (HEAP8[i8 >> 0] | 0) == 0 ? -2039584 : -6225921; else i2 = -6250336;
  _Texture_RenderShaded(i3, i2);
 }
 STACKTOP = i11;
 return;
}

function _Huffman_Build(i11, i8, i10) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i12 + 64 | 0;
 i9 = i12;
 HEAP16[i11 + 1024 >> 1] = 0;
 HEAP16[i11 + 1088 >> 1] = 0;
 HEAP16[i11 + 1056 >> 1] = 0;
 i1 = i7;
 i2 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i6 = (i10 | 0) > 0;
 if (i6) {
  i1 = 0;
  do {
   i5 = i7 + ((HEAPU8[i8 + i1 >> 0] | 0) << 2) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i10 | 0));
 }
 HEAP32[i7 >> 2] = 0;
 i1 = 1;
 while (1) {
  if ((HEAP32[i7 + (i1 << 2) >> 2] | 0) > (1 << i1 | 0)) {
   i1 = -857812901;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 16) {
   i3 = 6;
   break;
  }
 }
 if ((i3 | 0) == 6) {
  i1 = 0;
  i3 = 0;
  i4 = 1;
  i5 = 0;
  while (1) {
   i3 = i1 + i3 << 1;
   HEAP32[i9 + (i4 << 2) >> 2] = i5;
   HEAP16[i11 + 1024 + (i4 << 1) >> 1] = i3;
   HEAP16[i11 + 1088 + (i4 << 1) >> 1] = i5;
   i2 = HEAP32[i7 + (i4 << 2) >> 2] | 0;
   HEAP16[i11 + 1056 + (i4 << 1) >> 1] = (i2 | 0) == 0 ? 0 : i2 + i3 & 65535;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == 16) break; else {
    i1 = i2;
    i5 = i2 + i5 | 0;
   }
  }
  _Mem_Set(i11, -1, 1024) | 0;
  if (i6) {
   i7 = 0;
   do {
    i1 = HEAP8[i8 + i7 >> 0] | 0;
    i2 = i1 & 255;
    if (i1 << 24 >> 24) {
     i6 = i9 + (i2 << 2) | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP16[i11 + 1120 + (i5 << 1) >> 1] = i7;
     if ((i1 & 255) < 10) {
      i3 = (i2 << 9 | i7) & 65535;
      i1 = 9 - i2 | 0;
      i4 = 1 << i1;
      if ((i1 | 0) != 31) {
       i1 = i5 + (HEAPU16[i11 + 1024 + (i2 << 1) >> 1] | 0) - (HEAPU16[i11 + 1088 + (i2 << 1) >> 1] | 0) << i1;
       i2 = 0;
       while (1) {
        i13 = i11 + ((_Huffman_ReverseBits(i1, 9) | 0) << 1) | 0;
        HEAP16[i13 >> 1] = i3;
        i2 = i2 + 1 | 0;
        if ((i2 | 0) >= (i4 | 0)) break; else i1 = i1 + 1 | 0;
       }
      }
     }
     HEAP32[i6 >> 2] = i5 + 1;
    }
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i10 | 0));
   i1 = 0;
  } else i1 = 0;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _BlockDefs_DefineBlockCommonStart(i12, i6) {
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, d14 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i13;
 i11 = i13 + 8 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i11 >> 2] = i1;
 if (!(HEAP8[21301] | 0)) {
  i2 = i1 + 1 | 0;
  HEAP32[i11 >> 2] = i2;
  i9 = HEAPU8[i1 >> 0] | 0;
 } else {
  i9 = ((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0;
  i2 = i1 + 2 | 0;
  HEAP32[i11 >> 2] = i2;
 }
 i10 = i9 & 65535;
 i5 = 993316 + i10 | 0;
 i4 = HEAP8[i5 >> 0] | 0;
 i8 = 994084 + i10 | 0;
 i7 = HEAP8[i8 >> 0] | 0;
 _Block_ResetProps(i9);
 _UNSAFE_GetString(i3, i2);
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 64;
 _Block_SetName(i9, i3);
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = i2 + 1 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP8[1000996 + i10 >> 0] = HEAP8[i2 >> 0] | 0;
 HEAP32[i11 >> 2] = i2 + 2;
 d14 = +_Math_Exp2(+((HEAPU8[i1 >> 0] | 0) + -128 | 0) * .015625);
 HEAPF32[1002532 + (i10 << 2) >> 2] = d14;
 i1 = _BlockDefs_Tex(i11) | 0;
 i2 = i10 * 6 | 0;
 HEAP16[1047844 + (i2 + 5 << 1) >> 1] = i1;
 i1 = _BlockDefs_Tex(i11) | 0;
 if (!(i6 << 24 >> 24)) _Block_SetSide(i1, i9); else {
  HEAP16[1047844 + (i2 << 1) >> 1] = i1;
  i6 = _BlockDefs_Tex(i11) | 0;
  HEAP16[1047844 + ((i2 | 1) << 1) >> 1] = i6;
  i6 = _BlockDefs_Tex(i11) | 0;
  HEAP16[1047844 + (i2 + 2 << 1) >> 1] = i6;
  i6 = _BlockDefs_Tex(i11) | 0;
  HEAP16[1047844 + (i2 + 3 << 1) >> 1] = i6;
 }
 i1 = _BlockDefs_Tex(i11) | 0;
 HEAP16[1047844 + (i2 + 4 << 1) >> 1] = i1;
 i1 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = i1 + 1;
 HEAP8[i5 >> 0] = (HEAP8[i1 >> 0] | 0) == 0 & 1;
 _BlockDefs_OnBlocksLightPropertyUpdated(i9, i4);
 i1 = HEAP32[i11 >> 2] | 0;
 i3 = i1 + 1 | 0;
 HEAP32[i11 >> 2] = i3;
 i6 = HEAP8[i1 >> 0] | 0;
 i2 = 1007908 + i10 | 0;
 HEAP8[i2 >> 0] = i6;
 HEAP8[1007140 + i10 >> 0] = i6;
 if (i6 << 24 >> 24 == 6) HEAP8[i2 >> 0] = 4;
 HEAP32[i11 >> 2] = i1 + 2;
 i10 = _Block_ReadBrightness(HEAP8[i3 >> 0] | 0) | 0;
 HEAP8[i8 >> 0] = i10;
 _BlockDefs_OnBrightnessPropertyUpdated(i9, i7);
 HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i9 | 0;
}

function _EntityShadow_Draw(i12) {
 i12 = i12 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 3120 | 0;
 i14 = i15 + 32 | 0;
 i13 = i15 + 3104 | 0;
 i11 = i15;
 d5 = +HEAPF32[i12 + 4 >> 2];
 d2 = +HEAPF32[i12 + 8 >> 2];
 d7 = +HEAPF32[i12 + 12 >> 2];
 if (!(d2 < 0.0)) {
  i9 = ~~d2;
  i10 = HEAP32[244737] | 0;
  i10 = (i10 | 0) > (i9 | 0) ? i9 : i10;
  d16 = +HEAPF32[i12 + 84 >> 2];
  d16 = (d16 < 1.0 ? d16 * 7.0 : 7.0) * +HEAPF32[(HEAP32[i12 + 48 >> 2] | 0) + 60 >> 2];
  d2 = d16 * .0625;
  HEAPF32[418841] = d2;
  HEAPF32[418842] = 16.0 / (d16 * 2.0);
  HEAP32[i13 >> 2] = i14;
  if ((HEAP8[1669385] | 0) == 1) {
   i8 = _Math_Floor(d5) | 0;
   i9 = _Math_Floor(d7) | 0;
   _EntityShadow_GetBlocks(i12, i8, i10, i9, i11);
   _EntityShadow_DrawSquareShadow(i13, +HEAPF32[i11 >> 2], +(i8 | 0), +(i9 | 0));
  } else {
   i8 = _Math_Floor(d5 - d2) | 0;
   i9 = _Math_Floor(d7 - +HEAPF32[418841]) | 0;
   i6 = _Math_Floor(d5 + +HEAPF32[418841]) | 0;
   i3 = _Math_Floor(d7 + +HEAPF32[418841]) | 0;
   _EntityShadow_GetBlocks(i12, i8, i10, i9, i11);
   i1 = i11 + 6 | 0;
   if (HEAP8[i1 >> 0] | 0) _EntityShadow_DrawCircle(i13, i12, i11, +(i8 | 0), +(i9 | 0));
   i4 = (i8 | 0) != (i6 | 0);
   if (i4) {
    _EntityShadow_GetBlocks(i12, i6, i10, i9, i11);
    if (HEAP8[i1 >> 0] | 0) _EntityShadow_DrawCircle(i13, i12, i11, +(i6 | 0), +(i9 | 0));
   }
   if ((i9 | 0) != (i3 | 0)) {
    _EntityShadow_GetBlocks(i12, i8, i10, i3, i11);
    if (HEAP8[i1 >> 0] | 0) _EntityShadow_DrawCircle(i13, i12, i11, +(i8 | 0), +(i3 | 0));
    if (i4) {
     _EntityShadow_GetBlocks(i12, i6, i10, i3, i11);
     if (HEAP8[i1 >> 0] | 0) _EntityShadow_DrawCircle(i13, i12, i11, +(i6 | 0), +(i3 | 0));
    }
   }
  }
  i13 = HEAP32[i13 >> 2] | 0;
  i1 = i13;
  if ((i13 | 0) != (i14 | 0)) {
   if (!(HEAP8[1868742] | 0)) {
    _Gfx_BindTexture(HEAP32[418838] | 0);
    HEAP8[1868742] = 1;
   }
   i13 = (i1 - i14 | 0) / 24 | 0;
   _Gfx_SetDynamicVbData(HEAP32[418839] | 0, i14, i13);
   _Gfx_DrawVb_IndexedTris(i13);
  }
 }
 STACKTOP = i15;
 return;
}

function _Entity_TouchesAny(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i18 + 52 | 0;
 i7 = i18 + 40 | 0;
 i9 = i18 + 16 | 0;
 i12 = i18;
 _IVec3_Floor(i8, i10);
 _IVec3_Floor(i7, i10 + 12 | 0);
 i13 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = (i13 | 0) > 0 ? i13 : 0;
 i13 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[244736] | 0;
 i3 = (i13 | 0) < (i3 | 0) ? i13 : i3;
 HEAP32[i7 >> 2] = i3;
 i13 = i8 + 4 | 0;
 i5 = HEAP32[i13 >> 2] | 0;
 i5 = (i5 | 0) > 0 ? i5 : 0;
 HEAP32[i13 >> 2] = i5;
 i13 = i7 + 4 | 0;
 i15 = HEAP32[i13 >> 2] | 0;
 i2 = HEAP32[244737] | 0;
 i2 = (i15 | 0) < (i2 | 0) ? i15 : i2;
 HEAP32[i13 >> 2] = i2;
 i15 = i8 + 8 | 0;
 i4 = HEAP32[i15 >> 2] | 0;
 i4 = (i4 | 0) > 0 ? i4 : 0;
 HEAP32[i15 >> 2] = i4;
 i16 = i7 + 8 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[244738] | 0;
 i1 = (i17 | 0) < (i1 | 0) ? i17 : i1;
 HEAP32[i16 >> 2] = i1;
 L1 : do if ((i5 | 0) > (i2 | 0)) i1 = 0; else {
  i14 = i12 + 4 | 0;
  i17 = i12 + 8 | 0;
  i6 = i9 + 12 | 0;
  while (1) {
   HEAPF32[i14 >> 2] = +(i5 | 0);
   if ((i4 | 0) <= (i1 | 0)) {
    while (1) {
     HEAPF32[i17 >> 2] = +(i4 | 0);
     i2 = HEAP32[i8 >> 2] | 0;
     if ((i2 | 0) <= (i3 | 0)) {
      while (1) {
       HEAPF32[i12 >> 2] = +(i2 | 0);
       i1 = _World_GetBlock_264(i2, i5, i4) | 0;
       i3 = i1 & 65535;
       _Vec3_Add_265(i9, i12, 1010980 + (i3 * 12 | 0) | 0);
       _Vec3_Add_265(i6, i12, 1020196 + (i3 * 12 | 0) | 0);
       if ((_AABB_Intersects(i9, i10) | 0) << 24 >> 24) if ((FUNCTION_TABLE_ii[i11 & 63](i1) | 0) << 24 >> 24) {
        i1 = 1;
        break L1;
       }
       i3 = HEAP32[i7 >> 2] | 0;
       if ((i2 | 0) < (i3 | 0)) i2 = i2 + 1 | 0; else break;
      }
      i1 = HEAP32[i16 >> 2] | 0;
     }
     if ((i4 | 0) < (i1 | 0)) i4 = i4 + 1 | 0; else break;
    }
    i2 = HEAP32[i13 >> 2] | 0;
   }
   if ((i5 | 0) >= (i2 | 0)) {
    i1 = 0;
    break L1;
   }
   i4 = HEAP32[i15 >> 2] | 0;
   i5 = i5 + 1 | 0;
  }
 } while (0);
 STACKTOP = i18;
 return i1 | 0;
}

function _ChatScreen_DrawChat(i11, d10) {
 i11 = i11 | 0;
 d10 = +d10;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 _ChatScreen_UpdateTexpackStatus(i11);
 if ((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0) {
  i9 = i11 + 924 | 0;
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
 }
 i7 = i11 + 1016 | 0;
 FUNCTION_TABLE_vid[HEAP32[HEAP32[i7 >> 2] >> 2] & 63](i7, d10);
 i7 = i11 + 1200 | 0;
 FUNCTION_TABLE_vid[HEAP32[HEAP32[i7 >> 2] >> 2] & 63](i7, d10);
 _Gfx_SetVertexFormat(1);
 _Gfx_BindDynamicVb(HEAP32[i11 + 12 >> 2] | 0);
 d5 = +HEAPF64[122280];
 i7 = i11 + 4 | 0;
 if (!(HEAP8[i7 >> 0] | 0)) {
  i8 = i11 + 1148 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i9 = i11 + 1192 | 0;
   i6 = i11 + 44 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 * 28 | 0) >> 2] | 0;
    if (i2) {
     i3 = (HEAP32[i6 >> 2] | 0) + i4 | 0;
     if ((i3 | 0) > -1 & (i3 | 0) < (HEAP32[414212] | 0)) if (!(+HEAPF64[144672 + ((i3 & 31) << 3) >> 3] + 10.0 < d5)) {
      _Gfx_BindTexture(i2);
      _Gfx_DrawVb_IndexedTris_Range(4, i4 << 2, 4);
      i1 = HEAP32[i8 >> 2] | 0;
     }
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i1 | 0));
  }
 } else {
  i9 = i11 + 1108 | 0;
  FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 127](i9, 0) | 0;
 }
 i9 = i11 + 108 | 0;
 FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
 i9 = i11 + 180 | 0;
 FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
 i9 = i11 + 252 | 0;
 FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
 if (HEAP8[i7 >> 0] | 0) {
  i1 = i11 + 324 | 0;
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1, d10);
  i1 = i11 + 1292 | 0;
  if (HEAP8[i11 + 1312 >> 0] | 0) FUNCTION_TABLE_vid[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1, d10);
  if (HEAP8[1689553] | 0) {
   i9 = i11 + 2728 | 0;
   FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
   i9 = i11 + 2560 | 0;
   FUNCTION_TABLE_vid[HEAP32[HEAP32[i9 >> 2] >> 2] & 63](i9, d10);
   i11 = i11 + 2644 | 0;
   FUNCTION_TABLE_vid[HEAP32[HEAP32[i11 >> 2] >> 2] & 63](i11, d10);
  }
 }
 return;
}

function _ButtonWidget_BuildMesh(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, d12 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i10;
 i1 = i9 + 20 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  HEAP32[i4 >> 2] = HEAP32[5767];
  HEAP32[i4 + 4 >> 2] = HEAP32[5768];
  HEAP32[i4 + 8 >> 2] = HEAP32[5769];
  HEAP32[i4 + 12 >> 2] = HEAP32[5770];
  HEAP32[i4 + 16 >> 2] = HEAP32[5771];
  HEAP32[i4 + 20 >> 2] = HEAP32[5772];
  HEAP32[i4 + 24 >> 2] = HEAP32[5773];
 } else {
  HEAP32[i4 >> 2] = HEAP32[5760];
  HEAP32[i4 + 4 >> 2] = HEAP32[5761];
  HEAP32[i4 + 8 >> 2] = HEAP32[5762];
  HEAP32[i4 + 12 >> 2] = HEAP32[5763];
  HEAP32[i4 + 16 >> 2] = HEAP32[5764];
  HEAP32[i4 + 20 >> 2] = HEAP32[5765];
  HEAP32[i4 + 24 >> 2] = HEAP32[5766];
 }
 i2 = i9 + 21 | 0;
 if (HEAP8[i2 >> 0] & 1) {
  HEAP32[i4 >> 2] = HEAP32[5774];
  HEAP32[i4 + 4 >> 2] = HEAP32[5775];
  HEAP32[i4 + 8 >> 2] = HEAP32[5776];
  HEAP32[i4 + 12 >> 2] = HEAP32[5777];
  HEAP32[i4 + 16 >> 2] = HEAP32[5778];
  HEAP32[i4 + 20 >> 2] = HEAP32[5779];
  HEAP32[i4 + 24 >> 2] = HEAP32[5780];
 }
 i7 = i4 + 4 | 0;
 HEAP16[i7 >> 1] = HEAP32[i9 + 4 >> 2];
 i5 = i9 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i4 + 8 | 0;
 HEAP16[i6 >> 1] = i3;
 HEAP16[i4 + 6 >> 1] = HEAP32[i9 + 8 >> 2];
 HEAP16[i4 + 10 >> 1] = HEAP32[i9 + 16 >> 2];
 if ((i3 | 0) > 399) {
  _Gfx_Make2DQuad(i4, HEAP32[i9 + 68 >> 2] | 0, i8);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 96;
 } else {
  d12 = +(i3 | 0) / 400.0 / (+HEAPF32[466958] * 2.0);
  HEAP16[i6 >> 1] = (i3 | 0) / 2 | 0;
  i11 = i4 + 12 | 0;
  HEAPF32[i11 >> 2] = 0.0;
  i3 = i4 + 20 | 0;
  HEAPF32[i3 >> 2] = d12 * .78125;
  i6 = i9 + 68 | 0;
  _Gfx_Make2DQuad(i4, HEAP32[i6 >> 2] | 0, i8);
  HEAP16[i7 >> 1] = ((HEAP32[i5 >> 2] | 0) / 2 | 0) + (HEAPU16[i7 >> 1] | 0);
  HEAPF32[i11 >> 2] = (1.0 - d12) * .78125;
  HEAPF32[i3 >> 2] = .78125;
  _Gfx_Make2DQuad(i4, HEAP32[i6 >> 2] | 0, i8);
 }
 if (!(HEAP8[i2 >> 0] & 1)) i1 = (HEAP8[i1 >> 0] | 0) == 0 ? -2039584 : -6225921; else i1 = -6250336;
 _Gfx_Make2DQuad(i9 + 40 | 0, i1, i8);
 STACKTOP = i10;
 return;
}

function _BlockModel_BuildParts(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i3 = i3 << 24 >> 24 == 0;
 _Model_LockVB(0, i3 ? 24 : 32);
 i1 = HEAP32[428693] | 0;
 HEAP32[i2 >> 2] = i1;
 if (i3) {
  i8 = HEAPU16[934362] | 0;
  i1 = 1010980 + (i8 * 12 | 0) | 0;
  HEAP32[416818] = HEAP32[i1 >> 2];
  HEAP32[416819] = HEAP32[i1 + 4 >> 2];
  HEAP32[416820] = HEAP32[i1 + 8 >> 2];
  HEAPF32[416819] = 1.0 - +HEAPF32[416819];
  i1 = 1020196 + (i8 * 12 | 0) | 0;
  HEAP32[416821] = HEAP32[i1 >> 2];
  HEAP32[416822] = HEAP32[i1 + 4 >> 2];
  HEAP32[416823] = HEAP32[i1 + 8 >> 2];
  HEAPF32[416822] = 1.0 - +HEAPF32[416822];
  HEAP8[1667264] = HEAP8[1008676 + i8 >> 0] | 0;
  HEAP32[416817] = HEAP32[994852 + (i8 << 2) >> 2];
  i1 = HEAP32[1029412 + (i8 * 12 | 0) + 4 >> 2] | 0;
  d7 = +HEAPF32[1029412 + (i8 * 12 | 0) + 8 >> 2];
  d6 = +HEAPF32[1038628 + (i8 * 12 | 0) >> 2];
  i3 = HEAP32[1038628 + (i8 * 12 | 0) + 4 >> 2] | 0;
  d5 = +HEAPF32[1038628 + (i8 * 12 | 0) + 8 >> 2];
  HEAPF32[416824] = +HEAPF32[1029412 + (i8 * 12 | 0) >> 2] + -.5;
  HEAP32[416825] = i1;
  HEAPF32[416826] = d7 + -.5;
  HEAPF32[416827] = d6 + -.5;
  HEAP32[416828] = i3;
  HEAPF32[416829] = d5 + -.5;
  i3 = _BlockModel_GetTex(4) | 0;
  _Drawer_YMin(1, HEAP32[428681] | 0, i3, i2);
  i3 = _BlockModel_GetTex(2) | 0;
  _Drawer_ZMin(1, HEAP32[428683] | 0, i3, i2);
  i3 = _BlockModel_GetTex(1) | 0;
  _Drawer_XMax(1, HEAP32[428685] | 0, i3, i2);
  i3 = _BlockModel_GetTex(3) | 0;
  _Drawer_ZMax(1, HEAP32[428682] | 0, i3, i2);
  i3 = _BlockModel_GetTex(0) | 0;
  _Drawer_XMin(1, HEAP32[428684] | 0, i3, i2);
  i3 = _BlockModel_GetTex(5) | 0;
  _Drawer_YMax(1, HEAP32[428680] | 0, i3, i2);
 } else {
  HEAP32[428719] = i1;
  _BlockModel_SpriteXQuad(0, 0);
  _BlockModel_SpriteXQuad(0, 1);
  _BlockModel_SpriteZQuad(0, 0);
  _BlockModel_SpriteZQuad(0, 1);
  _BlockModel_SpriteZQuad(1, 0);
  _BlockModel_SpriteZQuad(1, 1);
  _BlockModel_SpriteXQuad(1, 0);
  _BlockModel_SpriteXQuad(1, 1);
 }
 _Model_UnlockVB();
 STACKTOP = i4;
 return;
}

function _NotchyGen_CarveCaves() {
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, i18 = 0, i19 = 0;
 i16 = HEAP32[244732] | 0;
 i15 = (i16 | 0) / 8192 | 0;
 HEAP32[422258] = 33090;
 if ((i16 | 0) > 8191) {
  d12 = +(i15 | 0);
  i16 = 0;
  do {
   HEAPF32[422259] = +(i16 | 0) / d12;
   i1 = _Random_Next(978288, HEAP32[244733] | 0) | 0;
   i2 = _Random_Next(978288, HEAP32[244734] | 0) | 0;
   i3 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
   d10 = +_Random_Float(978288);
   i13 = ~~(d10 * +_Random_Float(978288) * 200.0);
   d10 = +_Random_Float(978288);
   d4 = +_Random_Float(978288);
   d17 = +_Random_Float(978288);
   d17 = d17 * +_Random_Float(978288);
   if ((i13 | 0) > 0) {
    d14 = +(i13 | 0);
    d11 = +(i1 | 0);
    d9 = +(i2 | 0);
    d6 = +(i3 | 0);
    d7 = 0.0;
    d8 = 0.0;
    i1 = 0;
    d5 = d4 * 2.0 * 3.1415927410125732;
    d4 = d10 * 2.0 * 3.1415927410125732;
    do {
     d10 = +_Math_SinF(d4);
     d11 = d11 + d10 * +_Math_CosF(d5);
     d10 = +_Math_CosF(d4);
     d6 = d6 + d10 * +_Math_CosF(d5);
     d9 = d9 + +_Math_SinF(d5);
     d4 = d4 + d8 * .20000000298023224;
     d10 = d8 * .8999999761581421 + +_Random_Float(978288);
     d8 = d10 - +_Random_Float(978288);
     d5 = d5 * .5 + d7 * .25;
     d10 = d7 * .75 + +_Random_Float(978288);
     d7 = d10 - +_Random_Float(978288);
     if (!(+_Random_Float(978288) < .25)) {
      i19 = ~~(d11 + +((_Random_Next(978288, 4) | 0) + -2 | 0) * .20000000298023224);
      i2 = ~~(d9 + +((_Random_Next(978288, 4) | 0) + -2 | 0) * .20000000298023224);
      i18 = ~~(d6 + +((_Random_Next(978288, 4) | 0) + -2 | 0) * .20000000298023224);
      i3 = HEAP32[244734] | 0;
      _NotchyGen_FillOblateSpheroid(i19, i2, i18, +_Math_SinF(+(i1 | 0) * 3.1415927410125732 / d14) * (d17 * (+(i3 - i2 | 0) / +(i3 | 0) * 3.5 + 1.0) + 1.2000000476837158), 0);
     }
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i13 | 0));
   }
   i16 = i16 + 1 | 0;
  } while ((i16 | 0) != (i15 | 0));
 }
 return;
}

function _AxisLinesRenderer_Render() {
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i7 = i8;
 i6 = i8 + 84 | 0;
 i2 = i8 + 72 | 0;
 i5 = i8 + 60 | 0;
 if (HEAP8[1868728] | 0) {
  if (!(HEAP32[248136] | 0)) {
   i1 = _Gfx_CreateDynamicVb(0, 12) | 0;
   HEAP32[248136] = i1;
  }
  i1 = HEAP32[417347] | 0;
  if (!(HEAP8[HEAP32[414161] >> 0] | 0)) {
   HEAP32[i6 >> 2] = HEAP32[414158];
   HEAP32[i6 + 4 >> 2] = HEAP32[414159];
   HEAP32[i6 + 8 >> 2] = HEAP32[414160];
   _Vec3_GetDirVector(i5, +HEAPF32[i1 + 20 >> 2] * .01745329238474369, +HEAPF32[i1 + 16 >> 2] * .01745329238474369);
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   _Vec3_Mul1(i2, i2);
   _Vec3_Add(i6, i2, i6);
   d3 = .03125;
   d4 = .125;
  } else {
   i5 = i1 + 4 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   i5 = i6 + 4 | 0;
   HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + .05000000074505806;
   d3 = 1.0;
   d4 = 1.0;
  }
  _Vec3_Add1(i7, i6, d3 * -3.0);
  _Vec3_Add1(i7 + 12 | 0, i6, d4 * -.03125);
  i1 = i7 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  _Vec3_Add1(i7 + 36 | 0, i6, d4 * .03125);
  _Vec3_Add1(i7 + 48 | 0, i6, d3 * 3.0);
  i1 = 0;
  i2 = _Gfx_LockDynamicVb(HEAP32[248136] | 0, 0, 12) | 0;
  while (1) {
   i6 = i1 * 3 | 0;
   HEAP32[i2 >> 2] = HEAP32[i7 + ((HEAPU8[16 + i6 >> 0] | 0) * 12 | 0) >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + ((HEAPU8[16 + (i6 + 1) >> 0] | 0) * 12 | 0) + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + ((HEAPU8[16 + (i6 + 2) >> 0] | 0) * 12 | 0) + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[13400 + ((2 ? i1 >>> 2 : i1) << 2) >> 2];
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == 12) break; else i2 = i2 + 16 | 0;
  }
  _Gfx_SetVertexFormat(0);
  _Gfx_UnlockDynamicVb(HEAP32[248136] | 0);
  _Gfx_DrawVb_IndexedTris(12);
 }
 STACKTOP = i8;
 return;
}

function _Block_CalcCulling(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i18 = i1 & 65535;
 if (!(HEAP8[1009444 + i18 >> 0] | 0)) i3 = 4; else {
  i2 = i4 & 65535;
  if (!(HEAP8[1009444 + i2 >> 0] | 0)) i3 = 4; else {
   i2 = (i18 * 768 | 0) + i2 | 0;
   i1 = 63;
  }
 }
 do if ((i3 | 0) == 4) {
  if (!((_Block_MightCull(i1, i4) | 0) << 24 >> 24)) {
   i2 = (i18 * 768 | 0) + (i4 & 65535) | 0;
   i1 = 0;
   break;
  }
  d16 = +HEAPF32[1010980 + (i18 * 12 | 0) >> 2];
  d8 = +HEAPF32[1010980 + (i18 * 12 | 0) + 4 >> 2];
  d17 = +HEAPF32[1010980 + (i18 * 12 | 0) + 8 >> 2];
  d14 = +HEAPF32[1020196 + (i18 * 12 | 0) >> 2];
  d6 = +HEAPF32[1020196 + (i18 * 12 | 0) + 4 >> 2];
  d15 = +HEAPF32[1020196 + (i18 * 12 | 0) + 8 >> 2];
  i2 = i4 & 65535;
  d12 = +HEAPF32[1010980 + (i2 * 12 | 0) >> 2];
  d5 = +HEAPF32[1010980 + (i2 * 12 | 0) + 4 >> 2];
  d13 = +HEAPF32[1010980 + (i2 * 12 | 0) + 8 >> 2];
  d10 = +HEAPF32[1020196 + (i2 * 12 | 0) >> 2];
  d7 = +HEAPF32[1020196 + (i2 * 12 | 0) + 4 >> 2];
  d11 = +HEAPF32[1020196 + (i2 * 12 | 0) + 8 >> 2];
  i3 = (HEAP8[992548 + i18 >> 0] | 0) == 0;
  d6 = i3 ? d6 : d6 + -.09375;
  i19 = HEAP8[992548 + i2 >> 0] | 0;
  d7 = i19 << 24 >> 24 == 0 ? d7 : d7 + -.09375;
  i21 = !(d17 >= d13);
  i1 = !(d15 <= d11);
  i9 = !(d8 >= d5);
  i22 = d6 <= d7;
  i4 = i22 & ((i9 | (i21 | i1)) ^ 1);
  i20 = !(d16 >= d12) | !(d14 <= d10);
  i9 = i22 & ((i9 | i20) ^ 1);
  i1 = i21 | i20 | i1;
  if (i1 | i19 << 24 >> 24 != 0 & (i3 ^ 1)) {
   i3 = i1 ? 0 : 32;
   i1 = i1 ? 0 : 16;
  } else {
   i3 = d5 == 0.0 & d6 == 1.0 ? 32 : 0;
   i1 = d8 == 0.0 & d7 == 1.0 ? 16 : 0;
  }
  i2 = (i18 * 768 | 0) + i2 | 0;
  i1 = ((d14 == 1.0 & (d12 == 0.0 & i4) ? 2 : 0) | d16 == 0.0 & (d10 == 1.0 & i4) & 1 | (d17 == 0.0 & (d11 == 1.0 & i9) ? 4 : 0) | (d15 == 1.0 & (d13 == 0.0 & i9) ? 8 : 0) | i1 | i3) & 255;
 } while (0);
 HEAP8[1058596 + i2 >> 0] = i1;
 return;
}

function _EntryList_Load(i13, i9, i14, i10) {
 i13 = i13 | 0;
 i9 = i9 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 3232 | 0;
 i7 = i19 + 3216 | 0;
 i8 = i19 + 2048 | 0;
 i17 = i19 + 3072 | 0;
 i11 = i19 + 3208 | 0;
 i16 = i19 + 3200 | 0;
 i12 = i19 + 3192 | 0;
 i2 = i19;
 i18 = i19 + 3136 | 0;
 i6 = i19 + 3080 | 0;
 _String_FromReadonly(i17, i9);
 i15 = HEAP32[i13 + 5148 >> 2] | 0;
 i15 = (i15 | 0) == 0 ? 511 : i15;
 i1 = _Stream_OpenFile(i18, i17) | 0;
 do if ((i1 | 0) != (HEAP32[5931] | 0)) {
  if (i1 | 0) {
   _Logger_SysWarn2(i1, 51350, i17);
   break;
  }
  _Stream_ReadonlyBuffered(i6, i18, i2, 2048);
  i3 = i7 + 4 | 0;
  i2 = i7 + 6 | 0;
  i4 = (i10 | 0) == 0;
  i5 = i14 << 24 >> 24 == 0;
  L6 : while (1) {
   HEAP32[i7 >> 2] = i8;
   HEAP16[i3 >> 1] = 0;
   HEAP16[i2 >> 1] = 1024;
   i1 = _Stream_ReadLine(i6, i7) | 0;
   if ((i1 | 0) < 0) {
    i2 = 19;
    break;
   }
   switch (i1 | 0) {
   case 0:
    break;
   default:
    {
     i2 = 6;
     break L6;
    }
   }
   _String_UNSAFE_TrimStart(i7);
   _String_UNSAFE_TrimEnd(i7);
   i1 = HEAP16[i3 >> 1] | 0;
   do if (i1 << 16 >> 16) {
    if (!i4) {
     if (!((FUNCTION_TABLE_ii[i10 & 63](i7) | 0) << 24 >> 24)) break;
     i1 = HEAP16[i3 >> 1] | 0;
    }
    i1 = i1 & 65535;
    if ((i15 | 0) < (i1 | 0)) {
     HEAP32[i12 >> 2] = i1;
     HEAP16[i3 >> 1] = 0;
     _String_Format2(i7, 51371, i12, i9);
     FUNCTION_TABLE_vi[HEAP32[3881] & 511](i7);
     break;
    }
    if (i5) {
     _StringsBuffer_Add(i13, i7);
     break;
    } else {
     _String_UNSAFE_Separate(i7, i14, i11, i16) | 0;
     _EntryList_Set(i13, i11, i16, i14);
     break;
    }
   } while (0);
  }
  if ((i2 | 0) == 19) switch (i1 | 0) {
  case -857812991:
   break;
  default:
   i2 = 6;
  }
  if ((i2 | 0) == 6) _Logger_SysWarn2(i1, 51358, i17);
  FUNCTION_TABLE_ii[HEAP32[i18 + 28 >> 2] & 63](i18) | 0;
 } while (0);
 STACKTOP = i19;
 return i1 | 0;
}

function _LocalPlayer_DoRespawn(i8) {
 i8 = i8 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i11 + 48 | 0;
 i7 = i11 + 24 | 0;
 i9 = i11 + 12 | 0;
 i3 = i11;
 i6 = i8 + 424 | 0;
 HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 if (HEAP8[978980] | 0) {
  _IVec3_Floor(i3, i9);
  L3 : do if (HEAP8[i8 + 476 >> 0] | 0) {
   _AABB_Make(i7, i9, i8 + 92 | 0);
   i2 = HEAP32[i3 + 4 >> 2] | 0;
   if ((i2 | 0) <= (HEAP32[244734] | 0)) {
    i4 = i7 + 4 | 0;
    i5 = i7 + 16 | 0;
    i6 = i2;
    while (1) {
     if (+_Respawn_HighestSolidY(i7) == -1.0e5) break;
     HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] + 1.0;
     HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + 1.0;
     if ((i6 | 0) < (HEAP32[244734] | 0)) i6 = i6 + 1 | 0; else break L3;
    }
    i2 = (_World_SafeGetBlock(HEAP32[i3 >> 2] | 0, i6, HEAP32[i3 + 8 >> 2] | 0) | 0) & 65535;
    if ((HEAP8[1000996 + i2 >> 0] | 0) == 2) d1 = +HEAPF32[1020196 + (i2 * 12 | 0) + 4 >> 2]; else d1 = 0.0;
    HEAPF32[i9 + 4 >> 2] = d1 + +(i6 | 0) + 1.0000000474974513e-03;
   }
  } while (0);
  _CPE_SendNotifyPositionAction(3, ~~+HEAPF32[i8 + 352 >> 2], ~~+HEAPF32[i8 + 356 >> 2], ~~+HEAPF32[i8 + 360 >> 2]);
  i6 = i9 + 4 | 0;
  HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] + .125;
  HEAP8[i10 + 28 >> 0] = 7;
  HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i10 + 16 >> 2] = HEAP32[i8 + 448 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i8 + 452 >> 2];
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 255](i8, i10);
  HEAPF32[i8 + 36 >> 2] = 0.0;
  HEAPF32[i8 + 40 >> 2] = 0.0;
  HEAPF32[i8 + 44 >> 2] = 0.0;
  _Entity_GetBounds(i8, i7);
  i10 = i7 + 4 | 0;
  d1 = +HEAPF32[i10 >> 2] + -.009999999776482582;
  HEAPF32[i10 >> 2] = d1;
  HEAPF32[i7 + 16 >> 2] = d1;
  i10 = _Entity_TouchesAny(i7, 18) | 0;
  HEAP8[i8 + 111 >> 0] = i10;
 }
 STACKTOP = i11;
 return;
}

function _CompileProgram(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 i7 = i8;
 i2 = i8 + 2056 | 0;
 i6 = i8 + 2048 | 0;
 i3 = _glCreateShader(35633) | 0;
 do if (!i3) _Platform_LogConst(33408); else {
  HEAP32[i2 >> 2] = i7;
  i1 = i2 + 4 | 0;
  HEAP16[i1 >> 1] = 0;
  HEAP16[i2 + 6 >> 1] = 2048;
  _GenVertexShader(i5, i2);
  if (!(_CompileShader(i3, i2) | 0)) _ShaderFailed(i3);
  i4 = _glCreateShader(35632) | 0;
  if (!i4) {
   _Platform_LogConst(33439);
   _glDeleteShader(i3 | 0);
   break;
  }
  HEAP16[i1 >> 1] = 0;
  _GenFragmentShader(i5, i2);
  if (!(_CompileShader(i4, i2) | 0)) {
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
   HEAP16[i1 >> 1] = 0;
   _GenFragmentShader(i5, i2);
   if (!(_CompileShader(i4, i2) | 0)) _ShaderFailed(i4);
  }
  i1 = _glCreateProgram() | 0;
  if (!i1) _Process_Abort2(0, 33472);
  HEAP32[i5 + 8 >> 2] = i1;
  _glAttachShader(i1 | 0, i3 | 0);
  _glAttachShader(i1 | 0, i4 | 0);
  _glBindAttribLocation(i1 | 0, 0, 33497);
  _glBindAttribLocation(i1 | 0, 1, 33504);
  _glBindAttribLocation(i1 | 0, 2, 33511);
  _glLinkProgram(i1 | 0);
  _glGetProgramiv(i1 | 0, 35714, i6 | 0);
  if (HEAP32[i6 >> 2] | 0) {
   _glDetachShader(i1 | 0, i3 | 0);
   _glDetachShader(i1 | 0, i4 | 0);
   _glDeleteShader(i3 | 0);
   _glDeleteShader(i4 | 0);
   i7 = _glGetUniformLocation(i1 | 0, 33517) | 0;
   HEAP32[i5 + 12 >> 2] = i7;
   i7 = _glGetUniformLocation(i1 | 0, 33521) | 0;
   HEAP32[i5 + 16 >> 2] = i7;
   i7 = _glGetUniformLocation(i1 | 0, 33531) | 0;
   HEAP32[i5 + 20 >> 2] = i7;
   i7 = _glGetUniformLocation(i1 | 0, 33538) | 0;
   HEAP32[i5 + 24 >> 2] = i7;
   i7 = _glGetUniformLocation(i1 | 0, 33545) | 0;
   HEAP32[i5 + 28 >> 2] = i7;
   break;
  }
  HEAP32[i6 >> 2] = 0;
  _glGetProgramiv(i1 | 0, 35716, i6 | 0);
  if ((HEAP32[i6 >> 2] | 0) > 0) {
   _glGetProgramInfoLog(i1 | 0, 2047, 0, i7 | 0);
   HEAP8[i7 + 2047 >> 0] = 0;
   _Window_ShowDialog(33556, i7);
  }
  _Process_Abort2(0, 33556);
 } while (0);
 STACKTOP = i8;
 return;
}

function _InputWidget_PointerDown(i18, i1, i2, i3) {
 i18 = i18 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i14 = i17 + 96 | 0;
 i13 = i17 + 80 | 0;
 i15 = i17 + 72 | 0;
 i16 = i17 + 64 | 0;
 i12 = i2 - (HEAP16[i18 + 116 >> 1] | 0) | 0;
 i11 = i3 - (HEAP16[i18 + 118 >> 1] | 0) | 0;
 _DrawTextArgs_MakeEmpty(i13, HEAP32[i18 + 40 >> 2] | 0, 1);
 i6 = HEAP32[i18 + 108 >> 2] | 0;
 HEAP32[i14 >> 2] = i17;
 i9 = i14 + 4 | 0;
 HEAP16[i9 >> 1] = 0;
 HEAP16[i14 + 6 >> 1] = 64;
 i7 = i18 + 44 | 0;
 L1 : do if ((FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 63]() | 0) > 0) {
  i10 = i18 + 140 | 0;
  i8 = 0;
  i1 = 0;
  L3 : while (1) {
   HEAP16[i9 >> 1] = 0;
   _InputWidget_FormatLine(i18, i8, i14);
   if (HEAP16[i9 >> 1] | 0) {
    i4 = (i8 | 0) == 0;
    i5 = Math_imul(i8, i6) | 0;
    i3 = 0;
    do {
     _String_UNSAFE_Substring(i15, i14, 0, i3);
     i21 = i15;
     i20 = HEAP32[i21 + 4 >> 2] | 0;
     i2 = i13;
     HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i2 + 4 >> 2] = i20;
     i2 = _Drawer2D_TextWidth(i13) | 0;
     if (i4) i2 = (HEAP32[i10 >> 2] | 0) + i2 | 0;
     _String_UNSAFE_Substring(i16, i14, i3, 1);
     i22 = i16;
     i20 = HEAP32[i22 + 4 >> 2] | 0;
     i21 = i13;
     HEAP32[i21 >> 2] = HEAP32[i22 >> 2];
     HEAP32[i21 + 4 >> 2] = i20;
     if (_Gui_Contains(i2, i5, _Drawer2D_TextWidth(i13) | 0, i6, i12, i11) | 0) break L3;
     i3 = i3 + 1 | 0;
     i2 = HEAP16[i9 >> 1] | 0;
    } while (i3 >>> 0 < (i2 & 65535) >>> 0);
    i1 = i1 + (i2 & 65535) | 0;
   }
   i8 = i8 + 1 | 0;
   if ((i8 | 0) >= (FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 63]() | 0)) {
    i19 = 12;
    break L1;
   }
  }
  HEAP32[i18 + 160 >> 2] = i3 + i1;
  _InputWidget_UpdateCaret(i18);
 } else i19 = 12; while (0);
 if ((i19 | 0) == 12) {
  HEAP32[i18 + 160 >> 2] = -1;
  _InputWidget_UpdateCaret(i18);
 }
 STACKTOP = i17;
 return 1;
}

function _IsometricDrawer_Angled(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0;
 i5 = HEAP32[424238] | 0;
 d2 = d2 / 1.4142135381698608;
 i6 = i1 & 65535;
 i3 = 1010980 + (i6 * 12 | 0) | 0;
 HEAP32[416818] = HEAP32[i3 >> 2];
 HEAP32[416819] = HEAP32[i3 + 4 >> 2];
 HEAP32[416820] = HEAP32[i3 + 8 >> 2];
 HEAPF32[416819] = 1.0 - +HEAPF32[416819];
 i11 = 1020196 + (i6 * 12 | 0) | 0;
 HEAP32[416821] = HEAP32[i11 >> 2];
 HEAP32[416822] = HEAP32[i11 + 4 >> 2];
 HEAP32[416823] = HEAP32[i11 + 8 >> 2];
 HEAPF32[416822] = 1.0 - +HEAPF32[416822];
 d9 = +HEAPF32[1010980 + (i6 * 12 | 0) + 4 >> 2];
 d7 = +HEAPF32[1010980 + (i6 * 12 | 0) + 8 >> 2];
 d10 = +HEAPF32[i11 >> 2];
 d8 = +HEAPF32[1020196 + (i6 * 12 | 0) + 4 >> 2];
 d4 = +HEAPF32[1020196 + (i6 * 12 | 0) + 8 >> 2];
 HEAPF32[416824] = d2 * (1.0 - +HEAPF32[i3 >> 2] * 2.0);
 HEAPF32[416827] = d2 * (1.0 - d10 * 2.0);
 HEAPF32[416825] = d2 * (1.0 - d9 * 2.0);
 HEAPF32[416828] = d2 * (1.0 - d8 * 2.0);
 HEAPF32[416826] = d2 * (1.0 - d7 * 2.0);
 HEAPF32[416829] = d2 * (1.0 - d4 * 2.0);
 i3 = HEAP8[994084 + i6 >> 0] | 0;
 HEAP8[1667264] = HEAP8[1008676 + i6 >> 0] | 0;
 HEAP32[416817] = HEAP32[994852 + (i6 << 2) >> 2];
 i3 = i3 << 24 >> 24 != 0;
 i6 = i3 ? -1 : HEAP32[424241] | 0;
 _Drawer_XMax(1, i6, _IsometricDrawer_GetTexLoc(i1, 1) | 0, 1696952);
 i3 = i3 ? -1 : HEAP32[424242] | 0;
 _Drawer_ZMin(1, i3, _IsometricDrawer_GetTexLoc(i1, 2) | 0, 1696952);
 _Drawer_YMax(1, -1, _IsometricDrawer_GetTexLoc(i1, 5) | 0, 1696952);
 i3 = HEAP32[424238] | 0;
 if (i5 >>> 0 < i3 >>> 0) {
  d4 = +HEAPF32[424244];
  d2 = +HEAPF32[424245];
  i1 = i5;
  do {
   d8 = +HEAPF32[i1 >> 2];
   d9 = +HEAPF32[i1 + 8 >> 2];
   i11 = i1 + 4 | 0;
   d10 = d9 * .5 * .7071067690849304 + (+HEAPF32[i11 >> 2] * .8660253882408142 - d8 * .5 * .7071067690849304);
   HEAPF32[i1 >> 2] = d8 * .7071067690849304 + d9 * .7071067690849304 + d4;
   HEAPF32[i11 >> 2] = d10 + d2;
   i1 = i1 + 24 | 0;
  } while (i1 >>> 0 < i3 >>> 0);
 }
 return;
}

function _Intersection_RayIntersectsRotatedBox(i2, i1, i5, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6 + 108 | 0;
 i8 = i6 + 96 | 0;
 i9 = i6 + 84 | 0;
 i10 = i6 + 72 | 0;
 i16 = i6 + 60 | 0;
 i12 = i6 + 36 | 0;
 i11 = i6;
 i17 = i6 + 48 | 0;
 i14 = i6 + 24 | 0;
 i15 = i5 + 4 | 0;
 _Vec3_Sub_1753(i16, i2, i15);
 HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 _Intersection_InverseRotate(i17, i7, i5);
 HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 _Vec3_Add_1746(i2, i16, i15);
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 _Intersection_InverseRotate(i14, i7, i5);
 HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 _Entity_GetPickingBounds(i5, i11);
 d13 = +_Math_SafeDiv(+HEAPF32[i1 >> 2]);
 HEAPF32[i12 >> 2] = d13;
 d13 = +_Math_SafeDiv(+HEAPF32[i1 + 4 >> 2]);
 HEAPF32[i12 + 4 >> 2] = d13;
 d13 = +_Math_SafeDiv(+HEAPF32[i1 + 8 >> 2]);
 HEAPF32[i12 + 8 >> 2] = d13;
 i5 = i11 + 12 | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 i5 = _Intersection_RayIntersectsBox(i10, i9, i8, i7, i4, i3) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _GetCCErrorDesc(i1) {
 i1 = i1 | 0;
 do switch (i1 | 0) {
 case -857812991:
  {
   i1 = 39103;
   break;
  }
 case -857812990:
  {
   i1 = 39079;
   break;
  }
 case -857812989:
  {
   i1 = 39062;
   break;
  }
 case -857812988:
  {
   i1 = 51856;
   break;
  }
 case -857812987:
  {
   i1 = 39031;
   break;
  }
 case -857812986:
  {
   i1 = 39004;
   break;
  }
 case -857812982:
  {
   i1 = 38970;
   break;
  }
 case -857812985:
  {
   i1 = 38939;
   break;
  }
 case -857812984:
  {
   i1 = 38922;
   break;
  }
 case -857812983:
  {
   i1 = 38893;
   break;
  }
 case -857812947:
  {
   i1 = 38847;
   break;
  }
 case -857812961:
  {
   i1 = 38821;
   break;
  }
 case -857812960:
  {
   i1 = 38797;
   break;
  }
 case -857812959:
  {
   i1 = 38778;
   break;
  }
 case -857812958:
  {
   i1 = 38759;
   break;
  }
 case -857812954:
  {
   i1 = 38731;
   break;
  }
 case -857812950:
  {
   i1 = 38705;
   break;
  }
 case -857812949:
  {
   i1 = 38689;
   break;
  }
 case -857812948:
  {
   i1 = 38663;
   break;
  }
 case -857812879:
  {
   i1 = 38639;
   break;
  }
 case -857812912:
  {
   i1 = 38618;
   break;
  }
 case -857812911:
  {
   i1 = 38597;
   break;
  }
 case -857812910:
  {
   i1 = 38577;
   break;
  }
 case -857812900:
  {
   i1 = 38536;
   break;
  }
 case -857812899:
  {
   i1 = 38501;
   break;
  }
 case -857812898:
  {
   i1 = 38468;
   break;
  }
 case -857812897:
  {
   i1 = 38437;
   break;
  }
 case -857812896:
  {
   i1 = 38415;
   break;
  }
 case -857812895:
  {
   i1 = 38392;
   break;
  }
 case -857812894:
  {
   i1 = 38369;
   break;
  }
 case -857812893:
  {
   i1 = 38344;
   break;
  }
 case -857812892:
  {
   i1 = 38320;
   break;
  }
 case -857812891:
  {
   i1 = 38293;
   break;
  }
 case -857812890:
  {
   i1 = 38265;
   break;
  }
 case -857812889:
  {
   i1 = 38226;
   break;
  }
 case -857812913:
  {
   i1 = 38182;
   break;
  }
 case -857812878:
  {
   i1 = 38156;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _ClipCamera(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i13 + 56 | 0;
 i6 = i13 + 44 | 0;
 i8 = i13 + 32 | 0;
 i9 = i13 + 20 | 0;
 i7 = i13 + 8 | 0;
 i11 = i13 + 4 | 0;
 i12 = i13;
 i1 = HEAPU16[i10 + 60 >> 1] | 0;
 if ((HEAP8[1006372 + i1 >> 0] | 0) == 4) i1 = 0; else if ((HEAP8[1000996 + i1 >> 0] | 0) == 2) {
  i4 = i10 + 12 | 0;
  i3 = i10 + 128 | 0;
  i2 = i10 + 36 | 0;
  i1 = i10 + 48 | 0;
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  if (!((_Intersection_RayIntersectsBox(i9, i8, i6, i5, i11, i12) | 0) << 24 >> 24)) i1 = 0; else {
   _Vec3_Sub_1767(i2, i2);
   _Vec3_Add_1765(i1, i1, 21244);
   HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   _Intersection_RayIntersectsBox(i9, i8, i6, i5, i11, i12) | 0;
   _Vec3_Mul1_1768(i7, i10 + 24 | 0, +HEAPF32[i11 >> 2]);
   _Vec3_Add_1765(i10 + 100 | 0, i4, i7);
   _SetAsValid(i10);
   i1 = 1;
  }
 } else i1 = 0;
 STACKTOP = i13;
 return i1 | 0;
}

function _Game_RenderFrame() {
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i2 = _Stopwatch_Measure() | 0;
 i3 = getTempRet0() | 0;
 i7 = 978272;
 i7 = _Stopwatch_ElapsedMicroseconds(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, i2, i3) | 0;
 i8 = getTempRet0() | 0;
 i9 = i8 >>> 0 < 0 | (i8 | 0) == 0 & i7 >>> 0 < 5e6;
 i7 = i9 ? i7 : 5e6;
 d1 = +(i7 | 0) / 1.0e6;
 d4 = d1;
 _Window_ProcessEvents(d4);
 L1 : do if (!(d4 <= 0.0)) {
  i9 = 978272;
  HEAP32[i9 >> 2] = i2;
  HEAP32[i9 + 4 >> 2] = i3;
  do if (HEAP8[1689080] | 0) if (!((_Gfx_TryRestoreContext() | 0) << 24 >> 24)) {
   HEAPF64[122280] = +HEAPF64[122280] + d4;
   FUNCTION_TABLE_vi[HEAP32[1841524 >> 2] & 511](0);
   break L1;
  } else {
   _Gfx_RecreateContext();
   break;
  } while (0);
  _Gfx_BindIb(HEAP32[422308] | 0);
  HEAPF64[122280] = d1 + +HEAPF64[122280];
  HEAP32[422210] = 0;
  _Gamepad_Tick(d4);
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[1656644 >> 2] | 0) + 20 >> 2] & 63](HEAP32[417347] | 0, d4);
  i2 = HEAP32[422387] | 0;
  if (!((HEAP8[1867881] | 0) != 0 | (i2 | 0) != 0 | (HEAP8[1868761] | 0) == 0)) {
   _Gui_ShowPauseMenu();
   i2 = HEAP32[422387] | 0;
  }
  if (!((HEAP8[357288] | 0) == 0 | (i2 | 0) != 0)) _InputHandler_SetFOV(HEAP32[414165] | 0) | 0;
  _PerformScheduledTasks(d1);
  i8 = HEAP32[3688] | 0;
  i9 = HEAP32[422255] | 0;
  d1 = +HEAPF64[i8 + (i9 * 24 | 0) >> 3] / +HEAPF64[i8 + (i9 * 24 | 0) + 8 >> 3];
  _LocalPlayer_SetInterpPosition(HEAP32[417347] | 0, d1);
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[1656644 >> 2] | 0) + 16 >> 2] & 63](i5, d1);
  HEAP32[414158] = HEAP32[i5 >> 2];
  HEAP32[414159] = HEAP32[i5 + 4 >> 2];
  HEAP32[414160] = HEAP32[i5 + 8 >> 2];
  _EnvRenderer_UpdateFog();
  if (!(HEAP8[1867883] | 0)) {
   _Gfx_ClearBuffers(3);
   _Game_DrawFrame(d4, d1);
   if (HEAP8[1868750] | 0) _Game_TakeScreenshot();
   _Gfx_EndFrame();
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _Deflate_LenDist(i7, i4, i5) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i3 = 0;
 while (1) {
  i1 = i3 + 1 | 0;
  if ((HEAPU16[2096 + (i1 << 1) >> 1] | 0 | 0) > (i4 | 0)) break; else i3 = i1;
 }
 i1 = i3 + 257 | 0;
 i6 = i7 + 4 | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i7 >> 2] | (HEAPU16[i7 + 24 + (i1 << 1) >> 1] | 0) << i8;
 HEAP32[i7 >> 2] = i2;
 i1 = i8 + (HEAPU8[i7 + 600 + i1 >> 0] | 0) | 0;
 HEAP32[i6 >> 2] = i1;
 if ((i3 + -8 | 0) >>> 0 < 20) {
  i2 = i4 - (HEAPU16[2096 + (i3 << 1) >> 1] | 0) << i1 | i2;
  HEAP32[i7 >> 2] = i2;
  i1 = i1 + (HEAPU8[1904 + i3 >> 0] | 0) | 0;
  HEAP32[i6 >> 2] = i1;
 }
 if (i1 >>> 0 > 7) {
  i4 = i7 + 12 | 0;
  i3 = i7 + 16 | 0;
  i1 = i2;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i1;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
   i2 = HEAP32[i7 >> 2] | 0;
   i2 = 8 ? i2 >>> 8 : i2;
   HEAP32[i7 >> 2] = i2;
   i1 = (HEAP32[i6 >> 2] | 0) + -8 | 0;
   HEAP32[i6 >> 2] = i1;
   if (i1 >>> 0 > 7) i1 = i2; else break;
  }
 }
 i4 = 0;
 while (1) {
  i3 = i4 + 1 | 0;
  if ((HEAPU16[2160 + (i3 << 1) >> 1] | 0 | 0) > (i5 | 0)) break; else i4 = i3;
 }
 i2 = i2 | (_Huffman_ReverseBits(i4, 5) | 0) << i1;
 HEAP32[i7 >> 2] = i2;
 i1 = i1 + 5 | 0;
 HEAP32[i6 >> 2] = i1;
 if ((i4 + -4 | 0) >>> 0 < 26) {
  i2 = i5 - (HEAPU16[2160 + (i4 << 1) >> 1] | 0) << i1 | i2;
  HEAP32[i7 >> 2] = i2;
  i1 = i1 + (HEAPU8[2e3 + i4 >> 0] | 0) | 0;
  HEAP32[i6 >> 2] = i1;
 }
 if (i1 >>> 0 > 7) {
  i4 = i7 + 12 | 0;
  i3 = i7 + 16 | 0;
  i1 = i2;
  do {
   i8 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i1;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
   i8 = HEAP32[i7 >> 2] | 0;
   i1 = 8 ? i8 >>> 8 : i8;
   HEAP32[i7 >> 2] = i1;
   i8 = (HEAP32[i6 >> 2] | 0) + -8 | 0;
   HEAP32[i6 >> 2] = i8;
  } while (i8 >>> 0 > 7);
 }
 return;
}

function _HumanModel_DrawCore(i1, i13, i14) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0;
 _Model_ApplyTexture(i1);
 i15 = HEAP8[1714761] & 3;
 i11 = i15 & 255;
 i15 = i15 << 24 >> 24 == 0;
 i12 = i15 ? 24 : 144;
 i10 = i12 + 144 | 0;
 _Model_LockVB(0, i10);
 i6 = i1 + 16 | 0;
 _Model_DrawRotate(+HEAPF32[i6 >> 2] * -.01745329238474369, 0.0, 0.0, i13, 1);
 _Model_DrawPart(i13 + 16 | 0);
 i4 = i1 + 164 | 0;
 i5 = i1 + 168 | 0;
 _Model_DrawRotate(+HEAPF32[i4 >> 2], 0.0, +HEAPF32[i5 >> 2], i13 + 64 + (i11 << 7) | 0, 0);
 i8 = i1 + 172 | 0;
 i9 = i1 + 176 | 0;
 _Model_DrawRotate(+HEAPF32[i8 >> 2], 0.0, +HEAPF32[i9 >> 2], i13 + 64 + (i11 << 7) + 16 | 0, 0);
 HEAP8[1714760] = 1;
 i2 = i1 + 180 | 0;
 i3 = i1 + 184 | 0;
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, +HEAPF32[i3 >> 2], i13 + 64 + (i11 << 7) + 32 | 0, 0);
 i7 = i1 + 188 | 0;
 i1 = i1 + 192 | 0;
 _Model_DrawRotate(+HEAPF32[i7 >> 2], 0.0, +HEAPF32[i1 >> 2], i13 + 64 + (i11 << 7) + 48 | 0, 0);
 HEAP8[1714760] = 0;
 if (!i15) {
  _Model_DrawPart(i13 + 48 | 0);
  _Model_DrawRotate(+HEAPF32[i4 >> 2], 0.0, +HEAPF32[i5 >> 2], i13 + 64 + (i11 << 7) + 64 | 0, 0);
  _Model_DrawRotate(+HEAPF32[i8 >> 2], 0.0, +HEAPF32[i9 >> 2], i13 + 64 + (i11 << 7) + 80 | 0, 0);
  HEAP8[1714760] = 1;
  _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, +HEAPF32[i3 >> 2], i13 + 64 + (i11 << 7) + 96 | 0, 0);
  _Model_DrawRotate(+HEAPF32[i7 >> 2], 0.0, +HEAPF32[i1 >> 2], i13 + 64 + (i11 << 7) + 112 | 0, 0);
  HEAP8[1714760] = 0;
 }
 _Model_DrawRotate(+HEAPF32[i6 >> 2] * -.01745329238474369, 0.0, 0.0, i13 + 32 | 0, 1);
 _Model_UnlockVB();
 if (!(i14 << 24 >> 24)) _Gfx_DrawVb_IndexedTris(i10); else {
  _Gfx_SetAlphaTest(0);
  _Gfx_DrawVb_IndexedTris_Range(144, 0, 0);
  _Gfx_SetAlphaTest(1);
  _Gfx_DrawVb_IndexedTris_Range(i12, 144, 0);
 }
 return;
}

function _Game_Load() {
 var i1 = 0, i2 = 0;
 _Game_UpdateDimensions();
 _Game_SetFpsLimit(_Options_GetEnum(39564, 0, 3600, 6) | 0);
 _Gfx_Create();
 HEAP32[3881] = 206;
 _LoadOptions();
 _GameVersion_Load();
 _Utils_EnsureDirectory(43780) | 0;
 _Event_Register(1680404, 0, 207);
 _Event_Register(1680924, 0, 208);
 _Event_Register(1683004, 0, 209);
 _Event_Register(1683264, 0, 210);
 _Event_Register(1684304, 0, 211);
 _Game_AddComponent(23648);
 _Game_AddComponent(22404);
 _Game_AddComponent(15308);
 _Game_AddComponent(15408);
 _Game_AddComponent(13492);
 _Game_AddComponent(14900);
 _Game_AddComponent(13412);
 _Game_AddComponent(14256);
 _Game_AddComponent(22348);
 _Game_AddComponent(13692);
 _Game_AddComponent(13740);
 _Game_AddComponent(21172);
 _Game_AddComponent(14348);
 _Game_AddComponent(16828);
 _Game_AddComponent(14372);
 _Game_AddComponent(23672);
 _Game_AddComponent(15496);
 _Game_AddComponent(13280);
 _Game_AddComponent(15464);
 _Game_AddComponent(13468);
 _Game_AddComponent(15536);
 _Game_AddComponent(14544);
 _Game_AddComponent(22272);
 _Game_AddComponent(21256);
 _Game_AddComponent(14988);
 _Game_AddComponent(22240);
 _Game_AddComponent(15060);
 _Game_AddComponent(22216);
 _Game_AddComponent(13352);
 _Game_AddComponent(13376);
 _Game_AddComponent(14616);
 _Game_AddComponent(14520);
 i1 = HEAP32[422252] | 0;
 if (i1 | 0) do {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_v[i2 & 127]();
  i1 = HEAP32[i1 + 20 >> 2] | 0;
 } while ((i1 | 0) != 0);
 _TexturePack_ExtractCurrent(1) | 0;
 if (HEAP8[1868810] | 0) _Window_ShowDialog(32556, 32569);
 i1 = _ScheduledTask_Add(.05, 212) | 0;
 HEAP32[422255] = i1;
 _Gfx_WarnIfNecessary() | 0;
 i1 = HEAP8[1689213] | 0;
 if (i1 & 2) {
  _EnvRenderer_SetMode((HEAP8[1868743] | 2) & 255);
  i1 = HEAP8[1689213] | 0;
 }
 if (i1 & 8) _EnvRenderer_SetMode(1);
 FUNCTION_TABLE_v[HEAP32[460380] & 127]();
 return;
}

function _WordWrap_Do(i12, i10, i11, i9) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i16 + 16 | 0;
 i14 = i16 + 8 | 0;
 i15 = i16;
 i1 = (i11 | 0) > 0;
 L1 : do if (i1) {
  i2 = 0;
  do {
   i6 = 1841616;
   i7 = HEAP32[i6 + 4 >> 2] | 0;
   i8 = i10 + (i2 << 3) | 0;
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i8 + 4 >> 2] = i7;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i11 | 0));
  if (i1) {
   i8 = i12 + 4 | 0;
   i7 = (i9 | 0) < 0;
   i1 = 0;
   i6 = 0;
   while (1) {
    i2 = i6 + i9 | 0;
    if ((i2 | 0) >= (HEAPU16[i8 >> 1] | 0 | 0)) break;
    L10 : do if (i7) i4 = i2; else {
     i3 = HEAP32[i12 >> 2] | 0;
     i5 = i2;
     while (1) {
      if ((_WordWrap_IsWrapper(HEAP8[i3 + i5 >> 0] | 0) | 0) << 24 >> 24) {
       i4 = i5;
       break L10;
      }
      i4 = i5 + -1 | 0;
      if ((i5 | 0) > (i6 | 0)) i5 = i4; else break;
     }
    } while (0);
    i5 = i4 + 1 | 0;
    i3 = i10 + (i1 << 3) | 0;
    if ((i4 | 0) >= (i6 | 0) & (i5 | 0) < (i2 | 0)) {
     _String_UNSAFE_Substring(i15, i12, i6, i5 - i6 | 0);
     i4 = i15;
     i6 = HEAP32[i4 + 4 >> 2] | 0;
     i2 = i3;
     HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i2 + 4 >> 2] = i6;
     i2 = i5;
    } else {
     _String_UNSAFE_Substring(i14, i12, i6, i9);
     i4 = i14;
     i5 = HEAP32[i4 + 4 >> 2] | 0;
     i6 = i3;
     HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i6 + 4 >> 2] = i5;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) < (i11 | 0)) i6 = i2; else break L1;
   }
   _String_UNSAFE_SubstringAt(i13, i12, i6);
   i14 = HEAP32[i13 + 4 >> 2] | 0;
   i15 = i10 + (i1 << 3) | 0;
   HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i15 + 4 >> 2] = i14;
  }
 } while (0);
 STACKTOP = i16;
 return;
}

function _TextGroupWidget_DrawAdvanced(i2, i11, i7, i1, i12) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 3248 | 0;
 i10 = i14 + 112 | 0;
 i9 = i14;
 i8 = i14 + 3216 | 0;
 i5 = i14 + 3208 | 0;
 i13 = i14 + 3200 | 0;
 i4 = _Drawer2D_TextHeight(i7) | 0;
 i6 = _TextGroupWidget_Reduce(i2, i14 + 320 | 0, i1, i10) | 0;
 i1 = (i6 | 0) > 0;
 if (i1) {
  i2 = 0;
  i3 = 0;
  do {
   _String_UNSAFE_Substring(i5, i12, HEAP16[i10 + (i2 << 3) + 4 >> 1] | 0, HEAP16[i10 + (i2 << 3) + 6 >> 1] | 0);
   i17 = i5;
   i16 = HEAP32[i17 + 4 >> 2] | 0;
   i15 = i7;
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i15 + 4 >> 2] = i16;
   i15 = _Drawer2D_TextWidth(i7) | 0;
   HEAP32[i9 + (i2 << 2) >> 2] = i15;
   i3 = i15 + i3 | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i6 | 0));
  _Context2D_Alloc(i8, i3, i4);
  if (i1) {
   i1 = i7 + 8 | 0;
   i2 = 0;
   i3 = 0;
   do {
    i17 = HEAP16[i10 + (i2 << 3) + 2 >> 1] | 0;
    _String_UNSAFE_Substring(i13, i12, HEAP16[i10 + (i2 << 3) + 4 >> 1] | 0, HEAP16[i10 + (i2 << 3) + 6 >> 1] | 0);
    i5 = i13;
    i15 = HEAP32[i5 + 4 >> 2] | 0;
    i16 = i7;
    HEAP32[i16 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i16 + 4 >> 2] = i15;
    if (i17 << 16 >> 16 < 0) {
     i17 = (HEAP32[i1 >> 2] | 0) + 6 | 0;
     HEAP16[i17 >> 1] = HEAP16[i17 >> 1] | 2;
     _Context2D_DrawText(i8, i7, i3, 0);
     i17 = (HEAP32[i1 >> 2] | 0) + 6 | 0;
     HEAP16[i17 >> 1] = HEAP16[i17 >> 1] & -3;
    } else _Context2D_DrawText(i8, i7, i3, 0);
    i3 = (HEAP32[i9 + (i2 << 2) >> 2] | 0) + i3 | 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i6 | 0));
  }
 } else _Context2D_Alloc(i8, 0, i4);
 _Context2D_MakeTexture(i11, i8);
 _Context2D_Free(i8);
 STACKTOP = i14;
 return;
}

function _EntityShadow_DrawCoords(i9, i1, i8, d10, d12, d11, d13) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 d10 = +d10;
 d12 = +d12;
 d11 = +d11;
 d13 = +d13;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0;
 if (!((_lequal(d11, d10) | 0) << 24 >> 24)) if (!((_lequal(d13, d12) | 0) << 24 >> 24)) {
  d7 = +HEAPF32[i1 + 4 >> 2];
  d6 = +HEAPF32[i1 + 12 >> 2];
  d4 = +HEAPF32[418842];
  d2 = (d10 - d7) * d4 + .5;
  d5 = (d12 - d6) * d4 + .5;
  d3 = (d11 - d7) * d4 + .5;
  d4 = (d13 - d6) * d4 + .5;
  if (!(d5 >= 1.0 | (d2 >= 1.0 | (d3 <= 0.0 | d4 <= 0.0)))) {
   d16 = +HEAPF32[418841];
   d15 = d7 - d16;
   d15 = d15 < d10 ? d10 : d15;
   d10 = d2 >= 0.0 ? d2 : 0.0;
   d2 = d6 - d16;
   d2 = d2 < d12 ? d12 : d2;
   d5 = d5 >= 0.0 ? d5 : 0.0;
   d7 = d7 + d16;
   d7 = d7 > d11 ? d11 : d7;
   d11 = d3 <= 1.0 ? d3 : 1.0;
   d12 = d6 + d16;
   d12 = d12 > d13 ? d13 : d12;
   d13 = d4 <= 1.0 ? d4 : 1.0;
   i1 = HEAP32[i9 >> 2] | 0;
   i14 = (HEAPU8[i8 + 6 >> 0] | 0) << 24 | 16777215;
   HEAPF32[i1 >> 2] = d15;
   i8 = HEAP32[i8 >> 2] | 0;
   HEAP32[i1 + 4 >> 2] = i8;
   HEAPF32[i1 + 8 >> 2] = d2;
   HEAP32[i1 + 12 >> 2] = i14;
   HEAPF32[i1 + 16 >> 2] = d10;
   HEAPF32[i1 + 20 >> 2] = d5;
   HEAPF32[i1 + 24 >> 2] = d7;
   HEAP32[i1 + 28 >> 2] = i8;
   HEAPF32[i1 + 32 >> 2] = d2;
   HEAP32[i1 + 36 >> 2] = i14;
   HEAPF32[i1 + 40 >> 2] = d11;
   HEAPF32[i1 + 44 >> 2] = d5;
   HEAPF32[i1 + 48 >> 2] = d7;
   HEAP32[i1 + 52 >> 2] = i8;
   HEAPF32[i1 + 56 >> 2] = d12;
   HEAP32[i1 + 60 >> 2] = i14;
   HEAPF32[i1 + 64 >> 2] = d11;
   HEAPF32[i1 + 68 >> 2] = d13;
   HEAPF32[i1 + 72 >> 2] = d15;
   HEAP32[i1 + 76 >> 2] = i8;
   HEAPF32[i1 + 80 >> 2] = d12;
   HEAP32[i1 + 84 >> 2] = i14;
   HEAPF32[i1 + 88 >> 2] = d10;
   HEAPF32[i1 + 92 >> 2] = d13;
   HEAP32[i9 >> 2] = i1 + 96;
  }
 }
 return;
}

function _Picking_GetOutside(i5, i3, i6, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 i1 = (HEAP16[933855] | 0) != 0;
 do if (!((_World_ContainsXZ_1764(i5, i6) | 0) << 24 >> 24)) if ((i3 | 0) > -1 & i1) if (((HEAP32[466929] | 0) + (HEAP32[466928] | 0) | 0) > (i3 | 0)) {
  if ((i5 | 0) == -1) if ((HEAP32[244735] | 0) > (i6 | 0) ? (HEAP32[i4 >> 2] | i6 | 0) > -1 : 0) {
   i1 = 7;
   break;
  }
  i1 = HEAP32[244733] | 0;
  if ((i1 | 0) == (i5 | 0)) if ((i6 | 0) > -1 & (HEAP32[i4 >> 2] | 0) < 0 & (HEAP32[244735] | 0) > (i6 | 0)) {
   i1 = 7;
   break;
  }
  if ((i6 | 0) == -1) if ((i1 | 0) > (i5 | 0) ? (HEAP32[i4 + 8 >> 2] | i5 | 0) > -1 : 0) {
   i1 = 7;
   break;
  }
  if ((HEAP32[244735] | 0) == (i6 | 0)) if ((i1 | 0) > (i5 | 0) & ((i5 | 0) > -1 & (HEAP32[i4 + 8 >> 2] | 0) < 0)) i1 = 7; else i7 = 30; else i7 = 30;
 } else i7 = 30; else i7 = 30; else if ((HEAP32[244734] | 0) > (i3 | 0)) {
  if ((i3 | 0) == -1 & i1) if ((HEAP32[i4 + 4 >> 2] | 0) > 0) {
   i1 = 7;
   break;
  } else {
   i7 = 30;
   break;
  }
  if ((i3 | 0) == 0 & i1) if ((HEAP32[i4 + 4 >> 2] | 0) < 0) {
   i1 = 7;
   break;
  }
  i2 = (i3 | 0) > -1;
  if (i2 & i1) {
   i1 = (HEAP32[466929] | 0) + (HEAP32[466928] | 0) | 0;
   if ((i1 | 0) > (i3 | 0)) if ((HEAP32[i4 + 4 >> 2] | 0) < (i1 | 0)) {
    if (!i5) if ((HEAP32[i4 >> 2] | 0) < 0) {
     i1 = 7;
     break;
    }
    if (!i6) if ((HEAP32[i4 + 8 >> 2] | 0) < 0) {
     i1 = 7;
     break;
    }
    if ((HEAP32[244736] | 0) == (i5 | 0)) if ((HEAP32[i4 >> 2] | 0) > -1) {
     i1 = 7;
     break;
    }
    if ((HEAP32[244738] | 0) == (i6 | 0)) if ((HEAP32[i4 + 8 >> 2] | 0) > -1) {
     i1 = 7;
     break;
    }
   }
  }
  if (i2) i1 = _World_GetBlock_1769(i5, i3, i6) | 0; else i7 = 30;
 } else i1 = 0; while (0);
 if ((i7 | 0) == 30) i1 = 0;
 return i1 | 0;
}

function _Selections_QuickSort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = i14;
 if ((i1 | 0) < (i2 | 0)) do {
  i12 = i1 + i2 | 0;
  i12 = 946096 + ((1 ? i12 >> 1 : i12) * 36 | 0) | 0;
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     i9 = 946096 + (i3 * 36 | 0) | 0;
     i10 = i3 + 1 | 0;
     if ((_CompareDists(i12, i9) | 0) > 0) i3 = i10; else break;
    }
    i11 = i4;
    while (1) {
     i5 = 946096 + (i11 * 36 | 0) | 0;
     i4 = i11 + -1 | 0;
     if ((_CompareDists(i12, i5) | 0) < 0) i11 = i4; else break;
    }
    if ((i3 | 0) > (i11 | 0)) i4 = i11; else {
     i6 = i13;
     i7 = i9;
     i8 = i6 + 36 | 0;
     do {
      HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
      i6 = i6 + 4 | 0;
      i7 = i7 + 4 | 0;
     } while ((i6 | 0) < (i8 | 0));
     i6 = i9;
     i7 = i5;
     i8 = i6 + 36 | 0;
     do {
      HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
      i6 = i6 + 4 | 0;
      i7 = i7 + 4 | 0;
     } while ((i6 | 0) < (i8 | 0));
     i6 = i5;
     i7 = i13;
     i8 = i6 + 36 | 0;
     do {
      HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
      i6 = i6 + 4 | 0;
      i7 = i7 + 4 | 0;
     } while ((i6 | 0) < (i8 | 0));
     i8 = 955312 + i3 | 0;
     i9 = HEAP8[i8 >> 0] | 0;
     i3 = 955312 + i11 | 0;
     HEAP8[i8 >> 0] = HEAP8[i3 >> 0] | 0;
     HEAP8[i3 >> 0] = i9;
     i3 = i10;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _Selections_QuickSort(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _Selections_QuickSort(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 STACKTOP = i14;
 return;
}

function _BlockModel_SpriteXQuad(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10;
 _Atlas1D_TexRec(i9, _BlockModel_GetTex(1) | 0, 1, i10 + 16 | 0);
 i1 = HEAP32[428680] | 0;
 i2 = HEAPU16[934362] | 0;
 if (!(HEAP8[1008676 + i2 >> 0] | 0)) i2 = i1; else i2 = _PackedCol_Tint(i1, HEAP32[994852 + (i2 << 2) >> 2] | 0) | 0;
 i1 = i3 << 24 >> 24 != 0;
 do if (!(i4 << 24 >> 24)) if (i1) {
  i1 = i9;
  d5 = .34375;
  d6 = 0.0;
  d7 = -.34375;
  d8 = 0.0;
  break;
 } else {
  i1 = i9 + 8 | 0;
  d5 = 0.0;
  d6 = .34375;
  d7 = 0.0;
  d8 = -.34375;
  break;
 } else if (i1) {
  i1 = i9 + 8 | 0;
  d5 = 0.0;
  d6 = -.34375;
  d7 = 0.0;
  d8 = .34375;
  break;
 } else {
  i1 = i9;
  d5 = -.34375;
  d6 = 0.0;
  d7 = .34375;
  d8 = 0.0;
  break;
 } while (0);
 HEAPF32[i1 >> 2] = .5;
 i4 = HEAP32[428719] | 0;
 i3 = HEAP32[i9 + 8 >> 2] | 0;
 i1 = i9 + 12 | 0;
 i11 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i4 >> 2] = d5;
 HEAPF32[i4 + 4 >> 2] = 0.0;
 HEAPF32[i4 + 8 >> 2] = d7;
 HEAP32[i4 + 12 >> 2] = i2;
 HEAP32[i4 + 16 >> 2] = i3;
 HEAP32[i4 + 20 >> 2] = i11;
 i11 = HEAP32[i9 + 4 >> 2] | 0;
 HEAPF32[i4 + 24 >> 2] = d5;
 HEAPF32[i4 + 28 >> 2] = 1.0;
 HEAPF32[i4 + 32 >> 2] = d7;
 HEAP32[i4 + 36 >> 2] = i2;
 HEAP32[i4 + 40 >> 2] = i3;
 HEAP32[i4 + 44 >> 2] = i11;
 i3 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i4 + 48 >> 2] = d6;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAPF32[i4 + 56 >> 2] = d8;
 HEAP32[i4 + 60 >> 2] = i2;
 HEAP32[i4 + 64 >> 2] = i3;
 HEAP32[i4 + 68 >> 2] = i11;
 i9 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i4 + 72 >> 2] = d6;
 HEAPF32[i4 + 76 >> 2] = 0.0;
 HEAPF32[i4 + 80 >> 2] = d8;
 HEAP32[i4 + 84 >> 2] = i2;
 HEAP32[i4 + 88 >> 2] = i3;
 HEAP32[i4 + 92 >> 2] = i9;
 HEAP32[428719] = i4 + 96;
 STACKTOP = i10;
 return;
}

function _EntityShadow_GetBlocks(i2, i10, i4, i11, i1) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, i12 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 d9 = +HEAPF32[i2 + 8 >> 2];
 i8 = (_World_ContainsXZ_355(i10, i11) | 0) << 24 >> 24 == 0;
 L1 : do if ((i4 | 0) > -1) {
  d7 = d9 + .009999999776482582;
  i3 = 0;
  while (1) {
   do if (i8) {
    i2 = (HEAP32[466928] | 0) + -1 | 0;
    if ((i4 | 0) == (i2 | 0)) {
     i2 = (HEAP8[1006372 + (HEAPU16[933854] | 0) >> 0] | 0) == 4 ? 0 : 7;
     break;
    }
    if ((i4 | 0) == (i2 + (HEAP32[466929] | 0) | 0)) i2 = (HEAP8[1006372 + (HEAPU16[933855] | 0) >> 0] | 0) == 4 ? 0 : 7; else i2 = 0;
   } else i2 = _World_GetBlock_356(i10, i4, i11) | 0; while (0);
   i6 = i2 & 65535;
   if ((HEAP8[1006372 + i6 >> 0] & -2) << 24 >> 24 != 4) if (!(HEAP8[992548 + i6 >> 0] | 0)) {
    d5 = +HEAPF32[1020196 + (i6 * 12 | 0) + 4 >> 2] + +(i4 | 0);
    if (!(d5 >= d7)) {
     HEAP16[i1 + 4 >> 1] = i2;
     HEAPF32[i1 >> 2] = d5;
     _EntityShadow_CalcAlpha(d9, i1);
     i3 = i3 + 1 | 0;
     i1 = i1 + 8 | 0;
     if (+HEAPF32[1010980 + (i6 * 12 | 0) >> 2] == 0.0) if (+HEAPF32[1020196 + (i6 * 12 | 0) >> 2] == 1.0) if (+HEAPF32[1010980 + (i6 * 12 | 0) + 8 >> 2] == 0.0) if (+HEAPF32[1020196 + (i6 * 12 | 0) + 8 >> 2] == 1.0) break L1;
    }
   }
   i2 = (i3 | 0) < 4;
   if ((i4 | 0) > 0 & i2) i4 = i4 + -1 | 0; else break;
  }
  if (i2) i12 = 18;
 } else i12 = 18; while (0);
 if ((i12 | 0) == 18) {
  HEAP16[i1 + 4 >> 1] = HEAP16[933854] | 0;
  HEAPF32[i1 >> 2] = 0.0;
  _EntityShadow_CalcAlpha(d9, i1);
 }
 return;
}

function _CalculateChunkLightingSelf(i16, i1, i2, i3) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i18;
 i15 = i1 << 4;
 i1 = i2 << 4;
 i10 = i3 << 4;
 i11 = i15 + 16 | 0;
 i7 = i1 + 16 | 0;
 i12 = i10 + 16 | 0;
 i14 = HEAP32[244733] | 0;
 i11 = (i11 | 0) > (i14 | 0) ? i14 : i11;
 i14 = HEAP32[244734] | 0;
 i7 = (i7 | 0) > (i14 | 0) ? i14 : i7;
 i14 = HEAP32[244735] | 0;
 i12 = (i12 | 0) > (i14 | 0) ? i14 : i12;
 if ((i1 | 0) < (i7 | 0)) {
  i8 = (i10 | 0) < (i12 | 0);
  i9 = (i15 | 0) < (i11 | 0);
  i13 = i17 + 4 | 0;
  i14 = i17 + 8 | 0;
  i6 = i17 + 12 | 0;
  do {
   if (i8) {
    i5 = i10;
    do {
     if (i9) {
      i4 = i15;
      do {
       i2 = _World_GetBlock_446(i4, i1, i5) | 0;
       i3 = HEAP8[994084 + (i2 & 65535) >> 0] | 0;
       do if (i3 << 24 >> 24) {
        i2 = _GetBlockBrightness(i2, 0) | 0;
        if (!(i2 << 24 >> 24)) {
         HEAP32[i17 >> 2] = i4;
         HEAP32[i13 >> 2] = i1;
         HEAP32[i14 >> 2] = i5;
         HEAP8[i6 >> 0] = 4 ? (i3 & 255) >>> 4 : i3 & 255;
         _Queue_Enqueue(1688728, i17);
         _FlushLightQueue(1, 0);
         break;
        } else {
         HEAP32[i17 >> 2] = i4;
         HEAP32[i13 >> 2] = i1;
         HEAP32[i14 >> 2] = i5;
         HEAP8[i6 >> 0] = i2;
         _Queue_Enqueue(1688728, i17);
         _FlushLightQueue(0, 0);
         break;
        }
       } while (0);
       i4 = i4 + 1 | 0;
      } while ((i4 | 0) < (i11 | 0));
     }
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (i12 | 0));
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i7 | 0));
 }
 HEAP8[(HEAP32[422181] | 0) + i16 >> 0] = 1;
 STACKTOP = i18;
 return;
}

function _memcpy(i3, i6, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) >= 8192) {
  _emscripten_memcpy_big(i3 | 0, i6 | 0, i1 | 0) | 0;
  return i3 | 0;
 }
 i5 = i3 | 0;
 i4 = i3 + i1 | 0;
 if ((i3 & 3) == (i6 & 3)) {
  while (i3 & 3) {
   if (!i1) return i5 | 0;
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i6 = i6 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  i1 = i4 & -4 | 0;
  i2 = i1 - 64 | 0;
  while ((i3 | 0) <= (i2 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
   HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i6 + 44 >> 2];
   HEAP32[i3 + 48 >> 2] = HEAP32[i6 + 48 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i6 + 52 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i6 + 56 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i6 + 60 >> 2];
   i3 = i3 + 64 | 0;
   i6 = i6 + 64 | 0;
  }
  while ((i3 | 0) < (i1 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 } else {
  i1 = i4 - 4 | 0;
  while ((i3 | 0) < (i1 | 0)) {
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 }
 while ((i3 | 0) < (i4 | 0)) {
  HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
 }
 return i5 | 0;
}

function _CPE_Reset() {
 HEAP32[454524] = 0;
 HEAP32[454525] = 0;
 _CPEExtensions_Reset();
 HEAP8[1868799] = 0;
 HEAP8[1868752] = 0;
 if (HEAP8[1688988] | 0) {
  HEAP32[431871] = 361;
  HEAP16[863470] = 67;
  HEAP32[431872] = 362;
  HEAP16[863471] = 69;
  HEAP32[431873] = 363;
  HEAP16[863472] = 3;
  HEAP32[431874] = 364;
  HEAP16[863473] = 2;
  HEAP32[431875] = 365;
  HEAP16[863474] = 3;
  HEAP32[431876] = 366;
  HEAP16[863475] = 134;
  HEAP32[431877] = 367;
  HEAP16[863476] = 196;
  HEAP32[431878] = 368;
  HEAP16[863477] = 130;
  HEAP32[431879] = 369;
  HEAP16[863478] = 3;
  HEAP32[431880] = 370;
  HEAP16[863479] = 8;
  HEAP32[431881] = 371;
  HEAP16[863480] = 86;
  HEAP32[431882] = 372;
  HEAP16[863481] = 2;
  HEAP32[431883] = 373;
  HEAP16[863482] = 4;
  HEAP32[431884] = 374;
  HEAP16[863483] = 66;
  HEAP32[431885] = 375;
  HEAP16[863484] = 69;
  HEAP32[431886] = 376;
  HEAP16[863485] = 2;
  HEAP32[431887] = 377;
  HEAP16[863486] = 8;
  HEAP32[431888] = 378;
  HEAP16[863487] = 138;
  HEAP32[431893] = 379;
  HEAP16[863492] = 1282;
  HEAP32[431894] = 380;
  HEAP16[863493] = 6;
  HEAP32[431895] = 381;
  HEAP16[863494] = 65;
  HEAP32[431896] = 382;
  HEAP16[863495] = 6;
  HEAP32[431897] = 383;
  HEAP16[863496] = 7;
  HEAP32[431898] = 384;
  HEAP16[863497] = 4;
  HEAP32[431899] = 385;
  HEAP16[863498] = 3;
  HEAP32[431900] = 386;
  HEAP16[863499] = 3;
  HEAP32[431901] = 387;
  HEAP16[863500] = 9;
  HEAP32[431902] = 388;
  HEAP16[863501] = 16;
  HEAP32[431903] = 389;
  HEAP16[863502] = 36;
  HEAP32[431904] = 390;
  HEAP16[863503] = 26;
  HEAP32[431908] = 391;
  HEAP16[863507] = 66;
  HEAP32[431909] = 392;
  HEAP16[863508] = 11;
  HEAP32[431910] = 393;
  HEAP16[863509] = 3;
  HEAP32[431911] = 394;
  HEAP16[863510] = 10;
  HEAP32[431914] = 395;
  HEAP16[863513] = 2;
 }
 return;
}

function _Huffman_Decode(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i8 + 8 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (i1 >>> 0 < 17) {
  i3 = i8 + 16 | 0;
  i5 = i8 + 12 | 0;
  i4 = i8 + 4 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if (!i2) break;
   i2 = i2 + -1 | 0;
   HEAP32[i3 >> 2] = i2;
   i6 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i6 + 1;
   HEAP32[i4 >> 2] = (HEAPU8[i6 >> 0] | 0) << i1 | HEAP32[i4 >> 2];
   i1 = i1 + 8 | 0;
   HEAP32[i7 >> 2] = i1;
   if (i1 >>> 0 >= 17) {
    i5 = 7;
    break L1;
   }
  }
  if (i1 >>> 0 > 8) i5 = 7; else i5 = 9;
 } else {
  i4 = i8 + 4 | 0;
  i5 = 7;
 } while (0);
 if ((i5 | 0) == 7) {
  i2 = HEAP32[i4 >> 2] | 0;
  i6 = HEAP16[i9 + ((i2 & 511) << 1) >> 1] | 0;
  i3 = i6 << 16 >> 16;
  if (i6 << 16 >> 16 > -1) {
   i9 = 9 ? i3 >> 9 : i3;
   HEAP32[i4 >> 2] = i9 ? i2 >>> i9 : i2;
   HEAP32[i7 >> 2] = i1 - i9;
   i1 = i3 & 511;
  } else i5 = 9;
 }
 L11 : do if ((i5 | 0) == 9) {
  i6 = 0;
  i2 = 1;
  i5 = 0;
  while (1) {
   if (i1 >>> 0 < i2 >>> 0) {
    i1 = -1;
    break L11;
   }
   i3 = HEAP32[i4 >> 2] | 0;
   i6 = (i5 ? i3 >>> i5 : i3) & 1 | i6 << 1;
   if (i6 >>> 0 < (HEAPU16[i9 + 1056 + (i2 << 1) >> 1] | 0) >>> 0) {
    i5 = 12;
    break;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= 16) {
    i5 = 14;
    break;
   } else i5 = i5 + 1 | 0;
  }
  if ((i5 | 0) == 12) {
   i8 = i6 + (HEAPU16[i9 + 1088 + (i2 << 1) >> 1] | 0) - (HEAPU16[i9 + 1024 + (i2 << 1) >> 1] | 0) | 0;
   HEAP32[i4 >> 2] = i2 ? i3 >>> i2 : i3;
   HEAP32[i7 >> 2] = i1 - i2;
   i1 = HEAPU16[i9 + 1120 + (i8 << 1) >> 1] | 0;
   break;
  } else if ((i5 | 0) == 14) {
   HEAP32[i8 + 44736 >> 2] = -857812902;
   HEAP8[i8 >> 0] = 13;
   i1 = -1;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _Inventory_PickBlock(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 L1 : do if ((_Inventory_CheckChangeSelected() | 0) << 24 >> 24) {
  i3 = HEAP32[424236] | 0;
  i1 = 1695240 + ((HEAP32[424235] | 0) + i3 << 1) | 0;
  if ((HEAP16[i1 >> 1] | 0) != i2 << 16 >> 16) {
   i5 = i2 << 16 >> 16 == 2 ? 3 : i2;
   i5 = (HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0 ? i2 : i5 << 16 >> 16 == 43 ? 44 : i5;
   i2 = 0;
   do {
    if ((HEAP16[1695240 + (i2 + i3 << 1) >> 1] | 0) == i5 << 16 >> 16) {
     i4 = 5;
     break;
    }
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 < 9);
   if ((i4 | 0) == 5) {
    _Inventory_SetSelectedIndex(i2);
    break;
   }
   L10 : do if (HEAP8[1868729] | 0) {
    L12 : do if (!((_AutoRotate_BlocksShareGroup(HEAP16[1695240 + (i3 << 1) >> 1] | 0, i5) | 0) << 24 >> 24)) {
     i1 = 0;
     while (1) {
      i1 = i1 + 1 | 0;
      i2 = HEAP32[424236] | 0;
      if (i1 >>> 0 >= 9) break;
      if ((_AutoRotate_BlocksShareGroup(HEAP16[1695240 + (i2 + i1 << 1) >> 1] | 0, i5) | 0) << 24 >> 24) break L12;
     }
     i3 = i2;
     i1 = 1695240 + ((HEAP32[424235] | 0) + i2 << 1) | 0;
     break L10;
    } else i1 = 0; while (0);
    _Inventory_SetSelectedIndex(i1);
    _Inventory_SetSelectedBlock(i5);
    break L1;
   } while (0);
   if (!(HEAP16[i1 >> 1] | 0)) {
    _Inventory_SetSelectedBlock(i5);
    break;
   }
   i1 = 0;
   while (1) {
    i2 = 1695240 + (i1 + i3 << 1) | 0;
    if (!(HEAP16[i2 >> 1] | 0)) {
     i4 = 18;
     break;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= 9) {
     i4 = 20;
     break;
    }
   }
   if ((i4 | 0) == 18) {
    HEAP16[i2 >> 1] = i5;
    _Inventory_SetSelectedIndex(i1);
    break;
   } else if ((i4 | 0) == 20) {
    _Inventory_SetSelectedBlock(i5);
    break;
   }
  }
 } while (0);
 return;
}

function _NotchyGen_CreateStrata() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i12 = i13;
 i10 = HEAP32[244737] | 0;
 i11 = _NotchyGen_CreateStrataFast() | 0;
 _OctaveNoise_Init(i12, 8);
 HEAP32[422258] = 33104;
 i1 = HEAP32[244735] | 0;
 if ((i1 | 0) > 0) {
  i3 = HEAP32[244733] | 0;
  i2 = 0;
  i9 = 0;
  do {
   d8 = +(i9 | 0);
   HEAPF32[422259] = d8 / +(i1 | 0);
   if ((i3 | 0) > 0) {
    i7 = HEAP32[422261] | 0;
    i6 = 0;
    do {
     i4 = ~~(+_OctaveNoise_Calc(i12, +(i6 | 0), d8) / 24.0 + -4.0);
     i5 = i2;
     i2 = i2 + 1 | 0;
     i5 = HEAP16[i7 + (i5 << 1) >> 1] | 0;
     i4 = i5 + i4 | 0;
     i4 = (i4 | 0) < (i10 | 0) ? i4 : i10;
     i5 = (i10 | 0) > (i5 | 0) ? i5 : i10;
     if ((i11 | 0) <= (i4 | 0)) {
      i1 = (Math_imul((Math_imul(HEAP32[244735] | 0, i11) | 0) + i9 | 0, i3) | 0) + i6 | 0;
      i3 = i11;
      while (1) {
       HEAP8[(HEAP32[422257] | 0) + i1 >> 0] = 1;
       if ((i3 | 0) < (i4 | 0)) {
        i1 = (HEAP32[244739] | 0) + i1 | 0;
        i3 = i3 + 1 | 0;
       } else break;
      }
     }
     i4 = (i4 | 0) > 0 ? i4 : 0;
     i1 = i4 + 1 | 0;
     if ((i4 | 0) < (i5 | 0)) {
      i3 = (Math_imul(HEAP32[244735] | 0, i1) | 0) + i9 | 0;
      i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i6 | 0;
      while (1) {
       HEAP8[(HEAP32[422257] | 0) + i3 >> 0] = 3;
       if ((i1 | 0) < (i5 | 0)) {
        i3 = (HEAP32[244739] | 0) + i3 | 0;
        i1 = i1 + 1 | 0;
       } else break;
      }
     }
     i6 = i6 + 1 | 0;
     i3 = HEAP32[244733] | 0;
    } while ((i6 | 0) < (i3 | 0));
    i1 = HEAP32[244735] | 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i1 | 0));
 }
 STACKTOP = i13;
 return;
}

function _TextAtlas_Make(i8, i9, i1, i6) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i12 + 16 | 0;
 i10 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i11 = i12;
 _Gfx_DeleteTexture(i8);
 _DrawTextArgs_Make(i7, i6, i1, 1);
 i1 = _Drawer2D_TextWidth(i7) | 0;
 i5 = i8 + 28 | 0;
 HEAP32[i5 >> 2] = i1;
 i4 = i9 + 4 | 0;
 if (HEAP16[i4 >> 1] | 0) {
  i2 = 0;
  do {
   _String_UNSAFE_Substring(i3, i9, i2, 1);
   i15 = i3;
   i14 = HEAP32[i15 + 4 >> 2] | 0;
   i13 = i7;
   HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i13 + 4 >> 2] = i14;
   i13 = _Drawer2D_TextWidth(i7) | 0;
   HEAP16[i8 + 40 + (i2 << 1) >> 1] = i13;
   HEAP16[i8 + 72 + (i2 << 1) >> 1] = i1;
   i1 = i1 + 1 + i13 | 0;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < (HEAPU16[i4 >> 1] | 0) >>> 0);
 }
 _Context2D_Alloc(i10, i1, _Drawer2D_TextHeight(i7) | 0);
 i13 = i6;
 i14 = HEAP32[i13 + 4 >> 2] | 0;
 i15 = i7;
 HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i15 + 4 >> 2] = i14;
 _Context2D_DrawText(i10, i7, 0, 0);
 if (HEAP16[i4 >> 1] | 0) {
  i1 = 0;
  do {
   _String_UNSAFE_Substring(i11, i9, i1, 1);
   i13 = i11;
   i14 = HEAP32[i13 + 4 >> 2] | 0;
   i15 = i7;
   HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i15 + 4 >> 2] = i14;
   _Context2D_DrawText(i10, i7, HEAP16[i8 + 72 + (i1 << 1) >> 1] | 0, 0);
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAPU16[i4 >> 1] | 0) >>> 0);
 }
 _Context2D_MakeTexture(i8, i10);
 _Context2D_Free(i10);
 d16 = +_Context2D_CalcUV(1, HEAP32[i10 + 4 >> 2] | 0);
 HEAPF32[i8 + 36 >> 2] = d16;
 i15 = HEAP32[i5 >> 2] | 0;
 HEAPF32[i8 + 20 >> 2] = d16 * +(i15 | 0);
 HEAP16[i8 + 8 >> 1] = i15;
 STACKTOP = i12;
 return;
}

function _Block_ResetProps(i6) {
 i6 = i6 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i9;
 i8 = i6 & 65535;
 i7 = i8 >>> 0 > (HEAPU8[1688991] | 0) >>> 0 ? 13448 : 64 + (i8 * 20 | 0) | 0;
 _String_FromReadonly(i5, HEAP32[i7 >> 2] | 0);
 HEAP8[993316 + i8 >> 0] = HEAP8[i7 + 14 >> 0] | 0;
 HEAP8[994084 + i8 >> 0] = HEAP8[i7 + 13 >> 0] | 0;
 HEAP32[994852 + (i8 << 2) >> 2] = HEAP32[i7 + 8 >> 2];
 HEAPF32[997924 + (i8 << 2) >> 2] = +(HEAPU8[i7 + 12 >> 0] | 0) / 100.0;
 _Block_SetCollide(i6, HEAP8[i7 + 17 >> 0] | 0);
 HEAP8[1007140 + i8 >> 0] = HEAP8[i7 + 18 >> 0] | 0;
 HEAP8[1007908 + i8 >> 0] = HEAP8[i7 + 19 >> 0] | 0;
 HEAPF32[1002532 + (i8 << 2) >> 2] = 1.0;
 _Block_SetName(i6, i5);
 HEAP8[1008676 + i8 >> 0] = 0;
 HEAP8[1010212 + i8 >> 0] = 0;
 i5 = HEAP8[i7 + 16 >> 0] | 0;
 HEAP8[1006372 + i8 >> 0] = i5;
 i1 = 1010980 + (i8 * 12 | 0) | 0;
 if (i5 << 24 >> 24 == 5) {
  HEAPF32[i1 >> 2] = .15625;
  d2 = 1.0;
  d3 = .84375;
  d4 = .15625;
 } else {
  HEAPF32[i1 >> 2] = 0.0;
  d2 = +(HEAPU8[i7 + 7 >> 0] | 0) * .0625;
  d3 = 1.0;
  d4 = 0.0;
 }
 HEAPF32[1010980 + (i8 * 12 | 0) + 4 >> 2] = 0.0;
 HEAPF32[1010980 + (i8 * 12 | 0) + 8 >> 2] = d4;
 HEAPF32[1020196 + (i8 * 12 | 0) >> 2] = d3;
 HEAPF32[1020196 + (i8 * 12 | 0) + 4 >> 2] = d2;
 HEAPF32[1020196 + (i8 * 12 | 0) + 8 >> 2] = d3;
 _Block_SetDrawType(i6, i5);
 _Block_CalcRenderBounds(i6);
 _Block_CalcLightOffset(i6);
 i5 = i8 * 6 | 0;
 HEAP16[1047844 + (i5 + 5 << 1) >> 1] = HEAPU8[i7 + 4 >> 0] | 0;
 HEAP16[1047844 + (i5 + 4 << 1) >> 1] = HEAPU8[i7 + 6 >> 0] | 0;
 _Block_SetSide(HEAPU8[i7 + 5 >> 0] | 0, i6);
 HEAPF32[1649188 + (i8 << 2) >> 2] = +(HEAPU8[i7 + 15 >> 0] | 0) / 100.0 * 5.400000095367432;
 STACKTOP = i9;
 return;
}

function _TreeGen_CanGrow(i14, i2, i13, i1) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0;
 i15 = i1 + i2 | 0;
 i4 = i15 + -4 | 0;
 L1 : do if ((i4 | 0) > (i2 | 0)) {
  i10 = i13 + -1 | 0;
  i11 = i14 + -1 | 0;
  i7 = HEAP32[244735] | 0;
  i8 = HEAP32[244733] | 0;
  i9 = HEAP32[422262] | 0;
  while (1) {
   i1 = Math_imul(i7, i2) | 0;
   i6 = i10;
   while (1) {
    i3 = Math_imul(i1 + i6 | 0, i8) | 0;
    i5 = i11;
    while (1) {
     if (!((_World_Contains_646(i5, i2, i6) | 0) << 24 >> 24)) {
      i1 = 0;
      break L1;
     }
     if (HEAP8[i9 + (i3 + i5) >> 0] | 0) {
      i1 = 0;
      break L1;
     }
     if ((i5 | 0) > (i14 | 0)) break; else i5 = i5 + 1 | 0;
    }
    if ((i6 | 0) > (i13 | 0)) break; else i6 = i6 + 1 | 0;
   }
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i4 | 0)) {
    i12 = 10;
    break;
   }
  }
 } else i12 = 10; while (0);
 L13 : do if ((i12 | 0) == 10) if ((i15 | 0) > -2147483645) {
  i12 = i13 + -2 | 0;
  i10 = i13 + 2 | 0;
  i11 = i14 + -2 | 0;
  i9 = i14 + 2 | 0;
  i6 = HEAP32[244735] | 0;
  i7 = HEAP32[244733] | 0;
  i8 = HEAP32[422262] | 0;
  while (1) {
   i1 = Math_imul(i6, i4) | 0;
   i5 = i12;
   while (1) {
    i2 = Math_imul(i1 + i5 | 0, i7) | 0;
    i3 = i11;
    while (1) {
     if (!((_World_Contains_646(i3, i4, i5) | 0) << 24 >> 24)) {
      i1 = 0;
      break L13;
     }
     if (HEAP8[i8 + (i2 + i3) >> 0] | 0) {
      i1 = 0;
      break L13;
     }
     if ((i3 | 0) < (i9 | 0)) i3 = i3 + 1 | 0; else break;
    }
    if ((i5 | 0) < (i10 | 0)) i5 = i5 + 1 | 0; else break;
   }
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i15 | 0)) {
    i1 = 1;
    break;
   }
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _DrawCloudsY(i3, i14, i13, i15, i1, i2) {
 i3 = i3 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i12 = _EnvRenderer_AxisSize() | 0;
 d9 = +(i1 | 0) + .10000000149011612;
 i8 = HEAP32[466940] | 0;
 d11 = +(_Math_CeilDiv(0 - i3 | 0, 2048) | 0);
 if ((i3 | 0) < (i13 | 0)) {
  i10 = (i14 | 0) < (i15 | 0);
  i1 = i2;
  do {
   i2 = i3;
   i3 = i3 + i12 | 0;
   if (i10) {
    d6 = +(i2 | 0);
    d4 = d6 * .00048828125 + d11;
    d7 = +(((i3 | 0) > (i13 | 0) ? i13 : i3) | 0);
    d5 = d7 * .00048828125 + d11;
    i2 = i14;
    do {
     d17 = +(i2 | 0);
     i2 = i2 + i12 | 0;
     d16 = d17 * .00048828125 + d11;
     d19 = +(((i2 | 0) > (i15 | 0) ? i15 : i2) | 0);
     d18 = d19 * .00048828125 + d11;
     HEAPF32[i1 >> 2] = d6;
     HEAPF32[i1 + 4 >> 2] = d9;
     HEAPF32[i1 + 8 >> 2] = d17;
     HEAP32[i1 + 12 >> 2] = i8;
     HEAPF32[i1 + 16 >> 2] = d4;
     HEAPF32[i1 + 20 >> 2] = d16;
     HEAPF32[i1 + 24 >> 2] = d6;
     HEAPF32[i1 + 28 >> 2] = d9;
     HEAPF32[i1 + 32 >> 2] = d19;
     HEAP32[i1 + 36 >> 2] = i8;
     HEAPF32[i1 + 40 >> 2] = d4;
     HEAPF32[i1 + 44 >> 2] = d18;
     HEAPF32[i1 + 48 >> 2] = d7;
     HEAPF32[i1 + 52 >> 2] = d9;
     HEAPF32[i1 + 56 >> 2] = d19;
     HEAP32[i1 + 60 >> 2] = i8;
     HEAPF32[i1 + 64 >> 2] = d5;
     HEAPF32[i1 + 68 >> 2] = d18;
     HEAPF32[i1 + 72 >> 2] = d7;
     HEAPF32[i1 + 76 >> 2] = d9;
     HEAPF32[i1 + 80 >> 2] = d17;
     HEAP32[i1 + 84 >> 2] = i8;
     HEAPF32[i1 + 88 >> 2] = d5;
     HEAPF32[i1 + 92 >> 2] = d16;
     i1 = i1 + 96 | 0;
    } while ((i2 | 0) < (i15 | 0));
   }
  } while ((i3 | 0) < (i13 | 0));
 }
 return;
}

function _RayTracer_Init(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i9 = i3 + 12 | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 i9 = i3 + 24 | 0;
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 d10 = +_Math_SafeDiv_1761(1.0, +HEAPF32[i1 >> 2]);
 i9 = i3 + 128 | 0;
 HEAPF32[i9 >> 2] = d10;
 i13 = i1 + 4 | 0;
 d10 = +_Math_SafeDiv_1761(1.0, +HEAPF32[i13 >> 2]);
 i7 = i3 + 132 | 0;
 HEAPF32[i7 >> 2] = d10;
 i11 = i1 + 8 | 0;
 d10 = +_Math_SafeDiv_1761(1.0, +HEAPF32[i11 >> 2]);
 i5 = i3 + 136 | 0;
 HEAPF32[i5 >> 2] = d10;
 _IVec3_Floor(i3, i2);
 i4 = _Math_Sign(+HEAPF32[i1 >> 2]) | 0;
 i8 = i3 + 64 | 0;
 HEAP32[i8 >> 2] = i4;
 i4 = _Math_Sign(+HEAPF32[i13 >> 2]) | 0;
 i6 = i3 + 68 | 0;
 HEAP32[i6 >> 2] = i4;
 i4 = _Math_Sign(+HEAPF32[i11 >> 2]) | 0;
 HEAP32[i3 + 72 >> 2] = i4;
 i8 = HEAP32[i8 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 i14 = (HEAP32[i3 + 4 >> 2] | 0) + ((i6 | 0) > 0 & 1) | 0;
 i12 = (HEAP32[i3 + 8 >> 2] | 0) + ((i4 | 0) > 0 & 1) | 0;
 d10 = +_Math_SafeDiv_1761(+((HEAP32[i3 >> 2] | 0) + ((i8 | 0) > 0 & 1) | 0) - +HEAPF32[i2 >> 2], +HEAPF32[i1 >> 2]);
 HEAPF32[i3 + 76 >> 2] = d10;
 d10 = +_Math_SafeDiv_1761(+(i14 | 0) - +HEAPF32[i2 + 4 >> 2], +HEAPF32[i13 >> 2]);
 HEAPF32[i3 + 80 >> 2] = d10;
 d10 = +_Math_SafeDiv_1761(+(i12 | 0) - +HEAPF32[i2 + 8 >> 2], +HEAPF32[i11 >> 2]);
 HEAPF32[i3 + 84 >> 2] = d10;
 HEAPF32[i3 + 88 >> 2] = +HEAPF32[i9 >> 2] * +(i8 | 0);
 HEAPF32[i3 + 92 >> 2] = +HEAPF32[i7 >> 2] * +(i6 | 0);
 HEAPF32[i3 + 96 >> 2] = +HEAPF32[i5 >> 2] * +(i4 | 0);
 return;
}

function _CustomModel_BuildPart(i7, i10) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i8 = 0, i9 = 0, i11 = 0;
 d1 = +HEAPF32[i10 >> 2];
 d2 = +HEAPF32[i10 + 4 >> 2];
 d3 = +HEAPF32[i10 + 8 >> 2];
 d4 = +HEAPF32[i10 + 12 >> 2];
 d5 = +HEAPF32[i10 + 16 >> 2];
 d6 = +HEAPF32[i10 + 20 >> 2];
 i8 = HEAPU8[i7 + 139 >> 0] | 0;
 i9 = i7 + 36 | 0;
 HEAP32[i9 >> 2] = i8 * 24;
 i11 = HEAP8[i10 + 84 >> 0] | 0;
 HEAP8[i7 + 192 + (i8 * 104 | 0) + 100 >> 0] = i11 & 1;
 i11 = i11 & 2;
 HEAP8[i7 + 192 + (i8 * 104 | 0) + 101 >> 0] = i11;
 if (i11 << 24 >> 24) {
  i11 = i7 + 189 | 0;
  HEAP8[i11 >> 0] = (HEAP8[i11 >> 0] | 0) + 1 << 24 >> 24;
 }
 _BoxDesc_YQuad2(i7, d1, d4, d6, d3, d5, HEAPU16[i10 + 24 >> 1] | 0, HEAPU16[i10 + 36 >> 1] | 0, HEAPU16[i10 + 48 >> 1] | 0, HEAPU16[i10 + 60 >> 1] | 0);
 _BoxDesc_YQuad2(i7, d4, d1, d6, d3, d2, HEAPU16[i10 + 26 >> 1] | 0, HEAPU16[i10 + 38 >> 1] | 0, HEAPU16[i10 + 50 >> 1] | 0, HEAPU16[i10 + 62 >> 1] | 0);
 _BoxDesc_ZQuad2(i7, d1, d4, d2, d5, d3, HEAPU16[i10 + 28 >> 1] | 0, HEAPU16[i10 + 40 >> 1] | 0, HEAPU16[i10 + 52 >> 1] | 0, HEAPU16[i10 + 64 >> 1] | 0);
 _BoxDesc_ZQuad2(i7, d4, d1, d2, d5, d6, HEAPU16[i10 + 30 >> 1] | 0, HEAPU16[i10 + 42 >> 1] | 0, HEAPU16[i10 + 54 >> 1] | 0, HEAPU16[i10 + 66 >> 1] | 0);
 _BoxDesc_XQuad2(i7, d3, d6, d2, d5, d4, HEAPU16[i10 + 32 >> 1] | 0, HEAPU16[i10 + 44 >> 1] | 0, HEAPU16[i10 + 56 >> 1] | 0, HEAPU16[i10 + 68 >> 1] | 0);
 _BoxDesc_XQuad2(i7, d6, d3, d2, d5, d1, HEAPU16[i10 + 34 >> 1] | 0, HEAPU16[i10 + 46 >> 1] | 0, HEAPU16[i10 + 58 >> 1] | 0, HEAPU16[i10 + 70 >> 1] | 0);
 _ModelPart_Init(i7 + 192 + (i8 * 104 | 0) | 0, (HEAP32[i9 >> 2] | 0) + -24 | 0, 24, +HEAPF32[i10 + 72 >> 2], +HEAPF32[i10 + 76 >> 2], +HEAPF32[i10 + 80 >> 2]);
 return;
}

function _DrawBorderY(i4, i13, i12, i14, d2, i10, d11, d3, i15) {
 i4 = i4 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 d2 = +d2;
 i10 = i10 | 0;
 d11 = +d11;
 d3 = +d3;
 i15 = i15 | 0;
 var i1 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0;
 i9 = _EnvRenderer_AxisSize() | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 d7 = d2 + d3;
 if ((i4 | 0) < (i12 | 0)) {
  i8 = (i13 | 0) < (i14 | 0);
  i6 = i4;
  do {
   i4 = i6;
   i6 = i6 + i9 | 0;
   if (i8) {
    d3 = +(((i6 | 0) > (i12 | 0) ? i12 : i6) | 0);
    d2 = +(i4 | 0);
    d5 = d3 - d2;
    d2 = d2 + d11;
    d3 = d3 + d11;
    i4 = i13;
    do {
     i19 = i4;
     i4 = i4 + i9 | 0;
     d18 = +(((i4 | 0) > (i14 | 0) ? i14 : i4) | 0);
     d16 = +(i19 | 0);
     d17 = d18 - d16;
     HEAPF32[i1 >> 2] = d2;
     HEAPF32[i1 + 4 >> 2] = d7;
     d16 = d16 + d11;
     HEAPF32[i1 + 8 >> 2] = d16;
     HEAP32[i1 + 12 >> 2] = i10;
     HEAPF32[i1 + 16 >> 2] = 0.0;
     HEAPF32[i1 + 20 >> 2] = 0.0;
     HEAPF32[i1 + 24 >> 2] = d2;
     HEAPF32[i1 + 28 >> 2] = d7;
     d18 = d18 + d11;
     HEAPF32[i1 + 32 >> 2] = d18;
     HEAP32[i1 + 36 >> 2] = i10;
     HEAPF32[i1 + 40 >> 2] = 0.0;
     HEAPF32[i1 + 44 >> 2] = d17;
     HEAPF32[i1 + 48 >> 2] = d3;
     HEAPF32[i1 + 52 >> 2] = d7;
     HEAPF32[i1 + 56 >> 2] = d18;
     HEAP32[i1 + 60 >> 2] = i10;
     HEAPF32[i1 + 64 >> 2] = d5;
     HEAPF32[i1 + 68 >> 2] = d17;
     HEAPF32[i1 + 72 >> 2] = d3;
     HEAPF32[i1 + 76 >> 2] = d7;
     HEAPF32[i1 + 80 >> 2] = d16;
     HEAP32[i1 + 84 >> 2] = i10;
     HEAPF32[i1 + 88 >> 2] = d5;
     HEAPF32[i1 + 92 >> 2] = 0.0;
     i1 = i1 + 96 | 0;
    } while ((i4 | 0) < (i14 | 0));
   }
  } while ((i6 | 0) < (i12 | 0));
 }
 HEAP32[i15 >> 2] = i1;
 return;
}

function _TextGroupWidget_Redraw(i8, i5) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i9;
 i1 = i9 + 40 | 0;
 i6 = i9 + 8 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 i7 = i8 + 84 | 0;
 _Gfx_DeleteTexture((HEAP32[i7 >> 2] | 0) + (i5 * 28 | 0) | 0);
 _TextGroupWidget_UNSAFE_Get(i3, i8, i5);
 if (!((_Drawer2D_IsEmptyText(i3) | 0) << 24 >> 24)) {
  i2 = i8 + 48 | 0;
  _DrawTextArgs_Make(i1, i3, HEAP32[i2 >> 2] | 0, 1);
  if (!(HEAP8[i8 + 82 >> 0] | 0)) i4 = 5; else if (!((_TextGroupWidget_MightHaveUrls(i8) | 0) << 24 >> 24)) i4 = 5; else _TextGroupWidget_DrawAdvanced(i8, i6, i1, i5, i3);
  if ((i4 | 0) == 5) _Drawer2D_MakeTextTexture(i6, i1);
  _Drawer2D_ReducePadding_Tex(i6, HEAPU16[(HEAP32[i2 >> 2] | 0) + 4 >> 1] | 0, 3);
  i1 = HEAP16[i6 + 8 >> 1] | 0;
 } else {
  if (!(HEAP8[i8 + 52 + i5 >> 0] | 0)) i1 = HEAP32[i8 + 44 >> 2] & 65535; else i1 = 0;
  HEAP16[i6 + 10 >> 1] = i1;
  i1 = 0;
 }
 i4 = (_Gui_CalcPos(HEAP8[i8 + 22 >> 0] | 0, HEAP32[i8 + 24 >> 2] | 0, i1 & 65535, HEAP32[466968] | 0) | 0) & 65535;
 HEAP16[i6 + 4 >> 1] = i4;
 i7 = (HEAP32[i7 >> 2] | 0) + (i5 * 28 | 0) | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
 HEAP32[i7 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 511](i8);
 STACKTOP = i9;
 return;
}

function _CheckIsFree(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i10 + 92 | 0;
 i8 = i10 + 80 | 0;
 i5 = i10 + 56 | 0;
 i7 = i10 + 32 | 0;
 i9 = i10;
 i4 = HEAP32[417347] | 0;
 i6 = i1 & 65535;
 do if ((HEAP8[1000996 + i6 >> 0] | 0) == 2) {
  _IVec3_ToVec3(i8, 1688956);
  HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  if (!((_IntersectsOthers(i2, i1) | 0) << 24 >> 24)) {
   i1 = HEAP32[i4 + 384 >> 2] | 0;
   d12 = +HEAPF32[i4 + 388 >> 2];
   i2 = HEAP32[i4 + 392 >> 2] | 0;
   _Vec3_Add_1087(i5, i8, 1010980 + (i6 * 12 | 0) | 0);
   _Vec3_Add_1087(i5 + 12 | 0, i8, 1020196 + (i6 * 12 | 0) | 0);
   _Entity_GetBounds(i4, i7);
   i3 = i7 + 4 | 0;
   d11 = +HEAPF32[i3 >> 2];
   HEAPF32[i3 >> 2] = d12 < d11 ? d12 : d11;
   if (!(HEAP8[i4 + 494 >> 0] | 0)) if (!((_AABB_Intersects(i7, i5) | 0) << 24 >> 24)) i1 = 1; else {
    if (HEAP8[i4 + 477 >> 0] | 0) if (HEAP8[i4 + 468 >> 0] | 0) if (HEAP8[i4 + 470 >> 0] | 0) {
     i1 = _PushbackPlace(i5) | 0;
     break;
    }
    HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + .25099998712539673;
    if (!((_AABB_Intersects(i7, i5) | 0) << 24 >> 24)) {
     d12 = +HEAPF32[i8 + 4 >> 2] + +HEAPF32[1020196 + (i6 * 12 | 0) + 4 >> 2] + 1.0000000474974513e-03;
     HEAP8[i9 + 28 >> 0] = 1;
     HEAP32[i9 >> 2] = i1;
     HEAPF32[i9 + 4 >> 2] = d12;
     HEAP32[i9 + 8 >> 2] = i2;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 255](i4, i9);
     i1 = 1;
    } else i1 = 0;
   } else i1 = 1;
  } else i1 = 0;
 } else i1 = 1; while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function _PlaceCommand_Execute(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9;
 i6 = i9 + 20 | 0;
 i8 = i9 + 8 | 0;
 switch (i2 | 0) {
 case 2:
  {
   _Chat_AddRaw(27967);
   break;
  }
 case 0:
 case 3:
  {
   i1 = HEAPU16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
   HEAP32[i6 >> 2] = i1;
   i3 = 6;
   break;
  }
 default:
  {
   i1 = _Block_Parse(i4) | 0;
   HEAP32[i6 >> 2] = i1;
   if ((i1 | 0) == -1) _Chat_AddRaw(27988); else i3 = 6;
  }
 }
 L6 : do if ((i3 | 0) == 6) {
  if ((i1 | 0) > (HEAPU8[1688991] | 0 | 0)) if (!((_Block_IsCustomDefined(i1 & 65535) | 0) << 24 >> 24)) {
   _Chat_Add1(28013, i6);
   break;
  }
  do if ((i2 | 0) > 2) {
   i1 = (i2 | 0) == 4;
   if ((_Convert_ParseInt(i4 + ((i1 & 1) << 3) | 0, i8) | 0) << 24 >> 24) {
    i2 = i8 + 4 | 0;
    if ((_Convert_ParseInt(i4 + ((i1 ? 2 : 1) << 3) | 0, i2) | 0) << 24 >> 24) {
     i3 = i8 + 8 | 0;
     if ((_Convert_ParseInt(i4 + ((i1 ? 3 : 2) << 3) | 0, i3) | 0) << 24 >> 24) {
      i1 = i8;
      i5 = i2;
      i4 = i3;
      break;
     }
    }
   }
   _Chat_AddRaw(28047);
   break L6;
  } else {
   _IVec3_Floor(i8, (HEAP32[417347] | 0) + 4 | 0);
   i1 = i8;
   i5 = i8 + 4 | 0;
   i4 = i8 + 8 | 0;
  } while (0);
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!((_World_Contains_120(i1, i2, i3) | 0) << 24 >> 24)) {
   _Chat_AddRaw(28078);
   break;
  } else {
   _Game_ChangeBlock(i1, i2, i3, HEAP32[i6 >> 2] & 65535);
   _Block_UNSAFE_GetName(i7, HEAP32[i6 >> 2] & 65535);
   _Chat_Add4(28126, i7, i8, i5, i4);
   break;
  }
 } while (0);
 STACKTOP = i9;
 return;
}

function _UpdateSortOrder() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i11;
 _IVec3_Floor(i8, 1656632);
 i2 = HEAP32[i8 >> 2] & -16 | 8;
 HEAP32[i8 >> 2] = i2;
 i9 = i8 + 4 | 0;
 i4 = HEAP32[i9 >> 2] & -16 | 8;
 HEAP32[i9 >> 2] = i4;
 i10 = i8 + 8 | 0;
 i3 = HEAP32[i10 >> 2] & -16 | 8;
 HEAP32[i10 >> 2] = i3;
 if ((i2 | 0) == (HEAP32[424258] | 0)) {
  if (!((i4 | 0) == (HEAP32[424259] | 0) & (i3 | 0) == (HEAP32[424260] | 0))) i1 = 3;
 } else i1 = 3;
 if ((i1 | 0) == 3) {
  HEAP32[424258] = HEAP32[i8 >> 2];
  HEAP32[424259] = HEAP32[i8 + 4 >> 2];
  HEAP32[424260] = HEAP32[i8 + 8 >> 2];
  i5 = HEAP32[424248] | 0;
  if (i5 | 0) {
   L6 : do if ((i5 | 0) > 0) {
    i6 = HEAP32[424253] | 0;
    i7 = HEAP32[424255] | 0;
    i1 = 0;
    while (1) {
     i13 = HEAP32[i6 + (i1 << 2) >> 2] | 0;
     i12 = (HEAPU16[i13 >> 1] | 0) - i2 | 0;
     i2 = (HEAPU16[i13 + 2 >> 1] | 0) - i4 | 0;
     i3 = (HEAPU16[i13 + 4 >> 1] | 0) - i3 | 0;
     i4 = (Math_imul(i2, i2) | 0) + (Math_imul(i12, i12) | 0) + (Math_imul(i3, i3) | 0) | 0;
     HEAP32[i7 + (i1 << 2) >> 2] = i4;
     i4 = i13 + 7 | 0;
     HEAP8[i4 >> 0] = (((i12 | 0) < 1 & 1) << 1 & 255 | (31 ? i12 >>> 31 : i12) & 1 | (27 ? i2 >>> 27 : i2) & 16 | ((i2 | 0) < 1 & 1) << 5 & 255 | HEAP8[i4 >> 0] & -64 | (29 ? i3 >>> 29 : i3) & 4 | ((i3 | 0) < 1 & 1) << 3 & 255) ^ 21;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) == (i5 | 0)) break L6;
     i2 = HEAP32[i8 >> 2] | 0;
     i4 = HEAP32[i9 >> 2] | 0;
     i3 = HEAP32[i10 >> 2] | 0;
    }
   } while (0);
   _SortMapChunks(0, i5 + -1 | 0);
   _ResetPartFlags();
  }
 }
 STACKTOP = i11;
 return;
}

function _ChatScreen_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if ((_ChatScreen_ChatUpdateFont(i1) | 0) << 24 >> 24) _ChatScreen_Redraw(i1);
 i2 = _Display_ScaleX_1897(5) | 0;
 HEAP32[i1 + 48 >> 2] = i2;
 i2 = _Display_ScaleY_1898(5) | 0;
 HEAP32[i1 + 52 >> 2] = i2;
 _Widget_SetLocation(i1 + 324 | 0, 0, 2, 5, 5);
 _Widget_SetLocation(i1 + 1292 | 0, 0, 2, 5, 5);
 _Widget_SetLocation(i1 + 924 | 0, 2, 0, 0, 0);
 i2 = i1 + 1016 | 0;
 _Widget_SetLocation(i2, 2, 2, 0, 0);
 _Widget_SetLocation(i1 + 1108 | 0, 0, 2, 10, 0);
 _Widget_SetLocation(i1 + 1200 | 0, 0, 2, 10, 0);
 _ChatScreen_UpdateChatYOffsets(i1);
 i3 = _HUDScreen_LayoutHotbar() | 0;
 i3 = (_Display_ScaleY_1898(15) | 0) + i3 | 0;
 HEAP32[i1 + 1044 >> 2] = i3;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 108 | 0;
 _Widget_SetLocation(i2, 1, 1, 0, 0);
 HEAP32[i1 + 136 >> 2] = (HEAP32[466969] | 0) / -4 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 180 | 0;
 _Widget_SetLocation(i2, 1, 1, 0, 0);
 HEAP32[i1 + 208 >> 2] = (HEAP32[466969] | 0) / -16 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 252 | 0;
 _Widget_SetLocation(i2, 1, 1, 0, 0);
 HEAP32[i1 + 280 >> 2] = (HEAP32[466969] | 0) / 20 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 2560 | 0;
 if ((HEAP8[1867882] | 0) == 2) {
  _Widget_SetLocation(i2, 2, 2, 10, 60);
  _Widget_SetLocation(i1 + 2644 | 0, 2, 2, 10, 10);
  _Widget_SetLocation(i1 + 2728 | 0, 2, 2, 10, 110);
 } else {
  _Widget_SetLocation(i2, 2, 0, 10, 10);
  _Widget_SetLocation(i1 + 2644 | 0, 2, 0, 10, 60);
  _Widget_SetLocation(i1 + 2728 | 0, 2, 0, 10, 110);
 }
 return;
}

function _FrustumCulling_CalcFrustumEquations(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = i1 + 12 | 0;
 HEAPF32[466907] = +HEAPF32[i5 >> 2] - +HEAPF32[i1 >> 2];
 i4 = i1 + 28 | 0;
 i7 = i1 + 16 | 0;
 HEAPF32[466908] = +HEAPF32[i4 >> 2] - +HEAPF32[i7 >> 2];
 i3 = i1 + 44 | 0;
 i8 = i1 + 32 | 0;
 HEAPF32[466909] = +HEAPF32[i3 >> 2] - +HEAPF32[i8 >> 2];
 i2 = i1 + 60 | 0;
 i9 = i1 + 48 | 0;
 HEAPF32[466910] = +HEAPF32[i2 >> 2] - +HEAPF32[i9 >> 2];
 _FrustumCulling_Normalise(1867628);
 HEAPF32[466911] = +HEAPF32[i5 >> 2] + +HEAPF32[i1 >> 2];
 HEAPF32[466912] = +HEAPF32[i4 >> 2] + +HEAPF32[i7 >> 2];
 HEAPF32[466913] = +HEAPF32[i3 >> 2] + +HEAPF32[i8 >> 2];
 HEAPF32[466914] = +HEAPF32[i2 >> 2] + +HEAPF32[i9 >> 2];
 _FrustumCulling_Normalise(1867644);
 i9 = i1 + 4 | 0;
 HEAPF32[466915] = +HEAPF32[i5 >> 2] + +HEAPF32[i9 >> 2];
 i8 = i1 + 20 | 0;
 HEAPF32[466916] = +HEAPF32[i4 >> 2] + +HEAPF32[i8 >> 2];
 i7 = i1 + 36 | 0;
 HEAPF32[466917] = +HEAPF32[i3 >> 2] + +HEAPF32[i7 >> 2];
 i6 = i1 + 52 | 0;
 HEAPF32[466918] = +HEAPF32[i2 >> 2] + +HEAPF32[i6 >> 2];
 _FrustumCulling_Normalise(1867660);
 HEAPF32[466919] = +HEAPF32[i5 >> 2] - +HEAPF32[i9 >> 2];
 HEAPF32[466920] = +HEAPF32[i4 >> 2] - +HEAPF32[i8 >> 2];
 HEAPF32[466921] = +HEAPF32[i3 >> 2] - +HEAPF32[i7 >> 2];
 HEAPF32[466922] = +HEAPF32[i2 >> 2] - +HEAPF32[i6 >> 2];
 _FrustumCulling_Normalise(1867676);
 HEAPF32[466923] = +HEAPF32[i5 >> 2] - +HEAPF32[i1 + 8 >> 2];
 HEAPF32[466924] = +HEAPF32[i4 >> 2] - +HEAPF32[i1 + 24 >> 2];
 HEAPF32[466925] = +HEAPF32[i3 >> 2] - +HEAPF32[i1 + 40 >> 2];
 HEAPF32[466926] = +HEAPF32[i2 >> 2] - +HEAPF32[i1 + 56 >> 2];
 _FrustumCulling_Normalise(1867692);
 return;
}

function _CPE_DefineModel(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = i5 + 8 | 0;
 i2 = _CustomModel_Get(HEAPU8[i1 >> 0] | 0) | 0;
 do if (i2 | 0) {
  _CustomModel_Undefine(i2);
  _Model_Init(i2);
  _UNSAFE_GetString(i4, i1 + 1 | 0);
  _String_CopyToRaw(i2 + 72 | 0, 65, i4);
  i6 = HEAPU8[i1 + 65 >> 0] | 0;
  HEAP8[i2 + 43 >> 0] = i6 & 1;
  HEAP8[i2 + 47 >> 0] = i6 & 2;
  HEAP8[i2 + 46 >> 0] = i6 & 4;
  HEAP8[i2 + 45 >> 0] = i6 & 8;
  d7 = +_GetFloat(i1 + 66 | 0);
  HEAPF32[i2 + 140 >> 2] = d7;
  d7 = +_GetFloat(i1 + 70 | 0);
  HEAPF32[i2 + 144 >> 2] = d7;
  d7 = +_GetFloat(i1 + 74 | 0);
  HEAPF32[i2 + 148 >> 2] = d7;
  d7 = +_GetFloat(i1 + 78 | 0);
  HEAPF32[i2 + 152 >> 2] = d7;
  d7 = +_GetFloat(i1 + 82 | 0);
  HEAPF32[i2 + 156 >> 2] = d7;
  d7 = +_GetFloat(i1 + 86 | 0);
  HEAPF32[i2 + 160 >> 2] = d7;
  d7 = +_GetFloat(i1 + 90 | 0);
  HEAPF32[i2 + 164 >> 2] = d7;
  d7 = +_GetFloat(i1 + 94 | 0);
  HEAPF32[i2 + 168 >> 2] = d7;
  d7 = +_GetFloat(i1 + 98 | 0);
  HEAPF32[i2 + 172 >> 2] = d7;
  d7 = +_GetFloat(i1 + 102 | 0);
  HEAPF32[i2 + 176 >> 2] = d7;
  d7 = +_GetFloat(i1 + 106 | 0);
  HEAPF32[i2 + 180 >> 2] = d7;
  i6 = _Stream_GetU16_BE(i1 + 110 | 0) | 0;
  HEAP16[i2 + 184 >> 1] = i6;
  i6 = _Stream_GetU16_BE(i1 + 112 | 0) | 0;
  HEAP16[i2 + 186 >> 1] = i6;
  i1 = HEAP8[i1 + 114 >> 0] | 0;
  if ((i1 & 255) > 64) {
   HEAP32[i3 >> 2] = 64;
   _Chat_Add2(46640, i4, i3);
   break;
  } else {
   HEAP8[i2 + 188 >> 0] = i1;
   i6 = _Mem_AllocCleared((i1 & 255) * 24 | 0, 16, 46686) | 0;
   HEAP32[i2 + 4 >> 2] = i6;
   HEAP8[i2 + 138 >> 0] = 1;
   break;
  }
 } while (0);
 STACKTOP = i5;
 return;
}

function _Zip_ReadLocalFileHeader(i12, i7) {
 i12 = i12 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 45424 | 0;
 i4 = i13 + 512 | 0;
 i10 = i13 + 544 | 0;
 i2 = i13;
 i9 = i13 + 45408 | 0;
 i11 = i13 + 45352 | 0;
 i6 = i13 + 45296 | 0;
 i8 = i13 + 552 | 0;
 i5 = HEAP32[i12 >> 2] | 0;
 i1 = _Stream_Read(i5, i4, 26) | 0;
 L1 : do if (!i1) {
  i3 = _Stream_GetU16_LE(i4 + 22 | 0) | 0;
  i1 = i3 & 65535;
  if ((i3 & 65535) > 512) i1 = -857812940; else {
   _String_Init(i10, i2, i1, i1);
   i1 = _Stream_Read(i5, i2, i1) | 0;
   if (!i1) if (!((FUNCTION_TABLE_ii[HEAP32[i12 + 4 >> 2] & 63](i10) | 0) << 24 >> 24)) i1 = 0; else {
    i1 = (_Stream_GetU16_LE(i4 + 24 | 0) | 0) & 65535;
    i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 12 >> 2] & 127](i5, i1) | 0;
    if (!i1) {
     i3 = _Stream_GetU16_LE(i4 + 4 | 0) | 0;
     HEAP32[i9 >> 2] = i3 & 65535;
     i2 = _Stream_GetU32_LE(i4 + 14 | 0) | 0;
     i1 = _Stream_GetU32_LE(i4 + 18 | 0) | 0;
     if (!i2) i2 = HEAP32[i7 >> 2] | 0;
     if (!i1) i1 = HEAP32[i7 + 4 >> 2] | 0;
     switch (i3 << 16 >> 16) {
     case 0:
      {
       _Stream_ReadonlyPortion(i11, i5, i1);
       i1 = FUNCTION_TABLE_iiii[HEAP32[i12 + 8 >> 2] & 63](i10, i11, i7) | 0;
       break L1;
      }
     case 8:
      {
       _Stream_ReadonlyPortion(i11, i5, i2);
       _Inflate_MakeStream2(i6, i8, i11);
       i1 = FUNCTION_TABLE_iiii[HEAP32[i12 + 8 >> 2] & 63](i10, i6, i7) | 0;
       break L1;
      }
     default:
      {
       _Platform_Log1(30207, i9);
       i1 = 0;
       break L1;
      }
     }
    }
   }
  }
 } while (0);
 STACKTOP = i13;
 return i1 | 0;
}

function _Searcher_QuickSort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i12;
 i10 = HEAP32[5306] | 0;
 if ((i1 | 0) < (i2 | 0)) do {
  i8 = i1 + i2 | 0;
  d9 = +HEAPF32[i10 + ((1 ? i8 >> 1 : i8) << 4) + 12 >> 2];
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     i7 = i3 + 1 | 0;
     if (d9 > +HEAPF32[i10 + (i3 << 4) + 12 >> 2]) i3 = i7; else break;
    }
    i8 = i4;
    while (1) {
     i4 = i8 + -1 | 0;
     if (d9 < +HEAPF32[i10 + (i8 << 4) + 12 >> 2]) i8 = i4; else break;
    }
    i6 = i10 + (i3 << 4) | 0;
    i5 = i10 + (i8 << 4) | 0;
    if ((i3 | 0) > (i8 | 0)) i4 = i8; else {
     HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
     HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i5 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
     i3 = i7;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _Searcher_QuickSort(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _Searcher_QuickSort(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 STACKTOP = i12;
 return;
}

function _CustomModel_GetAnimValue(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0;
 do switch (i4 << 24 >> 24) {
 case 1:
  {
   d1 = +HEAPF32[i3 + 16 >> 2] * -.01745329238474369;
   break;
  }
 case 2:
  {
   d1 = +HEAPF32[i3 + 164 >> 2];
   break;
  }
 case 3:
  {
   d1 = +HEAPF32[i3 + 172 >> 2];
   break;
  }
 case 4:
  {
   HEAP8[1714760] = 1;
   d1 = +HEAPF32[i3 + 180 >> 2];
   break;
  }
 case 5:
  {
   HEAP8[1714760] = 1;
   d1 = +HEAPF32[i3 + 184 >> 2];
   break;
  }
 case 6:
  {
   HEAP8[1714760] = 1;
   d1 = +HEAPF32[i3 + 188 >> 2];
   break;
  }
 case 7:
  {
   HEAP8[1714760] = 1;
   d1 = +HEAPF32[i3 + 192 >> 2];
   break;
  }
 case 8:
  {
   d1 = +HEAPF32[i2 >> 2] * +HEAPF64[122280] + +HEAPF32[i2 + 4 >> 2];
   break;
  }
 case 9:
  {
   d1 = +HEAPF32[i3 + 132 >> 2] * +HEAPF32[i2 >> 2] + +HEAPF32[i2 + 4 >> 2];
   break;
  }
 case 14:
 case 12:
 case 10:
  {
   d1 = (+_Math_SinF(+HEAPF32[i2 >> 2] * +HEAPF64[122280] + +HEAPF32[i2 + 8 >> 2] * 6.2831854820251465) + +HEAPF32[i2 + 12 >> 2]) * +HEAPF32[i2 + 4 >> 2];
   break;
  }
 case 15:
 case 13:
 case 11:
  {
   d1 = (+_Math_SinF(+HEAPF32[i3 + 132 >> 2] * +HEAPF32[i2 >> 2] + +HEAPF32[i2 + 8 >> 2] * 6.2831854820251465) + +HEAPF32[i2 + 12 >> 2]) * +HEAPF32[i2 + 4 >> 2];
   break;
  }
 case 20:
 case 18:
 case 16:
  {
   d1 = +_EuclidianMod(+HEAPF32[i2 >> 2] * +HEAPF64[122280] + +HEAPF32[i2 + 8 >> 2], +HEAPF32[i2 + 12 >> 2]) * +HEAPF32[i2 + 4 >> 2];
   break;
  }
 case 21:
 case 19:
 case 17:
  {
   d1 = +_EuclidianMod(+HEAPF32[i3 + 132 >> 2] * +HEAPF32[i2 >> 2] + +HEAPF32[i2 + 8 >> 2], +HEAPF32[i2 + 12 >> 2]) * +HEAPF32[i2 + 4 >> 2];
   break;
  }
 default:
  d1 = 0.0;
 } while (0);
 return +d1;
}

function _Respawn_HighestSolidY(i7) {
 i7 = i7 | 0;
 var d1 = 0.0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i20 + 16 | 0;
 i16 = i20;
 i9 = _Math_Floor(+HEAPF32[i7 >> 2]) | 0;
 i11 = _Math_Floor(+HEAPF32[i7 + 12 >> 2]) | 0;
 i2 = _Math_Floor(+HEAPF32[i7 + 4 >> 2]) | 0;
 i12 = _Math_Floor(+HEAPF32[i7 + 16 >> 2]) | 0;
 i13 = _Math_Floor(+HEAPF32[i7 + 8 >> 2]) | 0;
 i10 = _Math_Floor(+HEAPF32[i7 + 20 >> 2]) | 0;
 if ((i2 | 0) > (i12 | 0)) d1 = -1.0e5; else {
  i17 = i16 + 4 | 0;
  i14 = (i13 | 0) > (i10 | 0);
  i19 = i16 + 8 | 0;
  i15 = (i9 | 0) > (i11 | 0);
  i6 = i8 + 12 | 0;
  i18 = i8 + 16 | 0;
  d1 = -1.0e5;
  while (1) {
   HEAPF32[i17 >> 2] = +(i2 | 0);
   if (!i14) {
    i5 = i13;
    while (1) {
     HEAPF32[i19 >> 2] = +(i5 | 0);
     if (!i15) {
      d3 = d1;
      i4 = i9;
      while (1) {
       HEAPF32[i16 >> 2] = +(i4 | 0);
       i21 = (_World_SafeGetBlock(i4, i2, i5) | 0) & 65535;
       _Vec3_Add_2641(i8, i16, 1010980 + (i21 * 12 | 0) | 0);
       _Vec3_Add_2641(i6, i16, 1020196 + (i21 * 12 | 0) | 0);
       if ((HEAP8[1000996 + i21 >> 0] | 0) == 2) if (!((_AABB_Intersects(i7, i8) | 0) << 24 >> 24)) d1 = d3; else {
        d1 = +HEAPF32[i18 >> 2];
        if (!(d1 > d3)) d1 = d3;
       } else d1 = d3;
       if ((i4 | 0) < (i11 | 0)) {
        d3 = d1;
        i4 = i4 + 1 | 0;
       } else break;
      }
     }
     if ((i5 | 0) < (i10 | 0)) i5 = i5 + 1 | 0; else break;
    }
   }
   if ((i2 | 0) < (i12 | 0)) i2 = i2 + 1 | 0; else break;
  }
 }
 STACKTOP = i20;
 return +d1;
}

function _TextGroupWidget_GetUrl(i3, i13, i2, i1) {
 i3 = i3 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 3136 | 0;
 i10 = i16 + 208 | 0;
 i12 = i16;
 i9 = i16 + 3112 | 0;
 i11 = i16 + 3104 | 0;
 i15 = i16 + 3096 | 0;
 i14 = i16 + 3088 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i8 = i1 - (HEAP16[(HEAP32[i3 + 84 >> 2] | 0) + (i2 * 28 | 0) + 4 >> 1] | 0) | 0;
 HEAP8[i9 + 12 >> 0] = 1;
 _TextGroupWidget_UNSAFE_Get(i11, i3, i2);
 L1 : do if (!(HEAP8[1868754] | 0)) {
  i7 = _TextGroupWidget_Reduce(i3, i10, i2, i12) | 0;
  if ((i7 | 0) > 0) {
   i3 = i3 + 48 | 0;
   i4 = i9 + 8 | 0;
   i5 = 0;
   i6 = 0;
   while (1) {
    i1 = HEAP16[i12 + (i5 << 3) >> 1] | 0;
    i2 = HEAP16[i12 + (i5 << 3) + 2 >> 1] | 0;
    _String_UNSAFE_Substring(i14, i11, HEAP16[i12 + (i5 << 3) + 4 >> 1] | 0, HEAP16[i12 + (i5 << 3) + 6 >> 1] | 0);
    i19 = i14;
    i18 = HEAP32[i19 + 4 >> 2] | 0;
    i17 = i9;
    HEAP32[i17 >> 2] = HEAP32[i19 >> 2];
    HEAP32[i17 + 4 >> 2] = i18;
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    i17 = i6;
    i6 = (_Drawer2D_TextWidth(i9) | 0) + i6 | 0;
    i5 = i5 + 1 | 0;
    if ((i8 | 0) >= (i17 | 0) & i2 << 16 >> 16 < 0 & (i8 | 0) < (i6 | 0)) break;
    if ((i5 | 0) >= (i7 | 0)) {
     i1 = 0;
     break L1;
    }
   }
   i19 = i2 & 32767;
   _String_Init_2534(i15, i10 + (i1 << 16 >> 16) | 0, i19, i19);
   _TextGroupWidget_FormatUrl(i13, i15);
   i1 = 1;
  } else i1 = 0;
 } else i1 = 0; while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function _BlockModel_SpriteZQuad(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i8;
 _Atlas1D_TexRec(i7, _BlockModel_GetTex(3) | 0, 1, i8 + 16 | 0);
 i1 = HEAP32[428680] | 0;
 i2 = HEAPU16[934362] | 0;
 if (!(HEAP8[1008676 + i2 >> 0] | 0)) i2 = i1; else i2 = _PackedCol_Tint(i1, HEAP32[994852 + (i2 << 2) >> 2] | 0) | 0;
 i1 = i5 << 24 >> 24 != 0;
 do if (!(i6 << 24 >> 24)) if (i1) {
  i1 = i7 + 8 | 0;
  d3 = 0.0;
  d4 = .34375;
  break;
 } else {
  i1 = i7;
  d3 = .34375;
  d4 = 0.0;
  break;
 } else if (i1) {
  i1 = i7;
  d3 = -.34375;
  d4 = 0.0;
  break;
 } else {
  i1 = i7 + 8 | 0;
  d3 = 0.0;
  d4 = -.34375;
  break;
 } while (0);
 HEAPF32[i1 >> 2] = .5;
 i6 = HEAP32[428719] | 0;
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 i1 = i7 + 12 | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i6 >> 2] = d3;
 HEAPF32[i6 + 4 >> 2] = 0.0;
 HEAPF32[i6 + 8 >> 2] = d3;
 HEAP32[i6 + 12 >> 2] = i2;
 HEAP32[i6 + 16 >> 2] = i5;
 HEAP32[i6 + 20 >> 2] = i9;
 i9 = HEAP32[i7 + 4 >> 2] | 0;
 HEAPF32[i6 + 24 >> 2] = d3;
 HEAPF32[i6 + 28 >> 2] = 1.0;
 HEAPF32[i6 + 32 >> 2] = d3;
 HEAP32[i6 + 36 >> 2] = i2;
 HEAP32[i6 + 40 >> 2] = i5;
 HEAP32[i6 + 44 >> 2] = i9;
 i5 = HEAP32[i7 >> 2] | 0;
 HEAPF32[i6 + 48 >> 2] = d4;
 HEAPF32[i6 + 52 >> 2] = 1.0;
 HEAPF32[i6 + 56 >> 2] = d4;
 HEAP32[i6 + 60 >> 2] = i2;
 HEAP32[i6 + 64 >> 2] = i5;
 HEAP32[i6 + 68 >> 2] = i9;
 i7 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i6 + 72 >> 2] = d4;
 HEAPF32[i6 + 76 >> 2] = 0.0;
 HEAPF32[i6 + 80 >> 2] = d4;
 HEAP32[i6 + 84 >> 2] = i2;
 HEAP32[i6 + 88 >> 2] = i5;
 HEAP32[i6 + 92 >> 2] = i7;
 HEAP32[428719] = i6 + 96;
 STACKTOP = i8;
 return;
}

function _Collisions_DidSlide(i5, i1, i9, i8, i6, i7) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i10;
 d2 = +HEAPF32[i1 + 16 >> 2];
 d3 = d2 - +HEAPF32[i6 + 4 >> 2];
 if (d3 > 0.0) if (!(d3 <= +HEAPF32[i5 + 12 >> 2] + .009999999776482582)) i1 = 0; else {
  d18 = +HEAPF32[i1 >> 2];
  d16 = +HEAPF32[i1 + 12 >> 2];
  d12 = +HEAPF32[i9 >> 2] * .5;
  d15 = d16 - d12;
  d12 = d18 + d12;
  d14 = +HEAPF32[i1 + 8 >> 2];
  d11 = +HEAPF32[i1 + 20 >> 2];
  d3 = +HEAPF32[i9 + 8 >> 2] * .5;
  d13 = d11 - d3;
  d3 = d14 + d3;
  d17 = +HEAPF32[i8 >> 2];
  d15 = (d18 > d15 ? d18 : d15) + 1.0000000474974513e-03;
  HEAPF32[i4 >> 2] = d17 < d15 ? d17 : d15;
  d15 = +HEAPF32[i8 + 12 >> 2];
  d12 = (d16 < d12 ? d16 : d12) + -1.0000000474974513e-03;
  HEAPF32[i4 + 12 >> 2] = d15 > d12 ? d15 : d12;
  d12 = d2 + 1.0000000474974513e-03;
  i1 = i4 + 4 | 0;
  HEAPF32[i1 >> 2] = d12;
  HEAPF32[i4 + 16 >> 2] = d12 + +HEAPF32[i9 + 4 >> 2];
  d12 = +HEAPF32[i8 + 8 >> 2];
  d2 = (d14 > d13 ? d14 : d13) + 1.0000000474974513e-03;
  HEAPF32[i4 + 8 >> 2] = d12 < d2 ? d12 : d2;
  d2 = +HEAPF32[i8 + 20 >> 2];
  d3 = (d11 < d3 ? d11 : d3) + -1.0000000474974513e-03;
  HEAPF32[i4 + 20 >> 2] = d2 > d3 ? d2 : d3;
  if (!((_Collisions_CanSlideThrough(i4) | 0) << 24 >> 24)) i1 = 0; else {
   i8 = HEAP32[i5 >> 2] | 0;
   HEAP32[i8 + 8 >> 2] = HEAP32[i1 >> 2];
   HEAP8[i8 + 111 >> 0] = 1;
   _Collisions_ClipY(i8, i9, i6, i7);
   i1 = 1;
  }
 } else i1 = 0;
 STACKTOP = i10;
 return i1 | 0;
}

function _TabListOverlay_Layout(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = _Math_CeilDiv(HEAP32[i12 + 56 >> 2] | 0, 16) | 0;
 i10 = (i11 | 0) > 0;
 if (i10) {
  i1 = 0;
  i3 = 0;
  i2 = 0;
  do {
   i2 = (_TabListOverlay_GetColumnWidth(i12, i3) | 0) + i2 | 0;
   i9 = _TabListOverlay_GetColumnHeight(i12, i3) | 0;
   i1 = (i1 | 0) > (i9 | 0) ? i1 : i9;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i11 | 0));
 } else {
  i1 = 0;
  i2 = 0;
 }
 i8 = _Display_ScaleX_1897(480) | 0;
 i6 = _Display_ScaleX_1897(10) | 0;
 i9 = _Display_ScaleY_1898(10) | 0;
 i8 = ((i2 | 0) > (i8 | 0) ? i2 : i8) + (i6 << 1) | 0;
 i5 = (i9 << 1) + i1 | 0;
 i1 = ((HEAP32[466969] | 0) / 4 | 0) - ((i5 | 0) / 2 | 0) | 0;
 i7 = _Gui_CalcPos(1, 0, i8, HEAP32[466968] | 0) | 0;
 i3 = i12 + 36 | 0;
 HEAP32[i3 >> 2] = i7;
 i1 = _Gui_CalcPos(1, 0 - ((i1 | 0) > 0 ? i1 : 0) | 0, i5, HEAP32[466969] | 0) | 0;
 i7 = i12 + 40 | 0;
 HEAP32[i7 >> 2] = i1;
 i4 = i1 + i9 | 0;
 if (i10) {
  i2 = 0;
  i1 = (HEAP32[i3 >> 2] | 0) + i6 | 0;
  do {
   _TabListOverlay_SetColumnPos(i12, i2, i1, i4);
   i1 = (_TabListOverlay_GetColumnWidth(i12, i2) | 0) + i1 | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i11 | 0));
  i1 = HEAP32[i7 >> 2] | 0;
 }
 i11 = i12 + 64 | 0;
 i6 = HEAP32[i12 + 80 >> 2] | 0;
 i10 = i1 - (i6 + i9) | 0;
 HEAP32[i7 >> 2] = i10;
 HEAP32[i12 + 44 >> 2] = i8;
 i7 = _Display_ScaleY_1898(300) | 0;
 i8 = i6 + i5 | 0;
 HEAP32[i12 + 48 >> 2] = (i7 | 0) > (i8 | 0) ? i7 : i8;
 HEAP8[i12 + 86 >> 0] = 1;
 HEAP32[i12 + 92 >> 2] = i10 + ((i9 | 0) / 2 | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 511](i11);
 return;
}

function _NotchyGen_FillOblateSpheroid(i16, i17, i18, d1, i10) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 d1 = +d1;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d19 = 0.0, d20 = 0.0;
 d20 = +(i16 | 0);
 d19 = d20 - d1;
 i11 = _Math_Floor(d19 > 0.0 ? d19 : 0.0) | 0;
 d20 = d20 + d1;
 d19 = +(HEAP32[244736] | 0);
 i12 = _Math_Floor(d20 < d19 ? d20 : d19) | 0;
 d19 = +(i17 | 0);
 d20 = d19 - d1;
 i2 = _Math_Floor(d20 > 0.0 ? d20 : 0.0) | 0;
 d19 = d19 + d1;
 d20 = +(HEAP32[244737] | 0);
 i13 = _Math_Floor(d19 < d20 ? d19 : d20) | 0;
 d20 = +(i18 | 0);
 d19 = d20 - d1;
 i14 = _Math_Floor(d19 > 0.0 ? d19 : 0.0) | 0;
 d20 = d20 + d1;
 d19 = +(HEAP32[244738] | 0);
 i15 = _Math_Floor(d20 < d19 ? d20 : d19) | 0;
 d1 = d1 * d1;
 if ((i2 | 0) <= (i13 | 0)) {
  i8 = (i14 | 0) > (i15 | 0);
  i9 = (i11 | 0) > (i12 | 0);
  while (1) {
   i3 = i2 - i17 | 0;
   if (!i8) {
    i6 = Math_imul(i3 << 1, i3) | 0;
    i7 = i14;
    while (1) {
     i3 = i7 - i18 | 0;
     if (!i9) {
      i3 = (Math_imul(i3, i3) | 0) + i6 | 0;
      i5 = i11;
      while (1) {
       i4 = i5 - i16 | 0;
       if (d1 > +(i3 + (Math_imul(i4, i4) | 0) | 0)) {
        i4 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i7 | 0;
        i4 = (Math_imul(i4, HEAP32[244733] | 0) | 0) + i5 | 0;
        i4 = (HEAP32[422257] | 0) + i4 | 0;
        if ((HEAP8[i4 >> 0] | 0) == 1) HEAP8[i4 >> 0] = i10;
       }
       if ((i5 | 0) < (i12 | 0)) i5 = i5 + 1 | 0; else break;
      }
     }
     if ((i7 | 0) < (i15 | 0)) i7 = i7 + 1 | 0; else break;
    }
   }
   if ((i2 | 0) < (i13 | 0)) i2 = i2 + 1 | 0; else break;
  }
 }
 return;
}

function _Physics_TickRandomBlocks() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[244734] | 0;
 if ((i1 | 0) > 0) {
  i2 = HEAP32[244735] | 0;
  i10 = 0;
  do {
   i8 = i10 | 15;
   i9 = HEAP32[244737] | 0;
   i9 = (i8 | 0) < (i9 | 0) ? i8 : i9;
   if ((i2 | 0) > 0) {
    i1 = HEAP32[244733] | 0;
    i8 = 0;
    do {
     i6 = i8 | 15;
     i7 = HEAP32[244738] | 0;
     i7 = (i6 | 0) < (i7 | 0) ? i6 : i7;
     if ((i1 | 0) > 0) {
      i6 = 0;
      do {
       i3 = i6 | 15;
       i4 = HEAP32[244736] | 0;
       i5 = (Math_imul((Math_imul(i2, i10) | 0) + i8 | 0, i1) | 0) + i6 | 0;
       i4 = (Math_imul((Math_imul(i2, i9) | 0) + i7 | 0, i1) | 0) + ((i3 | 0) < (i4 | 0) ? i3 : i4) | 0;
       i3 = _Random_Range(i5, i4) | 0;
       i2 = HEAP8[(HEAP32[244730] | 0) + i3 >> 0] | 0;
       i1 = HEAP32[1653288 + ((i2 & 255) << 2) >> 2] | 0;
       if (i1 | 0) FUNCTION_TABLE_vii[i1 & 255](i3, i2 & 255);
       i3 = _Random_Range(i5, i4) | 0;
       i1 = HEAP8[(HEAP32[244730] | 0) + i3 >> 0] | 0;
       i2 = HEAP32[1653288 + ((i1 & 255) << 2) >> 2] | 0;
       if (i2 | 0) FUNCTION_TABLE_vii[i2 & 255](i3, i1 & 255);
       i3 = _Random_Range(i5, i4) | 0;
       i1 = HEAP8[(HEAP32[244730] | 0) + i3 >> 0] | 0;
       i2 = HEAP32[1653288 + ((i1 & 255) << 2) >> 2] | 0;
       if (i2 | 0) FUNCTION_TABLE_vii[i2 & 255](i3, i1 & 255);
       i6 = i6 + 16 | 0;
       i1 = HEAP32[244733] | 0;
       i2 = HEAP32[244735] | 0;
      } while ((i6 | 0) < (i1 | 0));
     }
     i8 = i8 + 16 | 0;
    } while ((i8 | 0) < (i2 | 0));
    i1 = HEAP32[244734] | 0;
   }
   i10 = i10 + 16 | 0;
  } while ((i10 | 0) < (i1 | 0));
 }
 return;
}

function _PushbackPlace(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i8 + 56 | 0;
 i5 = i8 + 32 | 0;
 i7 = i8;
 i4 = HEAP32[417347] | 0;
 i9 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 switch (HEAP8[1688969] | 0) {
 case 1:
  {
   HEAPF32[i6 >> 2] = +HEAPF32[i1 + 12 >> 2] + .5;
   break;
  }
 case 3:
  {
   HEAPF32[i6 + 8 >> 2] = +HEAPF32[i1 + 20 >> 2] + .5;
   break;
  }
 case 0:
  {
   HEAPF32[i6 >> 2] = +HEAPF32[i1 >> 2] + -.5;
   break;
  }
 case 2:
  {
   HEAPF32[i6 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + -.5;
   break;
  }
 case 5:
  {
   HEAPF32[i6 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + 1.0 + 1.0000000474974513e-03;
   break;
  }
 case 4:
  {
   HEAPF32[i6 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i4 + 96 >> 2] + -1.0000000474974513e-03;
   break;
  }
 default:
  {}
 }
 d3 = +HEAPF32[i6 >> 2];
 do if (d3 > 0.0) if (!(+HEAPF32[i6 + 4 >> 2] >= 0.0)) i1 = 0; else {
  d2 = +HEAPF32[i6 + 8 >> 2];
  if (d2 > 0.0) if (d3 < +(HEAP32[244733] | 0)) if (d2 < +(HEAP32[244735] | 0)) {
   _AABB_Make(i5, i6, i4 + 92 | 0);
   if (!(HEAP8[i4 + 494 >> 0] | 0)) if ((_Entity_TouchesAny(i5, 26) | 0) << 24 >> 24) {
    i1 = 0;
    break;
   }
   HEAP8[i7 + 28 >> 0] = 1;
   HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 255](i4, i7);
   i1 = 1;
  } else i1 = 0; else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _TableWidget_Reposition(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0;
 d14 = +Math_sqrt(+(+HEAPF32[i9 + 88 >> 2]));
 i8 = (HEAP8[1689503] | 0) != 0;
 i4 = ~~((i8 ? 48.0 : 50.0) * d14);
 i12 = _Display_ScaleX_2472(i4) | 0;
 i2 = i9 + 64 | 0;
 HEAP32[i2 >> 2] = i12;
 i4 = _Display_ScaleY_2473(i4) | 0;
 i3 = i9 + 68 | 0;
 HEAP32[i3 >> 2] = i4;
 d13 = +(_Display_ScaleX_2472(~~((i8 ? 40.0 : 50.0) * d14)) | 0);
 HEAPF32[i9 + 72 >> 2] = d13 * .699999988079071 * .5;
 HEAPF32[i9 + 76 >> 2] = (d14 * 25.0 + d13) * .699999988079071 * .5;
 i6 = i9 + 48 | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 i11 = (i11 | 0) < 8 ? i11 : 8;
 i7 = i9 + 52 | 0;
 HEAP32[i7 >> 2] = i11;
 i1 = i9 + 44 | 0;
 i10 = i9 + 12 | 0;
 i5 = i9 + 16 | 0;
 i12 = Math_imul(HEAP32[i1 >> 2] | 0, i12) | 0;
 HEAP32[i10 >> 2] = i12;
 i4 = Math_imul(i11, i4) | 0;
 HEAP32[i5 >> 2] = i4;
 _Widget_CalcPosition(i9);
 L1 : do if (!i8) do {
  if ((_Table_Y(i9) | 0) > -1) break L1;
  i12 = HEAP32[i7 >> 2] | 0;
  i4 = i12 + -1 | 0;
  HEAP32[i7 >> 2] = i4;
  if ((i12 | 0) <= 2) break L1;
  i12 = HEAP32[i3 >> 2] | 0;
  i11 = Math_imul(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i11;
  i12 = Math_imul(i4, i12) | 0;
  HEAP32[i5 >> 2] = i12;
  _Widget_CalcPosition(i9);
 } while (!i8); while (0);
 i12 = _Table_X(i9) | 0;
 i12 = (_Table_Width(i9) | 0) + i12 | 0;
 HEAP32[i9 + 1632 >> 2] = i12;
 i12 = _Table_Y(i9) | 0;
 HEAP32[i9 + 1636 >> 2] = i12;
 i12 = _Table_Height(i9) | 0;
 HEAP32[i9 + 1644 >> 2] = i12;
 HEAP32[i9 + 1672 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i9 + 1676 >> 2] = HEAP32[i7 >> 2];
 return;
}

function _NotchyGen_CreateSurfaceLayer() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 8208 | 0;
 i9 = i11 + 4100 | 0;
 i10 = i11;
 _OctaveNoise_Init(i9, 8);
 _OctaveNoise_Init(i10, 8);
 HEAP32[422258] = 33024;
 i1 = HEAP32[244735] | 0;
 if ((i1 | 0) > 0) {
  i3 = HEAP32[244733] | 0;
  i2 = 0;
  i8 = 0;
  do {
   d7 = +(i8 | 0);
   HEAPF32[422259] = d7 / +(i1 | 0);
   if ((i3 | 0) > 0) {
    i6 = HEAP32[422261] | 0;
    i1 = i3;
    i4 = 0;
    while (1) {
     i5 = i2 + 1 | 0;
     i2 = HEAP16[i6 + (i2 << 1) >> 1] | 0;
     i3 = i2 << 16 >> 16;
     L9 : do if (i2 << 16 >> 16 > -1 & (HEAP32[244734] | 0) > (i3 | 0)) {
      i2 = (Math_imul((Math_imul(HEAP32[244735] | 0, i3) | 0) + i8 | 0, i1) | 0) + i4 | 0;
      L11 : do if ((HEAP32[244737] | 0) > (i3 | 0)) {
       i1 = HEAP32[422257] | 0;
       switch (HEAP8[i1 + ((HEAP32[244739] | 0) + i2) >> 0] | 0) {
       case 0:
        break L11;
       case 9:
        break;
       default:
        break L9;
       }
       if (!(+_OctaveNoise_Calc(i10, +(i4 | 0), d7) > 12.0)) break L9;
       HEAP8[i1 + i2 >> 0] = 13;
       break L9;
      } while (0);
      if ((HEAP32[422264] | 0) < (i3 | 0)) i1 = 2; else if (+_OctaveNoise_Calc(i9, +(i4 | 0), d7) > 8.0) i1 = 12; else i1 = 2;
      HEAP8[(HEAP32[422257] | 0) + i2 >> 0] = i1;
     } while (0);
     i4 = i4 + 1 | 0;
     i1 = HEAP32[244733] | 0;
     if ((i4 | 0) >= (i1 | 0)) {
      i3 = i1;
      i2 = i5;
      break;
     } else i2 = i5;
    }
   }
   i8 = i8 + 1 | 0;
   i1 = HEAP32[244735] | 0;
  } while ((i8 | 0) < (i1 | 0));
 }
 STACKTOP = i11;
 return;
}

function _NotchyGen_CarveOreVeins(d16, i1, i17) {
 d16 = +d16;
 i1 = i1 | 0;
 i17 = i17 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, i18 = 0, d19 = 0.0;
 i18 = ~~(+(HEAP32[244732] | 0) * d16 * .00006103515625);
 HEAP32[422258] = i1;
 if ((i18 | 0) > 0) {
  d10 = +(i18 | 0);
  i14 = 0;
  do {
   HEAPF32[422259] = +(i14 | 0) / d10;
   i1 = _Random_Next(978288, HEAP32[244733] | 0) | 0;
   i5 = _Random_Next(978288, HEAP32[244734] | 0) | 0;
   i7 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
   d3 = +_Random_Float(978288);
   i9 = ~~(d3 * +_Random_Float(978288) * 75.0 * d16);
   d3 = +_Random_Float(978288);
   d2 = +_Random_Float(978288);
   if ((i9 | 0) > 0) {
    d11 = +(i9 | 0);
    d12 = 0.0;
    d13 = 0.0;
    i15 = 0;
    d8 = d2 * 2.0 * 3.1415927410125732;
    d6 = d3 * 2.0 * 3.1415927410125732;
    d4 = +(i1 | 0);
    d3 = +(i5 | 0);
    d2 = +(i7 | 0);
    do {
     d19 = +_Math_SinF(d6);
     d4 = d4 + d19 * +_Math_CosF(d8);
     d19 = +_Math_CosF(d6);
     d2 = d2 + d19 * +_Math_CosF(d8);
     d3 = d3 + +_Math_SinF(d8);
     d6 = d13 * .20000000298023224;
     d19 = d13 * .8999999761581421 + +_Random_Float(978288);
     d13 = d19 - +_Random_Float(978288);
     d8 = d8 * .5 + d12 * .25;
     d19 = d12 * .8999999761581421 + +_Random_Float(978288);
     d12 = d19 - +_Random_Float(978288);
     _NotchyGen_FillOblateSpheroid(~~d4, ~~d3, ~~d2, +_Math_SinF(+(i15 | 0) * 3.1415927410125732 / d11) * d16 + 1.0, i17);
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) != (i9 | 0));
   }
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != (i18 | 0));
 }
 return;
}

function _CPE_BulkBlockUpdate(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 1536 | 0;
 i9 = i10 + 512 | 0;
 i8 = i10;
 i6 = HEAPU8[i3 >> 0] | 0;
 i1 = i6 << 2;
 i2 = i1 + 5 | 0;
 i7 = i6 + 1 | 0;
 i4 = i3 + 1 | 0;
 i5 = 0;
 while (1) {
  i11 = _Stream_GetU32_BE(i4) | 0;
  HEAP32[i9 + (i5 << 2) >> 2] = i11;
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i7 | 0)) break; else i4 = i4 + 4 | 0;
 }
 i1 = i3 + i2 + (i1 ^ 1020) | 0;
 i2 = 0;
 do {
  HEAP16[i8 + (i2 << 1) >> 1] = HEAPU8[i1 + i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i7 | 0));
 i1 = i1 + 256 | 0;
 if (HEAP8[21301] | 0) {
  i2 = 0;
  do {
   i5 = HEAPU8[i1 + (2 ? i2 >>> 2 : i2) >> 0] | 0;
   i11 = i8 + (i2 << 1) | 0;
   HEAP16[i11 >> 1] = i5 << 8 & 768 | HEAPU16[i11 >> 1];
   i11 = i8 + ((i2 | 1) << 1) | 0;
   HEAP16[i11 >> 1] = i5 << 6 & 768 | HEAPU16[i11 >> 1];
   i11 = i8 + ((i2 | 2) << 1) | 0;
   HEAP16[i11 >> 1] = i5 << 4 & 768 | HEAPU16[i11 >> 1];
   i11 = i8 + ((i2 | 3) << 1) | 0;
   HEAP16[i11 >> 1] = i5 << 2 & 768 | HEAPU16[i11 >> 1];
   i2 = i2 + 4 | 0;
  } while (i2 >>> 0 <= i6 >>> 0);
 }
 i2 = 0;
 do {
  i1 = HEAP32[i9 + (i2 << 2) >> 2] | 0;
  if ((i1 | 0) > -1 & (i1 | 0) < (HEAP32[244732] | 0)) {
   i5 = HEAP32[244733] | 0;
   i4 = (i1 | 0) / (i5 | 0) | 0;
   i5 = i1 - (Math_imul(i4, i5) | 0) | 0;
   i11 = HEAP32[244735] | 0;
   i6 = (i4 | 0) / (i11 | 0) | 0;
   i11 = i4 - (Math_imul(i6, i11) | 0) | 0;
   _Game_UpdateBlock(i5, i6, i11, (HEAPU16[i8 + (i2 << 1) >> 1] | 0) % 768 | 0);
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i7 | 0));
 STACKTOP = i10;
 return;
}

function _Collisions_CanSlideThrough(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i17 + 52 | 0;
 i8 = i17 + 40 | 0;
 i10 = i17 + 16 | 0;
 i11 = i17;
 _IVec3_Floor(i9, i7);
 _IVec3_Floor(i8, i7 + 12 | 0);
 i2 = HEAP32[i9 + 4 >> 2] | 0;
 i12 = i8 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 L1 : do if ((i2 | 0) > (i1 | 0)) i1 = 1; else {
  i13 = i11 + 4 | 0;
  i15 = i9 + 8 | 0;
  i16 = i8 + 8 | 0;
  i14 = i11 + 8 | 0;
  i6 = i10 + 12 | 0;
  i3 = HEAP32[i16 >> 2] | 0;
  while (1) {
   HEAPF32[i13 >> 2] = +(i2 | 0);
   i4 = HEAP32[i15 >> 2] | 0;
   if ((i4 | 0) <= (i3 | 0)) {
    i1 = HEAP32[i8 >> 2] | 0;
    i5 = i4;
    while (1) {
     HEAPF32[i14 >> 2] = +(i5 | 0);
     i4 = HEAP32[i9 >> 2] | 0;
     if ((i4 | 0) <= (i1 | 0)) {
      while (1) {
       HEAPF32[i11 >> 2] = +(i4 | 0);
       i1 = (_World_GetPhysicsBlock(i4, i2, i5) | 0) & 65535;
       _Vec3_Add_328(i10, i11, 1010980 + (i1 * 12 | 0) | 0);
       _Vec3_Add_328(i6, i11, 1020196 + (i1 * 12 | 0) | 0);
       if ((_AABB_Intersects(i10, i7) | 0) << 24 >> 24) if ((HEAP8[1000996 + i1 >> 0] | 0) == 2) {
        i1 = 0;
        break L1;
       }
       i1 = HEAP32[i8 >> 2] | 0;
       if ((i4 | 0) < (i1 | 0)) i4 = i4 + 1 | 0; else break;
      }
      i3 = HEAP32[i16 >> 2] | 0;
     }
     if ((i5 | 0) < (i3 | 0)) i5 = i5 + 1 | 0; else break;
    }
    i1 = HEAP32[i12 >> 2] | 0;
   }
   if ((i2 | 0) < (i1 | 0)) i2 = i2 + 1 | 0; else {
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i17;
 return i1 | 0;
}

function _IsometricDrawer_Flat(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i4 + 16 | 0;
 i2 = i4;
 i1 = i1 & 65535;
 _Atlas1D_TexRec(i2, HEAP16[1047844 + ((i1 * 6 | 0) + 3 << 1) >> 1] | 0, 1, i6);
 i6 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[424240] | 0;
 HEAP32[424240] = i5 + 4;
 HEAP32[i5 >> 2] = i6;
 if (!(HEAP8[1008676 + i1 >> 0] | 0)) i1 = -1; else i1 = _PackedCol_Tint(-1, HEAP32[994852 + (i1 << 2) >> 2] | 0) | 0;
 d3 = +(_Math_Ceil(((HEAP8[1868754] | 0) == 0 ? .8799999952316284 : .699999988079071) * d3) | 0);
 d9 = +HEAPF32[424244];
 d8 = d9 - d3;
 d9 = d9 + d3;
 d12 = +HEAPF32[424245];
 d11 = d12 - d3;
 d3 = d12 + d3;
 i6 = HEAP32[424238] | 0;
 HEAPF32[i6 >> 2] = d8;
 HEAPF32[i6 + 4 >> 2] = d11;
 HEAPF32[i6 + 8 >> 2] = 0.0;
 HEAP32[i6 + 12 >> 2] = i1;
 i7 = HEAP32[i2 >> 2] | 0;
 HEAP32[i6 + 16 >> 2] = i7;
 i10 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i6 + 20 >> 2] = i10;
 HEAPF32[i6 + 24 >> 2] = d9;
 HEAPF32[i6 + 28 >> 2] = d11;
 HEAPF32[i6 + 32 >> 2] = 0.0;
 HEAP32[i6 + 36 >> 2] = i1;
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i6 + 40 >> 2] = i5;
 HEAP32[i6 + 44 >> 2] = i10;
 HEAPF32[i6 + 48 >> 2] = d9;
 HEAPF32[i6 + 52 >> 2] = d3;
 HEAPF32[i6 + 56 >> 2] = 0.0;
 HEAP32[i6 + 60 >> 2] = i1;
 HEAP32[i6 + 64 >> 2] = i5;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 HEAP32[i6 + 68 >> 2] = i5;
 HEAPF32[i6 + 72 >> 2] = d8;
 HEAPF32[i6 + 76 >> 2] = d3;
 HEAPF32[i6 + 80 >> 2] = 0.0;
 HEAP32[i6 + 84 >> 2] = i1;
 HEAP32[i6 + 88 >> 2] = i7;
 HEAP32[i6 + 92 >> 2] = i5;
 HEAP32[424238] = i6 + 96;
 STACKTOP = i4;
 return;
}

function _SetBrightness(i5, i11, i12, i13, i4, i7) {
 i5 = i5 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = 4 ? i11 >> 4 : i11;
 i9 = 4 ? i12 >> 4 : i12;
 i10 = 4 ? i13 >> 4 : i13;
 i2 = (Math_imul(HEAP32[244752] | 0, i9) | 0) + i10 | 0;
 i2 = (Math_imul(i2, HEAP32[244750] | 0) | 0) + i8 | 0;
 i6 = i12 << 8 & 3840 | i11 & 15 | i13 << 4 & 240;
 i3 = (HEAP32[422189] | 0) + (i2 << 2) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i1 = _Mem_TryAllocCleared(4096, 1) | 0;
  i2 = (HEAP32[422189] | 0) + (i2 << 2) | 0;
  HEAP32[i2 >> 2] = i1;
 } else i2 = i3;
 i3 = i4 << 24 >> 24 == 0 ? 0 : 4;
 i4 = i1 + i6 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 HEAP8[i4 >> 0] = (15 << i3 ^ 255) & (i1 & 255);
 i4 = (HEAP32[i2 >> 2] | 0) + i6 | 0;
 HEAP8[i4 >> 0] = (i5 & 255) << i3 | HEAPU8[i4 >> 0];
 L4 : do if (i7 << 24 >> 24) if (i1 << 24 >> 24 != (HEAP8[(HEAP32[i2 >> 2] | 0) + i6 >> 0] | 0)) {
  switch (i11 & 15) {
  case 15:
   {
    _MapRenderer_RefreshChunk(i8 + 1 | 0, i9, i10);
    break;
   }
  case 0:
   {
    _MapRenderer_RefreshChunk(i8 + -1 | 0, i9, i10);
    break;
   }
  default:
   {}
  }
  switch (i12 & 15) {
  case 15:
   {
    _MapRenderer_RefreshChunk(i8, i9 + 1 | 0, i10);
    break;
   }
  case 0:
   {
    _MapRenderer_RefreshChunk(i8, i9 + -1 | 0, i10);
    break;
   }
  default:
   {}
  }
  switch (i13 & 15) {
  case 15:
   {
    _MapRenderer_RefreshChunk(i8, i9, i10 + 1 | 0);
    break L4;
   }
  case 0:
   {
    _MapRenderer_RefreshChunk(i8, i9, i10 + -1 | 0);
    break L4;
   }
  default:
   break L4;
  }
 } while (0);
 return;
}

function _ChatScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 324 | 0;
 _ChatInputWidget_Create(i2);
 HEAP32[i1 + 384 >> 2] = 404;
 _SpecialInputWidget_Create(i1 + 1292 | 0, i1 + 60 | 0, i2);
 _TextGroupWidget_Create(i1 + 924 | 0, 5, i1 + 2812 | 0, 190);
 _TextGroupWidget_Create(i1 + 1016 | 0, 3, i1 + 2952 | 0, 191);
 _TextGroupWidget_Create(i1 + 1108 | 0, HEAP32[422374] | 0, i1 + 3092 | 0, 192);
 _TextGroupWidget_Create(i1 + 1200 | 0, 2, i1 + 3036 | 0, 193);
 _TextWidget_Init(i1 + 108 | 0);
 _TextWidget_Init(i1 + 180 | 0);
 _TextWidget_Init(i1 + 252 | 0);
 HEAP8[i1 + 976 >> 0] = 1;
 HEAP8[i1 + 977 >> 0] = 1;
 HEAP8[i1 + 1252 >> 0] = 1;
 HEAP8[i1 + 1253 >> 0] = 1;
 HEAP8[i1 + 1190 >> 0] = (HEAP8[1868754] | 0) == 0 & 1;
 HEAP32[i1 + 44 >> 2] = (HEAP32[414212] | 0) - (HEAP32[422374] | 0);
 _Event_Register(1681964, i1, 25);
 _Event_Register(1682484, i1, 194);
 i2 = _ChatScreen_CalcMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 i2 = i1 + 345 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 1313 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 945 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 1037 | 0;
 i3 = HEAP8[i2 >> 0] | 4;
 i4 = i1 + 1129 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 4;
 i4 = i1 + 1221 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 4;
 HEAP8[i2 >> 0] = i3;
 i2 = i1 + 129 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 201 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 273 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 _ButtonWidget_Init(i1 + 2560 | 0, 100, 0);
 _ButtonWidget_Init(i1 + 2644 | 0, 100, 0);
 _ButtonWidget_Init(i1 + 2728 | 0, 100, 0);
 return;
}

function _DrawBorderZ(i2, i11, i12, i13, i10, i14) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0;
 i8 = _EnvRenderer_AxisSize() | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i11 | 0) > 0) {
  i9 = (i12 | 0) < (i13 | 0);
  d7 = +(i2 | 0);
  i6 = 0;
  do {
   i2 = i6;
   i6 = i6 + i8 | 0;
   if (i9) {
    d5 = +(((i6 | 0) > (i11 | 0) ? i11 : i6) | 0);
    d3 = +(i2 | 0);
    d4 = d5 - d3;
    i2 = i12;
    do {
     i18 = i2;
     i2 = i2 + i8 | 0;
     d17 = +(((i2 | 0) > (i13 | 0) ? i13 : i2) | 0);
     d16 = +(i18 | 0);
     d15 = d17 - d16;
     HEAPF32[i1 >> 2] = d3;
     HEAPF32[i1 + 4 >> 2] = d16;
     HEAPF32[i1 + 8 >> 2] = d7;
     HEAP32[i1 + 12 >> 2] = i10;
     HEAPF32[i1 + 16 >> 2] = 0.0;
     HEAPF32[i1 + 20 >> 2] = d15;
     HEAPF32[i1 + 24 >> 2] = d3;
     HEAPF32[i1 + 28 >> 2] = d17;
     HEAPF32[i1 + 32 >> 2] = d7;
     HEAP32[i1 + 36 >> 2] = i10;
     HEAPF32[i1 + 40 >> 2] = 0.0;
     HEAPF32[i1 + 44 >> 2] = 0.0;
     HEAPF32[i1 + 48 >> 2] = d5;
     HEAPF32[i1 + 52 >> 2] = d17;
     HEAPF32[i1 + 56 >> 2] = d7;
     HEAP32[i1 + 60 >> 2] = i10;
     HEAPF32[i1 + 64 >> 2] = d4;
     HEAPF32[i1 + 68 >> 2] = 0.0;
     HEAPF32[i1 + 72 >> 2] = d5;
     HEAPF32[i1 + 76 >> 2] = d16;
     HEAPF32[i1 + 80 >> 2] = d7;
     HEAP32[i1 + 84 >> 2] = i10;
     HEAPF32[i1 + 88 >> 2] = d4;
     HEAPF32[i1 + 92 >> 2] = d15;
     i1 = i1 + 96 | 0;
    } while ((i2 | 0) < (i13 | 0));
   }
  } while ((i6 | 0) < (i11 | 0));
 }
 HEAP32[i14 >> 2] = i1;
 return;
}

function _DrawBorderX(i2, i13, i11, i12, i10, i14) {
 i2 = i2 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0;
 i8 = _EnvRenderer_AxisSize() | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i13 | 0) > 0) {
  i9 = (i11 | 0) < (i12 | 0);
  d7 = +(i2 | 0);
  i6 = 0;
  do {
   i2 = i6;
   i6 = i6 + i8 | 0;
   if (i9) {
    d5 = +(((i6 | 0) > (i13 | 0) ? i13 : i6) | 0);
    d3 = +(i2 | 0);
    d4 = d5 - d3;
    i2 = i11;
    do {
     i18 = i2;
     i2 = i2 + i8 | 0;
     d17 = +(((i2 | 0) > (i12 | 0) ? i12 : i2) | 0);
     d16 = +(i18 | 0);
     d15 = d17 - d16;
     HEAPF32[i1 >> 2] = d7;
     HEAPF32[i1 + 4 >> 2] = d16;
     HEAPF32[i1 + 8 >> 2] = d3;
     HEAP32[i1 + 12 >> 2] = i10;
     HEAPF32[i1 + 16 >> 2] = 0.0;
     HEAPF32[i1 + 20 >> 2] = d15;
     HEAPF32[i1 + 24 >> 2] = d7;
     HEAPF32[i1 + 28 >> 2] = d17;
     HEAPF32[i1 + 32 >> 2] = d3;
     HEAP32[i1 + 36 >> 2] = i10;
     HEAPF32[i1 + 40 >> 2] = 0.0;
     HEAPF32[i1 + 44 >> 2] = 0.0;
     HEAPF32[i1 + 48 >> 2] = d7;
     HEAPF32[i1 + 52 >> 2] = d17;
     HEAPF32[i1 + 56 >> 2] = d5;
     HEAP32[i1 + 60 >> 2] = i10;
     HEAPF32[i1 + 64 >> 2] = d4;
     HEAPF32[i1 + 68 >> 2] = 0.0;
     HEAPF32[i1 + 72 >> 2] = d7;
     HEAPF32[i1 + 76 >> 2] = d16;
     HEAPF32[i1 + 80 >> 2] = d5;
     HEAP32[i1 + 84 >> 2] = i10;
     HEAPF32[i1 + 88 >> 2] = d4;
     HEAPF32[i1 + 92 >> 2] = d15;
     i1 = i1 + 96 | 0;
    } while ((i2 | 0) < (i12 | 0));
   }
  } while ((i6 | 0) < (i13 | 0));
 }
 HEAP32[i14 >> 2] = i1;
 return;
}

function _CPE_SetEntityProperty(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i7;
 i5 = HEAP8[i1 >> 0] | 0;
 i4 = HEAP8[i1 + 1 >> 0] | 0;
 i1 = _Stream_GetU32_BE(i1 + 2 | 0) | 0;
 i5 = HEAP32[1668360 + ((i5 & 255) << 2) >> 2] | 0;
 L1 : do if (i5 | 0) {
  switch (i4 << 24 >> 24) {
  case 0:
   {
    HEAP8[i3 + 28 >> 0] = -120;
    HEAPF32[i3 + 20 >> 2] = +(i1 | 0);
    break;
   }
  case 1:
   {
    HEAP8[i3 + 28 >> 0] = -124;
    HEAPF32[i3 + 16 >> 2] = +(i1 | 0);
    break;
   }
  case 2:
   {
    HEAP8[i3 + 28 >> 0] = -112;
    HEAPF32[i3 + 24 >> 2] = +(i1 | 0);
    break;
   }
  case 5:
  case 4:
  case 3:
   {
    d2 = +(i1 | 0) / 1.0e3;
    if (HEAP8[i5 + 54 >> 0] & 1) {
     d2 = d2 < .009999999776482582 ? .009999999776482582 : d2;
     d8 = +HEAPF32[(HEAP32[i5 + 48 >> 2] | 0) + 56 >> 2];
     d2 = d2 > d8 ? d8 : d2;
    }
    switch (i4 << 24 >> 24) {
    case 3:
     {
      i1 = i5 + 80 | 0;
      i6 = 12;
      break;
     }
    case 4:
     {
      i1 = i5 + 84 | 0;
      i6 = 12;
      break;
     }
    case 5:
     {
      i1 = i5 + 88 | 0;
      i6 = 12;
      break;
     }
    default:
     {}
    }
    if ((i6 | 0) == 12) HEAPF32[i1 >> 2] = d2;
    _Entity_UpdateModelBounds(i5);
    break L1;
   }
  case 6:
   {
    d8 = +(i1 | 0) / 1.0e3;
    d8 = d8 < -1024.0 ? -1024.0 : d8;
    HEAPF32[i5 + 420 >> 2] = d8 > 1024.0 ? 1024.0 : d8;
    break L1;
   }
  default:
   break L1;
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 255](i5, i3);
 } while (0);
 STACKTOP = i7;
 return;
}

function _NotchyGen_FloodFill(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32784 | 0;
 i9 = i10 + 32772 | 0;
 i2 = i10;
 i8 = i10 + 32768 | 0;
 HEAP32[i8 >> 2] = 8192;
 HEAP32[i9 >> 2] = i2;
 if ((i1 | 0) >= 0) {
  HEAP32[i2 >> 2] = i1;
  i1 = 1;
  while (1) {
   i3 = i1 + -1 | 0;
   i6 = HEAP32[i2 + (i3 << 2) >> 2] | 0;
   i2 = (HEAP32[422257] | 0) + i6 | 0;
   if (!(HEAP8[i2 >> 0] | 0)) {
    HEAP8[i2 >> 0] = i7;
    i2 = HEAP32[244733] | 0;
    i4 = (i6 | 0) / (i2 | 0) | 0;
    i2 = i6 - (Math_imul(i4, i2) | 0) | 0;
    i5 = (i6 | 0) / (HEAP32[244739] | 0) | 0;
    i4 = (i4 | 0) % (HEAP32[244735] | 0) | 0;
    if ((i1 | 0) > ((HEAP32[i8 >> 2] | 0) + -6 | 0)) _Utils_Resize(i9, i8, 4, 8192, 8192);
    if ((i2 | 0) > 0) HEAP32[(HEAP32[i9 >> 2] | 0) + (i3 << 2) >> 2] = i6 + -1; else i1 = i3;
    if ((i2 | 0) < (HEAP32[244736] | 0)) {
     HEAP32[(HEAP32[i9 >> 2] | 0) + (i1 << 2) >> 2] = i6 + 1;
     i1 = i1 + 1 | 0;
    }
    if ((i4 | 0) > 0) {
     HEAP32[(HEAP32[i9 >> 2] | 0) + (i1 << 2) >> 2] = i6 - (HEAP32[244733] | 0);
     i1 = i1 + 1 | 0;
    }
    if ((i4 | 0) < (HEAP32[244738] | 0)) {
     HEAP32[(HEAP32[i9 >> 2] | 0) + (i1 << 2) >> 2] = (HEAP32[244733] | 0) + i6;
     i1 = i1 + 1 | 0;
    }
    if ((i5 | 0) > 0) {
     HEAP32[(HEAP32[i9 >> 2] | 0) + (i1 << 2) >> 2] = i6 - (HEAP32[244739] | 0);
     i1 = i1 + 1 | 0;
    }
   } else i1 = i3;
   if (!i1) break;
   i2 = HEAP32[i9 >> 2] | 0;
  }
  if ((HEAP32[i8 >> 2] | 0) > 8192) _Mem_Free(HEAP32[i9 >> 2] | 0);
 }
 STACKTOP = i10;
 return;
}

function _NotchyGen_PlantFlowers() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 if ((HEAPU8[1688989] | 0) >= 29) {
  i13 = Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0;
  i8 = (i13 | 0) / 3e3 | 0;
  HEAP32[422258] = 33007;
  if ((i13 | 0) > 2999) {
   d6 = +(i8 | 0);
   i11 = 0;
   do {
    HEAPF32[422259] = +(i11 | 0) / d6;
    i7 = (_Random_Next(978288, 2) | 0) + 37 & 255;
    i4 = _Random_Next(978288, HEAP32[244733] | 0) | 0;
    i5 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
    i12 = 0;
    do {
     i9 = i4;
     i10 = i5;
     i13 = 0;
     do {
      i3 = _Random_Next(978288, 6) | 0;
      i9 = i3 - (_Random_Next(978288, 6) | 0) + i9 | 0;
      i3 = _Random_Next(978288, 6) | 0;
      i10 = i3 - (_Random_Next(978288, 6) | 0) + i10 | 0;
      if ((_World_ContainsXZ_640(i9, i10) | 0) << 24 >> 24) {
       i1 = HEAP32[244733] | 0;
       i3 = (HEAP32[422261] | 0) + ((Math_imul(i1, i10) | 0) + i9 << 1) | 0;
       i3 = HEAP16[i3 >> 1] | 0;
       i2 = (i3 << 16 >> 16) + 1 | 0;
       if (i3 << 16 >> 16 > -1 & (i2 | 0) < (HEAP32[244734] | 0)) {
        i2 = (Math_imul((Math_imul(HEAP32[244735] | 0, i2) | 0) + i10 | 0, i1) | 0) + i9 | 0;
        i1 = HEAP32[422257] | 0;
        i3 = i1 + i2 | 0;
        if (!(HEAP8[i3 >> 0] | 0)) if ((HEAP8[i1 + (i2 - (HEAP32[244739] | 0)) >> 0] | 0) == 2) HEAP8[i3 >> 0] = i7;
       }
      }
      i13 = i13 + 1 | 0;
     } while ((i13 | 0) != 5);
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != 10);
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i8 | 0));
  }
 }
 return;
}

function _PerspectiveCamera_CalcViewBobbing(i2, d1, d5) {
 i2 = i2 | 0;
 d1 = +d1;
 d5 = +d5;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i7 + 64 | 0;
 i4 = i7;
 if (!(HEAP8[1868759] | 0)) {
  i2 = 1656560;
  i3 = 22728;
  i4 = i2 + 64 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  d1 = 0.0;
  i6 = 4;
 } else {
  d9 = +_Math_Lerp(+HEAPF32[i2 + 156 >> 2], +HEAPF32[i2 + 160 >> 2], d1);
  i14 = i2 + 132 | 0;
  d10 = +_Math_CosF(+HEAPF32[i14 >> 2]);
  i13 = i2 + 136 | 0;
  d10 = d10 * +HEAPF32[i13 >> 2] * .15625;
  d8 = +Math_abs(+(+_Math_SinF(+HEAPF32[i14 >> 2])));
  d8 = d8 * +HEAPF32[i13 >> 2] * .15625;
  d12 = +_Math_CosF(+HEAPF32[i14 >> 2]);
  d12 = d12 * +HEAPF32[i13 >> 2] * 2.6179938577115536e-03;
  d11 = +_Math_SinF(+HEAPF32[i14 >> 2]);
  d11 = d11 * +HEAPF32[i13 >> 2] * 2.6179938577115536e-03;
  _Matrix_RotateZ(1656560, -(d9 * d12));
  _Matrix_RotateX(i3, d9 * (+Math_abs(+d11) * 3.0));
  _Matrix_Mul(1656560, 1656560, i3);
  HEAPF32[414157] = d9 * (d10 * .30000001192092896);
  HEAPF32[414156] = d9 * (d8 * .6000000238418579);
  d8 = +_Math_Lerp(+HEAPF32[i2 + 640 >> 2], +HEAPF32[i2 + 644 >> 2], d1);
  d1 = d8 * ((+_Math_Lerp(+HEAPF32[i2 + 440 >> 2], +HEAPF32[i2 + 40 >> 2], d1) + .07999999821186066) * -.05000000074505806) / d5;
  _Matrix_RotateX(i4, d1);
  _Matrix_Mul(1656560, 1656560, i4);
  if (!(HEAP8[1868754] | 0)) i6 = 4;
 }
 if ((i6 | 0) == 4) HEAPF32[414166] = d1;
 STACKTOP = i7;
 return;
}

function _DrawName(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i5 = i8 + 88 | 0;
 i3 = i8 + 24 | 0;
 i6 = i8 + 8 | 0;
 i7 = i8;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 63](i4) | 0) << 24 >> 24) if ((HEAP16[i4 + 328 >> 1] | 0) != -3e4) {
  i2 = i4 + 324 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _MakeNameTexture(i4);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  _Gfx_BindTexture(i1);
  if (!(HEAP32[418840] | 0)) {
   i2 = _Gfx_CreateDynamicVb(1, 4) | 0;
   HEAP32[418840] = i2;
  }
  i1 = HEAP32[i4 + 48 >> 2] | 0;
  _Model_GetEntityTransform(i1, i4, i3);
  _Vec3_TransformY(i6, +FUNCTION_TABLE_di[HEAP32[i1 + 20 >> 2] & 31](i4), i3);
  d9 = +HEAPF32[i4 + 84 >> 2];
  d9 = d9 > 1.0 ? .014285714365541935 : d9 / 70.0;
  HEAPF32[i7 >> 2] = d9 * +(HEAPU16[i4 + 332 >> 1] | 0);
  i1 = i7 + 4 | 0;
  HEAPF32[i1 >> 2] = d9 * +(HEAPU16[i4 + 334 >> 1] | 0);
  if ((HEAP8[1669384] | 0) == 4) if (HEAP8[(HEAP32[417347] | 0) + 478 >> 0] | 0) {
   _Matrix_Mul(i5, 1689084, 1689148);
   d9 = (+HEAPF32[i5 + 60 >> 2] + (+HEAPF32[i6 >> 2] * +HEAPF32[i5 + 12 >> 2] + +HEAPF32[i6 + 4 >> 2] * +HEAPF32[i5 + 28 >> 2] + +HEAPF32[i6 + 8 >> 2] * +HEAPF32[i5 + 44 >> 2])) * .20000000298023224;
   HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] * d9;
   HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] * d9;
  }
  _Gfx_SetVertexFormat(1);
  _Particle_DoRender(i7, i6, i4 + 336 | 0, -1, _Gfx_LockDynamicVb(HEAP32[418840] | 0, 1, 4) | 0);
  _Gfx_UnlockDynamicVb(HEAP32[418840] | 0);
  _Gfx_DrawVb_IndexedTris(4);
 }
 STACKTOP = i8;
 return;
}

function _TouchScreen_InitButtons(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i5 = HEAP32[417347] | 0;
 i6 = _GetOnscreenHAligns() | 0;
 i7 = _GetOnscreenButtons() | 0;
 i10 = i9 + 16 | 0;
 i1 = 0;
 do {
  HEAP32[(HEAP32[i10 >> 2] | 0) + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 15);
 i4 = 0;
 i1 = 0;
 do {
  i2 = 1 << i4;
  if (i2 & i7) {
   HEAP8[9456 + (i4 << 4) + 5 >> 0] = (i2 & i6 | 0) == 0 ? 2 : 0;
   i3 = i9 + 100 + (i1 * 84 | 0) | 0;
   _ButtonWidget_Init(i3, 100, HEAP32[9456 + (i4 << 4) + 8 >> 2] | 0);
   i2 = HEAP32[9456 + (i4 << 4) + 12 >> 2] | 0;
   if (i2 | 0) _Widget_SetDisabled(i3, (HEAP8[i2 >> 0] | 0) == 0 & 1);
   HEAP32[i9 + 100 + (i1 * 84 | 0) + 36 >> 2] = 9456 + (i4 << 4);
   HEAP32[i9 + 100 + (i1 * 84 | 0) + 68 >> 2] = -922746881;
   HEAP32[(HEAP32[i10 >> 2] | 0) + (i1 << 2) >> 2] = i3;
   i1 = i1 + 1 | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 13);
 HEAP32[i9 + 36 >> 2] = i1;
 if (!(HEAP8[i5 + 495 >> 0] | 0)) if (!(HEAP8[i5 + 494 >> 0] | 0)) {
  i3 = i9 + 40 | 0;
  HEAP32[i3 >> 2] = 1;
  i2 = 9664;
 } else i8 = 11; else i8 = 11;
 if ((i8 | 0) == 11) {
  i3 = i9 + 40 | 0;
  HEAP32[i3 >> 2] = 2;
  i2 = 9680;
 }
 i1 = 0;
 do {
  i8 = i9 + 1192 + (i1 * 84 | 0) | 0;
  HEAP32[(HEAP32[i10 >> 2] | 0) + (i1 + 13 << 2) >> 2] = i8;
  _ButtonWidget_Init(i8, 60, HEAP32[i2 + (i1 << 4) + 8 >> 2] | 0);
  HEAP32[i9 + 1192 + (i1 * 84 | 0) + 68 >> 2] = -922746881;
  HEAP32[i9 + 1192 + (i1 * 84 | 0) + 36 >> 2] = i2 + (i1 << 4);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (HEAP32[i3 >> 2] | 0));
 return;
}

function _OnInputDown(i1, i6, i2, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0;
 if (!(HEAP32[467164] | 0)) i3 = 3; else if (!((_KeyBindsScreen_TriggerBinding(i6, i5) | 0) << 24 >> 24)) i3 = 3;
 L3 : do if ((i3 | 0) == 3) {
  if ((_InputHandler_IsShutdown(i6) | 0) << 24 >> 24) {
   _Window_RequestClose();
   break;
  }
  i1 = i2 << 24 >> 24 != 0;
  if (!(i1 | (_InputBind_Claims(19, i6, i5) | 0) << 24 >> 24 == 0)) {
   HEAP8[1868750] = 1;
   break;
  }
  i4 = i1 ^ 1;
  if (i1) i2 = 0; else {
   i3 = 0;
   i2 = 0;
   do {
    if ((_InputBind_Claims(i3, i6, i5) | 0) << 24 >> 24) {
     i1 = 357264 + i3 | 0;
     HEAP8[i1 >> 0] = HEAP32[i5 >> 2] | HEAPU8[i1 >> 0];
     i1 = HEAP32[357328 + (i3 << 2) >> 2] | 0;
     if (i1) i2 = FUNCTION_TABLE_iii[i1 & 127](i6, i5) | 0 | i2;
    }
    i3 = i3 + 1 | 0;
   } while (i3 >>> 0 < 50 & i4);
  }
  if ((HEAP32[422372] | 0) > 0) {
   i1 = 0;
   do {
    i3 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
    HEAP8[i3 + 7 >> 0] = 1;
    i1 = i1 + 1 | 0;
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i3, i6, i5) | 0) break L3;
   } while ((i1 | 0) < (HEAP32[422372] | 0));
  }
  if (!(HEAP32[422387] | 0)) {
   if ((HEAP32[i5 + 40 >> 2] | 0) != (i6 | 0)) if ((HEAP32[i5 + 44 >> 2] | 0) != (i6 | 0)) {
    if (!(i2 << 24 >> 24 == 0 & i4)) break;
    if ((i6 | 0) != 5 | (HEAP8[1868754] | 0) == 0) {
     _HandleHotkeyDown(i6);
     break;
    } else {
     _Env_SetWeather((HEAP32[466934] | 0) == 0 & 1);
     break;
    }
   }
   HEAP8[1868785] = 1;
   _Gui_ShowPauseMenu();
  }
 } while (0);
 return;
}

function _Commands_Execute(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i3 = i9 + 408 | 0;
 i7 = i9 + 424 | 0;
 i8 = i9 + 416 | 0;
 i6 = i9;
 i4 = i9 + 400 | 0;
 if (!(_String_CaselessStarts(i1, 14240) | 0)) if (!(_String_CaselessEquals(i1, 14248) | 0)) if (!(HEAP8[1841572] | 0)) i1 = 0; else if (!(_String_CaselessStarts(i1, 14248) | 0)) if (!(HEAP8[1841572] | 0)) i1 = 0; else if (!(HEAP16[i1 + 4 >> 1] | 0)) i1 = 0; else if ((HEAP8[HEAP32[i1 >> 2] >> 0] | 0) == 47) {
  i2 = 1;
  i5 = 8;
 } else i1 = 0; else {
  i2 = 7;
  i5 = 8;
 } else {
  i2 = 7;
  i5 = 8;
 } else {
  i2 = 8;
  i5 = 8;
 }
 do if ((i5 | 0) == 8) {
  _String_UNSAFE_SubstringAt(i4, i1, i2);
  i2 = i4;
  i5 = HEAP32[i2 + 4 >> 2] | 0;
  i4 = i3;
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i4 + 4 >> 2] = i5;
  if (0 == 0 & (i5 & 65535 | 0) == 0) {
   _Commands_PrintDefault();
   i1 = 1;
   break;
  }
  _String_UNSAFE_Separate(i3, 32, i7, i8) | 0;
  i1 = _Commands_FindMatch(i7) | 0;
  if (!i1) i1 = 1; else {
   i2 = HEAPU8[i1 + 8 >> 0] | 0;
   if (!((HEAP8[1841572] | 0) != 0 | (i2 & 1 | 0) == 0)) {
    _Chat_Add1(30126, i7);
    i1 = 1;
    break;
   }
   if (!(i2 & 2)) {
    i7 = _String_UNSAFE_Split(i8, 32, i6, 50) | 0;
    FUNCTION_TABLE_vii[HEAP32[i1 + 4 >> 2] & 255](i6, (HEAP16[i8 + 4 >> 1] | 0) == 0 ? 0 : i7);
    i1 = 1;
    break;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i1 + 4 >> 2] & 255](i8, (HEAP16[i8 + 4 >> 1] | 0) != 0 & 1);
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _ChatScreen_KeyDown(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if ((HEAP8[353254] | 0) == 95 & (HEAP8[1689501] | 0) != 0) i1 = (HEAP8[i4 + 4 >> 0] | 0) != 0; else i1 = 0;
 do if (i1 | (_InputBind_Claims(11, i3, i2) | 0) << 24 >> 24 == 0) {
  HEAP8[i4 + 40 >> 0] = 0;
  if (!(HEAP8[i4 + 4 >> 0] | 0)) {
   if ((_InputBind_Claims(7, i3, i2) | 0) << 24 >> 24) {
    _ChatScreen_OpenInput(1841616);
    i1 = 1;
    break;
   }
   if ((i3 | 0) == 30) {
    _ChatScreen_OpenInput(21904);
    i1 = 1;
    break;
   }
   if (!((_InputBind_Claims(8, i3, i2) | 0) << 24 >> 24)) {
    i1 = 0;
    break;
   }
   _InventoryScreen_Show();
   i1 = 1;
   break;
  }
  L16 : do if ((i3 | 0) == 116 | (_InputBind_Claims(10, i3, i2) | 0) << 24 >> 24 != 0) _ChatScreen_EnterChatInput(i4, 0); else {
   if ((HEAP32[i2 + 52 >> 2] | 0) == (i3 | 0)) {
    _ChatScreen_ScrollChatBy(i4, 0 - (HEAP32[422374] | 0) | 0);
    break;
   }
   if ((HEAP32[i2 + 56 >> 2] | 0) == (i3 | 0)) {
    _ChatScreen_ScrollChatBy(i4, HEAP32[422374] | 0);
    break;
   }
   switch (i3 | 0) {
   case 122:
    {
     _ChatScreen_ScrollChatBy(i4, -1);
     break L16;
    }
   case 123:
    {
     _ChatScreen_ScrollChatBy(i4, 1);
     break L16;
    }
   default:
    {
     i4 = i4 + 324 | 0;
     FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 63](i4, i3, i2) | 0;
     break L16;
    }
   }
  } while (0);
  i1 = (i3 + -1 | 0) >>> 0 > 23 & 1;
 } else if (!((HEAP8[1841572] | HEAP8[1868802]) << 24 >> 24)) {
  _TabListOverlay_Show(0);
  i1 = 1;
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _CPE_DefineEffect(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0;
 i2 = HEAPU8[i1 >> 0] | 0;
 HEAPF32[833696 + (i2 * 52 | 0) >> 2] = +(HEAPU8[i1 + 1 >> 0] | 0) * .00390625;
 HEAPF32[833696 + (i2 * 52 | 0) + 4 >> 2] = +(HEAPU8[i1 + 2 >> 0] | 0) * .00390625;
 HEAPF32[833696 + (i2 * 52 | 0) + 8 >> 2] = +((HEAPU8[i1 + 3 >> 0] | 0) + 1 | 0) * .00390625;
 HEAPF32[833696 + (i2 * 52 | 0) + 12 >> 2] = +((HEAPU8[i1 + 4 >> 0] | 0) + 1 | 0) * .00390625;
 HEAP32[833696 + (i2 * 52 | 0) + 16 >> 2] = (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0) | (HEAPU8[i1 + 7 >> 0] | 0) << 16 | -16777216;
 HEAP8[833696 + (i2 * 52 | 0) + 20 >> 0] = HEAP8[i1 + 8 >> 0] | 0;
 HEAP8[833696 + (i2 * 52 | 0) + 21 >> 0] = HEAP8[i1 + 9 >> 0] | 0;
 HEAPF32[833696 + (i2 * 52 | 0) + 24 >> 2] = +(HEAPU8[i1 + 10 >> 0] | 0) * .03125;
 d3 = +(_Stream_GetU32_BE(i1 + 11 | 0) | 0) / 1.0e4;
 HEAPF32[833696 + (i2 * 52 | 0) + 28 >> 2] = d3;
 d3 = +((_Stream_GetU16_BE(i1 + 15 | 0) | 0) & 65535) * .03125;
 HEAPF32[833696 + (i2 * 52 | 0) + 32 >> 2] = d3;
 d3 = +(_Stream_GetU32_BE(i1 + 17 | 0) | 0) / 1.0e4;
 HEAPF32[833696 + (i2 * 52 | 0) + 36 >> 2] = d3;
 d3 = +(_Stream_GetU32_BE(i1 + 21 | 0) | 0) / 1.0e4;
 HEAPF32[833696 + (i2 * 52 | 0) + 40 >> 2] = d3;
 d3 = +(_Stream_GetU32_BE(i1 + 25 | 0) | 0) / 1.0e4;
 HEAPF32[833696 + (i2 * 52 | 0) + 44 >> 2] = d3;
 d3 = +(_Stream_GetU32_BE(i1 + 29 | 0) | 0) / 1.0e4;
 HEAPF32[833696 + (i2 * 52 | 0) + 48 >> 2] = d3;
 HEAP8[833696 + (i2 * 52 | 0) + 22 >> 0] = HEAP8[i1 + 33 >> 0] | 0;
 HEAP8[833696 + (i2 * 52 | 0) + 23 >> 0] = HEAP8[i1 + 34 >> 0] | 0;
 return;
}

function _Animations_Validate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i10 + 4 | 0;
 i8 = i10;
 HEAP8[1868726] = 1;
 i1 = HEAP32[247113] | 0;
 if ((i1 | 0) > 0) {
  i2 = 0;
  do {
   i3 = HEAP16[53504 + (i2 << 4) + 2 >> 1] | 0;
   i6 = HEAPU16[53504 + (i2 << 4) + 6 >> 1] | 0;
   i4 = HEAP16[53504 + (i2 << 4) + 10 >> 1] | 0;
   i5 = HEAP16[53504 + (i2 << 4) + 4 >> 1] | 0;
   i11 = HEAP16[53504 + (i2 << 4) >> 1] | 0;
   HEAP32[i7 >> 2] = i11 & 15;
   i11 = i11 & 65535;
   i11 = 4 ? i11 >>> 4 : i11;
   HEAP32[i8 >> 2] = i11;
   if ((HEAP32[460927] | 0) >= (i6 | 0) & (i11 | 0) < (HEAP32[460928] | 0)) {
    i11 = (Math_imul(i4 & 65535, i6) | 0) + (i3 & 65535) | 0;
    if ((i11 | 0) > (HEAP32[247111] | 0) ? 1 : ((i5 & 65535) + i6 | 0) > (HEAP32[247112] | 0)) {
     _Chat_Add2(24520, i7, i8);
     i9 = 7;
    }
   } else {
    _Chat_Add2(24433, i7, i8);
    i9 = 7;
   }
   if ((i9 | 0) == 7) {
    i9 = 0;
    i1 = (HEAP32[247113] | 0) + -1 | 0;
    if ((i2 | 0) < (i1 | 0)) {
     i3 = i2;
     do {
      i11 = 53504 + (i3 << 4) | 0;
      i3 = i3 + 1 | 0;
      i6 = 53504 + (i3 << 4) | 0;
      HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i11 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i11 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
      HEAP32[i11 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     } while ((i3 | 0) < (i1 | 0));
    }
    HEAP32[247113] = i1;
    i2 = i2 + -1 | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 STACKTOP = i10;
 return;
}

function _TabListOverlay_BuildMesh(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 28 | 0;
 i10 = i15;
 i1 = _Gui_GetInputGrab() | 0;
 i14 = i2 + 12 | 0;
 i12 = i2 + 56 | 0;
 i3 = _Gfx_LockDynamicVb(HEAP32[i14 >> 2] | 0, 1, (HEAP32[i12 >> 2] << 2) + 4 | 0) | 0;
 HEAP32[i13 >> 2] = i3;
 i3 = i2 + 64 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3, i13);
 i3 = HEAP32[i12 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i11 = i2 + 1176 | 0;
  i9 = (i1 | 0) == 0;
  i5 = i2 + 152 | 0;
  i7 = i10 + 4 | 0;
  i8 = i10 + 6 | 0;
  i6 = i10 + 8 | 0;
  i4 = i10 + 10 | 0;
  i1 = i3;
  i3 = 0;
  do {
   i2 = i11 + (i3 * 28 | 0) | 0;
   if (HEAP32[i2 >> 2] | 0) {
    HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i10 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    HEAP32[i10 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
    HEAP32[i10 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
    if (!i9) if ((HEAP16[i5 + (i3 << 1) >> 1] | 0) != -1) if (_Gui_ContainsPointers(HEAP16[i7 >> 1] | 0, HEAP16[i8 >> 1] | 0, HEAPU16[i6 >> 1] | 0, HEAPU16[i4 >> 1] | 0) | 0) HEAP16[i7 >> 1] = (HEAPU16[i7 >> 1] | 0) + 4;
    _Gfx_Make2DQuad(i10, -1, i13);
    i1 = HEAP32[i12 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 _Gfx_UnlockDynamicVb(HEAP32[i14 >> 2] | 0);
 STACKTOP = i15;
 return;
}

function _NotchyGen_PlantMushrooms() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if ((HEAPU8[1688989] | 0) >= 29) {
  i14 = HEAP32[244732] | 0;
  i9 = (i14 | 0) / 2e3 | 0;
  HEAP32[422258] = 32988;
  if ((i14 | 0) > 1999) {
   d7 = +(i9 | 0);
   i10 = 0;
   do {
    HEAPF32[422259] = +(i10 | 0) / d7;
    i8 = (_Random_Next(978288, 2) | 0) + 39 & 255;
    i5 = _Random_Next(978288, HEAP32[244733] | 0) | 0;
    i6 = _Random_Next(978288, HEAP32[244734] | 0) | 0;
    i4 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
    i11 = 0;
    do {
     i12 = 0;
     i13 = i5;
     i14 = i4;
     do {
      i3 = _Random_Next(978288, 6) | 0;
      i13 = i3 - (_Random_Next(978288, 6) | 0) + i13 | 0;
      i3 = _Random_Next(978288, 6) | 0;
      i14 = i3 - (_Random_Next(978288, 6) | 0) + i14 | 0;
      if ((_World_ContainsXZ_640(i13, i14) | 0) << 24 >> 24) {
       i1 = HEAP32[244733] | 0;
       i3 = (HEAP32[422261] | 0) + ((Math_imul(i1, i14) | 0) + i13 << 1) | 0;
       if ((i6 | 0) < ((HEAP16[i3 >> 1] | 0) + -1 | 0)) {
        i2 = (Math_imul((Math_imul(HEAP32[244735] | 0, i6) | 0) + i14 | 0, i1) | 0) + i13 | 0;
        i1 = HEAP32[422257] | 0;
        i3 = i1 + i2 | 0;
        if (!(HEAP8[i3 >> 0] | 0)) if ((HEAP8[i1 + (i2 - (HEAP32[244739] | 0)) >> 0] | 0) == 1) HEAP8[i3 >> 0] = i8;
       }
      }
      i12 = i12 + 1 | 0;
     } while ((i12 | 0) != 5);
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != 20);
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i9 | 0));
  }
 }
 return;
}

function _Selections_Render() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 12 | 0;
 i2 = i5;
 i1 = HEAP32[460377] | 0;
 if (i1 | 0) {
  HEAP32[i2 >> 2] = HEAP32[414158];
  HEAP32[i2 + 4 >> 2] = HEAP32[414159];
  HEAP32[i2 + 8 >> 2] = HEAP32[414160];
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    _CalcDists(946096 + (i4 * 36 | 0) | 0, i3);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i1 | 0));
  }
  _Selections_QuickSort(0, i1 + -1 | 0);
  if (!(HEAP32[460378] | 0)) _AllocateVertexBuffers();
  i4 = (HEAP32[460377] | 0) * 24 | 0;
  _Gfx_SetVertexFormat(0);
  i1 = _Gfx_LockDynamicVb(HEAP32[460379] | 0, 0, i4) | 0;
  i3 = HEAP32[460377] | 0;
  if ((i3 | 0) > 0) {
   i2 = 0;
   while (1) {
    _BuildEdges(946096 + (i2 * 36 | 0) | 0, i1);
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (i3 | 0)) break; else i1 = i1 + 384 | 0;
   }
  }
  _Gfx_UnlockDynamicVb(HEAP32[460379] | 0);
  _Gfx_DrawVb_Lines(i4);
  i1 = _Gfx_LockDynamicVb(HEAP32[460378] | 0, 0, i4) | 0;
  i3 = HEAP32[460377] | 0;
  if ((i3 | 0) > 0) {
   i2 = 0;
   while (1) {
    _BuildFaces(946096 + (i2 * 36 | 0) | 0, i1);
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (i3 | 0)) break; else i1 = i1 + 384 | 0;
   }
  }
  _Gfx_UnlockDynamicVb(HEAP32[460378] | 0);
  _Gfx_SetDepthWrite(0);
  _Gfx_SetAlphaBlending(1);
  _Gfx_DrawVb_IndexedTris(i4);
  _Gfx_SetDepthWrite(1);
  _Gfx_SetAlphaBlending(0);
 }
 STACKTOP = i5;
 return;
}

function _LoadOptions_866() {
 var i1 = 0, i2 = 0, d3 = 0.0;
 i1 = (HEAP8[1868754] | 0) == 0 ? 12 : 10;
 HEAP32[422384] = i1;
 i1 = _Options_GetInt(41257, 0, 30, i1) | 0;
 HEAP32[422374] = i1;
 if (!(HEAP8[1868754] | 0)) {
  i2 = (_Options_GetBool(41226, (HEAP8[1868784] | 0) == 0 & 1) | 0) << 24 >> 24 != 0 & 1;
  i1 = HEAP8[1868754] | 0;
  HEAP8[1689500] = i2;
  if (!(i1 << 24 >> 24)) i1 = (_Options_GetBool(41438, 1) | 0) << 24 >> 24 != 0 & 1; else i1 = 0;
 } else {
  HEAP8[1689500] = 0;
  i1 = 0;
 }
 HEAP8[1689501] = i1;
 i2 = _Options_GetBool(42934, 1) | 0;
 HEAP8[1689492] = (HEAP8[1868754] | i2) << 24 >> 24 != 0 & 1;
 i2 = _Options_GetBool(42909, 0) | 0;
 HEAP8[1689493] = (HEAP8[1868754] | i2) << 24 >> 24 != 0 & 1;
 i2 = _Options_GetBool(42884, 0) | 0;
 HEAP8[1689494] = (HEAP8[1868754] | i2) << 24 >> 24 != 0 & 1;
 if (!((_Options_GetBool(42982, 0) | 0) << 24 >> 24)) if (!(HEAP8[1868754] | 0)) i1 = 0; else i1 = (HEAP8[1868755] | 0) == 0 & 1; else i1 = 1;
 HEAP8[1689495] = i1;
 i2 = _Options_GetBool(42955, 0) | 0;
 HEAP8[1689503] = (HEAP8[1868754] | i2) << 24 >> 24 != 0 & 1;
 i2 = _Options_GetBool(39585, 1) | 0;
 HEAP8[1689502] = i2;
 d3 = +_Options_GetFloat(41499, .25, 5.0, 1.0);
 HEAPF32[422378] = d3;
 d3 = +_Options_GetFloat(41518, .25, 5.0, 1.0);
 HEAPF32[422376] = d3;
 d3 = +_Options_GetFloat(41271, .25, 5.0, 1.0);
 HEAPF32[422377] = d3;
 d3 = +_Options_GetFloat(41480, .25, 5.0, 1.0);
 HEAPF32[422379] = d3;
 d3 = +_Options_GetFloat(51179, .25, 5.0, 1.0);
 HEAPF32[422386] = d3;
 i2 = _Options_GetBool(41285, 1) | 0;
 HEAP8[1689552] = i2;
 return;
}

function _BuildMapEdges() {
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i10;
 i8 = i10 + 64 | 0;
 if (HEAP8[978980] | 0) if (!(HEAP8[1689213] & 16)) {
  i3 = HEAPU16[933854] | 0;
  if ((HEAP8[1006372 + i3 >> 0] | 0) != 4) {
   _CalcBorderRects(i9);
   HEAP32[418865] = 0;
   i2 = 0;
   do {
    i1 = _CalcNumVertices(HEAP32[i9 + (i2 << 4) + 8 >> 2] | 0, HEAP32[i9 + (i2 << 4) + 12 >> 2] | 0) | 0;
    i1 = (HEAP32[418865] | 0) + i1 | 0;
    HEAP32[418865] = i1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 4);
   i1 = _Gfx_CreateVb(1, i1) | 0;
   HEAP32[418849] = i1;
   i1 = _Gfx_LockVb(i1, 1, HEAP32[418865] | 0) | 0;
   HEAP32[i8 >> 2] = i1;
   i1 = (HEAP8[994084 + i3 >> 0] | 0) == 0 ? HEAP32[466942] | 0 : -1;
   if (HEAP8[1008676 + i3 >> 0] | 0) i1 = _PackedCol_Tint(i1, HEAP32[994852 + (i3 << 2) >> 2] | 0) | 0;
   d4 = +(HEAP32[466928] | 0);
   i5 = 1029412 + (i3 * 12 | 0) | 0;
   i6 = 1010980 + (i3 * 12 | 0) | 0;
   i7 = 1029412 + (i3 * 12 | 0) + 4 | 0;
   i3 = 1010980 + (i3 * 12 | 0) + 4 | 0;
   i2 = 0;
   do {
    i12 = HEAP32[i9 + (i2 << 4) >> 2] | 0;
    i11 = HEAP32[i9 + (i2 << 4) + 4 >> 2] | 0;
    _DrawBorderY(i12, i11, (HEAP32[i9 + (i2 << 4) + 8 >> 2] | 0) + i12 | 0, (HEAP32[i9 + (i2 << 4) + 12 >> 2] | 0) + i11 | 0, d4, i1, +HEAPF32[i5 >> 2] - +HEAPF32[i6 >> 2], +HEAPF32[i7 >> 2] - +HEAPF32[i3 >> 2], i8);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 4);
   _Gfx_UnlockVb(HEAP32[418849] | 0);
  }
 }
 STACKTOP = i10;
 return;
}

function _Particle_DoRender(i4, i2, i3, i1, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 d7 = +HEAPF32[i4 >> 2] * .5;
 d6 = +HEAPF32[i4 + 4 >> 2] * .5;
 d14 = +HEAPF32[i2 >> 2];
 d12 = +HEAPF32[i2 + 8 >> 2];
 d13 = d6 + +HEAPF32[i2 + 4 >> 2];
 d11 = d7 * +HEAPF32[422271];
 d9 = d7 * +HEAPF32[422275];
 d7 = d7 * +HEAPF32[422279];
 d10 = d6 * +HEAPF32[422272];
 d8 = d6 * +HEAPF32[422276];
 d6 = d6 * +HEAPF32[422280];
 d17 = d14 - d11;
 HEAPF32[i5 >> 2] = d17 - d10;
 d16 = d13 - d9;
 HEAPF32[i5 + 4 >> 2] = d16 - d8;
 d15 = d12 - d7;
 HEAPF32[i5 + 8 >> 2] = d15 - d6;
 HEAP32[i5 + 12 >> 2] = i1;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 + 16 >> 2] = i2;
 i4 = HEAP32[i3 + 12 >> 2] | 0;
 HEAP32[i5 + 20 >> 2] = i4;
 HEAPF32[i5 + 24 >> 2] = d17 + d10;
 HEAPF32[i5 + 28 >> 2] = d16 + d8;
 HEAPF32[i5 + 32 >> 2] = d15 + d6;
 HEAP32[i5 + 36 >> 2] = i1;
 HEAP32[i5 + 40 >> 2] = i2;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i5 + 44 >> 2] = i2;
 d11 = d14 + d11;
 HEAPF32[i5 + 48 >> 2] = d11 + d10;
 d9 = d13 + d9;
 HEAPF32[i5 + 52 >> 2] = d9 + d8;
 d7 = d12 + d7;
 HEAPF32[i5 + 56 >> 2] = d7 + d6;
 HEAP32[i5 + 60 >> 2] = i1;
 i3 = HEAP32[i3 + 8 >> 2] | 0;
 HEAP32[i5 + 64 >> 2] = i3;
 HEAP32[i5 + 68 >> 2] = i2;
 HEAPF32[i5 + 72 >> 2] = d11 - d10;
 HEAPF32[i5 + 76 >> 2] = d9 - d8;
 HEAPF32[i5 + 80 >> 2] = d7 - d6;
 HEAP32[i5 + 84 >> 2] = i1;
 HEAP32[i5 + 88 >> 2] = i3;
 HEAP32[i5 + 92 >> 2] = i4;
 return;
}

function _Fcm_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 44880 | 0;
 i2 = i5;
 i4 = i5 + 44824 | 0;
 _Inflate_MakeStream2(i4, i5 + 80 | 0, i1);
 i1 = _Stream_Read(i1, i2, 79) | 0;
 L1 : do if (!i1) if ((_Stream_GetU32_LE(i2) | 0) == 264417088) if ((HEAP8[i2 + 4 >> 0] | 0) == 13) {
  i3 = (_Stream_GetU16_LE(i2 + 5 | 0) | 0) & 65535;
  HEAP32[244733] = i3;
  i3 = (_Stream_GetU16_LE(i2 + 7 | 0) | 0) & 65535;
  HEAP32[244734] = i3;
  i3 = (_Stream_GetU16_LE(i2 + 9 | 0) | 0) & 65535;
  HEAP32[244735] = i3;
  HEAP8[(HEAP32[422204] | 0) + 28 >> 0] = 7;
  d6 = +(_Stream_GetU32_LE(i2 + 11 | 0) | 0) * .03125;
  HEAPF32[HEAP32[422204] >> 2] = d6;
  d6 = +(_Stream_GetU32_LE(i2 + 15 | 0) | 0) * .03125;
  HEAPF32[(HEAP32[422204] | 0) + 4 >> 2] = d6;
  d6 = +(_Stream_GetU32_LE(i2 + 19 | 0) | 0) * .03125;
  i3 = HEAP32[422204] | 0;
  HEAPF32[i3 + 8 >> 2] = d6;
  HEAPF32[i3 + 16 >> 2] = +(HEAPU8[i2 + 23 >> 0] | 0) * 360.0 * .00390625;
  HEAPF32[i3 + 12 >> 2] = +(HEAPU8[i2 + 24 >> 0] | 0) * 360.0 * .00390625;
  _Mem_Copy(978960, i2 + 33 | 0, 16) | 0;
  i2 = _Stream_GetU32_LE(i2 + 75 | 0) | 0;
  if ((i2 | 0) > 0) {
   i3 = 0;
   do {
    i1 = _Fcm_ReadString(i4) | 0;
    if (i1 | 0) break L1;
    i1 = _Fcm_ReadString(i4) | 0;
    if (i1 | 0) break L1;
    i1 = _Fcm_ReadString(i4) | 0;
    i3 = i3 + 1 | 0;
    if (i1 | 0) break L1;
   } while ((i3 | 0) < (i2 | 0));
  }
  i1 = _Map_ReadBlocks(i4) | 0;
 } else i1 = -857812932; else i1 = -857812933; while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function ___mo_lookup(i12, i13, i10) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = (HEAP32[i12 >> 2] | 0) + 1794895138 | 0;
 i3 = _swapc(HEAP32[i12 + 8 >> 2] | 0, i11) | 0;
 i1 = _swapc(HEAP32[i12 + 12 >> 2] | 0, i11) | 0;
 i2 = _swapc(HEAP32[i12 + 16 >> 2] | 0, i11) | 0;
 L1 : do if (i3 >>> 0 < (2 ? i13 >>> 2 : i13) >>> 0) {
  i9 = i13 - (i3 << 2) | 0;
  if (i1 >>> 0 < i9 >>> 0 & i2 >>> 0 < i9 >>> 0) if (!((i2 | i1) & 3)) {
   i9 = 2 ? i1 >>> 2 : i1;
   i8 = 2 ? i2 >>> 2 : i2;
   i7 = 0;
   while (1) {
    i6 = 1 ? i3 >>> 1 : i3;
    i5 = i7 + i6 | 0;
    i4 = i5 << 1;
    i2 = i4 + i9 | 0;
    i1 = _swapc(HEAP32[i12 + (i2 << 2) >> 2] | 0, i11) | 0;
    i2 = _swapc(HEAP32[i12 + (i2 + 1 << 2) >> 2] | 0, i11) | 0;
    if (!(i2 >>> 0 < i13 >>> 0 & i1 >>> 0 < (i13 - i2 | 0) >>> 0)) {
     i1 = 0;
     break L1;
    }
    if (HEAP8[i12 + (i2 + i1) >> 0] | 0) {
     i1 = 0;
     break L1;
    }
    i1 = _strcmp(i10, i12 + i2 | 0) | 0;
    if (!i1) break;
    i1 = (i1 | 0) < 0;
    if ((i3 | 0) == 1) {
     i1 = 0;
     break L1;
    }
    i7 = i1 ? i7 : i5;
    i3 = i1 ? i6 : i3 - i6 | 0;
   }
   i1 = i4 + i8 | 0;
   i2 = _swapc(HEAP32[i12 + (i1 << 2) >> 2] | 0, i11) | 0;
   i1 = _swapc(HEAP32[i12 + (i1 + 1 << 2) >> 2] | 0, i11) | 0;
   if (i1 >>> 0 < i13 >>> 0 & i2 >>> 0 < (i13 - i1 | 0) >>> 0) i1 = (HEAP8[i12 + (i1 + i2) >> 0] | 0) == 0 ? i12 + i1 | 0 : 0; else i1 = 0;
  } else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _ClassicLighting_RefreshAffected(i10, i11, i12, i6, i2, i1) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0;
 i7 = 4 ? i10 >> 4 : i10;
 i3 = i10 & 15;
 i8 = 4 ? i11 >> 4 : i11;
 i4 = i11 & 15;
 i9 = 4 ? i12 >> 4 : i12;
 i5 = i12 & 15;
 i13 = (i1 | 0) < 0 ? 0 : 4 ? i1 >> 4 : i1;
 i2 = (i2 | 0) < 0 ? 0 : 4 ? i2 >> 4 : i2;
 i1 = (i2 | 0) < (i13 | 0) ? i2 : i13;
 i2 = (i2 | 0) > (i13 | 0) ? i2 : i13;
 _ClassicLighting_ResetColumn(i7, i8, i9, i1, i2);
 if ((i10 | 0) > 15 & (i3 | 0) == 0) _ClassicLighting_ResetNeighbour(i10 + -1 | 0, i11, i12, i6, i7 + -1 | 0, i8, i9, i1, i2);
 if ((i11 | 0) > 15 & (i4 | 0) == 0) if ((_ClassicLighting_Needs(i6, _World_GetBlock_1151(i10, i11 + -1 | 0, i12) | 0) | 0) << 24 >> 24) _MapRenderer_RefreshChunk(i7, i8 + -1 | 0, i9);
 if ((i12 | 0) > 15 & (i5 | 0) == 0) _ClassicLighting_ResetNeighbour(i10, i11, i12 + -1 | 0, i6, i7, i8, i9 + -1 | 0, i1, i2);
 if ((i3 | 0) == 15) if ((i7 | 0) < ((HEAP32[244750] | 0) + -1 | 0)) _ClassicLighting_ResetNeighbour(i10 + 1 | 0, i11, i12, i6, i7 + 1 | 0, i8, i9, i1, i2);
 if ((i4 | 0) == 15) if ((i8 | 0) < ((HEAP32[244751] | 0) + -1 | 0)) if ((_ClassicLighting_Needs(i6, _World_GetBlock_1151(i10, i11 + 1 | 0, i12) | 0) | 0) << 24 >> 24) _MapRenderer_RefreshChunk(i7, i8 + 1 | 0, i9);
 if ((i5 | 0) == 15) if ((i9 | 0) < ((HEAP32[244752] | 0) + -1 | 0)) _ClassicLighting_ResetNeighbour(i10, i11, i12 + 1 | 0, i6, i7, i8, i9 + 1 | 0, i1, i2);
 return;
}

function _BoxDesc_BuildRotatedBox(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0;
 i1 = HEAPU8[i2 + 5 >> 0] | 0;
 i16 = HEAPU8[i2 + 4 >> 0] | 0;
 d8 = +HEAPF32[i2 + 8 >> 2];
 d12 = +HEAPF32[i2 + 12 >> 2];
 d9 = +HEAPF32[i2 + 16 >> 2];
 d15 = +HEAPF32[i2 + 20 >> 2];
 d11 = +HEAPF32[i2 + 24 >> 2];
 d10 = +HEAPF32[i2 + 28 >> 2];
 i14 = HEAPU16[i2 >> 1] | 0;
 i17 = HEAPU16[i2 + 2 >> 1] | 0;
 i6 = HEAP32[428691] | 0;
 i13 = i14 + i1 | 0;
 i7 = i13 + i16 | 0;
 i3 = i7 + i1 | 0;
 i1 = i17 + i1 | 0;
 i4 = i1 + (HEAPU8[i2 + 6 >> 0] | 0) | 0;
 _BoxDesc_YQuad2(i6, d8, d15, d9, d10, d11, i3, i1, i3 + i16 | 0, i4);
 _BoxDesc_YQuad2(i6, d15, d8, d9, d10, d12, i13, i1, i7, i4);
 _BoxDesc_ZQuad2(i6, d15, d8, d12, d11, d9, i13, i17, i7, i1);
 _BoxDesc_ZQuad2(i6, d8, d15, d11, d12, d10, i7, i17, i7 + i16 | 0, i1);
 _BoxDesc_XQuad2(i6, d11, d12, d10, d9, d15, i14, i1, i13, i4);
 _BoxDesc_XQuad2(i6, d12, d11, d10, d9, d8, i7, i1, i3, i4);
 i4 = i6 + 36 | 0;
 i6 = i6 + 4 | 0;
 i3 = (HEAP32[i4 >> 2] | 0) + -8 | 0;
 do {
  i1 = HEAP32[i6 >> 2] | 0;
  i16 = i1 + (i3 << 4) + 4 | 0;
  i17 = HEAP32[i16 >> 2] | 0;
  i1 = i1 + (i3 << 4) + 8 | 0;
  HEAP32[i16 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i17;
  i3 = i3 + 1 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
 } while ((i3 | 0) < (i1 | 0));
 _ModelPart_Init(i5, i1 + -24 | 0, 24, +HEAPF32[i2 + 32 >> 2], +HEAPF32[i2 + 36 >> 2], +HEAPF32[i2 + 40 >> 2]);
 return;
}

function _LocalPlayer_HandleSetSpawn(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 L1 : do if (!(HEAP32[422387] | 0)) {
  if (HEAP8[146288 + (i1 * 796 | 0) + 475 >> 0] | 0) {
   do if (!(HEAP8[146288 + (i1 * 796 | 0) + 476 >> 0] | 0)) if (!(HEAP8[146288 + (i1 * 796 | 0) + 111 >> 0] | 0)) {
    _Chat_AddRaw(30539);
    i1 = 0;
    break L1;
   } else {
    i4 = 146288 + (i1 * 796 | 0) + 424 | 0;
    i5 = 146288 + (i1 * 796 | 0) + 352 | 0;
    HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    break;
   } else {
    d6 = +(_Math_Floor(+HEAPF32[146288 + (i1 * 796 | 0) + 4 >> 2]) | 0) + .5;
    HEAPF32[146288 + (i1 * 796 | 0) + 424 >> 2] = d6;
    HEAP32[146288 + (i1 * 796 | 0) + 428 >> 2] = HEAP32[146288 + (i1 * 796 | 0) + 8 >> 2];
    d6 = +(_Math_Floor(+HEAPF32[146288 + (i1 * 796 | 0) + 12 >> 2]) | 0) + .5;
    HEAPF32[146288 + (i1 * 796 | 0) + 432 >> 2] = d6;
   } while (0);
   HEAP32[146288 + (i1 * 796 | 0) + 448 >> 2] = HEAP32[146288 + (i1 * 796 | 0) + 20 >> 2];
   if (!(HEAP8[1868754] | 0)) HEAP32[146288 + (i1 * 796 | 0) + 452 >> 2] = HEAP32[146288 + (i1 * 796 | 0) + 16 >> 2];
   _CPE_SendNotifyPositionAction(4, ~~+HEAPF32[146288 + (i1 * 796 | 0) + 424 >> 2], ~~+HEAPF32[146288 + (i1 * 796 | 0) + 428 >> 2], ~~+HEAPF32[146288 + (i1 * 796 | 0) + 432 >> 2]);
  }
  i1 = _LocalPlayer_HandleRespawn(i3, i2) | 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _FallbackFont_DrawText(i1, i11, i4, i3, i2) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15;
 i14 = i15 + 8 | 0;
 i12 = i15 + 16 | 0;
 i10 = i1;
 i6 = HEAP32[i10 + 4 >> 2] | 0;
 i8 = i13;
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 + 4 >> 2] = i6;
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAPU16[i8 + 4 >> 1] | 0;
 i10 = 3 ? i6 >>> 3 : i6;
 HEAP8[i12 >> 0] = 102;
 i9 = i2 << 24 >> 24 != 0;
 i1 = i9 ? i10 : 0;
 i6 = i1 + i3 + (((HEAP32[i8 + 8 >> 2] | 0) - i6 | 0) / 2 | 0) | 0;
 if ((_Drawer2D_UNSAFE_NextPart(i13, i14, i12) | 0) << 24 >> 24) {
  i7 = i14 + 4 | 0;
  i8 = i10 << 1;
  i1 = i1 + i4 | 0;
  do {
   i2 = HEAP32[1667324 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0;
   if (i9) i2 = _GetShadowColor_2173(i2) | 0;
   i3 = HEAP16[i7 >> 1] | 0;
   if (i3 << 16 >> 16) {
    i5 = 0;
    do {
     i4 = HEAP8[(HEAP32[i14 >> 2] | 0) + i5 >> 0] | 0;
     if (i4 << 24 >> 24 == 32) i4 = i8; else {
      i4 = (i4 + -33 & 255) < 94 ? 7904 + ((i4 & 255) + -33 << 3) | 0 : 49548;
      _Fallback_DrawCell(i11, i1, i6, i10, i4, i2);
      i4 = Math_imul(_Fallback_CellWidth(i4) | 0, i10) | 0;
      i3 = HEAP16[i7 >> 1] | 0;
     }
     i1 = i4 + i1 | 0;
     i5 = i5 + 1 | 0;
    } while (i5 >>> 0 < (i3 & 65535) >>> 0);
   }
  } while ((_Drawer2D_UNSAFE_NextPart(i13, i14, i12) | 0) << 24 >> 24 != 0);
 }
 STACKTOP = i15;
 return;
}

function _TextInputWidget_RemakeTexture(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i10 + 80 | 0;
 i6 = i10 + 64 | 0;
 i8 = i10 + 88 | 0;
 _DrawTextArgs_Make(i6, i9 + 64 | 0, HEAP32[i9 + 40 >> 2] | 0, 0);
 i7 = _Drawer2D_TextWidth(i6) | 0;
 i1 = HEAP32[i9 + 108 >> 2] | 0;
 HEAPF32[i9 + 200 >> 2] = 0.0;
 HEAP32[i4 >> 2] = i10;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 i2 = i9 + 212 | 0;
 FUNCTION_TABLE_vii[HEAP32[HEAP32[i2 >> 2] >> 2] & 255](i2, i4);
 i2 = HEAP32[i9 + 204 >> 2] | 0;
 i2 = (i7 | 0) > (i2 | 0) ? i7 : i2;
 HEAP32[i9 + 12 >> 2] = i2;
 i5 = HEAP32[i9 + 208 >> 2] | 0;
 i3 = (i1 | 0) > (i5 | 0) ? i1 : i5;
 HEAP32[i9 + 16 >> 2] = i3;
 _Context2D_Alloc(i8, i2, i3);
 if ((i1 | 0) < (i5 | 0)) i5 = ((i3 | 0) / 2 | 0) - ((i1 | 0) / 2 | 0) | 0; else i5 = 0;
 HEAP32[i9 + 164 >> 2] = i5 + 2;
 _Context2D_Clear(i8, -937550306, 0, 0, i2, i3);
 _Context2D_DrawText(i8, i6, HEAPU8[i9 + 145 >> 0] | 0, i5);
 i3 = i4;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = i6;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 i1 = i2 - (_Drawer2D_TextWidth(i6) | 0) | 0;
 if ((i7 + 3 | 0) < (i1 | 0)) _Context2D_DrawText(i8, i6, i1, i5);
 _Context2D_MakeTexture(i9 + 112 | 0, i8);
 _Context2D_Free(i8);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 511](i9);
 HEAP16[i9 + 116 >> 1] = HEAP32[i9 + 4 >> 2];
 HEAP16[i9 + 118 >> 1] = HEAP32[i9 + 8 >> 2];
 STACKTOP = i10;
 return;
}

function _SysFont_DrawText(i1, i8, i16, i2, i15) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i16 = i16 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 i13 = i17 + 600 | 0;
 i14 = i17 + 616 | 0;
 i10 = i17 + 631 | 0;
 i12 = i17 + 624 | 0;
 i11 = i17 + 608 | 0;
 i9 = i17;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = i1;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i5 = i13;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP8[i10 >> 0] = 102;
 i5 = HEAPU16[i6 + 4 >> 1] | 0;
 i2 = (((HEAP32[i6 + 8 >> 2] | 0) - i5 | 0) / 2 | 0) + i2 | 0;
 _interop_SetFont(HEAP32[i6 >> 2] | 0, i5 | 0, HEAPU16[i6 + 6 >> 1] | 0 | 0);
 if ((_Drawer2D_UNSAFE_NextPart(i13, i14, i10) | 0) << 24 >> 24) {
  i6 = i15 << 24 >> 24 == 0;
  i5 = i11 + 4 | 0;
  i4 = i11 + 6 | 0;
  d7 = 0.0;
  do {
   i3 = _String_EncodeUtf8(i9, i14) | 0;
   i1 = HEAP32[1667324 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0;
   if (!i6) i1 = _GetShadowColor_2173(i1) | 0;
   HEAP32[i11 >> 2] = i12;
   HEAP16[i5 >> 1] = 0;
   HEAP16[i4 >> 1] = 7;
   _String_Append(i11, 35);
   _String_AppendHex(i11, i1 & 255);
   _String_AppendHex(i11, (8 ? i1 >>> 8 : i1) & 255);
   _String_AppendHex(i11, (16 ? i1 >>> 16 : i1) & 255);
   d7 = d7 + +_interop_TextDraw(i9 | 0, i3 | 0, i8 | 0, ~~d7 + i16 | 0, i2 | 0, i15 | 0, i12 | 0);
  } while ((_Drawer2D_UNSAFE_NextPart(i13, i14, i10) | 0) << 24 >> 24 != 0);
 }
 STACKTOP = i17;
 return;
}

function _Render3DFrame(d3, d1) {
 d3 = +d3;
 d1 = +d1;
 var d2 = 0.0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 8 >> 2] & 511](1689084);
 _Gfx_LoadMVP(1689084, 1689148, i6);
 _FrustumCulling_CalcFrustumEquations(i6);
 if ((_EnvRenderer_ShouldRenderSkybox() | 0) << 24 >> 24) _EnvRenderer_RenderSkybox();
 _AxisLinesRenderer_Render();
 _Entities_RenderModels(d3, d1);
 _EntityNames_Render();
 _Particles_Render(d1);
 _EnvRenderer_RenderSky();
 _EnvRenderer_RenderClouds();
 _MapRenderer_Update(d3);
 _MapRenderer_RenderNormal(d3);
 _EnvRenderer_RenderMapSides();
 _EntityShadows_Render();
 if (!((HEAP8[1688968] | 0) == 0 | (HEAP8[1868760] | 0) != 0)) _SelOutlineRenderer_Render(1688844, 1);
 d1 = +HEAPF32[414158];
 d2 = +HEAPF32[414160];
 do if (+HEAPF32[414159] < +(HEAP32[466928] | 0)) {
  if (!(d1 < 0.0 | d2 < 0.0)) if (!(d1 > +(HEAP32[244733] | 0))) if (!(d2 > +(HEAP32[244735] | 0))) {
   i4 = 10;
   break;
  }
  _MapRenderer_RenderTranslucent(d3);
  _EnvRenderer_RenderMapEdges();
 } else i4 = 10; while (0);
 if ((i4 | 0) == 10) {
  _EnvRenderer_RenderMapEdges();
  _MapRenderer_RenderTranslucent(d3);
 }
 if (!((HEAP8[1688968] | 0) == 0 | (HEAP8[1868760] | 0) != 0)) if ((HEAP8[1006372 + (HEAPU16[844452] | 0) >> 0] | 0) == 3) _SelOutlineRenderer_Render(1688844, 0);
 _Selections_Render();
 _EntityNames_RenderHovered();
 if (!(HEAP8[1868760] | 0)) _HeldBlockRenderer_Render(d3);
 STACKTOP = i5;
 return;
}

function _Entity_ClearHat(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = i8 + 4 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 i10 = ((i2 | 0) / 64 | 0) << 5;
 i5 = (HEAP32[i8 + 8 >> 2] | 0) / ((i1 << 24 >> 24 == 0 ? 32 : 64) | 0) | 0;
 i9 = i5 << 4;
 i5 = (i5 | 0) > 0;
 L1 : do if (i5) {
  i1 = HEAP32[i8 >> 2] | 0;
  i4 = (i2 | 0) > 63;
  i7 = 0;
  do {
   i3 = i1 + ((Math_imul(i7, i2) | 0) << 2) + (i10 << 2) | 0;
   if (i4) {
    i6 = 0;
    do {
     if ((HEAP32[i3 + (i6 << 2) >> 2] | 0) >>> 0 < 4278190080) break L1;
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (i10 | 0));
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i9 | 0));
  if (i5) {
   i6 = HEAP32[i8 >> 2] | 0;
   i7 = (i2 | 0) > 63;
   i1 = 0;
   while (1) {
    i3 = i6 + ((Math_imul(i2, i1) | 0) << 2) + (i10 << 2) | 0;
    if (i7) {
     i5 = 0;
     do {
      i4 = i3 + (i5 << 2) | 0;
      i2 = HEAP32[i4 >> 2] | 0;
      if ((i2 | 0) < -1) switch (i2 | 0) {
      case -16777216:
       {
        i12 = 13;
        break;
       }
      default:
       {}
      } else switch (i2 | 0) {
      case -1:
       {
        i12 = 13;
        break;
       }
      default:
       {}
      }
      if ((i12 | 0) == 13) {
       i12 = 0;
       HEAP32[i4 >> 2] = 0;
      }
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i10 | 0));
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i9 | 0)) break L1;
    i2 = HEAP32[i11 >> 2] | 0;
   }
  }
 } while (0);
 return;
}

function _HumanModel_MakeParts() {
 _BoxDesc_BuildBox(1714888, 20364);
 _BoxDesc_BuildBox(1714904, 20408);
 _BoxDesc_BuildBox(1714920, 20452);
 _BoxDesc_BuildBox(1714936, 20496);
 _BoxDesc_BuildBox(1714952, 20540);
 _BoxDesc_BuildBox(1714968, 20584);
 _BoxDesc_BuildBox(1714984, 20628);
 _BoxDesc_BuildBox(1715e3, 20672);
 _BoxDesc_BuildBox(1715080, 20716);
 HEAP32[428774] = HEAP32[428742];
 HEAP32[428775] = HEAP32[428743];
 HEAP32[428776] = HEAP32[428744];
 HEAP32[428777] = HEAP32[428745];
 _BoxDesc_BuildBox(1715112, 20760);
 HEAP32[428782] = HEAP32[428750];
 HEAP32[428783] = HEAP32[428751];
 HEAP32[428784] = HEAP32[428752];
 HEAP32[428785] = HEAP32[428753];
 HEAP32[428802] = HEAP32[428770];
 HEAP32[428803] = HEAP32[428771];
 HEAP32[428804] = HEAP32[428772];
 HEAP32[428805] = HEAP32[428773];
 HEAP32[428806] = HEAP32[428774];
 HEAP32[428807] = HEAP32[428775];
 HEAP32[428808] = HEAP32[428776];
 HEAP32[428809] = HEAP32[428777];
 _BoxDesc_BuildBox(1715240, 20804);
 _BoxDesc_BuildBox(1715256, 20848);
 _BoxDesc_BuildBox(1715144, 20892);
 _BoxDesc_BuildBox(1715160, 20936);
 _BoxDesc_BuildBox(1715176, 20980);
 _BoxDesc_BuildBox(1715192, 21024);
 HEAP32[428818] = HEAP32[428786];
 HEAP32[428819] = HEAP32[428787];
 HEAP32[428820] = HEAP32[428788];
 HEAP32[428821] = HEAP32[428789];
 HEAP32[428822] = HEAP32[428790];
 HEAP32[428823] = HEAP32[428791];
 HEAP32[428824] = HEAP32[428792];
 HEAP32[428825] = HEAP32[428793];
 _BoxDesc_BuildBox(1715304, 21068);
 _BoxDesc_BuildBox(1715320, 21112);
 return;
}

function _ClipBlock(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i1 = i9 + 56 | 0;
 i2 = i9 + 44 | 0;
 i3 = i9 + 32 | 0;
 i5 = i9 + 20 | 0;
 i6 = i9 + 8 | 0;
 i8 = i9 + 4 | 0;
 do if (!((_Game_CanPick(HEAP16[i7 + 60 >> 1] | 0) | 0) << 24 >> 24)) i1 = 0; else {
  i4 = i7 + 12 | 0;
  i12 = i7 + 128 | 0;
  i11 = i7 + 36 | 0;
  i10 = i7 + 48 | 0;
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  if (!((_Intersection_RayIntersectsBox(i5, i3, i2, i1, i8, i9) | 0) << 24 >> 24)) i1 = 0; else {
   _Vec3_Mul1_1768(i6, i7 + 24 | 0, +HEAPF32[i8 >> 2]);
   _Vec3_Add_1765(i7 + 100 | 0, i4, i6);
   d14 = +_Vec3_LengthSquared_1770(i6);
   d13 = +HEAPF32[(HEAP32[417347] | 0) + 456 >> 2];
   if (!(d14 <= d13 * d13)) {
    _RayTracer_SetInvalid(i7);
    i1 = 1;
    break;
   } else {
    _SetAsValid(i7);
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _Model_RenderArm(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, d2 = 0.0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i1 = i9 + 156 | 0;
 i7 = i9 + 144 | 0;
 i4 = i9 + 80 | 0;
 i8 = i9 + 16 | 0;
 i6 = i9;
 i10 = i3 + 4 | 0;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 if (HEAP8[i5 + 43 >> 0] | 0) {
  i10 = i6 + 4 | 0;
  HEAPF32[i10 >> 2] = +HEAPF32[i3 + 128 >> 2] + +HEAPF32[i10 >> 2];
 }
 _Model_SetupState(i5, i3);
 _Gfx_SetVertexFormat(1);
 _Model_ApplyTexture(i3);
 d2 = +(0 - (HEAPU8[i5 + 40 >> 0] | 0) | 0) * .0625;
 if (!(HEAP8[1714762] | 0)) _Matrix_Translate(i8, d2 + .10000000149011612, +(0 - (HEAPU8[i5 + 41 >> 0] | 0) | 0) * .0625 + -.25999999046325684, 0.0); else _Matrix_Translate(i8, d2, +(0 - (HEAPU8[i5 + 41 >> 0] | 0) | 0) * .0625 + -.10000000149011612, 0.0);
 i10 = i3 + 80 | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 _Entity_GetTransform(i3, i7, i1, i4);
 _Matrix_Mul(i4, i4, 1689084);
 _Matrix_Mul(i4, i8, i4);
 _Gfx_LoadMatrix(1, i4);
 HEAP8[1714760] = 2;
 FUNCTION_TABLE_vi[HEAP32[i5 + 52 >> 2] & 511](i3);
 HEAP8[1714760] = 0;
 _Gfx_LoadMatrix(1, 1689084);
 STACKTOP = i9;
 return;
}

function _Drawer_XMax(i3, i10, i1, i14) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 var d2 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0;
 i13 = HEAP32[i14 >> 2] | 0;
 d9 = +HEAPF32[460411];
 d2 = d9 * +(HEAP32[460409] & (i1 & 65535) | 0);
 d12 = +(i3 | 0) - +HEAPF32[416820];
 d11 = (1.0 - +HEAPF32[416823]) * .9993749856948853;
 d8 = d2 + d9 * +HEAPF32[416822];
 d9 = d2 + d9 * +HEAPF32[416819] * .9993749856948853;
 i5 = HEAP32[416827] | 0;
 i6 = HEAP32[416825] | 0;
 i7 = HEAP32[416828] | 0;
 i4 = HEAP32[416826] | 0;
 d2 = +HEAPF32[416829] + +(i3 + -1 | 0);
 if (!(HEAP8[1667264] | 0)) i1 = i10; else i1 = _PackedCol_Tint(i10, HEAP32[416817] | 0) | 0;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i13 + 4 >> 2] = i7;
 HEAP32[i13 + 8 >> 2] = i4;
 HEAP32[i13 + 12 >> 2] = i1;
 HEAPF32[i13 + 16 >> 2] = d12;
 HEAPF32[i13 + 20 >> 2] = d8;
 HEAP32[i13 + 24 >> 2] = i5;
 HEAP32[i13 + 28 >> 2] = i7;
 HEAPF32[i13 + 32 >> 2] = d2;
 HEAP32[i13 + 36 >> 2] = i1;
 HEAPF32[i13 + 40 >> 2] = d11;
 HEAPF32[i13 + 44 >> 2] = d8;
 HEAP32[i13 + 48 >> 2] = i5;
 HEAP32[i13 + 52 >> 2] = i6;
 HEAPF32[i13 + 56 >> 2] = d2;
 HEAP32[i13 + 60 >> 2] = i1;
 HEAPF32[i13 + 64 >> 2] = d11;
 HEAPF32[i13 + 68 >> 2] = d9;
 HEAP32[i13 + 72 >> 2] = i5;
 HEAP32[i13 + 76 >> 2] = i6;
 HEAP32[i13 + 80 >> 2] = i4;
 HEAP32[i13 + 84 >> 2] = i1;
 HEAPF32[i13 + 88 >> 2] = d12;
 HEAPF32[i13 + 92 >> 2] = d9;
 HEAP32[i14 >> 2] = i13 + 96;
 return;
}

function _InputBind_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i10 = i14 + 96 | 0;
 i13 = i14 + 88 | 0;
 i11 = i14 + 80 | 0;
 i12 = i14 + 72 | 0;
 i7 = HEAP32[i1 + 68 >> 2] | 0;
 i8 = HEAP32[i1 + 72 >> 2] | 0;
 HEAP32[i10 >> 2] = i14;
 i9 = i10 + 4 | 0;
 HEAP16[i9 >> 1] = 0;
 HEAP16[i10 + 6 >> 1] = 64;
 i3 = i1 + 64 | 0;
 i6 = 0;
 do {
  HEAP16[i9 >> 1] = 0;
  _String_Format1(i10, HEAP32[i3 >> 2] | 0, HEAP32[5920 + (i6 << 2) >> 2] | 0);
  HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) >> 0] = 0;
  if (!((_Options_UNSAFE_Get(HEAP32[i10 >> 2] | 0, i13) | 0) << 24 >> 24)) {
   i5 = i8 + (i6 << 1) | 0;
   i4 = i7 + (i6 << 1) | 0;
   i4 = HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8;
   HEAP8[i5 >> 0] = i4;
   HEAP8[i5 + 1 >> 0] = i4 >> 8;
  } else {
   _String_UNSAFE_Separate(i13, 44, i11, i12) | 0;
   i2 = i7 + (i6 << 1) | 0;
   i4 = _Utils_ParseEnum(i11, HEAPU8[i2 >> 0] | 0, 4320, 172) | 0;
   i5 = (_Utils_ParseEnum(i12, HEAPU8[i7 + (i6 << 1) + 1 >> 0] | 0, 4320, 172) | 0) & 255;
   i1 = i8 + (i6 << 1) | 0;
   if ((i4 & 255 | 0) == 92) {
    i2 = HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8;
    HEAP8[i1 >> 0] = i2;
    HEAP8[i1 + 1 >> 0] = i2 >> 8;
   }
   HEAP8[i1 >> 0] = i4;
   HEAP8[i8 + (i6 << 1) + 1 >> 0] = i5;
  }
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 50);
 STACKTOP = i14;
 return;
}

function _Chat_AddOf(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 L1 : do if (!i2) {
  if ((HEAP32[414213] | 0) > 8388e3) {
   _ClearChatLogs();
   _Chat_AddRaw(25312);
  }
  i7 = i3;
  i5 = HEAP32[i7 + 4 >> 2] | 0;
  i6 = i1;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 + 4 >> 2] = i5;
  i5 = i5 & 65535;
  HEAP16[i1 + 4 >> 1] = i5 >>> 0 < 256 ? i5 : 256;
  HEAPF64[144672 + ((HEAP32[414212] & 31) << 3) >> 3] = +HEAPF64[122280];
  _AppendChatLog(i1);
  _StringsBuffer_Add(1656840, i1);
 } else {
  if ((i2 + -1 | 0) >>> 0 < 3) {
   _String_Copy(1456 + (i2 + 1 << 3) | 0, i3);
   break;
  }
  i1 = i2 + -11 | 0;
  if (i1 >>> 0 < 3) {
   _String_Copy(1504 + (i1 << 3) | 0, i3);
   break;
  }
  switch (i2 | 0) {
  case 100:
   {
    _String_Copy(13668, i3);
    HEAPF64[122275] = +HEAPF64[122280];
    break L1;
   }
  case 101:
   {
    _String_Copy(13676, i3);
    HEAPF64[122276] = +HEAPF64[122280];
    break L1;
   }
  case 102:
   {
    _String_Copy(13684, i3);
    HEAPF64[122277] = +HEAPF64[122280];
    break L1;
   }
  default:
   switch (i2 & -2 | 0) {
   case 256:
    {
     _String_Copy(1536 + (i2 + -256 << 3) | 0, i3);
     break L1;
    }
   case 360:
    {
     _String_Copy(1456 + (i2 + -360 << 3) | 0, i3);
     break L1;
    }
   default:
    break L1;
   }
  }
 } while (0);
 _Event_RaiseChat(1681964, i3, i2);
 STACKTOP = i4;
 return;
}

function _Drawer_ZMax(i2, i11, i1, i13) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i12 = 0, d14 = 0.0;
 i12 = HEAP32[i13 >> 2] | 0;
 d9 = +HEAPF32[460411];
 d14 = d9 * +(HEAP32[460409] & (i1 & 65535) | 0);
 i10 = HEAP32[416818] | 0;
 d7 = +(i2 + -1 | 0);
 d6 = +HEAPF32[416821] * .9993749856948853 + d7;
 d8 = d14 + d9 * +HEAPF32[416822];
 d9 = d14 + d9 * +HEAPF32[416819] * .9993749856948853;
 i4 = HEAP32[416824] | 0;
 d7 = +HEAPF32[416827] + d7;
 i5 = HEAP32[416825] | 0;
 i2 = HEAP32[416828] | 0;
 i3 = HEAP32[416829] | 0;
 if (!(HEAP8[1667264] | 0)) i1 = i11; else i1 = _PackedCol_Tint(i11, HEAP32[416817] | 0) | 0;
 HEAPF32[i12 >> 2] = d7;
 HEAP32[i12 + 4 >> 2] = i2;
 HEAP32[i12 + 8 >> 2] = i3;
 HEAP32[i12 + 12 >> 2] = i1;
 HEAPF32[i12 + 16 >> 2] = d6;
 HEAPF32[i12 + 20 >> 2] = d8;
 HEAP32[i12 + 24 >> 2] = i4;
 HEAP32[i12 + 28 >> 2] = i2;
 HEAP32[i12 + 32 >> 2] = i3;
 HEAP32[i12 + 36 >> 2] = i1;
 HEAP32[i12 + 40 >> 2] = i10;
 HEAPF32[i12 + 44 >> 2] = d8;
 HEAP32[i12 + 48 >> 2] = i4;
 HEAP32[i12 + 52 >> 2] = i5;
 HEAP32[i12 + 56 >> 2] = i3;
 HEAP32[i12 + 60 >> 2] = i1;
 HEAP32[i12 + 64 >> 2] = i10;
 HEAPF32[i12 + 68 >> 2] = d9;
 HEAPF32[i12 + 72 >> 2] = d7;
 HEAP32[i12 + 76 >> 2] = i5;
 HEAP32[i12 + 80 >> 2] = i3;
 HEAP32[i12 + 84 >> 2] = i1;
 HEAPF32[i12 + 88 >> 2] = d6;
 HEAPF32[i12 + 92 >> 2] = d9;
 HEAP32[i13 >> 2] = i12 + 96;
 return;
}

function _Drawer_YMin(i2, i11, i1, i13) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i12 = 0, d14 = 0.0;
 i12 = HEAP32[i13 >> 2] | 0;
 d9 = +HEAPF32[460411];
 d14 = d9 * +(HEAP32[460409] & (i1 & 65535) | 0);
 i10 = HEAP32[416818] | 0;
 d7 = +(i2 + -1 | 0);
 d6 = +HEAPF32[416821] * .9993749856948853 + d7;
 d8 = d14 + d9 * +HEAPF32[416820];
 d9 = d14 + d9 * +HEAPF32[416823] * .9993749856948853;
 i4 = HEAP32[416824] | 0;
 d7 = +HEAPF32[416827] + d7;
 i5 = HEAP32[416825] | 0;
 i2 = HEAP32[416826] | 0;
 i3 = HEAP32[416829] | 0;
 if (!(HEAP8[1667264] | 0)) i1 = i11; else i1 = _PackedCol_Tint(i11, HEAP32[416817] | 0) | 0;
 HEAPF32[i12 >> 2] = d7;
 HEAP32[i12 + 4 >> 2] = i5;
 HEAP32[i12 + 8 >> 2] = i3;
 HEAP32[i12 + 12 >> 2] = i1;
 HEAPF32[i12 + 16 >> 2] = d6;
 HEAPF32[i12 + 20 >> 2] = d9;
 HEAP32[i12 + 24 >> 2] = i4;
 HEAP32[i12 + 28 >> 2] = i5;
 HEAP32[i12 + 32 >> 2] = i3;
 HEAP32[i12 + 36 >> 2] = i1;
 HEAP32[i12 + 40 >> 2] = i10;
 HEAPF32[i12 + 44 >> 2] = d9;
 HEAP32[i12 + 48 >> 2] = i4;
 HEAP32[i12 + 52 >> 2] = i5;
 HEAP32[i12 + 56 >> 2] = i2;
 HEAP32[i12 + 60 >> 2] = i1;
 HEAP32[i12 + 64 >> 2] = i10;
 HEAPF32[i12 + 68 >> 2] = d8;
 HEAPF32[i12 + 72 >> 2] = d7;
 HEAP32[i12 + 76 >> 2] = i5;
 HEAP32[i12 + 80 >> 2] = i2;
 HEAP32[i12 + 84 >> 2] = i1;
 HEAPF32[i12 + 88 >> 2] = d6;
 HEAPF32[i12 + 92 >> 2] = d8;
 HEAP32[i13 >> 2] = i12 + 96;
 return;
}

function _Drawer_YMax(i2, i11, i1, i13) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i12 = 0, d14 = 0.0;
 i12 = HEAP32[i13 >> 2] | 0;
 d9 = +HEAPF32[460411];
 d14 = d9 * +(HEAP32[460409] & (i1 & 65535) | 0);
 i10 = HEAP32[416818] | 0;
 d7 = +(i2 + -1 | 0);
 d6 = +HEAPF32[416821] * .9993749856948853 + d7;
 d8 = d14 + d9 * +HEAPF32[416820];
 d9 = d14 + d9 * +HEAPF32[416823] * .9993749856948853;
 i4 = HEAP32[416824] | 0;
 d7 = +HEAPF32[416827] + d7;
 i5 = HEAP32[416828] | 0;
 i2 = HEAP32[416826] | 0;
 i3 = HEAP32[416829] | 0;
 if (!(HEAP8[1667264] | 0)) i1 = i11; else i1 = _PackedCol_Tint(i11, HEAP32[416817] | 0) | 0;
 HEAPF32[i12 >> 2] = d7;
 HEAP32[i12 + 4 >> 2] = i5;
 HEAP32[i12 + 8 >> 2] = i2;
 HEAP32[i12 + 12 >> 2] = i1;
 HEAPF32[i12 + 16 >> 2] = d6;
 HEAPF32[i12 + 20 >> 2] = d8;
 HEAP32[i12 + 24 >> 2] = i4;
 HEAP32[i12 + 28 >> 2] = i5;
 HEAP32[i12 + 32 >> 2] = i2;
 HEAP32[i12 + 36 >> 2] = i1;
 HEAP32[i12 + 40 >> 2] = i10;
 HEAPF32[i12 + 44 >> 2] = d8;
 HEAP32[i12 + 48 >> 2] = i4;
 HEAP32[i12 + 52 >> 2] = i5;
 HEAP32[i12 + 56 >> 2] = i3;
 HEAP32[i12 + 60 >> 2] = i1;
 HEAP32[i12 + 64 >> 2] = i10;
 HEAPF32[i12 + 68 >> 2] = d9;
 HEAPF32[i12 + 72 >> 2] = d7;
 HEAP32[i12 + 76 >> 2] = i5;
 HEAP32[i12 + 80 >> 2] = i3;
 HEAP32[i12 + 84 >> 2] = i1;
 HEAPF32[i12 + 88 >> 2] = d6;
 HEAPF32[i12 + 92 >> 2] = d9;
 HEAP32[i13 >> 2] = i12 + 96;
 return;
}

function _Drawer_XMin(i2, i11, i1, i13) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i12 = 0, d14 = 0.0;
 i12 = HEAP32[i13 >> 2] | 0;
 d9 = +HEAPF32[460411];
 d14 = d9 * +(HEAP32[460409] & (i1 & 65535) | 0);
 i10 = HEAP32[416820] | 0;
 d7 = +(i2 + -1 | 0);
 d6 = +HEAPF32[416823] * .9993749856948853 + d7;
 d8 = d14 + d9 * +HEAPF32[416822];
 d9 = d14 + d9 * +HEAPF32[416819] * .9993749856948853;
 i3 = HEAP32[416824] | 0;
 i4 = HEAP32[416825] | 0;
 i5 = HEAP32[416828] | 0;
 i2 = HEAP32[416826] | 0;
 d7 = +HEAPF32[416829] + d7;
 if (!(HEAP8[1667264] | 0)) i1 = i11; else i1 = _PackedCol_Tint(i11, HEAP32[416817] | 0) | 0;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i12 + 4 >> 2] = i5;
 HEAPF32[i12 + 8 >> 2] = d7;
 HEAP32[i12 + 12 >> 2] = i1;
 HEAPF32[i12 + 16 >> 2] = d6;
 HEAPF32[i12 + 20 >> 2] = d8;
 HEAP32[i12 + 24 >> 2] = i3;
 HEAP32[i12 + 28 >> 2] = i5;
 HEAP32[i12 + 32 >> 2] = i2;
 HEAP32[i12 + 36 >> 2] = i1;
 HEAP32[i12 + 40 >> 2] = i10;
 HEAPF32[i12 + 44 >> 2] = d8;
 HEAP32[i12 + 48 >> 2] = i3;
 HEAP32[i12 + 52 >> 2] = i4;
 HEAP32[i12 + 56 >> 2] = i2;
 HEAP32[i12 + 60 >> 2] = i1;
 HEAP32[i12 + 64 >> 2] = i10;
 HEAPF32[i12 + 68 >> 2] = d9;
 HEAP32[i12 + 72 >> 2] = i3;
 HEAP32[i12 + 76 >> 2] = i4;
 HEAPF32[i12 + 80 >> 2] = d7;
 HEAP32[i12 + 84 >> 2] = i1;
 HEAPF32[i12 + 88 >> 2] = d6;
 HEAPF32[i12 + 92 >> 2] = d9;
 HEAP32[i13 >> 2] = i12 + 96;
 return;
}

function _Png_Expand_RGB_A_8(i1, i2, i9, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if ((i1 | 0) > 3) {
  i6 = ~i1;
  i6 = ((i6 | 0) > -8 ? i6 : -8) + i1 + 4 | 0;
  i7 = i6 & -4;
  i2 = i7 + 4 | 0;
  i6 = ((2 ? i6 >>> 2 : i6) << 4) + 16 | 0;
  i8 = i1 + -4 | 0;
  i4 = i3;
  i5 = i9;
  while (1) {
   HEAP32[i4 >> 2] = (HEAPU8[i5 + 1 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) | (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i5 + 3 >> 0] | 0) << 24;
   HEAP32[i4 + 4 >> 2] = (HEAPU8[i5 + 5 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0) | (HEAPU8[i5 + 6 >> 0] | 0) << 16 | (HEAPU8[i5 + 7 >> 0] | 0) << 24;
   HEAP32[i4 + 8 >> 2] = (HEAPU8[i5 + 9 >> 0] | 0) << 8 | (HEAPU8[i5 + 8 >> 0] | 0) | (HEAPU8[i5 + 10 >> 0] | 0) << 16 | (HEAPU8[i5 + 11 >> 0] | 0) << 24;
   HEAP32[i4 + 12 >> 2] = (HEAPU8[i5 + 13 >> 0] | 0) << 8 | (HEAPU8[i5 + 12 >> 0] | 0) | (HEAPU8[i5 + 14 >> 0] | 0) << 16 | (HEAPU8[i5 + 15 >> 0] | 0) << 24;
   if ((i1 | 0) > 7) {
    i4 = i4 + 16 | 0;
    i5 = i5 + 16 | 0;
    i1 = i1 + -4 | 0;
   } else break;
  }
  i3 = i3 + (i2 << 2) | 0;
  i2 = i9 + i6 | 0;
  i1 = i8 - i7 | 0;
 } else i2 = i9;
 if ((i1 | 0) > 0) while (1) {
  HEAP32[i3 >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 3 >> 0] | 0) << 24;
  if ((i1 | 0) > 1) {
   i3 = i3 + 4 | 0;
   i2 = i2 + 4 | 0;
   i1 = i1 + -1 | 0;
  } else break;
 }
 return;
}

function _Drawer_ZMin(i2, i9, i1, i13) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0;
 i12 = HEAP32[i13 >> 2] | 0;
 d8 = +HEAPF32[460411];
 d5 = d8 * +(HEAP32[460409] & (i1 & 65535) | 0);
 d11 = +(i2 | 0) - +HEAPF32[416818];
 d10 = (1.0 - +HEAPF32[416821]) * .9993749856948853;
 d7 = d5 + d8 * +HEAPF32[416822];
 d8 = d5 + d8 * +HEAPF32[416819] * .9993749856948853;
 i6 = HEAP32[416824] | 0;
 d5 = +HEAPF32[416827] + +(i2 + -1 | 0);
 i4 = HEAP32[416825] | 0;
 i2 = HEAP32[416828] | 0;
 i3 = HEAP32[416826] | 0;
 if (!(HEAP8[1667264] | 0)) i1 = i9; else i1 = _PackedCol_Tint(i9, HEAP32[416817] | 0) | 0;
 HEAPF32[i12 >> 2] = d5;
 HEAP32[i12 + 4 >> 2] = i4;
 HEAP32[i12 + 8 >> 2] = i3;
 HEAP32[i12 + 12 >> 2] = i1;
 HEAPF32[i12 + 16 >> 2] = d10;
 HEAPF32[i12 + 20 >> 2] = d8;
 HEAP32[i12 + 24 >> 2] = i6;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i12 + 32 >> 2] = i3;
 HEAP32[i12 + 36 >> 2] = i1;
 HEAPF32[i12 + 40 >> 2] = d11;
 HEAPF32[i12 + 44 >> 2] = d8;
 HEAP32[i12 + 48 >> 2] = i6;
 HEAP32[i12 + 52 >> 2] = i2;
 HEAP32[i12 + 56 >> 2] = i3;
 HEAP32[i12 + 60 >> 2] = i1;
 HEAPF32[i12 + 64 >> 2] = d11;
 HEAPF32[i12 + 68 >> 2] = d7;
 HEAPF32[i12 + 72 >> 2] = d5;
 HEAP32[i12 + 76 >> 2] = i2;
 HEAP32[i12 + 80 >> 2] = i3;
 HEAP32[i12 + 84 >> 2] = i1;
 HEAPF32[i12 + 88 >> 2] = d10;
 HEAPF32[i12 + 92 >> 2] = d7;
 HEAP32[i13 >> 2] = i12 + 96;
 return;
}

function _Intersection_RayIntersectsBox(i9, i8, i11, i10, i12, i13) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 HEAPF32[i12 >> 2] = 0.0;
 HEAPF32[i13 >> 2] = 0.0;
 d3 = +HEAPF32[i8 >> 2];
 if (!(d3 >= 0.0)) {
  d4 = +HEAPF32[i9 >> 2];
  d2 = d4;
  i1 = i11;
  d4 = +HEAPF32[i10 >> 2] - d4;
 } else {
  d4 = +HEAPF32[i9 >> 2];
  d2 = d4;
  i1 = i10;
  d4 = +HEAPF32[i11 >> 2] - d4;
 }
 d7 = d3 * (+HEAPF32[i1 >> 2] - d2);
 d6 = d3 * d4;
 d3 = +HEAPF32[i8 + 4 >> 2];
 if (!(d3 >= 0.0)) {
  d4 = +HEAPF32[i9 + 4 >> 2];
  d2 = d4;
  i1 = i11;
  d4 = +HEAPF32[i10 + 4 >> 2] - d4;
 } else {
  d4 = +HEAPF32[i9 + 4 >> 2];
  d2 = d4;
  i1 = i10;
  d4 = +HEAPF32[i11 + 4 >> 2] - d4;
 }
 d5 = d3 * (+HEAPF32[i1 + 4 >> 2] - d2);
 d2 = d3 * d4;
 if (d2 > d7 | d6 > d5) i1 = 0; else {
  d6 = d2 > d6 ? d2 : d6;
  d5 = d5 < d7 ? d5 : d7;
  d4 = +HEAPF32[i8 + 8 >> 2];
  if (!(d4 >= 0.0)) {
   d2 = +HEAPF32[i9 + 8 >> 2];
   d3 = d2;
   i1 = i11;
   d2 = +HEAPF32[i10 + 8 >> 2] - d2;
  } else {
   d2 = +HEAPF32[i9 + 8 >> 2];
   d3 = d2;
   i1 = i10;
   d2 = +HEAPF32[i11 + 8 >> 2] - d2;
  }
  d3 = d4 * (+HEAPF32[i1 + 8 >> 2] - d3);
  d7 = d4 * d2;
  d2 = d7 > d6 ? d7 : d6;
  if (d7 > d5 | d6 > d3) i1 = 0; else {
   HEAPF32[i12 >> 2] = d2;
   HEAPF32[i13 >> 2] = d3 < d5 ? d3 : d5;
   i1 = d2 >= 0.0 & 1;
  }
 }
 return i1 | 0;
}

function _NotchyGen_CreateHeightmap() {
 var i1 = 0, d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 20512 | 0;
 i10 = i16 + 12304 | 0;
 i11 = i16 + 4104 | 0;
 i12 = i16;
 _CombinedNoise_Init(i10);
 _CombinedNoise_Init(i11);
 _OctaveNoise_Init(i12, 6);
 HEAP32[422258] = 33132;
 i9 = HEAP32[244735] | 0;
 if ((i9 | 0) > 0) {
  i8 = HEAP32[244733] | 0;
  d14 = +(i9 | 0);
  i13 = (i8 | 0) > 0;
  i1 = 0;
  i15 = 0;
  do {
   d6 = +(i15 | 0);
   HEAPF32[422259] = d6 / d14;
   if (i13) {
    d7 = d6 * 1.2999999523162842;
    i5 = 0;
    while (1) {
     d17 = +(i5 | 0);
     d4 = d17 * 1.2999999523162842;
     d2 = +_CombinedNoise_Calc(i10, d4, d7) / 6.0 + -4.0;
     if (+_OctaveNoise_Calc(i12, d17, d6) <= 0.0) {
      d17 = +_CombinedNoise_Calc(i11, d4, d7) / 5.0 + 6.0;
      d2 = d2 > d17 ? d2 : d17;
     }
     d17 = d2 * .5;
     i18 = ~~((d17 < 0.0 ? d17 * .800000011920929 : d17) + +(HEAP32[422264] | 0));
     i3 = HEAP32[422265] | 0;
     HEAP32[422265] = (i3 | 0) > (i18 | 0) ? i18 : i3;
     i3 = i1 + 1 | 0;
     HEAP16[(HEAP32[422261] | 0) + (i1 << 1) >> 1] = i18;
     i5 = i5 + 1 | 0;
     if ((i5 | 0) >= (i8 | 0)) {
      i1 = i3;
      break;
     } else i1 = i3;
    }
   }
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) < (i9 | 0));
 }
 STACKTOP = i16;
 return;
}

function _Searcher_CalcTime(i2, i8, i7, i4, i10, i12) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var d1 = 0.0, d3 = 0.0, i5 = 0, d6 = 0.0, d9 = 0.0, i11 = 0, i13 = 0;
 d1 = +HEAPF32[i2 >> 2];
 i5 = d1 > 0.0;
 d3 = +HEAPF32[(i5 ? i7 : i8) >> 2] - +HEAPF32[(i5 ? i8 : i7) + 12 >> 2];
 i5 = i2 + 4 | 0;
 i13 = +HEAPF32[i5 >> 2] > 0.0;
 d6 = +HEAPF32[(i13 ? i7 : i8) + 4 >> 2] - +HEAPF32[(i13 ? i8 : i7) + 16 >> 2];
 i2 = i2 + 8 | 0;
 i13 = +HEAPF32[i2 >> 2] > 0.0;
 d9 = +HEAPF32[(i13 ? i7 : i8) + 8 >> 2] - +HEAPF32[(i13 ? i8 : i7) + 20 >> 2];
 if (!(+HEAPF32[i8 + 12 >> 2] >= +HEAPF32[i7 >> 2])) i11 = 3; else if (!(+HEAPF32[i8 >> 2] <= +HEAPF32[i7 + 12 >> 2])) i11 = 3; else d1 = 0.0;
 if ((i11 | 0) == 3) if (d1 == 0.0) d1 = 1.0e9; else d1 = +Math_abs(+(d3 / d1));
 HEAPF32[i4 >> 2] = d1;
 if (!(+HEAPF32[i8 + 16 >> 2] >= +HEAPF32[i7 + 4 >> 2])) i11 = 7; else if (!(+HEAPF32[i8 + 4 >> 2] <= +HEAPF32[i7 + 16 >> 2])) i11 = 7; else d1 = 0.0;
 if ((i11 | 0) == 7) {
  d1 = +HEAPF32[i5 >> 2];
  if (d1 == 0.0) d1 = 1.0e9; else d1 = +Math_abs(+(d6 / d1));
 }
 HEAPF32[i10 >> 2] = d1;
 if (!(+HEAPF32[i8 + 20 >> 2] >= +HEAPF32[i7 + 8 >> 2])) i11 = 11; else if (!(+HEAPF32[i8 + 8 >> 2] <= +HEAPF32[i7 + 20 >> 2])) i11 = 11; else d1 = 0.0;
 if ((i11 | 0) == 11) {
  d1 = +HEAPF32[i2 >> 2];
  if (d1 == 0.0) d1 = 1.0e9; else d1 = +Math_abs(+(d9 / d1));
 }
 HEAPF32[i12 >> 2] = d1;
 return;
}

function _Deflate_StreamClose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i1 + 32 >> 2] | 0;
 i1 = _Deflate_FlushBlock(i6, (HEAP32[i6 + 8 >> 2] | 0) + -16384 | 0) | 0;
 if (!i1) {
  i5 = i6 + 4 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | (HEAPU16[i6 + 536 >> 1] | 0) << i1;
  HEAP32[i6 >> 2] = i2;
  i1 = i1 + (HEAPU8[i6 + 856 >> 0] | 0) | 0;
  HEAP32[i5 >> 2] = i1;
  if (i1 >>> 0 > 7) {
   i4 = i6 + 12 | 0;
   i3 = i6 + 16 | 0;
   i1 = i2;
   while (1) {
    i2 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i1;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i2 = HEAP32[i6 >> 2] | 0;
    i2 = 8 ? i2 >>> 8 : i2;
    HEAP32[i6 >> 2] = i2;
    i1 = (HEAP32[i5 >> 2] | 0) + -8 | 0;
    HEAP32[i5 >> 2] = i1;
    if (i1 >>> 0 > 7) i1 = i2; else {
     i4 = i2;
     break;
    }
   }
  } else i4 = i2;
  if (i1 | 0) {
   HEAP32[i5 >> 2] = 8;
   i3 = i6 + 12 | 0;
   i2 = i6 + 16 | 0;
   i1 = i4;
   do {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    i4 = HEAP32[i6 >> 2] | 0;
    i1 = 8 ? i4 >>> 8 : i4;
    HEAP32[i6 >> 2] = i1;
    i4 = (HEAP32[i5 >> 2] | 0) + -8 | 0;
    HEAP32[i5 >> 2] = i4;
   } while (i4 >>> 0 > 7);
  }
  i1 = _Stream_Write(HEAP32[i6 + 20 >> 2] | 0, i6 + 33656 | 0, 8192 - (HEAP32[i6 + 16 >> 2] | 0) | 0) | 0;
 }
 return i1 | 0;
}

function _Png_Expand_RGB_8(i1, i2, i9, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i3 = i1 + -1 | 0;
 i4 = i3 * 3 | 0;
 i2 = i9 + i4 | 0;
 i3 = i7 + (i3 << 2) | 0;
 if ((i1 | 0) > 3) {
  i6 = ~i1;
  i6 = ((i6 | 0) > -8 ? i6 : -8) + i1 + 4 | 0;
  i8 = i6 & -4;
  i5 = i1 + -5 - i8 | 0;
  i4 = i4 + -12 + (Math_imul(2 ? i6 >>> 2 : i6, -12) | 0) | 0;
  i6 = i1 + -4 | 0;
  while (1) {
   HEAP32[i3 >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16 | -16777216;
   HEAP32[i3 + -4 >> 2] = (HEAPU8[i2 + -2 >> 0] | 0) << 8 | (HEAPU8[i2 + -3 >> 0] | 0) | (HEAPU8[i2 + -1 >> 0] | 0) << 16 | -16777216;
   HEAP32[i3 + -8 >> 2] = (HEAPU8[i2 + -5 >> 0] | 0) << 8 | (HEAPU8[i2 + -6 >> 0] | 0) | (HEAPU8[i2 + -4 >> 0] | 0) << 16 | -16777216;
   HEAP32[i3 + -12 >> 2] = (HEAPU8[i2 + -8 >> 0] | 0) << 8 | (HEAPU8[i2 + -9 >> 0] | 0) | (HEAPU8[i2 + -7 >> 0] | 0) << 16 | -16777216;
   if ((i1 | 0) > 7) {
    i3 = i3 + -16 | 0;
    i2 = i2 + -12 | 0;
    i1 = i1 + -4 | 0;
   } else break;
  }
  i3 = i7 + (i5 << 2) | 0;
  i2 = i9 + i4 | 0;
  i1 = i6 - i8 | 0;
 }
 if ((i1 | 0) > 0) while (1) {
  HEAP32[i3 >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16 | -16777216;
  if ((i1 | 0) > 1) {
   i3 = i3 + -4 | 0;
   i2 = i2 + -3 | 0;
   i1 = i1 + -1 | 0;
  } else break;
 }
 return;
}

function _StringsBuffer_QuickSort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i14 + 16 | 0;
 i12 = i14 + 8 | 0;
 i13 = i14;
 i9 = HEAP32[460406] | 0;
 i10 = HEAP32[i9 + 4 >> 2] | 0;
 if ((i1 | 0) < (i2 | 0)) do {
  i8 = i1 + i2 | 0;
  _StringsBuffer_UNSAFE_Get(i11, i9, 1 ? i8 >> 1 : i8);
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     _StringsBuffer_UNSAFE_Get(i12, i9, i3);
     i7 = i3 + 1 | 0;
     if ((_String_Compare(i11, i12) | 0) > 0) i3 = i7; else break;
    }
    i8 = i4;
    while (1) {
     _StringsBuffer_UNSAFE_Get(i13, i9, i8);
     i4 = i8 + -1 | 0;
     if ((_String_Compare(i11, i13) | 0) < 0) i8 = i4; else break;
    }
    i5 = i10 + (i3 << 2) | 0;
    i6 = i10 + (i8 << 2) | 0;
    if ((i3 | 0) > (i8 | 0)) i4 = i8; else {
     i3 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i6 >> 2] = i3;
     i3 = i7;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _StringsBuffer_QuickSort(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _StringsBuffer_QuickSort(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 STACKTOP = i14;
 return;
}

function _TabList_Set(i9, i1, i10, i8, i12) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i14 + 80 | 0;
 i4 = i14 + 72 | 0;
 i3 = i14 + 64 | 0;
 i11 = i14 + 88 | 0;
 HEAP32[i11 >> 2] = i14;
 HEAP16[i11 + 4 >> 1] = 0;
 HEAP16[i11 + 6 >> 1] = 64;
 _String_AppendColorless(i11, i1);
 i7 = i9 & 255;
 i6 = 1669392 + (i7 << 1) | 0;
 i1 = HEAP16[i6 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i1 = 1669904 + i7 | 0;
  i2 = 1675984;
  i13 = 6;
 } else {
  _StringsBuffer_UNSAFE_Get(i5, 1670160, (i1 & 65535) + -3 | 0);
  _StringsBuffer_UNSAFE_Get(i4, 1670160, (HEAPU16[i6 >> 1] | 0) + -2 | 0);
  _StringsBuffer_UNSAFE_Get(i3, 1670160, (HEAPU16[i6 >> 1] | 0) + -1 | 0);
  i1 = 1669904 + i7 | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  if (!(_String_Equals(i11, i5) | 0)) {
   i2 = 1676244;
   i13 = 6;
  } else if (!(_String_Equals(i10, i4) | 0)) {
   i2 = 1676244;
   i13 = 6;
  } else if (!(_String_Equals(i8, i3) | 0 ? i2 << 24 >> 24 == i12 << 24 >> 24 : 0)) {
   i2 = 1676244;
   i13 = 6;
  }
 }
 if ((i13 | 0) == 6) {
  _TabList_Delete(i9);
  _StringsBuffer_Add(1670160, i11);
  _StringsBuffer_Add(1670160, i10);
  _StringsBuffer_Add(1670160, i8);
  HEAP16[i6 >> 1] = HEAP32[417542];
  HEAP8[i1 >> 0] = i12;
  _Event_RaiseInt(i2, i7);
 }
 STACKTOP = i14;
 return;
}

function _EntityShadow_DrawCircle(i12, i11, i10, d1, d2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0;
 d9 = +(_Math_Floor(d1) | 0);
 d1 = +(_Math_Floor(d2) | 0);
 i5 = HEAPU16[i10 + 4 >> 1] | 0;
 d7 = +HEAPF32[1010980 + (i5 * 12 | 0) >> 2];
 d8 = +HEAPF32[1010980 + (i5 * 12 | 0) + 8 >> 2];
 d2 = +HEAPF32[1020196 + (i5 * 12 | 0) >> 2];
 d6 = +HEAPF32[1020196 + (i5 * 12 | 0) + 8 >> 2];
 _EntityShadow_DrawCoords(i12, i11, i10, d7 + d9, d8 + d1, d2 + d9, d6 + d1);
 i5 = 1;
 do {
  i3 = i10 + (i5 << 3) | 0;
  i13 = HEAP16[i10 + (i5 << 3) + 4 >> 1] | 0;
  i4 = i13 & 65535;
  if (!(i13 << 16 >> 16)) break;
  d17 = d7;
  d7 = +HEAPF32[1010980 + (i4 * 12 | 0) >> 2];
  d14 = d8;
  d8 = +HEAPF32[1010980 + (i4 * 12 | 0) + 8 >> 2];
  d16 = d2;
  d2 = +HEAPF32[1020196 + (i4 * 12 | 0) >> 2];
  d18 = d6;
  d6 = +HEAPF32[1020196 + (i4 * 12 | 0) + 8 >> 2];
  d17 = d17 + d9;
  d15 = d8 + d1;
  d16 = d16 + d9;
  _EntityShadow_DrawCoords(i12, i11, i3, d17, d15, d16, d14 + d1);
  d14 = d6 + d1;
  _EntityShadow_DrawCoords(i12, i11, i3, d17, d18 + d1, d16, d14);
  _EntityShadow_DrawCoords(i12, i11, i3, d7 + d9, d15, d17, d14);
  _EntityShadow_DrawCoords(i12, i11, i3, d16, d15, d2 + d9, d14);
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < 4);
 return;
}

function _LocalPlayer_Init(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i4 = i2 + 460 | 0;
 _Entity_Init(i2);
 _Entity_SetName(i2, 14732);
 _Entity_SetSkin(i2, 14732);
 _Event_Register(1679104, i2, 196);
 i3 = i2 + 712 | 0;
 HEAP32[i3 >> 2] = i2;
 _HacksComp_Init(i4);
 _PhysicsComp_Init(i2 + 728 | 0, i2);
 _TiltComp_Init(i2 + 640 | 0);
 i5 = i2 + 54 | 0;
 HEAP8[i5 >> 0] = HEAP8[i5 >> 0] | 1;
 HEAPF32[i2 + 456 >> 2] = 5.0;
 HEAP32[i2 + 752 >> 2] = i4;
 HEAP32[i2 + 756 >> 2] = i3;
 HEAP32[i2 >> 2] = 14396;
 HEAP8[i2 + 792 >> 0] = i1;
 if ((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0) {
  i4 = (_Options_GetBool(39545, 1) | 0) << 24 >> 24 != 0 & 1;
  i5 = HEAP8[1868754] | 0;
  HEAP8[i2 + 470 >> 0] = i4;
  if (!(i5 << 24 >> 24)) {
   d6 = +_Options_GetFloat(42560, .10000000149011612, 50.0, 10.0);
   HEAPF32[i2 + 464 >> 2] = d6;
   i5 = _Options_GetBool(42435, 0) | 0;
   HEAP8[i2 + 468 >> 0] = i5;
   i5 = _Options_GetBool(42417, 0) | 0;
   HEAP8[i2 + 492 >> 0] = i5;
   i5 = _Options_GetBool(42500, 0) | 0;
   HEAP8[i2 + 493 >> 0] = i5;
   i5 = _Options_GetBool(42480, 0) | 0;
   HEAP8[i2 + 469 >> 0] = i5;
   d6 = +_Options_GetFloat(42520, 0.0, 52.0, .41999998688697815);
   HEAPF32[i2 + 744 >> 2] = d6;
   HEAPF32[i2 + 740 >> 2] = d6;
   i5 = _Options_GetBool(30624, 1) | 0;
   HEAP8[1868739] = i5;
  }
 } else HEAP8[i2 + 470 >> 0] = 0;
 return;
}

function _ImprovedNoise_Calc(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = (!(d2 >= 0.0) << 31 >> 31) + ~~d2 | 0;
 i9 = (!(d3 >= 0.0) << 31 >> 31) + ~~d3 | 0;
 i8 = i11 & 255;
 i10 = i9 & 255;
 d2 = d2 - +(i11 | 0);
 d7 = d3 - +(i9 | 0);
 d6 = d2 * (d2 * d2) * (d2 * (d2 * 6.0 + -15.0) + 10.0);
 i9 = i10 + (HEAPU8[i1 + i8 >> 0] | 0) | 0;
 i8 = i10 + (HEAPU8[i1 + (i8 + 1) >> 0] | 0) | 0;
 i10 = HEAP8[i1 + (HEAPU8[i1 + i9 >> 0] | 0) >> 0] << 1 & 30;
 d3 = d2 * +(((i10 ? 1179984418 >>> i10 : 1179984418) & 3) + -1 | 0) + d7 * +(((i10 ? 572675338 >>> i10 : 572675338) & 3) + -1 | 0);
 i10 = HEAP8[i1 + (HEAPU8[i1 + i8 >> 0] | 0) >> 0] << 1 & 30;
 d5 = d2 + -1.0;
 d3 = d3 + d6 * (d5 * +(((i10 ? 1179984418 >>> i10 : 1179984418) & 3) + -1 | 0) + d7 * +(((i10 ? 572675338 >>> i10 : 572675338) & 3) + -1 | 0) - d3);
 i9 = HEAP8[i1 + (HEAPU8[i1 + (i9 + 1) >> 0] | 0) >> 0] << 1 & 30;
 d4 = d7 + -1.0;
 d2 = d2 * +(((i9 ? 1179984418 >>> i9 : 1179984418) & 3) + -1 | 0) + d4 * +(((i9 ? 572675338 >>> i9 : 572675338) & 3) + -1 | 0);
 i1 = HEAP8[i1 + (HEAPU8[i1 + (i8 + 1) >> 0] | 0) >> 0] << 1 & 30;
 return +(d3 + d7 * (d7 * d7) * (d7 * (d7 * 6.0 + -15.0) + 10.0) * (d2 + d6 * (d5 * +(((i1 ? 1179984418 >>> i1 : 1179984418) & 3) + -1 | 0) + d4 * +(((i1 ? 572675338 >>> i1 : 572675338) & 3) + -1 | 0) - d2) - d3));
}

function _SpiderModel_Draw(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 264);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1715872, 1);
 _Model_DrawPart(1715888);
 _Model_DrawPart(1715904);
 i7 = i1 + 132 | 0;
 d5 = +_Math_SinF(+HEAPF32[i7 >> 2]);
 i1 = i1 + 136 | 0;
 d5 = d5 * +HEAPF32[i1 >> 2] * 3.1415927410125732;
 d2 = +_Math_CosF(+HEAPF32[i7 >> 2] * 2.0);
 d2 = d2 * +HEAPF32[i1 >> 2] * 3.1415927410125732 * .0625;
 d3 = +_Math_SinF(+HEAPF32[i7 >> 2] * 2.0);
 d3 = d3 * +HEAPF32[i1 >> 2] * 3.1415927410125732 * .03125;
 HEAP8[1714760] = 1;
 d6 = d2 + .39269909262657166;
 _Model_DrawRotate(d5, d3 + .7853981852531433, d6, 1715920, 0);
 d4 = -d5;
 _Model_DrawRotate(d4, d3 + .39269909262657166, d6, 1715920, 0);
 d6 = .39269909262657166 - d2;
 _Model_DrawRotate(d5, -.39269909262657166 - d3, d6, 1715920, 0);
 _Model_DrawRotate(d4, -.7853981852531433 - d3, d6, 1715920, 0);
 d6 = d2 + -.39269909262657166;
 _Model_DrawRotate(d5, d3 + -.7853981852531433, d6, 1715936, 0);
 _Model_DrawRotate(d4, d3 + -.39269909262657166, d6, 1715936, 0);
 d2 = -.39269909262657166 - d2;
 _Model_DrawRotate(d5, .39269909262657166 - d3, d2, 1715936, 0);
 _Model_DrawRotate(d4, .7853981852531433 - d3, d2, 1715936, 0);
 HEAP8[1714760] = 0;
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(264);
 return;
}

function _Block_RecalculateBB(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i15 + 48 | 0;
 i12 = i15 + 36 | 0;
 i10 = i15 + 24 | 0;
 i13 = i15 + 12 | 0;
 i14 = i15;
 i1 = HEAP32[460927] | 0;
 i9 = i7 & 65535;
 i2 = HEAPU16[1047844 + ((i9 * 6 | 1) << 1) >> 1] | 0;
 i3 = i2 & 15;
 i2 = 4 ? i2 >>> 4 : i2;
 HEAP32[i8 >> 2] = HEAP32[3359];
 HEAP32[i8 + 4 >> 2] = HEAP32[3360];
 HEAP32[i8 + 8 >> 2] = HEAP32[3361];
 if ((i2 | 0) < (HEAP32[460928] | 0)) {
  d5 = +_GetSpriteBB_MinX(i1, i3, i2);
  d6 = +_GetSpriteBB_MinY(i1, i3, i2);
  d11 = +_GetSpriteBB_MaxX(i1, i3, i2);
  d11 = d11 + -.5;
  d4 = +_GetSpriteBB_MaxY(i1, i3, i2);
  d5 = d5 + -.5;
 } else {
  d11 = .5;
  d4 = 1.0;
  d5 = -.5;
  d6 = 0.0;
 }
 _Vec3_RotateY3(i13, d5, d6, 0.0, .7853981852531433);
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 _Vec3_RotateY3(i14, d11, d4, 0.0, .7853981852531433);
 HEAP32[i10 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 _Vec3_Add_52(1010980 + (i9 * 12 | 0) | 0, i12, i8);
 _Vec3_Add_52(1020196 + (i9 * 12 | 0) | 0, i10, i8);
 _Block_CalcRenderBounds(i7);
 STACKTOP = i15;
 return;
}

function _HUDScreen_RemakeLine1(i7) {
 i7 = i7 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i8 = i9 + 144 | 0;
 i4 = i9 + 140 | 0;
 i5 = i9 + 136 | 0;
 i3 = i9 + 132 | 0;
 i6 = i9 + 128 | 0;
 HEAP32[i8 >> 2] = i9;
 HEAP16[i8 + 4 >> 1] = 0;
 HEAP16[i8 + 6 >> 1] = 128;
 if (!(HEAP8[1689502] | 0)) {
  if (!(HEAP32[i7 + 88 >> 2] | 0)) i1 = 3;
 } else i1 = 3;
 if ((i1 | 0) == 3) {
  d2 = +HEAPF32[i7 + 296 >> 2];
  if (d2 == 0.0) i1 = 1; else i1 = ~~(+(HEAP32[i7 + 300 >> 2] | 0) / d2);
  HEAP32[i3 >> 2] = i1;
  do if (!((HEAP8[1689229] | HEAP8[1689228]) << 24 >> 24)) if (!i1) {
   HEAPF32[i6 >> 2] = +(HEAP32[i7 + 300 >> 2] | 0) / d2;
   _String_Format1(i8, 48072, i6);
   break;
  } else {
   _String_Format1(i8, 48082, i3);
   break;
  } else {
   _String_AppendConst(i8, 48054);
   HEAP8[1689229] = (HEAP8[1689229] | 0) + -1 << 24 >> 24;
  } while (0);
  if (!(HEAP8[1868754] | 0)) {
   if (HEAP32[244562] | 0) _String_Format1(i8, 48108, 978248);
   i6 = HEAP32[422210] | 0;
   HEAP32[i4 >> 2] = (2 ? i6 >> 2 : i6) * 6;
   _String_Format1(i8, 48122, i4);
   i6 = _Ping_AveragePingMS() | 0;
   HEAP32[i5 >> 2] = i6;
   if (i6 | 0) _String_Format1(i8, 48134, i5);
  } else _String_Format1(i8, 48091, 978248);
  _TextWidget_Set(i7 + 48 | 0, i8, i7 + 36 | 0);
  HEAP8[i7 + 7 >> 0] = 1;
 }
 STACKTOP = i9;
 return;
}

function _TextGroupWidget_UrlEnd(i8, i9, i6, i7, i1) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0;
 L1 : do if ((i1 | 0) < (i9 | 0)) {
  i10 = (i7 | 0) > 0;
  i2 = i1;
  while (1) {
   i3 = HEAP8[i8 + i2 >> 0] | 0;
   if (i3 << 24 >> 24 == 32) {
    i1 = i2;
    break L1;
   }
   L6 : do if (i10) {
    i4 = 0;
    while (1) {
     if ((i2 | 0) == (HEAP32[i6 + (i4 << 2) >> 2] | 0)) break;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) >= (i7 | 0)) break L6;
    }
    if ((i2 | 0) == (i1 | 0)) i2 = i1; else {
     if (i3 << 24 >> 24 != 62) {
      i1 = i2;
      break L1;
     }
     i3 = i2 + 1 | 0;
     i4 = i9 - i3 | 0;
     L14 : do if ((i4 | 0) > 1) {
      i5 = i4;
      while (1) {
       i4 = HEAP8[i8 + i3 >> 0] | 0;
       if (i4 << 24 >> 24 != 38) break L14;
       i4 = i5 + -2 | 0;
       i3 = i3 + 2 | 0;
       if ((i5 | 0) > 3) i5 = i4; else {
        i11 = 14;
        break;
       }
      }
     } else i11 = 14; while (0);
     if ((i11 | 0) == 14) {
      i11 = 0;
      if (!i4) {
       i1 = i2;
       break L1;
      }
      i4 = HEAP8[i8 + i3 >> 0] | 0;
     }
     if (i4 << 24 >> 24 == 32) i2 = i3; else {
      i1 = i2;
      break L1;
     }
    }
   } while (0);
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i9 | 0)) {
    i1 = i2;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _Physics_PropagateWater(i11, i12, i13, i14) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP8[(HEAP32[244730] | 0) + i11 >> 0] | 0;
 L1 : do if ((i1 & -4) << 24 >> 24 == 8) {
  if ((i1 & -2) << 24 >> 24 == 10) _Game_UpdateBlock(i12, i13, i14, 1);
 } else if (!(HEAP8[1000996 + (i1 & 255) >> 0] | 0)) {
  i1 = (i13 | 0) < 2 ? 0 : i13 + -2 | 0;
  i6 = (HEAP32[414103] | 0) < (i13 | 0) ? HEAP32[244737] | 0 : i13 + 2 | 0;
  if ((i1 | 0) <= (i6 | 0)) {
   i7 = (i14 | 0) < 2 ? 0 : i14 + -2 | 0;
   i8 = (HEAP32[414104] | 0) < (i14 | 0) ? HEAP32[244738] | 0 : i14 + 2 | 0;
   i4 = (i7 | 0) > (i8 | 0);
   i9 = (i12 | 0) < 2 ? 0 : i12 + -2 | 0;
   i10 = (HEAP32[414102] | 0) < (i12 | 0) ? HEAP32[244736] | 0 : i12 + 2 | 0;
   i5 = (i9 | 0) > (i10 | 0);
   while (1) {
    if (!i4) {
     i3 = i7;
     while (1) {
      if (!i5) {
       i2 = i9;
       while (1) {
        if ((_World_GetBlock(i2, i1, i3) | 0) << 16 >> 16 == 19) break L1;
        if ((i2 | 0) < (i10 | 0)) i2 = i2 + 1 | 0; else break;
       }
      }
      if ((i3 | 0) < (i8 | 0)) i3 = i3 + 1 | 0; else break;
     }
    }
    if ((i1 | 0) < (i6 | 0)) i1 = i1 + 1 | 0; else break;
   }
  }
  _TickQueue_Enqueue(1656384, i11 | 671088640);
  _Game_UpdateBlock(i12, i13, i14, 8);
 } while (0);
 return;
}

function _TabListOverlay_SetColumnPos(i12, i1, i14, i2) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 i1 = i1 << 4;
 i11 = HEAP32[i12 + 56 >> 2] | 0;
 i8 = i1 + 16 | 0;
 i8 = (i11 | 0) < (i8 | 0) ? i11 : i8;
 if ((i1 | 0) < (i8 | 0)) {
  i10 = i14 & 65535;
  i9 = i12 + 52 | 0;
  i11 = i12 + 60 | 0;
  do {
   i5 = i12 + 1176 + (i1 * 28 | 0) + 4 | 0;
   i6 = i12 + 1176 + (i1 * 28 | 0) + 6 | 0;
   i4 = HEAP16[i12 + 1176 + (i1 * 28 | 0) + 10 >> 1] | 0;
   i7 = i12 + 1176 + (i1 * 28 | 0) + 12 | 0;
   HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i3 = i2 + 65526 & 65535;
   i2 = i2 + 1 + (i4 & 65535) | 0;
   if (!(HEAP8[i9 >> 0] | 0)) if ((HEAP16[i12 + 152 + (i1 << 1) >> 1] | 0) == -1) i4 = i10; else i4 = (HEAP32[i11 >> 2] | 0) + i14 & 65535; else i4 = i10;
   HEAP16[i5 >> 1] = i4;
   HEAP16[i6 >> 1] = i3;
   HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i8 | 0));
 }
 STACKTOP = i15;
 return;
}

function _MPConnection_BeginConnect() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 2672 | 0;
 i3 = i5 + 2664 | 0;
 i2 = i5;
 HEAP32[i3 >> 2] = i5 + 2592;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 HEAP8[1057060] = 0;
 HEAP8[1057067] = 0;
 HEAP8[1057068] = 0;
 HEAP8[1057069] = 0;
 HEAP8[1057070] = 0;
 HEAP8[1057071] = 0;
 HEAP8[1057835] = 0;
 HEAP8[1057836] = 0;
 HEAP8[1057837] = 0;
 HEAP8[1057838] = 0;
 HEAP8[1057839] = 0;
 i1 = _Socket_ParseAddress(1841580, HEAP32[460397] | 0, i2, i5 + 2656 | 0) | 0;
 L1 : do if ((i1 | 0) < 0) {
  switch (i1 | 0) {
  case -857812989:
   break;
  default:
   {
    i4 = 3;
    break L1;
   }
  }
  _MPConnection_Fail(22332);
 } else {
  switch (i1 | 0) {
  case 0:
   break;
  default:
   {
    i4 = 3;
    break L1;
   }
  }
  i1 = _Socket_Create(22296, i2, 1) | 0;
  if (i1 | 0) {
   _MPConnection_FailConnect(i1);
   break;
  }
  i1 = _Socket_Connect(HEAP32[5574] | 0, i2) | 0;
  if ((i1 | 0) == 0 | (i1 | 0) == (HEAP32[5932] | 0) | (i1 | 0) == (HEAP32[5933] | 0)) {
   HEAP8[1841573] = 0;
   HEAP8[1868803] = 1;
   HEAPF32[460403] = 0.0;
   _String_Format2(i3, 48936, 1841580, 1841588);
   _LoadingScreen_Show(i3, 1841616);
   break;
  } else {
   _MPConnection_FailConnect(i1);
   break;
  }
 } while (0);
 if ((i4 | 0) == 3) _MPConnection_FailConnect(i1);
 STACKTOP = i5;
 return;
}

function _Classic_LevelFinalise(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6 + 4 | 0;
 i5 = i6;
 i2 = _Stopwatch_Measure() | 0;
 i4 = getTempRet0() | 0;
 i7 = 978304;
 i4 = _Stopwatch_ElapsedMS(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, i2, i4) | 0;
 HEAP32[i5 >> 2] = i4;
 _Platform_Log1(47417, i5);
 HEAP8[1868801] = 0;
 _WoM_CheckSendWomID();
 if (HEAP8[1818088] | 0) _FreeMapStates();
 i4 = (_Stream_GetU16_BE(i1) | 0) & 65535;
 i5 = (_Stream_GetU16_BE(i1 + 2 | 0) | 0) & 65535;
 i2 = (_Stream_GetU16_BE(i1 + 4 | 0) | 0) & 65535;
 i1 = Math_imul(Math_imul(i5, i4) | 0, i2) | 0;
 HEAP32[i3 >> 2] = i1;
 do if (!(HEAP8[1773264] | 0)) {
  if (!(HEAP32[443310] | 0)) {
   _Chat_AddRaw(47438);
   _Chat_AddRaw(47532);
   break;
  }
  if ((HEAP32[454540] | 0) != (i1 | 0)) {
   _Chat_AddRaw(47438);
   _Chat_Add2(47582, 1818160, i3);
   _FreeMapStates();
   break;
  }
  if (!((_World_CheckVolume_1837(i4, i5, i2) | 0) << 24 >> 24)) {
   _Chat_AddRaw(47438);
   _Chat_AddRaw(47644);
   _FreeMapStates();
  }
 } else {
  _Chat_AddRaw(47438);
  _Chat_AddRaw(47488);
 } while (0);
 i1 = HEAP32[454516] | 0;
 if ((HEAP8[21301] | 0) != 0 & (i1 | 0) != 0) _World_SetMapUpper(i1);
 HEAP32[454516] = 0;
 _World_SetNewMap(HEAP32[443310] | 0, i4, i5, i2);
 HEAP32[443310] = 0;
 STACKTOP = i6;
 return;
}

function _HUDScreen_BuildPosition(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i9 = i3 + 12 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 i8 = i2 + 192 | 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
 i6 = i9 + 4 | 0;
 HEAP16[i6 >> 1] = (HEAP32[466965] | 0) + 2;
 i5 = i9 + 8 | 0;
 HEAP16[i5 >> 1] = HEAP32[i2 + 220 >> 2];
 _Gfx_Make2DQuad(i9, -1, i4);
 _IVec3_Floor(i7, (HEAP32[417347] | 0) + 4 | 0);
 HEAP32[i2 + 224 >> 2] = (HEAPU16[i5 >> 1] | 0) + (HEAP16[i6 >> 1] | 0);
 _TextAtlas_Add(i8, 13, i4);
 _TextAtlas_AddInt(i8, HEAP32[i7 >> 2] | 0, i4);
 _TextAtlas_Add(i8, 11, i4);
 i6 = i7 + 4 | 0;
 _TextAtlas_AddInt(i8, HEAP32[i6 >> 2] | 0, i4);
 _TextAtlas_Add(i8, 11, i4);
 i5 = i7 + 8 | 0;
 _TextAtlas_AddInt(i8, HEAP32[i5 >> 2] | 0, i4);
 _TextAtlas_Add(i8, 14, i4);
 HEAP32[i2 + 320 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i2 + 324 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i2 + 328 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 304 >> 2] = ((HEAP32[i4 >> 2] | 0) - i1 | 0) / 24 | 0;
 STACKTOP = i3;
 return;
}

function _Png_Expand_GRAYSCALE_A_8(i1, i2, i9, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i3 = i1 + -1 | 0;
 i4 = i3 << 1;
 i2 = i9 + i4 | 0;
 i3 = i7 + (i3 << 2) | 0;
 if ((i1 | 0) > 3) {
  i6 = ~i1;
  i6 = ((i6 | 0) > -8 ? i6 : -8) + i1 + 4 | 0;
  i8 = i6 & -4;
  i5 = i1 + -5 - i8 | 0;
  i4 = i4 + -8 - ((2 ? i6 >>> 2 : i6) << 3) | 0;
  i6 = i1 + -4 | 0;
  while (1) {
   i10 = HEAPU8[i2 >> 0] | 0;
   HEAP32[i3 >> 2] = i10 << 8 | i10 | i10 << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24;
   i10 = HEAPU8[i2 + -2 >> 0] | 0;
   HEAP32[i3 + -4 >> 2] = i10 << 8 | i10 | i10 << 16 | (HEAPU8[i2 + -1 >> 0] | 0) << 24;
   i10 = HEAPU8[i2 + -4 >> 0] | 0;
   HEAP32[i3 + -8 >> 2] = i10 << 8 | i10 | i10 << 16 | (HEAPU8[i2 + -3 >> 0] | 0) << 24;
   i10 = HEAPU8[i2 + -6 >> 0] | 0;
   HEAP32[i3 + -12 >> 2] = i10 << 8 | i10 | i10 << 16 | (HEAPU8[i2 + -5 >> 0] | 0) << 24;
   if ((i1 | 0) > 7) {
    i3 = i3 + -16 | 0;
    i2 = i2 + -8 | 0;
    i1 = i1 + -4 | 0;
   } else break;
  }
  i3 = i7 + (i5 << 2) | 0;
  i2 = i9 + i4 | 0;
  i1 = i6 - i8 | 0;
 }
 if ((i1 | 0) > 0) while (1) {
  i10 = HEAPU8[i2 >> 0] | 0;
  HEAP32[i3 >> 2] = i10 << 8 | i10 | i10 << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24;
  if ((i1 | 0) > 1) {
   i3 = i3 + -4 | 0;
   i2 = i2 + -2 | 0;
   i1 = i1 + -1 | 0;
  } else break;
 }
 return;
}

function _TextGroupWidget_NextUrl(i6, i1, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 L1 : do if ((i2 | 0) < (i1 | 0)) while (1) {
  i3 = HEAP8[i6 + i2 >> 0] | 0;
  L5 : do switch (i3 << 24 >> 24) {
  case 38:
  case 104:
   {
    i5 = i1 - i2 | 0;
    if ((i5 | 0) < 7) break L1;
    if (i3 << 24 >> 24 == 38) {
     i4 = i2;
     i3 = i5;
     while (1) {
      i4 = i4 + 2 | 0;
      if ((i3 | 0) <= 3) {
       i2 = i4;
       break L5;
      }
      i5 = i3 + -2 | 0;
      i3 = HEAP8[i6 + i4 >> 0] | 0;
      if (i3 << 24 >> 24 == 38) i3 = i5; else break;
     }
    } else i4 = i2;
    if ((i5 | 0) > 6 & i3 << 24 >> 24 == 104) if ((HEAP8[i6 + (i4 + 1) >> 0] | 0) == 116) if ((HEAP8[i6 + (i4 + 2) >> 0] | 0) == 116) if ((HEAP8[i6 + (i4 + 3) >> 0] | 0) == 112) {
     i3 = i4 + 4 | 0;
     i7 = (HEAP8[i6 + i3 >> 0] | 0) == 115;
     i3 = i7 ? i4 + 5 | 0 : i3;
     if (((i7 ? -5 : -4) + i5 | 0) > 2) if ((HEAP8[i6 + i3 >> 0] | 0) == 58) if ((HEAP8[i6 + (i3 + 1) >> 0] | 0) == 47) if ((HEAP8[i6 + (i3 + 2) >> 0] | 0) == 47) {
      i1 = i2;
      break L1;
     } else i2 = i3; else i2 = i3; else i2 = i3; else i2 = i3;
    } else i2 = i4; else i2 = i4; else i2 = i4; else i2 = i4;
    break;
   }
  default:
   {}
  } while (0);
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (i1 | 0)) break L1;
 } while (0);
 return i1 | 0;
}

function _WoM_ParseConfig(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i4 = i8 + 208 | 0;
 i5 = i8 + 152 | 0;
 i2 = i8 + 144 | 0;
 i6 = i8 + 136 | 0;
 i7 = i8 + 128 | 0;
 HEAP32[i4 >> 2] = i8;
 i3 = i4 + 4 | 0;
 HEAP16[i3 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 128;
 _Stream_ReadonlyMemory(i5, HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 160 >> 2] | 0);
 if (!(_Stream_ReadLine(i5, i4) | 0)) do {
  _Platform_Log(HEAP32[i4 >> 2] | 0, HEAPU16[i3 >> 1] | 0);
  do if (_String_UNSAFE_Separate(i4, 61, i2, i6) | 0) {
   if (_String_CaselessEqualsConst(i2, 47839) | 0) {
    _Env_SetCloudsCol(_WoM_ParseCol(i6, -1) | 0);
    break;
   }
   if (_String_CaselessEqualsConst(i2, 47857) | 0) {
    _Env_SetSkyCol(_WoM_ParseCol(i6, -13159) | 0);
    break;
   }
   if (_String_CaselessEqualsConst(i2, 47873) | 0) {
    _Env_SetFogCol(_WoM_ParseCol(i6, -1) | 0);
    break;
   }
   if (!(_String_CaselessEqualsConst(i2, 47889) | 0)) {
    i1 = (_String_CaselessEqualsConst(i2, 47907) | 0) != 0;
    if (!(i1 & (HEAP8[21469] | 0) == 0)) break;
    _Chat_AddOf(i6, 2);
    break;
   } else {
    if (!((_Convert_ParseInt(i6, i7) | 0) << 24 >> 24)) break;
    _Env_SetEdgeHeight(HEAP32[i7 >> 2] | 0);
    break;
   }
  } while (0);
 } while (!(_Stream_ReadLine(i5, i4) | 0));
 STACKTOP = i8;
 return;
}

function _Hotkeys_QuickSort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if ((i1 | 0) < (i2 | 0)) do {
  i9 = i1 + i2 | 0;
  i9 = HEAP8[355216 + ((1 ? i9 >> 1 : i9) << 3) + 5 >> 0] | 0;
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     i7 = i3 + 1 | 0;
     if ((i9 & 255) < (HEAPU8[355216 + (i3 << 3) + 5 >> 0] | 0)) i3 = i7; else break;
    }
    i8 = i4;
    while (1) {
     i4 = i8 + -1 | 0;
     if ((i9 & 255) > (HEAPU8[355216 + (i8 << 3) + 5 >> 0] | 0)) i8 = i4; else break;
    }
    i6 = 355216 + (i3 << 3) | 0;
    i5 = 355216 + (i8 << 3) | 0;
    if ((i3 | 0) > (i8 | 0)) i4 = i8; else {
     i8 = i6;
     i10 = HEAP32[i8 >> 2] | 0;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i12 = i5;
     i11 = HEAP32[i12 + 4 >> 2] | 0;
     i3 = i6;
     HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i3 + 4 >> 2] = i11;
     i3 = i5;
     HEAP32[i3 >> 2] = i10;
     HEAP32[i3 + 4 >> 2] = i8;
     i3 = i7;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _Hotkeys_QuickSort(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _Hotkeys_QuickSort(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function _TableWidget_BuildMesh(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15 + 4 | 0;
 i14 = i15;
 i8 = HEAP32[i11 >> 2] | 0;
 i9 = HEAP32[i12 + 64 >> 2] | 0;
 i10 = HEAP32[i12 + 68 >> 2] | 0;
 _IsometricDrawer_BeginBatch(i8, i12 + 1752 | 0);
 i2 = i12 + 40 | 0;
 i7 = i12 + 60 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 0) {
  i1 = i12 + 92 | 0;
  i6 = i12 + 72 | 0;
  i3 = (i9 | 0) / 2 | 0;
  i4 = (i10 | 0) / 2 | 0;
  i5 = 0;
  do {
   if ((_TableWidget_GetCoords(i12, i5, i13, i14) | 0) << 24 >> 24) if ((i5 | 0) != (HEAP32[i7 >> 2] | 0)) _IsometricDrawer_AddBatch(HEAP16[i1 + (i5 << 1) >> 1] | 0, +HEAPF32[i6 >> 2], +((HEAP32[i13 >> 2] | 0) + i3 | 0), +((HEAP32[i14 >> 2] | 0) + i4 | 0));
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i2 >> 2] | 0));
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) != -1) {
  _TableWidget_GetCoords(i12, i1, i13, i14) | 0;
  _IsometricDrawer_AddBatch(HEAP16[i12 + 92 + (i1 << 1) >> 1] | 0, +HEAPF32[i12 + 76 >> 2], +((HEAP32[i13 >> 2] | 0) + ((i9 | 0) / 2 | 0) | 0), +((HEAP32[i14 >> 2] | 0) + ((i10 | 0) / 2 | 0) | 0));
 }
 i14 = _IsometricDrawer_EndBatch() | 0;
 HEAP32[i12 + 2712 >> 2] = i14;
 HEAP32[i11 >> 2] = i8 + 23040;
 STACKTOP = i15;
 return;
}

function _CalcBorderRects(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i2 + 48 | 0;
 i8 = i2 + 32 | 0;
 i6 = i2 + 16 | 0;
 i3 = i2;
 i4 = ~~(+(HEAP32[3680] | 0) * 1.4142135381698608);
 i7 = 0 - i4 | 0;
 i9 = i4 << 1;
 _EnvRenderer_Rect(i5, i7, i7, i9 + (HEAP32[244733] | 0) | 0, i4);
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i5 = i1 + 16 | 0;
 _EnvRenderer_Rect(i8, i7, HEAP32[244735] | 0, (HEAP32[244733] | 0) + i9 | 0, i4);
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 i5 = i1 + 32 | 0;
 _EnvRenderer_Rect(i6, i7, 0, i4, HEAP32[244735] | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i1 = i1 + 48 | 0;
 _EnvRenderer_Rect(i3, HEAP32[244733] | 0, 0, i4, HEAP32[244735] | 0);
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i2;
 return;
}

function _Block_CalcRenderBounds(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i1 = i1 & 65535;
 d7 = +HEAPF32[1010980 + (i1 * 12 | 0) >> 2];
 d3 = +HEAPF32[1010980 + (i1 * 12 | 0) + 4 >> 2];
 d5 = +HEAPF32[1010980 + (i1 * 12 | 0) + 8 >> 2];
 d2 = +HEAPF32[1020196 + (i1 * 12 | 0) >> 2];
 d6 = +HEAPF32[1020196 + (i1 * 12 | 0) + 4 >> 2];
 d4 = +HEAPF32[1020196 + (i1 * 12 | 0) + 8 >> 2];
 if (!(HEAP8[992548 + i1 >> 0] | 0)) {
  if ((HEAP8[1006372 + i1 >> 0] | 0) == 3) {
   i8 = (HEAP8[1000996 + i1 >> 0] | 0) == 2;
   d2 = i8 ? d2 : d2 + 6.2500000931322575e-03;
   d4 = i8 ? d4 : d4 + 6.2500000931322575e-03;
   d6 = i8 ? d6 : d6 + -6.2500000931322575e-03;
   d7 = i8 ? d7 : d7 + 6.2500000931322575e-03;
   d5 = i8 ? d5 : d5 + 6.2500000931322575e-03;
   d3 = i8 ? d3 : d3 + -6.2500000931322575e-03;
  }
 } else {
  d2 = d2 + 6.2500000931322575e-03;
  d4 = d4 + 6.2500000931322575e-03;
  d6 = d6 + -.09375;
  d7 = d7 + 6.2500000931322575e-03;
  d5 = d5 + 6.2500000931322575e-03;
  d3 = d3 + -.09375;
 }
 HEAPF32[1029412 + (i1 * 12 | 0) >> 2] = d7;
 HEAPF32[1029412 + (i1 * 12 | 0) + 4 >> 2] = d3;
 HEAPF32[1029412 + (i1 * 12 | 0) + 8 >> 2] = d5;
 HEAPF32[1038628 + (i1 * 12 | 0) >> 2] = d2;
 HEAPF32[1038628 + (i1 * 12 | 0) + 4 >> 2] = d6;
 HEAPF32[1038628 + (i1 * 12 | 0) + 8 >> 2] = d4;
 return;
}

function _CustomParticle_Render(i1, d2, i9) {
 i1 = i1 | 0;
 d2 = +d2;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i10 + 24 | 0;
 i8 = i10 + 16 | 0;
 i7 = i10;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 i3 = 833696 + (i5 * 52 | 0) | 0;
 HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 d11 = +HEAPF32[i1 + 48 >> 2];
 d11 = +(_Math_Floor((d11 - +HEAPF32[i1 + 12 >> 2]) / d11 * +(HEAPU8[833696 + (i5 * 52 | 0) + 20 >> 0] | 0)) | 0);
 i3 = i7 + 8 | 0;
 d12 = +HEAPF32[i3 >> 2];
 d13 = +HEAPF32[i7 >> 2];
 d11 = (d12 - d13) * d11;
 HEAPF32[i7 >> 2] = d13 + d11;
 HEAPF32[i3 >> 2] = d12 + d11;
 _Vec3_Lerp(i6, i1 + 16 | 0, i1 + 28 | 0, d2);
 i1 = HEAP32[i1 + 40 >> 2] | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i1;
 i1 = _Math_Floor(+HEAPF32[i6 >> 2]) | 0;
 i3 = _Math_Floor(+HEAPF32[i6 + 4 >> 2]) | 0;
 i4 = _Math_Floor(+HEAPF32[i6 + 8 >> 2]) | 0;
 if (!(HEAP8[833696 + (i5 * 52 | 0) + 23 >> 0] | 0)) i1 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i1, i3, i4) | 0; else i1 = -1;
 _Particle_DoRender(i8, i6, i7, _PackedCol_Tint(i1, HEAP32[833696 + (i5 * 52 | 0) + 16 >> 2] | 0) | 0, i9);
 STACKTOP = i10;
 return;
}

function _InputHandler_PlaceBlock() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 12 | 0;
 i8 = i10;
 HEAP32[i8 >> 2] = HEAP32[422239];
 HEAP32[i8 + 4 >> 2] = HEAP32[422240];
 HEAP32[i8 + 8 >> 2] = HEAP32[422241];
 do if (HEAP8[1688968] | 0) {
  i4 = HEAP32[i8 >> 2] | 0;
  i5 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = HEAP32[i8 + 8 >> 2] | 0;
  if ((_World_Contains_1085(i4, i5, i6) | 0) << 24 >> 24) {
   i7 = _World_GetBlock_1086(i4, i5, i6) | 0;
   i1 = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
   if (HEAP8[1868729] | 0) i1 = _AutoRotate_RotateBlock(i1) | 0;
   if (!((_Game_CanPick(i7) | 0) << 24 >> 24)) {
    i2 = i1 & 65535;
    if (HEAP8[1057060 + i2 >> 0] | 0) {
     i3 = i7 & 65535;
     if ((HEAP8[1006372 + i2 >> 0] | 0) == 4) if ((HEAP8[1006372 + i3 >> 0] | 0) != 4) break;
     if (!(HEAP8[1000996 + i3 >> 0] | 0)) if (!(HEAP8[1057828 + i3 >> 0] | 0)) break;
     if ((_CheckIsFree(i1) | 0) << 24 >> 24) {
      _Game_ChangeBlock(i4, i5, i6, i1);
      HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
      _Event_RaiseBlock(1678844, i9, i7, i1);
     }
    }
   }
  }
 } while (0);
 STACKTOP = i10;
 return;
}

function _ClassicLighting_CalcHeightAt(i1, i7, i2, i8) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i7) | 0) + i2 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 i1 = (i7 | 0) > -1;
 L1 : do if ((HEAP32[244744] | 0) < 256) if (i1) {
  i4 = HEAP32[244730] | 0;
  i5 = HEAP32[244739] | 0;
  i2 = i7;
  while (1) {
   i1 = HEAP8[i4 + i3 >> 0] | 0;
   if (HEAP8[993316 + (i1 & 255) >> 0] | 0) break;
   if ((i2 | 0) > 0) {
    i3 = i3 - i5 | 0;
    i2 = i2 + -1 | 0;
   } else {
    i1 = -10;
    i2 = -10;
    break L1;
   }
  }
  i1 = HEAPU8[1005604 + (i1 & 255) >> 0] | 0;
  i2 = i2 - ((6 ? i1 >>> 6 : i1) & 1) | 0;
  i1 = i2 & 65535;
 } else {
  i1 = -10;
  i2 = -10;
 } else if (i1) {
  i6 = HEAP32[244730] | 0;
  i4 = HEAP32[244731] | 0;
  i5 = HEAP32[244739] | 0;
  i2 = i7;
  while (1) {
   i1 = HEAPU8[i4 + i3 >> 0] << 8 | HEAPU8[i6 + i3 >> 0];
   if (HEAP8[993316 + i1 >> 0] | 0) break;
   if ((i2 | 0) > 0) {
    i3 = i3 - i5 | 0;
    i2 = i2 + -1 | 0;
   } else {
    i1 = -10;
    i2 = -10;
    break L1;
   }
  }
  i1 = HEAPU8[1005604 + i1 >> 0] | 0;
  i2 = i2 - ((6 ? i1 >>> 6 : i1) & 1) | 0;
  i1 = i2 & 65535;
 } else {
  i1 = -10;
  i2 = -10;
 } while (0);
 HEAP16[(HEAP32[424246] | 0) + (i8 << 1) >> 1] = i1;
 return i2 | 0;
}

function _Inflate_StreamRead(i1, i2, i3, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i14;
 HEAP32[i12 >> 2] = 0;
 i11 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i11 + 20 >> 2] = i2;
 i5 = i11 + 24 | 0;
 HEAP32[i5 >> 2] = i3;
 L1 : do if (!i3) i1 = 0; else {
  i4 = i11 + 16 | 0;
  i8 = i11 + 8256 | 0;
  i6 = i11 + 12 | 0;
  i9 = i11 + 64 | 0;
  i10 = i8;
  i7 = i11 + 28 | 0;
  i1 = i3;
  i2 = 1;
  while (1) {
   if ((HEAP8[i11 >> 0] | 0) == 13) break;
   if (!(HEAP32[i4 >> 2] | 0)) {
    i1 = HEAP32[i6 >> 2] | 0;
    if ((i1 | 0) == (i8 | 0)) {
     HEAP32[i6 >> 2] = i9;
     i1 = i9;
    }
    i3 = HEAP32[i7 >> 2] | 0;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 63](i3, i1, i10 - i1 | 0, i13) | 0;
    if (i1 | 0) break L1;
    i2 = HEAP32[i13 >> 2] | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i2;
    i1 = HEAP32[i5 >> 2] | 0;
    i2 = (i2 | 0) != 0 & 1;
   }
   _Inflate_Process(i11);
   HEAP32[i12 >> 2] = i1 - (HEAP32[i5 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
   i1 = HEAP32[i5 >> 2] | 0;
   if (!(i2 << 24 >> 24 != 0 & (i1 | 0) != 0)) {
    i1 = 0;
    break L1;
   }
  }
  i1 = HEAP32[i11 + 44736 >> 2] | 0;
 } while (0);
 STACKTOP = i14;
 return i1 | 0;
}

function _Particles_RainSnowEffect(d3, d4, d5) {
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i2 = 0;
 do {
  i1 = HEAP32[431721] | 0;
  if ((i1 | 0) == 600) {
   _Rain_RemoveAt(0);
   i1 = HEAP32[431721] | 0;
  }
  HEAP32[431721] = i1 + 1;
  d8 = +_Random_Float(978296) * .800000011920929 + -.4000000059604645;
  HEAPF32[916608 + (i1 * 44 | 0) >> 2] = d8;
  d8 = +_Random_Float(978296) * .800000011920929 + -.4000000059604645;
  HEAPF32[916608 + (i1 * 44 | 0) + 8 >> 2] = d8;
  d8 = +_Random_Float(978296) + .4000000059604645;
  HEAPF32[916608 + (i1 * 44 | 0) + 4 >> 2] = d8;
  d8 = +_Random_Float(978296) + d3;
  i7 = 916608 + (i1 * 44 | 0) + 16 | 0;
  HEAPF32[i7 >> 2] = d8;
  d8 = +_Random_Float(978296) * .10000000149011612 + d4 + .009999999776482582;
  HEAPF32[916608 + (i1 * 44 | 0) + 20 >> 2] = d8;
  d8 = +_Random_Float(978296) + d5;
  HEAPF32[916608 + (i1 * 44 | 0) + 24 >> 2] = d8;
  i6 = 916608 + (i1 * 44 | 0) + 28 | 0;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAPF32[916608 + (i1 * 44 | 0) + 12 >> 2] = 40.0;
  i6 = _Random_Next(978296, 30) | 0;
  HEAPF32[916608 + (i1 * 44 | 0) + 40 >> 2] = (i6 | 0) > 27 ? 2.0 : (i6 | 0) > 24 ? 4.0 : 3.0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 2);
 return;
}

function _CalcBlockChange(i10, i11, i12, i3, i5, i9) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i13;
 i6 = _GetBlockBrightness(i3, i9) | 0;
 i7 = _GetBlockBrightness(i5, i9) | 0;
 i8 = _GetBrightness(i10, i11, i12, i9) | 0;
 if (!((i8 | i7) << 24 >> 24)) {
  i2 = i5 & 65535;
  if (!(HEAP8[993316 + i2 >> 0] | 0)) i4 = 4; else if ((HEAP8[1005604 + i2 >> 0] | 0) != -1) i4 = 4;
 } else i4 = 4;
 L4 : do if ((i4 | 0) == 4) {
  if ((i8 & 255) < (i7 & 255)) {
   HEAP32[i1 >> 2] = i10;
   HEAP32[i1 + 4 >> 2] = i11;
   HEAP32[i1 + 8 >> 2] = i12;
   HEAP8[i1 + 12 >> 0] = i7;
   _Queue_Enqueue(1688728, i1);
   _FlushLightQueue(i9, 1);
   break;
  }
  i2 = i3 & 65535;
  i1 = HEAP8[1006372 + i2 >> 0] | 0;
  do if (i1 << 24 >> 24) if ((i1 & -2) << 24 >> 24 == 2 | (HEAP8[993316 + i2 >> 0] | 0) == 0) {
   i2 = i5 & 65535;
   i1 = HEAP8[1006372 + i2 >> 0] | 0;
   if (i1 << 24 >> 24) if (i1 << 24 >> 24 == 2 | (HEAP8[993316 + i2 >> 0] | 0) == 0) if (!((i7 | i6) << 24 >> 24)) break L4; else break; else if ((i7 | i6) << 24 >> 24 != 0 | i1 << 24 >> 24 != 3) break; else break L4;
  } while (0);
  _CalcUnlight(i10, i11, i12, i8, i9);
 } while (0);
 STACKTOP = i13;
 return;
}

function _Commands_FindMatch(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7 + 8 | 0;
 i6 = i7;
 i1 = HEAP32[416803] | 0;
 L1 : do if (!i1) i3 = 12; else {
  do {
   _String_FromReadonly(i2, HEAP32[i1 >> 2] | 0);
   i10 = i2;
   i9 = HEAP32[i10 + 4 >> 2] | 0;
   i8 = i5;
   HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i8 + 4 >> 2] = i9;
   if (_String_CaselessEquals(i5, i4) | 0) break L1;
   i1 = HEAP32[i1 + 32 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i1 = HEAP32[416803] | 0;
  if (!i1) i3 = 12; else {
   i2 = i1;
   i1 = 0;
   while (1) {
    _String_FromReadonly(i6, HEAP32[i2 >> 2] | 0);
    i8 = i6;
    i9 = HEAP32[i8 + 4 >> 2] | 0;
    i10 = i5;
    HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i10 + 4 >> 2] = i9;
    if (_String_CaselessStarts(i5, i4) | 0) if (!i1) i1 = i2; else {
     i3 = 9;
     break;
    }
    i2 = HEAP32[i2 + 32 >> 2] | 0;
    if (!i2) {
     i3 = 11;
     break;
    }
   }
   if ((i3 | 0) == 9) {
    _Chat_Add1(29811, i4);
    i1 = 0;
    break;
   } else if ((i3 | 0) == 11) if (!i1) {
    i3 = 12;
    break;
   } else break;
  }
 } while (0);
 if ((i3 | 0) == 12) {
  _Chat_Add1(29873, i4);
  _Chat_AddRaw(29916);
  i1 = 0;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _SortMapChunks(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = HEAP32[424253] | 0;
 i13 = HEAP32[424255] | 0;
 if ((i1 | 0) < (i2 | 0)) do {
  i11 = i1 + i2 | 0;
  i11 = HEAP32[i13 + ((1 ? i11 >> 1 : i11) << 2) >> 2] | 0;
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   i4 = i2;
  } else {
   i3 = i1;
   i4 = i2;
   do {
    while (1) {
     i8 = i13 + (i3 << 2) | 0;
     i7 = HEAP32[i8 >> 2] | 0;
     i9 = i3 + 1 | 0;
     if (i11 >>> 0 > i7 >>> 0) i3 = i9; else break;
    }
    i10 = i4;
    while (1) {
     i6 = i13 + (i10 << 2) | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     i4 = i10 + -1 | 0;
     if (i11 >>> 0 < i5 >>> 0) i10 = i4; else break;
    }
    if ((i3 | 0) > (i10 | 0)) i4 = i10; else {
     HEAP32[i8 >> 2] = i5;
     HEAP32[i6 >> 2] = i7;
     i7 = i12 + (i3 << 2) | 0;
     i8 = HEAP32[i7 >> 2] | 0;
     i3 = i12 + (i10 << 2) | 0;
     HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i8;
     i3 = i9;
    }
   } while ((i3 | 0) <= (i4 | 0));
  }
  if ((i4 - i1 | 0) > (i2 - i3 | 0)) if ((i2 | 0) > (i3 | 0)) {
   _SortMapChunks(i3, i2);
   i2 = i4;
  } else i2 = i4; else if ((i4 | 0) > (i1 | 0)) {
   _SortMapChunks(i1, i4);
   i1 = i3;
  } else i1 = i3;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function _Zip_ReadCentralDirectory(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i5 = i7 + 512 | 0;
 i4 = i7 + 560 | 0;
 i2 = i7;
 i3 = HEAP32[i6 >> 2] | 0;
 i1 = _Stream_Read(i3, i5, 42) | 0;
 if (!i1) {
  i8 = _Stream_GetU16_LE(i5 + 24 | 0) | 0;
  i1 = i8 & 65535;
  if ((i8 & 65535) > 512) i1 = -857812940; else {
   _String_Init(i4, i2, i1, i1);
   i1 = _Stream_Read(i3, i2, i1) | 0;
   if (!i1) {
    i1 = (_Stream_GetU16_LE(i5 + 26 | 0) | 0) & 65535;
    i8 = (_Stream_GetU16_LE(i5 + 28 | 0) | 0) & 65535;
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 12 >> 2] & 127](i3, i8 + i1 | 0) | 0;
    if (!i1) if (!((FUNCTION_TABLE_ii[HEAP32[i6 + 4 >> 2] & 63](i4) | 0) << 24 >> 24)) i1 = 0; else {
     i2 = i6 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) < (HEAP32[i6 + 16 >> 2] | 0)) {
      i8 = HEAP32[i6 + 12 >> 2] | 0;
      HEAP32[i2 >> 2] = i1 + 1;
      i6 = _Stream_GetU32_LE(i5 + 16 | 0) | 0;
      HEAP32[i8 + (i1 * 12 | 0) >> 2] = i6;
      i6 = _Stream_GetU32_LE(i5 + 20 | 0) | 0;
      HEAP32[i8 + (i1 * 12 | 0) + 4 >> 2] = i6;
      i6 = _Stream_GetU32_LE(i5 + 38 | 0) | 0;
      HEAP32[i8 + (i1 * 12 | 0) + 8 >> 2] = i6;
      i1 = 0;
     } else i1 = -857812947;
    }
   }
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _HotkeyListScreen_EntryClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i9 + 32 | 0;
 i7 = i9 + 8 | 0;
 i6 = i9;
 i5 = i9 + 24 | 0;
 i4 = i9 + 16 | 0;
 i3 = i7;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 _ListScreen_UNSAFE_GetCur(i6, i1, i2);
 _String_UNSAFE_Separate(i6, 43, i5, i4) | 0;
 i6 = _String_IndexOfConst(i4, 44032) | 0;
 i6 = (31 ? i6 >>> 31 : i6) ^ 1;
 i3 = (_String_IndexOfConst(i4, 44037) | 0) > -1;
 i6 = i3 ? i6 | 2 : i6;
 i4 = (_String_IndexOfConst(i4, 44043) | 0) > -1;
 i6 = i4 ? i6 | 4 : i6;
 i5 = _Utils_ParseEnum(i5, 0, 5008, 172) | 0;
 i4 = HEAP32[422522] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i1 = 0;
  while (1) {
   i2 = HEAP8[355216 + (i1 << 3) + 4 >> 0] | 0;
   i3 = HEAP8[355216 + (i1 << 3) + 5 >> 0] | 0;
   if ((i5 | 0) == (i2 & 255 | 0) & (i6 | 0) == (i3 & 255 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L1;
  }
  i6 = HEAP16[355216 + (i1 << 3) + 6 >> 1] | 0;
  HEAP32[i7 >> 2] = HEAP32[355216 + (i1 << 3) >> 2];
  HEAP8[i7 + 4 >> 0] = i2;
  HEAP8[i7 + 5 >> 0] = i3;
  HEAP16[i7 + 6 >> 1] = i6;
 } while (0);
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 _EditHotkeyScreen_Show(i8);
 STACKTOP = i9;
 return;
}

function _ChatInputWidget_Render(i14, d8) {
 i14 = i14 | 0;
 d8 = +d8;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i3 = HEAP32[i14 + 4 >> 2] | 0;
 if (!(HEAP8[i14 + 21 >> 0] & 1)) {
  i12 = i14 + 72 | 0;
  i7 = i14 + 156 | 0;
  i6 = i14 + 152 | 0;
  i13 = i3 << 2;
  i4 = i14 + 145 | 0;
  i10 = i14 + 108 | 0;
  i11 = i14 + 96 | 0;
  i15 = i14 + 180 | 0;
  i5 = i14 + 160 | 0;
  i9 = 0;
  i16 = HEAP32[i14 + 8 >> 2] | 0;
  while (1) {
   if (i9 | 0) if (!(HEAP16[i12 + (i9 << 3) + 4 >> 1] | 0)) break;
   do if ((HEAP32[i7 >> 2] | 0) == (i9 | 0)) {
    if ((HEAP32[i6 >> 2] | 0) == 64) i1 = HEAP32[i11 + (i9 << 2) >> 2] | 0; else {
     i1 = HEAP32[i11 + (i9 << 2) >> 2] | 0;
     if ((HEAP32[i5 >> 2] | 0) != -1) {
      i2 = 0;
      break;
     }
    }
    i2 = HEAPU16[i15 >> 1] | 0;
   } else {
    i1 = HEAP32[i11 + (i9 << 2) >> 2] | 0;
    i2 = 0;
   } while (0);
   i1 = i2 + i1 | 0;
   i2 = (HEAP32[466968] | 0) - i13 | 0;
   _Gfx_Draw2DFlat(i3, i16, ((i1 | 0) > (i2 | 0) ? i1 : i2) + (HEAPU8[i4 >> 0] << 1) | 0, HEAP32[i10 >> 2] | 0, 2130706432);
   i9 = i9 + 1 | 0;
   if (i9 >>> 0 >= 3) break; else i16 = (HEAP32[i10 >> 2] | 0) + i16 | 0;
  }
  _Texture_Render(i14 + 112 | 0);
  _InputWidget_RenderCaret(i14, d8);
 }
 return;
}

function _NetInterpComp_SetPosition(i4, i8, i3, i7) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i9 + 24 | 0;
 i5 = i9 + 12 | 0;
 i6 = i9;
 i1 = i4 + 64 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 if ((i7 | 32 | 0) == 32) {
  HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 } else _Vec3_Add_328(i1, i1, i8);
 if (!i7) {
  i8 = i3 + 352 | 0;
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  i8 = i3 + 384 | 0;
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i4 + 92 >> 2] = 0;
 } else {
  _Vec3_Lerp(i6, i5, i1, .5);
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  _NetInterpComp_AddPosition(i4, i2);
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  _NetInterpComp_AddPosition(i4, i2);
 }
 STACKTOP = i9;
 return;
}

function _Map_LoadFrom(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i8;
 i3 = i8 + 104 | 0;
 i2 = i8 + 96 | 0;
 i7 = i8 + 64 | 0;
 i6 = i8 + 8 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = 0;
 HEAP32[i7 + 28 >> 2] = 0;
 _Game_Reset();
 HEAP32[422204] = i7;
 i1 = _Stream_OpenFile(i6, i4) | 0;
 if (!i1) {
  i1 = _MapImporter_Find(i4) | 0;
  if (!i1) i1 = -857812990; else {
   i1 = FUNCTION_TABLE_ii[HEAP32[i1 + 4 >> 2] & 63](i6) | 0;
   if (!i1) i1 = 0; else _World_Reset();
  }
  FUNCTION_TABLE_ii[HEAP32[i6 + 28 >> 2] & 63](i6) | 0;
  if (i1 | 0) _Logger_SysWarn2(i1, 50210, i4);
  _World_SetNewMap(HEAP32[244730] | 0, HEAP32[244733] | 0, HEAP32[244734] | 0, HEAP32[244735] | 0);
  if (!(HEAP32[422204] | 0)) _LocalPlayer_CalcDefaultSpawn(HEAP32[417347] | 0, i7);
  _LocalPlayers_MoveToSpawn(i7);
  i6 = HEAP32[i4 + 4 >> 2] | 0;
  i7 = i5;
  HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i7 + 4 >> 2] = i6;
  _Utils_UNSAFE_GetFilename(i5);
  _String_UNSAFE_Separate(i5, 46, i3, i2) | 0;
  _String_Copy(978992, i3);
 } else _Logger_SysWarn2(i1, 51350, i4);
 STACKTOP = i8;
 return i1 | 0;
}

function _Physics_DeleteSponge(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = HEAP32[244733] | 0;
 i3 = (i2 | 0) / (i1 | 0) | 0;
 i1 = i2 - (Math_imul(i3, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i8 = (i3 | 0) / (i2 | 0) | 0;
 i2 = i3 - (Math_imul(i8, i2) | 0) | 0;
 i3 = i8 + 3 | 0;
 i10 = i2 + -3 | 0;
 i6 = i2 + 3 | 0;
 i11 = i1 + -3 | 0;
 i4 = i1 + 3 | 0;
 i13 = i8 + -3 | 0;
 while (1) {
  i7 = (_Math_AbsI_83(i13 - i8 | 0) | 0) == 3;
  i14 = i10;
  while (1) {
   i9 = i14 - i2 | 0;
   i12 = i11;
   while (1) {
    if (i7) i15 = 7; else if ((_Math_AbsI_83(i9) | 0) == 3) i15 = 7; else if ((_Math_AbsI_83(i12 - i1 | 0) | 0) == 3) i15 = 7;
    if ((i15 | 0) == 7) {
     i15 = 0;
     if ((_World_Contains(i12, i13, i14) | 0) << 24 >> 24) {
      i5 = (Math_imul(HEAP32[244735] | 0, i13) | 0) + i14 | 0;
      i5 = (Math_imul(i5, HEAP32[244733] | 0) | 0) + i12 | 0;
      if ((HEAP8[(HEAP32[244730] | 0) + i5 >> 0] & -2) << 24 >> 24 == 8) _TickQueue_Enqueue(1656384, i5 | 134217728);
     }
    }
    if ((i12 | 0) < (i4 | 0)) i12 = i12 + 1 | 0; else break;
   }
   if ((i14 | 0) < (i6 | 0)) i14 = i14 + 1 | 0; else break;
  }
  if ((i13 | 0) < (i3 | 0)) i13 = i13 + 1 | 0; else break;
 }
 return;
}

function _UpdateChunksStill(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i6 = HEAP32[424263] | 0;
 i7 = HEAP32[424262] | 0;
 if ((HEAP32[424248] | 0) > 0) {
  i8 = i7 + 512 | 0;
  i10 = 0;
  i1 = 0;
  do {
   i4 = HEAP32[(HEAP32[424253] | 0) + (i10 << 2) >> 2] | 0;
   i5 = i4 + 6 | 0;
   i3 = HEAP8[i5 >> 0] | 0;
   do if (!(i3 & 2)) {
    i2 = HEAP32[(HEAP32[424255] | 0) + (i10 << 2) >> 2] | 0;
    if (!((i3 & 16) != 0 | (i2 | 0) < (i8 | 0))) {
     _DeleteChunk(i4);
     break;
    }
    if (!((i3 & 4) == 0 | (i2 | 0) > (i7 | 0))) if ((HEAP32[i9 >> 2] | 0) < (HEAP32[3896] | 0)) {
     _DeleteChunk(i4);
     _BuildChunk(i4, i9);
     if ((i2 | 0) > (i6 | 0)) i2 = 0; else i2 = (_FrustumCulling_SphereInFrustum(+(HEAPU16[i4 >> 1] | 0), +(HEAPU16[i4 + 2 >> 1] | 0), +(HEAPU16[i4 + 4 >> 1] | 0), 14.0) | 0) << 24 >> 24 != 0;
     i3 = HEAP8[i5 >> 0] | 0;
     HEAP8[i5 >> 0] = i3 & -2 | i2 & 1;
     if (!(i2 & (i3 & 2) == 0)) break;
     HEAP32[(HEAP32[424254] | 0) + (i1 << 2) >> 2] = i4;
     i1 = i1 + 1 | 0;
     break;
    }
    if (i3 & 1) {
     HEAP32[(HEAP32[424254] | 0) + (i1 << 2) >> 2] = i4;
     i1 = i1 + 1 | 0;
    }
   } while (0);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (HEAP32[424248] | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _Drawer2D_UNSAFE_NextPart(i6, i8, i3) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = i6 + 4 | 0;
 i1 = HEAP16[i7 >> 1] | 0;
 if ((i1 & 65535) > 1) {
  i2 = HEAP32[i6 >> 2] | 0;
  if ((HEAP8[i2 >> 0] | 0) == 38) {
   i2 = HEAP8[i2 + 1 >> 0] | 0;
   if ((HEAP32[1667324 + ((i2 & 255) << 2) >> 2] | 0) >>> 0 > 16777215) {
    HEAP8[i3 >> 0] = i2;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
    i1 = (HEAPU16[i7 >> 1] | 0) + 65534 & 65535;
    HEAP16[i7 >> 1] = i1;
    i4 = 5;
   } else i4 = 7;
  } else i4 = 7;
 } else i4 = 5;
 if ((i4 | 0) == 5) if (!(i1 << 16 >> 16)) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = i6;
  i1 = 0;
 } else i4 = 7;
 L8 : do if ((i4 | 0) == 7) {
  i4 = HEAP32[i6 >> 2] | 0;
  i3 = i4;
  i2 = i1 & 65535;
  i5 = 0;
  while (1) {
   i1 = i5 + 1 | 0;
   if ((HEAP8[i4 + i5 >> 0] | 0) == 38) if ((_Drawer2D_ValidColorCodeAt(i6, i1) | 0) << 24 >> 24) {
    i2 = i6;
    i1 = i5;
    break L8;
   }
   if (i1 >>> 0 < i2 >>> 0) i5 = i1; else {
    i2 = i6;
    break;
   }
  }
 } while (0);
 HEAP32[i8 >> 2] = i3;
 i6 = i8 + 4 | 0;
 HEAP16[i6 >> 1] = i1;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
 i8 = (HEAPU16[i7 >> 1] | 0) - i1 | 0;
 HEAP16[i7 >> 1] = i8;
 return ((HEAP16[i6 >> 1] | 0) != 0 | (i8 & 65535 | 0) != 0) & 1 | 0;
}

function _CPE_SetMapEnvProperty(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _Stream_GetU32_BE(i2 + 1 | 0) | 0;
 i1 = (i1 | 0) > -16777215 ? i1 : -16777215;
 i1 = (i1 | 0) < 16777215 ? i1 : 16777215;
 do switch (HEAP8[i2 >> 0] | 0) {
 case 0:
  {
   i2 = (i1 | 0) > 0 ? i1 : 0;
   _Env_SetSidesBlock(((i2 | 0) < 767 ? i2 : 767) & 65535);
   break;
  }
 case 1:
  {
   i2 = (i1 | 0) > 0 ? i1 : 0;
   _Env_SetEdgeBlock(((i2 | 0) < 767 ? i2 : 767) & 65535);
   break;
  }
 case 2:
  {
   _Env_SetEdgeHeight(i1);
   break;
  }
 case 3:
  {
   _Env_SetCloudsHeight(i1);
   break;
  }
 case 4:
  {
   i2 = (i1 | 0) > -32767 ? i1 : -32767;
   i2 = (i2 | 0) < 32767 ? i2 : 32767;
   HEAP32[3682] = (i2 | 0) < 1 ? 32768 : i2;
   _Game_SetViewDistance(HEAP32[3681] | 0);
   break;
  }
 case 5:
  {
   _Env_SetCloudsSpeed(+(i1 | 0) * .00390625);
   break;
  }
 case 6:
  {
   _Env_SetWeatherSpeed(+(i1 | 0) * .00390625);
   break;
  }
 case 7:
  {
   _Env_SetWeatherFade(+(i1 | 0) * .0078125);
   break;
  }
 case 8:
  {
   _Env_SetExpFog((i1 | 0) != 0 & 1);
   break;
  }
 case 9:
  {
   _Env_SetSidesOffset(i1);
   break;
  }
 case 10:
  {
   _Env_SetSkyboxHorSpeed(+(i1 | 0) * .0009765625);
   break;
  }
 case 11:
  {
   _Env_SetSkyboxVerSpeed(+(i1 | 0) * .0009765625);
   break;
  }
 default:
  {}
 } while (0);
 return;
}

function _TextGroupWidget_Output(i7, i8, i5, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i10 = 0;
 i3 = HEAP16[i7 >> 1] | 0;
 i2 = i3 << 16 >> 16;
 do if ((i2 | 0) < (i5 | 0)) {
  i1 = HEAP16[i7 + 2 >> 1] | 0;
  if (i1 << 16 >> 16) {
   i6 = i7 + 4 | 0;
   HEAP16[i6 >> 1] = i3;
   i1 = i1 & 32767;
   i4 = i7 + 6 | 0;
   HEAP16[i4 >> 1] = i1;
   if ((i2 | 0) < (i8 | 0)) {
    i1 = i1 & 65535;
    if ((i1 + i2 | 0) <= (i8 | 0)) break;
    i10 = i8 - i2 | 0;
    i2 = i10 + (i3 & 65535) | 0;
    i3 = i2 & 65535;
    HEAP16[i6 >> 1] = i3;
    i1 = i1 - i10 & 65535;
    HEAP16[i4 >> 1] = i1;
    i2 = i2 << 16;
    i2 = 16 ? i2 >> 16 : i2;
   }
   i2 = i2 - i5 | 0;
   if ((i2 + (i1 << 16 >> 16) | 0) > 0) {
    i1 = 0 - i2 & 65535;
    HEAP16[i4 >> 1] = i1;
   }
   HEAP16[i6 >> 1] = (i3 & 65535) - i8;
   if (i1 << 16 >> 16) {
    i10 = HEAP32[i9 >> 2] | 0;
    i5 = i7;
    i5 = HEAPU16[i5 >> 1] | HEAPU16[i5 + 2 >> 1] << 16;
    i7 = i7 + 4 | 0;
    i7 = HEAPU16[i7 >> 1] | HEAPU16[i7 + 2 >> 1] << 16;
    i8 = i10;
    i6 = i8;
    HEAP16[i6 >> 1] = i5;
    HEAP16[i6 + 2 >> 1] = i5 >>> 16;
    i8 = i8 + 4 | 0;
    HEAP16[i8 >> 1] = i7;
    HEAP16[i8 + 2 >> 1] = i7 >>> 16;
    HEAP32[i9 >> 2] = i10 + 8;
   }
  }
 } while (0);
 return;
}

function _TexIdsOverlay_BuildTerrain(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i14;
 i10 = HEAP32[i1 + 44 >> 2] | 0;
 i2 = HEAP32[i1 + 36 >> 2] | 0;
 HEAPF32[i12 + 12 >> 2] = 0.0;
 HEAPF32[i12 + 20 >> 2] = .9993749856948853;
 i13 = i10 & 65535;
 HEAP16[i12 + 8 >> 1] = i13;
 HEAP16[i12 + 10 >> 1] = i13;
 if ((HEAP32[460928] | 0) > 0) {
  i13 = i12 + 4 | 0;
  i9 = i1 + 40 | 0;
  i8 = i12 + 6 | 0;
  i6 = i12 + 16 | 0;
  i7 = i12 + 24 | 0;
  i4 = i10 << 4;
  i3 = 0;
  i5 = 0;
  while (1) {
   i1 = 0;
   do {
    i17 = (Math_imul(i1 & 15, i10) | 0) + i2 & 65535;
    HEAP16[i13 >> 1] = i17;
    i17 = (HEAP32[i9 >> 2] | 0) + (Math_imul(4 ? i1 >>> 4 : i1, i10) | 0) & 65535;
    HEAP16[i8 >> 1] = i17;
    d16 = +HEAPF32[460411];
    d15 = d16 * +(HEAP32[460409] & i1 + i3 | 0);
    HEAPF32[i6 >> 2] = d15;
    HEAPF32[i7 >> 2] = d16 * .9993749856948853 + d15;
    _Gfx_Make2DQuad(i12, -1, i11);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 256);
   i5 = i5 + 16 | 0;
   if ((i5 | 0) >= (HEAP32[460928] | 0)) break; else {
    i3 = i3 + 256 | 0;
    i2 = i2 + i4 | 0;
   }
  }
 }
 STACKTOP = i14;
 return;
}

function _TableWidget_PointerMove(i8, i1, i9, i10) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i11 + 4 | 0;
 i7 = i11;
 i5 = i8 + 1628 | 0;
 do if (!(FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] & 63](i5, i1, i9, i10) | 0)) {
  i1 = i8 + 1720 | 0;
  i2 = i8 + 1724 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) break;
  HEAP32[i1 >> 2] = i9;
  HEAP32[i2 >> 2] = i10;
  i5 = i8 + 60 | 0;
  HEAP32[i5 >> 2] = -1;
  i2 = HEAP32[i8 + 64 >> 2] | 0;
  i3 = HEAP32[i8 + 68 >> 2] | 0;
  i4 = Math_imul(HEAP32[i8 + 52 >> 2] | 0, i3) | 0;
  L6 : do if (_Gui_Contains(HEAP32[i8 + 4 >> 2] | 0, (HEAP32[i8 + 8 >> 2] | 0) + 3 | 0, HEAP32[i8 + 12 >> 2] | 0, i4 + -6 | 0, i9, i10) | 0) {
   i4 = i8 + 40 | 0;
   if ((HEAP32[i4 >> 2] | 0) > 0) {
    i1 = 0;
    while (1) {
     _TableWidget_GetCoords(i8, i1, i6, i7) | 0;
     if (_Gui_Contains(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, i2, i3, i9, i10) | 0) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (HEAP32[i4 >> 2] | 0)) break L6;
    }
    HEAP32[i5 >> 2] = i1;
   }
  } while (0);
  _TableWidget_RecreateTitle(i8, 0);
 } while (0);
 STACKTOP = i11;
 return 1;
}

function _Normal_LightColor(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0;
 i1 = HEAPU8[1005604 + (i1 & 65535) >> 0] | 0;
 i6 = i2 & 255;
 i1 = (i6 ? i1 >>> i6 : i1) & 1;
 L1 : do switch (i2 << 24 >> 24) {
 case 0:
  if ((i1 | 0) > (i3 | 0)) {
   i1 = HEAP32[466943] | 0;
   break L1;
  } else {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i3 - i1 | 0, i4, i5) | 0;
   break L1;
  }
 case 1:
  if (((HEAP32[244736] | 0) - i1 | 0) < (i3 | 0)) {
   i1 = HEAP32[466943] | 0;
   break L1;
  } else {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i1 + i3 | 0, i4, i5) | 0;
   break L1;
  }
 case 2:
  if ((i1 | 0) > (i5 | 0)) {
   i1 = HEAP32[466944] | 0;
   break L1;
  } else {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i3, i4, i5 - i1 | 0) | 0;
   break L1;
  }
 case 3:
  if (((HEAP32[244738] | 0) - i1 | 0) < (i5 | 0)) {
   i1 = HEAP32[466944] | 0;
   break L1;
  } else {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i3, i4, i1 + i5 | 0) | 0;
   break L1;
  }
 case 4:
  {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i3, i4 - i1 | 0, i5) | 0;
   break;
  }
 case 5:
  {
   i1 = FUNCTION_TABLE_iiii[HEAP32[467175] & 63](i3, i1 + i4 | 0, i5) | 0;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _Entity_CheckSkin(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 i7 = i9 + 8 | 0;
 i5 = i9 + 336 | 0;
 i6 = i9 + 320 | 0;
 i8 = i9;
 L1 : do if (HEAP8[(HEAP32[i4 + 48 >> 2] | 0) + 44 >> 0] | 0) {
  i1 = i4 + 109 | 0;
  if ((HEAP8[i1 >> 0] | 0) != 2) {
   _String_FromRaw(i8, i4 + 196 | 0, 64);
   do if (!(HEAP8[i1 >> 0] | 0)) {
    i2 = _Entity_FirstOtherWithSameSkinAndFetchedSkin(i4) | 0;
    if (!i2) {
     i3 = _Http_AsyncGetSkin(i8, (i4 | 0) == 146288 ? 2 : 0) | 0;
     HEAP32[i4 + 104 >> 2] = i3;
     HEAP8[i1 >> 0] = 1;
     i1 = i3;
     break;
    } else {
     _Entity_CopySkin(i4, i2);
     HEAP8[i1 >> 0] = 2;
     break L1;
    }
   } else i1 = HEAP32[i4 + 104 >> 2] | 0; while (0);
   if ((_Http_GetResult(i1, i7) | 0) << 24 >> 24) {
    if (!(HEAP8[i7 + 305 >> 0] | 0)) _Entity_SetSkinAll(i4, 1); else {
     i2 = i7 + 156 | 0;
     i3 = i7 + 160 | 0;
     _Stream_ReadonlyMemory(i5, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0);
     i1 = _ApplySkin(i4, i6, i5, i8) | 0;
     if (i1 | 0) _LogInvalidSkin(i1, i8, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0);
     _Mem_Free(HEAP32[i6 >> 2] | 0);
    }
    _HttpRequest_Free(i7);
   }
  }
 } while (0);
 STACKTOP = i9;
 return;
}

function _Convert_ParseFloat(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0;
 HEAPF32[i9 >> 2] = 0.0;
 i3 = HEAP16[i1 + 4 >> 1] | 0;
 L1 : do if (!(i3 << 16 >> 16)) i1 = 0; else {
  i7 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP8[i7 >> 0] | 0;
  i8 = i1 << 24 >> 24 == 45;
  i1 = i1 << 24 >> 24 == 43 ? (i8 ? 2 : 1) : i8 & 1;
  i6 = i3 & 65535;
  L3 : do if (i1 >>> 0 < i6 >>> 0) {
   d2 = 0.0;
   L5 : while (1) {
    i3 = HEAP8[i7 + i1 >> 0] | 0;
    switch (i3 << 24 >> 24) {
    case 44:
    case 46:
     break L5;
    default:
     {}
    }
    if ((i3 + -48 & 255) > 9) {
     i1 = 0;
     break L1;
    }
    d2 = d2 * 10.0 + +((i3 << 24 >> 24) + -48 | 0);
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i6 >>> 0) {
     d5 = d2;
     break L3;
    }
   }
   i1 = i1 + 1 | 0;
   d5 = d2;
  } else d5 = 0.0; while (0);
  if ((i1 | 0) < (i6 | 0)) {
   d4 = 10.0;
   d2 = 0.0;
   while (1) {
    i3 = HEAP8[i7 + i1 >> 0] | 0;
    if ((i3 + -48 & 255) > 9) {
     i1 = 0;
     break L1;
    }
    d2 = d2 + +((i3 << 24 >> 24) + -48 | 0) / d4;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i6 | 0)) break; else d4 = d4 * 10.0;
   }
  } else d2 = 0.0;
  d5 = d5 + d2;
  HEAPF32[i9 >> 2] = i8 ? -d5 : d5;
  i1 = 1;
 } while (0);
 return i1 | 0;
}

function _AnimatedComp_GetCurrent(i3, d5) {
 i3 = i3 | 0;
 d5 = +d5;
 var i1 = 0, d2 = 0.0, d4 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 i1 = i3 + 128 | 0;
 d2 = +HEAPF64[122280];
 d4 = +_Math_SinF(d2 * 1.2566370964050293) * .05235987901687622;
 d2 = +_Math_CosF(d2 * 1.7951958179473877) * .05235987901687622 + .05235987901687622;
 d10 = +_Math_Lerp(+HEAPF32[i3 + 148 >> 2], +HEAPF32[i3 + 152 >> 2], d5);
 i6 = i3 + 136 | 0;
 HEAPF32[i6 >> 2] = d10;
 d5 = +_Math_Lerp(+HEAPF32[i3 + 140 >> 2], +HEAPF32[i3 + 144 >> 2], d5);
 i7 = i3 + 132 | 0;
 HEAPF32[i7 >> 2] = d5;
 d5 = +_Math_CosF(d5);
 i9 = i3 + 180 | 0;
 HEAPF32[i9 >> 2] = d5 * +HEAPF32[i6 >> 2] * 1.0471975803375244 - d4;
 i8 = i3 + 184 | 0;
 HEAPF32[i8 >> 2] = -d2;
 d5 = +_Math_CosF(+HEAPF32[i7 >> 2]);
 d5 = d5 * +HEAPF32[i6 >> 2] * 1.3962633609771729;
 HEAPF32[i3 + 164 >> 2] = -d5;
 HEAPF32[i3 + 168 >> 2] = 0.0;
 HEAPF32[i3 + 172 >> 2] = d5;
 HEAPF32[i3 + 176 >> 2] = -0.0;
 HEAPF32[i3 + 188 >> 2] = -+HEAPF32[i9 >> 2];
 HEAPF32[i3 + 192 >> 2] = -+HEAPF32[i8 >> 2];
 d5 = +Math_abs(+(+_Math_CosF(+HEAPF32[i7 >> 2])));
 HEAPF32[i1 >> 2] = d5 * +HEAPF32[i6 >> 2] * .25;
 if (!(HEAP8[1868753] | 0 ? 1 : (HEAP8[(HEAP32[i3 + 48 >> 2] | 0) + 45 >> 0] | 0) == 0)) _AnimatedComp_CalcHumanAnim(i1, d4, d2);
 return;
}

function _Gui_AddCore(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i1 = HEAP32[422372] | 0;
 if ((i1 | 0) > 9) {
  _Process_Abort2(0, 35197);
  i1 = HEAP32[422372] | 0;
 }
 L4 : do if ((i1 | 0) > 0) {
  i2 = 0;
  while (1) {
   if ((HEAPU8[1868770 + i2 >> 0] | 0 | 0) < (i4 | 0)) break;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i1 | 0)) break L4;
  }
  if ((i1 | 0) > (i2 | 0)) {
   i3 = i1;
   do {
    i6 = i3;
    i3 = i3 + -1 | 0;
    HEAP32[352416 + (i6 << 2) >> 2] = HEAP32[352416 + (i3 << 2) >> 2];
    HEAP8[1868770 + i6 >> 0] = HEAP8[1868770 + i3 >> 0] | 0;
   } while ((i3 | 0) > (i2 | 0));
  }
 } else i2 = 0; while (0);
 HEAP32[352416 + (i2 << 2) >> 2] = i5;
 HEAP8[1868770 + i2 >> 0] = i4;
 HEAP32[422372] = i1 + 1;
 HEAP8[i5 + 7 >> 0] = 1;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] & 511](i5);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] & 511](i5);
 if ((HEAP32[422517] | 0) > 0) {
  i1 = 0;
  do {
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 63](i5, i1, HEAP32[353344 + (i1 << 3) >> 2] | 0, HEAP32[353344 + (i1 << 3) + 4 >> 2] | 0) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[422517] | 0));
 }
 return;
}

function _MapState_Read(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i4 = i5 + 44820 | 0;
 L1 : do if (!(HEAP8[i4 >> 0] | 0)) {
  i3 = i5 + 44816 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) < 4) {
   i2 = i5 + 44740 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 63](i2, i5 + 44808 + i1 | 0, 4 - i1 | 0, i6) | 0;
   i2 = (HEAP32[i3 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i2;
   if (i1 | 0) break;
   if ((i2 | 0) < 4) {
    i1 = 0;
    break;
   }
  }
  i1 = HEAP32[454540] | 0;
  if (!i1) {
   i1 = _Stream_GetU32_BE(i5 + 44808 | 0) | 0;
   HEAP32[454540] = i1;
  }
  i3 = i5 + 44796 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  do if (!i2) {
   i2 = _Mem_TryAlloc(i1, 1) | 0;
   HEAP32[i3 >> 2] = i2;
   if (!i2) {
    _Window_ShowDialog(51856, 47712);
    HEAP8[i4 >> 0] = 1;
    i1 = 0;
    break L1;
   } else {
    i1 = HEAP32[454540] | 0;
    break;
   }
  } while (0);
  i4 = i5 + 44812 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i5 = i5 + 44740 | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 63](i5, i2 + i3 | 0, i1 - i3 | 0, i6) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 } else i1 = 0; while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _HUDScreen_Render(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 if (!(HEAP8[1868760] | 0)) {
  _Gfx_SetVertexFormat(1);
  i3 = i1 + 12 | 0;
  _Gfx_BindDynamicVb(HEAP32[i3 >> 2] | 0);
  if (HEAP8[1689502] | 0) {
   i4 = i1 + 48 | 0;
   FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, 4) | 0;
  }
  if (!(HEAP8[1868754] | 0)) {
   i4 = (_IsOnlyChatActive() | 0) << 24 >> 24 == 0;
   if (!(i4 | (HEAP8[1689502] | 0) == 0)) {
    i4 = i1 + 120 | 0;
    FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, 8) | 0;
    _Gfx_BindTexture(HEAP32[i1 + 192 >> 2] | 0);
    _Gfx_DrawVb_IndexedTris_Range(HEAP32[i1 + 304 >> 2] | 0, 128, 4);
   }
  } else {
   i4 = i1 + 120 | 0;
   FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, 8) | 0;
  }
  if (!(_Gui_GetBlocksWorld() | 0)) {
   _Gfx_BindDynamicVb(HEAP32[i3 >> 2] | 0);
   if (!(HEAP8[1689556] | 0)) {
    i4 = i1 + 332 | 0;
    FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, 12) | 0;
   }
   i1 = HEAP32[422382] | 0;
   if (!((i1 | 0) == 0 ? 1 : (HEAP8[1868802] | HEAP8[1689554]) << 24 >> 24 != 0)) {
    _Gfx_BindTexture(i1);
    _Gfx_BindDynamicVb(HEAP32[i3 >> 2] | 0);
    _Gfx_DrawVb_IndexedTris(4);
   }
  }
 }
 return;
}

function _Gfx_Make2DQuad(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0;
 i4 = HEAP16[i2 + 4 >> 1] | 0;
 d7 = +(i4 << 16 >> 16);
 d9 = +((HEAPU16[i2 + 8 >> 1] | 0) + (i4 << 16 >> 16) | 0);
 i4 = HEAP16[i2 + 6 >> 1] | 0;
 d11 = +(i4 << 16 >> 16);
 d6 = +((HEAPU16[i2 + 10 >> 1] | 0) + (i4 << 16 >> 16) | 0);
 i4 = HEAP32[i3 >> 2] | 0;
 HEAPF32[i4 >> 2] = d7;
 HEAPF32[i4 + 4 >> 2] = d11;
 HEAPF32[i4 + 8 >> 2] = 0.0;
 HEAP32[i4 + 12 >> 2] = i1;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 HEAP32[i4 + 16 >> 2] = i5;
 i10 = HEAP32[i2 + 16 >> 2] | 0;
 HEAP32[i4 + 20 >> 2] = i10;
 HEAPF32[i4 + 24 >> 2] = d9;
 HEAPF32[i4 + 28 >> 2] = d11;
 HEAPF32[i4 + 32 >> 2] = 0.0;
 HEAP32[i4 + 36 >> 2] = i1;
 i8 = HEAP32[i2 + 20 >> 2] | 0;
 HEAP32[i4 + 40 >> 2] = i8;
 HEAP32[i4 + 44 >> 2] = i10;
 HEAPF32[i4 + 48 >> 2] = d9;
 HEAPF32[i4 + 52 >> 2] = d6;
 HEAPF32[i4 + 56 >> 2] = 0.0;
 HEAP32[i4 + 60 >> 2] = i1;
 HEAP32[i4 + 64 >> 2] = i8;
 i2 = HEAP32[i2 + 24 >> 2] | 0;
 HEAP32[i4 + 68 >> 2] = i2;
 HEAPF32[i4 + 72 >> 2] = d7;
 HEAPF32[i4 + 76 >> 2] = d6;
 HEAPF32[i4 + 80 >> 2] = 0.0;
 HEAP32[i4 + 84 >> 2] = i1;
 HEAP32[i4 + 88 >> 2] = i5;
 HEAP32[i4 + 92 >> 2] = i2;
 HEAP32[i3 >> 2] = i4 + 96;
 return;
}

function _EnvRenderer_RenderSky() {
 var d1 = 0.0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i5;
 do if (!((_EnvRenderer_ShouldRenderSkybox() | 0) << 24 >> 24)) {
  if (!(HEAP32[418853] | 0)) {
   _BuildSky();
   if (!(HEAP32[418853] | 0)) break;
  }
  d1 = +(HEAP32[244734] | 0) + 8.0;
  d2 = +HEAPF32[414159] + 8.0;
  d2 = d2 > d1 ? d2 : d1;
  _Gfx_SetVertexFormat(0);
  _Gfx_BindVb(HEAP32[418853] | 0);
  if (d2 == d1) {
   _Gfx_DrawVb_IndexedTris(HEAP32[418862] | 0);
   break;
  } else {
   i4 = i3;
   i6 = 1689084;
   i7 = i4 + 64 | 0;
   do {
    HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
    i4 = i4 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i4 | 0) < (i7 | 0));
   d2 = d2 - d1;
   i7 = i3 + 48 | 0;
   HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + d2 * +HEAPF32[i3 + 16 >> 2];
   i7 = i3 + 52 | 0;
   HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + d2 * +HEAPF32[i3 + 20 >> 2];
   i7 = i3 + 56 | 0;
   HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + d2 * +HEAPF32[i3 + 24 >> 2];
   i7 = i3 + 60 | 0;
   HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + d2 * +HEAPF32[i3 + 28 >> 2];
   _Gfx_LoadMatrix(1, i3);
   _Gfx_DrawVb_IndexedTris(HEAP32[418862] | 0);
   _Gfx_LoadMatrix(1, 1689084);
   break;
  }
 } while (0);
 STACKTOP = i5;
 return;
}

function _Cw_Callback_2(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0;
 do if (!(_String_CaselessEqualsConst((HEAP32[i2 >> 2] | 0) + 8 | 0, 31520) | 0)) {
  if (_String_CaselessEqualsConst((HEAP32[i2 >> 2] | 0) + 8 | 0, 50940) | 0) {
   HEAP8[(HEAP32[422204] | 0) + 28 >> 0] = 7;
   i1 = i2 + 8 | 0;
   if (_String_CaselessEqualsConst(i1, 35643) | 0) {
    d3 = +((_NbtTag_I16(i2) | 0) << 16 >> 16);
    HEAPF32[HEAP32[422204] >> 2] = d3;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35645) | 0) {
    d3 = +((_NbtTag_I16(i2) | 0) << 16 >> 16);
    HEAPF32[(HEAP32[422204] | 0) + 4 >> 2] = d3;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35647) | 0) {
    d3 = +((_NbtTag_I16(i2) | 0) << 16 >> 16);
    HEAPF32[(HEAP32[422204] | 0) + 8 >> 2] = d3;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35611) | 0) {
    d3 = +((_NbtTag_U8(i2) | 0) & 255) * 360.0 * .00390625;
    HEAPF32[(HEAP32[422204] | 0) + 16 >> 2] = d3;
    break;
   }
   if (_String_CaselessEqualsConst(i1, 35627) | 0) {
    d3 = +((_NbtTag_U8(i2) | 0) & 255) * 360.0 * .00390625;
    HEAPF32[(HEAP32[422204] | 0) + 12 >> 2] = d3;
   }
  }
 } else if (_String_CaselessEqualsConst(i2 + 8 | 0, 31533) | 0) {
  i2 = _NbtTag_I32(i2) | 0;
  HEAP32[244754] = i2;
 } while (0);
 return;
}

function _PhysicsComp_MoveFlying(i6, i4, d3, i7, d9, d1) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i7 = i7 | 0;
 d9 = +d9;
 d1 = +d1;
 var i2 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, d12 = 0.0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i11;
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 i5 = HEAP32[i6 + 24 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 _PhysicsComp_MoveHor(i6, i8, d3);
 d12 = +HEAPF32[i2 + 36 >> 2];
 d3 = +HEAPF32[i2 + 44 >> 2];
 d3 = +Math_sqrt(+(d12 * d12 + d3 * d3));
 if (+HEAPF32[i4 >> 2] != 0.0) {
  if (d3 > 1.0000000474974513e-03) i10 = 4;
 } else if (d3 > 1.0000000474974513e-03 ? +HEAPF32[i4 + 8 >> 2] != 0.0 : 0) i10 = 4;
 if ((i10 | 0) == 4) {
  i2 = i2 + 40 | 0;
  HEAPF32[i2 >> 2] = 0.0;
  if (!(HEAP8[i5 + 36 >> 0] | 0)) if (!(HEAP8[i6 + 2 >> 0] | 0)) d1 = 0.0; else i10 = 6; else i10 = 6;
  if ((i10 | 0) == 6) {
   d1 = d3 + 0.0;
   HEAPF32[i2 >> 2] = d1;
  }
  if (!(HEAP8[i5 + 37 >> 0] | 0)) d1 = 1.0; else {
   HEAPF32[i2 >> 2] = d1 - d3;
   d1 = 1.0;
  }
 };
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _PhysicsComp_Move(i6, i8, d9, d1);
 STACKTOP = i11;
 return;
}

function _Intersection_InverseRotate(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i4 + 36 | 0;
 i9 = i4 + 24 | 0;
 i8 = i4 + 12 | 0;
 i5 = i4;
 d6 = +HEAPF32[i3 + 28 >> 2] * -.01745329238474369;
 HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 _Vec3_RotateY(i9, i7, d6);
 HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 d6 = +HEAPF32[i3 + 32 >> 2] * -.01745329238474369;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 _Vec3_RotateZ(i8, i7, d6);
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 d6 = +HEAPF32[i3 + 24 >> 2] * -.01745329238474369;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 _Vec3_RotateX(i5, i7, d6);
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 STACKTOP = i4;
 return;
}

function _ChatInputWidget_MakeTexture(i10, i2, i1) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i9 = i11 + 88 | 0;
 i7 = i11 + 72 | 0;
 i8 = i11 + 96 | 0;
 _Context2D_Alloc(i8, i2, i1);
 _DrawTextArgs_Make(i7, 23400, HEAP32[i10 + 40 >> 2] | 0, 1);
 _Context2D_DrawText(i8, i7, 0, 0);
 HEAP32[i9 >> 2] = i11;
 i3 = i9 + 4 | 0;
 HEAP16[i3 >> 1] = 0;
 HEAP16[i9 + 6 >> 1] = 66;
 i5 = i10 + 140 | 0;
 i4 = i10 + 108 | 0;
 i2 = 0;
 i6 = 0;
 while (1) {
  if (!(HEAP16[i10 + 72 + (i2 << 3) + 4 >> 1] | 0)) break;
  HEAP16[i3 >> 1] = 0;
  i1 = _InputWidget_GetLastCol(i10, 0, i2) | 0;
  if (!((_Drawer2D_IsWhiteColor(i1) | 0) << 24 >> 24)) {
   _String_Append(i9, 38);
   _String_Append(i9, i1);
  }
  _InputWidget_FormatLine(i10, i2, i9);
  i13 = i9;
  i12 = HEAP32[i13 + 4 >> 2] | 0;
  i1 = i7;
  HEAP32[i1 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i1 + 4 >> 2] = i12;
  if (!i2) i1 = HEAP32[i5 >> 2] | 0; else i1 = 0;
  _Context2D_DrawText(i8, i7, i1, i6);
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= 3) break; else i6 = (HEAP32[i4 >> 2] | 0) + i6 | 0;
 }
 _Context2D_MakeTexture(i10 + 112 | 0, i8);
 _Context2D_Free(i8);
 STACKTOP = i11;
 return;
}

function _TexIdsOverlay_BuildText(i18, i10) {
 i18 = i18 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i1 = HEAP32[i18 + 44 >> 2] | 0;
 i8 = i18 + 52 | 0;
 i17 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[460928] | 0) > 0) {
  i16 = i18 + 40 | 0;
  i4 = i18 + 62 | 0;
  i15 = i18 + 58 | 0;
  i3 = i18 + 84 | 0;
  i9 = i1 << 4;
  i5 = 0;
  i11 = 0;
  i13 = HEAP32[i18 + 36 >> 2] | 0;
  while (1) {
   HEAP16[i15 >> 1] = (HEAP32[i16 >> 2] | 0) + i1 - (HEAPU16[i4 >> 1] | 0);
   i2 = i13 + 3 | 0;
   i6 = i5;
   i14 = 0;
   while (1) {
    i7 = i6;
    i12 = 0;
    while (1) {
     i19 = i2 + (Math_imul(i12, i1) | 0) | 0;
     HEAP32[i3 >> 2] = i19;
     _TextAtlas_AddInt(i8, i7, i10);
     i12 = i12 + 1 | 0;
     if ((i12 | 0) == 16) break; else i7 = i7 + 1 | 0;
    }
    HEAP16[i15 >> 1] = i1 + (HEAPU16[i15 >> 1] | 0);
    i14 = i14 + 1 | 0;
    if ((i14 | 0) == 16) break; else i6 = i6 + 16 | 0;
   }
   i11 = i11 + 16 | 0;
   if ((i11 | 0) >= (HEAP32[460928] | 0)) break; else {
    i5 = i5 + 256 | 0;
    i13 = i13 + i9 | 0;
   }
  }
  i1 = HEAP32[i10 >> 2] | 0;
 } else i1 = i17;
 HEAP32[i18 + 48 >> 2] = (i1 - i17 | 0) / 24 | 0;
 return;
}

function _Stream_ReadLine(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i10;
 i8 = i10 + 8 | 0;
 HEAP16[i7 + 4 >> 1] = 0;
 i4 = i6 + 4 | 0;
 i3 = 0;
 L1 : while (1) {
  i2 = 0;
  do {
   i1 = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 127](i6, i8 + i2 | 0) | 0;
   if ((i1 | 0) < 0) {
    i9 = 10;
    break L1;
   }
   switch (i1 | 0) {
   case 0:
    break;
   default:
    break L1;
   }
   i2 = i2 + 1 | 0;
  } while (!(_Convert_Utf8ToCodepoint(i5, i8, i2) | 0));
  i1 = HEAP32[i5 >> 2] | 0;
  L8 : do if ((i1 | 0) < 13) switch (i1 | 0) {
  case 10:
   {
    i1 = 0;
    break L1;
   }
  default:
   i9 = 7;
  } else if ((i1 | 0) < 65279) switch (i1 | 0) {
  case 13:
   break L8;
  default:
   {
    i9 = 7;
    break L8;
   }
  } else switch (i1 | 0) {
  case 65279:
   break L8;
  default:
   {
    i9 = 7;
    break L8;
   }
  } while (0);
  if ((i9 | 0) == 7) {
   i9 = 0;
   _String_Append(i7, _Convert_CodepointToCP437(i1) | 0);
  }
  i3 = 1;
 }
 L17 : do if ((i9 | 0) == 10) {
  switch (i1 | 0) {
  case -857812991:
   break;
  default:
   break L17;
  }
  i1 = (i3 | 0) == 0 ? -857812991 : 0;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function _MapRenderer_RenderTranslucent(d5) {
 d5 = +d5;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (HEAP32[424252] | 0) {
  i4 = HEAP32[422210] | 0;
  _Gfx_SetVertexFormat(1);
  _Gfx_SetAlphaBlending(0);
  _Gfx_DepthOnlyRendering(1);
  i1 = HEAP32[424247] | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    do if ((HEAP32[359792 + (i3 << 2) >> 2] | 0) >= 1) {
     i2 = 362864 + i3 | 0;
     if (!(HEAP8[363376 + i3 >> 0] | 0)) if (!(HEAP8[i2 >> 0] | 0)) break;
     _RenderTranslucentBatch(i3);
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[424247] | 0;
    } while (0);
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  HEAP32[422210] = i4;
  _Gfx_SetAlphaBlending(1);
  _Gfx_DepthOnlyRendering(0);
  _Gfx_SetDepthWrite(0);
  i1 = HEAP32[424247] | 0;
  if ((i1 | 0) > 0) {
   i2 = 0;
   do {
    if ((HEAP32[359792 + (i2 << 2) >> 2] | 0) >= 1) if (HEAP8[363376 + i2 >> 0] | 0) {
     _Atlas1D_Bind(i2);
     _RenderTranslucentBatch(i2);
     i1 = HEAP32[424247] | 0;
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i1 | 0));
  }
  _Gfx_SetDepthWrite(1);
  if ((HEAP8[1868794] | 0) == 0 & (HEAP32[466934] | 0) != 0) {
   _Gfx_SetAlphaTest(1);
   _EnvRenderer_RenderWeather(d5);
   _Gfx_SetAlphaTest(0);
  }
  _Gfx_SetAlphaBlending(0);
 }
 return;
}

function _TabListOverlay_PointerDown(i2, i1, i9, i10) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i6 = i11 + 264 | 0;
 i5 = i11 + 256 | 0;
 L1 : do if (!(HEAP8[1837188] | 0)) i1 = 0; else {
  HEAP32[i6 >> 2] = i11;
  HEAP16[i6 + 4 >> 1] = 0;
  HEAP16[i6 + 6 >> 1] = 256;
  i8 = i2 + 56 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i7 = i2 + 1176 | 0;
   i4 = i2 + 152 | 0;
   i3 = 0;
   while (1) {
    if (HEAP32[i7 + (i3 * 28 | 0) >> 2] | 0) {
     i2 = i4 + (i3 << 1) | 0;
     if ((HEAP16[i2 >> 1] | 0) != -1) {
      if (_Gui_Contains(HEAP16[i7 + (i3 * 28 | 0) + 4 >> 1] | 0, HEAP16[i7 + (i3 * 28 | 0) + 6 >> 1] | 0, HEAPU16[i7 + (i3 * 28 | 0) + 8 >> 1] | 0, HEAPU16[i7 + (i3 * 28 | 0) + 10 >> 1] | 0, i9, i10) | 0) break;
      i1 = HEAP32[i8 >> 2] | 0;
     }
    }
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= (i1 | 0)) {
     i1 = 0;
     break L1;
    }
   }
   _StringsBuffer_UNSAFE_Get(i5, 1670160, (HEAPU16[1669392 + (HEAPU16[i2 >> 1] << 1) >> 1] | 0) + -3 | 0);
   _String_Format1(i6, 48166, i5);
   _ChatScreen_AppendInput(i6);
   i1 = 1;
  } else i1 = 0;
 } while (0);
 STACKTOP = i11;
 return i1 | 0;
}

function _ChibiModel_ScalePart(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[428691] | 0;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i4 = i1 + 4 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] * .5;
 i4 = i1 + 8 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] * .5;
 i4 = i1 + 12 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] * .5;
 i4 = i5 + 2 | 0;
 if (HEAP16[i4 >> 1] | 0) {
  i3 = i2 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = HEAPU16[i5 >> 1] | 0;
  do {
   i6 = i1 + (i2 << 4) | 0;
   i7 = (HEAP32[4254] | 0) + (i2 << 4) | 0;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i1 = HEAP32[i3 >> 2] | 0;
   i6 = i1 + (i2 << 4) | 0;
   HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] * .5;
   i6 = i1 + (i2 << 4) + 4 | 0;
   HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] * .5;
   i6 = i1 + (i2 << 4) + 8 | 0;
   HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] * .5;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < ((HEAPU16[i4 >> 1] | 0) + (HEAPU16[i5 >> 1] | 0) | 0) >>> 0);
 }
 return;
}

function _Java_ReadClassDesc(i3, i6) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7 + 4 | 0;
 i5 = i7;
 i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 127](i3, i2) | 0;
 L1 : do if (!i1) switch (HEAP8[i2 >> 0] | 0) {
 case 112:
  {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break L1;
  }
 case 113:
  {
   i1 = _Stream_ReadU32_BE(i3, i5) | 0;
   if (i1 | 0) break L1;
   i3 = HEAP32[422206] | 0;
   if ((i3 | 0) <= 0) {
    i1 = -857812918;
    break L1;
   }
   i4 = HEAP32[422205] | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((HEAP32[i4 + (i1 * 2348 | 0) + 2336 >> 2] | 0) == (i2 | 0)) break;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i3 | 0)) {
     i1 = -857812918;
     break L1;
    }
   }
   HEAP32[i6 >> 2] = i4 + (i1 * 2348 | 0);
   i1 = 0;
   break L1;
  }
 case 114:
  {
   i1 = HEAP32[422206] | 0;
   if ((i1 | 0) > 29) {
    i1 = -857812919;
    break L1;
   }
   i5 = HEAP32[422205] | 0;
   HEAP32[422206] = i1 + 1;
   i1 = i5 + (i1 * 2348 | 0) | 0;
   HEAP32[i6 >> 2] = i1;
   i1 = _Java_ReadNewClassDesc(i3, i1) | 0;
   break L1;
  }
 default:
  {
   i1 = -857812922;
   break L1;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _BuildMesh(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i5 + 48 | 0;
 i4 = i5;
 i3 = i1 + 36 | 0;
 _Vec3_Sub_1950(i2, i3);
 d6 = +_Vec3_LengthSquared_1951(i2);
 i2 = d6 < 16.0;
 i8 = d6 < 4.0;
 d7 = i8 ? .004999999888241291 : i2 ? 6.2500000931322575e-03 : .009999999776482582;
 d6 = +HEAPF32[460375] * (i8 ? 5.2083334885537624e-03 : i2 ? .0078125 : d6 < 64.0 ? .010416666977107525 : d6 < 256.0 ? .015625 : d6 < 1024.0 ? .03125 : .0625);
 _Vec3_Add1_1952(i4, i3, -d7);
 _Vec3_Add1_1952(i4 + 12 | 0, i4, d6);
 i3 = i4 + 36 | 0;
 _Vec3_Add1_1952(i3, i1 + 48 | 0, d7);
 _Vec3_Add1_1952(i4 + 24 | 0, i3, -d6);
 i3 = _Gfx_LockDynamicVb(HEAP32[460374] | 0, 0, 96) | 0;
 i1 = HEAP32[460376] | 0;
 i2 = 0;
 while (1) {
  HEAP32[i3 >> 2] = HEAP32[i4 + ((HEAPU8[7216 + i2 >> 0] | 0) * 12 | 0) >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + ((HEAPU8[7216 + (i2 + 1) >> 0] | 0) * 12 | 0) + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + ((HEAPU8[7216 + (i2 + 2) >> 0] | 0) * 12 | 0) + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = i1;
  i2 = i2 + 3 | 0;
  if (i2 >>> 0 >= 288) break; else i3 = i3 + 16 | 0;
 }
 _Gfx_UnlockDynamicVb(HEAP32[460374] | 0);
 STACKTOP = i5;
 return;
}

function _ClassicLighting_UpdateLighting(i9, i10, i11, i1, i2, i8, i7) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = i1 & 65535;
 i3 = HEAP8[993316 + i4 >> 0] | 0;
 i1 = i2 & 65535;
 i5 = HEAP8[993316 + i1 >> 0] | 0;
 i4 = HEAPU8[1005604 + i4 >> 0] | 0;
 i4 = (6 ? i4 >>> 6 : i4) & 1;
 i1 = HEAPU8[1005604 + i1 >> 0] | 0;
 i1 = (6 ? i1 >>> 6 : i1) & 1;
 if (i3 << 24 >> 24 == i5 << 24 >> 24) {
  if (!(i3 << 24 >> 24 == 0 | (i4 | 0) == (i1 | 0))) i6 = 3;
 } else i6 = 3;
 do if ((i6 | 0) == 3) {
  i2 = i10 - i1 | 0;
  if ((i2 | 0) >= (i7 | 0)) if (!(i5 << 24 >> 24)) {
   _ClassicLighting_CalcHeightAt(i9, i10, i11, i8) | 0;
   break;
  } else {
   HEAP16[(HEAP32[424246] | 0) + (i8 << 1) >> 1] = i2;
   break;
  }
  if ((i10 | 0) == (i7 | 0) & (i4 | 0) == 0) {
   if (((HEAP32[244734] | 0) + -1 | 0) == (i10 | 0)) i1 = 0; else i1 = _World_GetBlock_1151(i9, i10 + 1 | 0, i11) | 0;
   if (!(HEAP8[993316 + (i1 & 65535) >> 0] | 0)) if (!(i5 << 24 >> 24)) {
    _ClassicLighting_CalcHeightAt(i9, i10 + -1 | 0, i11, i8) | 0;
    break;
   } else {
    HEAP16[(HEAP32[424246] | 0) + (i8 << 1) >> 1] = i2;
    break;
   }
  }
 } while (0);
 return;
}

function _KeyBindsScreen_Init(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i5 = i6 + 16 | 0;
 HEAP32[i5 >> 2] = 364512;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 28 >> 2] = 17;
 HEAP32[i6 + 36 >> 2] = -1;
 i1 = i6 + 40 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = i6 + 492 | 0;
  i2 = i6 + 60 | 0;
  i4 = 0;
  do {
   i8 = i3 + (i4 * 84 | 0) | 0;
   _ButtonWidget_Add(i6, i8, HEAP32[i2 >> 2] | 0, 165);
   HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 << 2) >> 2] = i8;
   HEAP32[i3 + (i4 * 84 | 0) + 36 >> 2] = i4;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 _TextWidget_Add(i6, i6 + 96 | 0);
 _TextWidget_Add(i6, i6 + 168 | 0);
 _AddPrimaryButton(i6, i6 + 240 | 0, (HEAP8[1689494] | 0) == 0 ? 29 : 43);
 i2 = i6 + 52 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = i6 + 56 | 0;
 if (!i1) {
  if (HEAP32[i3 >> 2] | 0) i7 = 6;
 } else i7 = 6;
 if ((i7 | 0) == 6) {
  i7 = i6 + 324 | 0;
  _ButtonWidget_Add(i6, i7, 40, i1);
  i8 = i6 + 408 | 0;
  _ButtonWidget_Add(i6, i8, 40, HEAP32[i3 >> 2] | 0);
  _Widget_SetDisabled(i7, (HEAP32[i2 >> 2] | 0) == 0 & 1);
  _Widget_SetDisabled(i8, (HEAP32[i3 >> 2] | 0) == 0 & 1);
 }
 i8 = _Screen_CalcDefaultMaxVertices(i6) | 0;
 HEAP32[i6 + 8 >> 2] = i8;
 return;
}

function _ScrollbarWidget_Render(i8, d1) {
 i8 = i8 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7 + 4 | 0;
 i2 = i7;
 i3 = HEAP32[i8 + 4 >> 2] | 0;
 i9 = HEAP32[i8 + 12 >> 2] | 0;
 i4 = i8 + 8 | 0;
 _Gfx_Draw2DFlat(i3, HEAP32[i4 >> 2] | 0, i9, HEAP32[i8 + 16 >> 2] | 0, -603321846);
 _ScrollbarWidget_GetScrollbarCoords(i8, i6, i2);
 i5 = HEAP32[i8 + 68 >> 2] | 0;
 i3 = i5 + i3 | 0;
 i4 = (HEAP32[i6 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i4;
 i5 = i9 - (i5 << 1) | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i9 = ((_Gui_ContainsPointers(i3, i4, i5, i2) | 0) & 255 | 0) == 0;
 _Gfx_Draw2DFlat(i3, i4, i5, i2, i9 ? -597400476 : -595953030);
 if ((i2 | 0) >= 20) {
  i9 = HEAP32[i8 + 76 >> 2] | 0;
  i3 = i9 + i3 | 0;
  i4 = (1 ? i2 >>> 1 : i2) + i4 | 0;
  HEAP32[i6 >> 2] = i4;
  i6 = i5 - (i9 << 1) | 0;
  i9 = i8 + 72 | 0;
  _Gfx_Draw2DFlat(i3, (HEAP32[i8 + 80 >> 2] | 0) + i4 | 0, i6, HEAP32[i9 >> 2] | 0, -603321846);
  _Gfx_Draw2DFlat(i3, (HEAP32[i8 + 84 >> 2] | 0) + i4 | 0, i6, HEAP32[i9 >> 2] | 0, -603321846);
  _Gfx_Draw2DFlat(i3, (HEAP32[i8 + 88 >> 2] | 0) + i4 | 0, i6, HEAP32[i9 >> 2] | 0, -603321846);
 }
 STACKTOP = i7;
 return;
}

function _Http_Add(i2, i6, i1, i7, i5, i4, i9, i3) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i12 = i11 + 320 | 0;
 i8 = i11;
 i10 = i11 + 312 | 0;
 HEAP8[i12 >> 0] = i1;
 _memset(i8 | 0, 0, 312) | 0;
 _String_CopyToRaw(i8, 128, i2);
 _Platform_Log2(53004, i2, i12);
 i2 = (HEAP32[466952] | 0) + 1 | 0;
 HEAP32[466952] = i2;
 i1 = i8 + 128 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP8[i8 + 304 >> 0] = HEAP8[i12 >> 0] | 0;
 if (HEAP8[1868811] | 0) {
  _String_FromRaw(i10, i8, 128);
  if (_String_CaselessStarts(i10, 23704) | 0) _String_InsertAt(i10, 4, 115);
 }
 if (HEAP8[1868812] | 0) {
  _String_FromRaw(i10, i8, 128);
  if (_String_CaselessStarts(i10, 23712) | 0) _String_DeleteAt(i10, 4);
 }
 if (i7 | 0) _String_CopyToRaw(i8 + 176 | 0, 64, i7);
 if (i5 | 0) _String_CopyToRaw(i8 + 240 | 0, 64, i5);
 if (i4 | 0) {
  i12 = _Mem_Alloc(i9, 1, 53024) | 0;
  HEAP32[i8 + 156 >> 2] = i12;
  _Mem_Copy(i12, i4, i9) | 0;
  HEAP32[i8 + 160 >> 2] = i9;
 }
 HEAP32[i8 + 308 >> 2] = i3;
 HEAP32[i8 + 132 >> 2] = -3;
 _HttpBackend_Add(i8, i6);
 STACKTOP = i11;
 return HEAP32[i1 >> 2] | 0;
}

function _DrawSkyY(i3, i11, i10, i12, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, d13 = 0.0, d14 = 0.0;
 i8 = _EnvRenderer_AxisSize() | 0;
 i7 = HEAP32[466938] | 0;
 if ((i3 | 0) < (i10 | 0)) {
  i9 = (i11 | 0) < (i12 | 0);
  d6 = +(i2 | 0);
  do {
   i2 = i3;
   i3 = i3 + i8 | 0;
   if (i9) {
    d4 = +(i2 | 0);
    d5 = +(((i3 | 0) > (i10 | 0) ? i10 : i3) | 0);
    i2 = i11;
    do {
     HEAPF32[i1 >> 2] = d4;
     HEAPF32[i1 + 4 >> 2] = d6;
     d13 = +(i2 | 0);
     i2 = i2 + i8 | 0;
     HEAPF32[i1 + 8 >> 2] = d13;
     HEAP32[i1 + 12 >> 2] = i7;
     HEAPF32[i1 + 16 >> 2] = d4;
     HEAPF32[i1 + 20 >> 2] = d6;
     d14 = +(((i2 | 0) > (i12 | 0) ? i12 : i2) | 0);
     HEAPF32[i1 + 24 >> 2] = d14;
     HEAP32[i1 + 28 >> 2] = i7;
     HEAPF32[i1 + 32 >> 2] = d5;
     HEAPF32[i1 + 36 >> 2] = d6;
     HEAPF32[i1 + 40 >> 2] = d14;
     HEAP32[i1 + 44 >> 2] = i7;
     HEAPF32[i1 + 48 >> 2] = d5;
     HEAPF32[i1 + 52 >> 2] = d6;
     HEAPF32[i1 + 56 >> 2] = d13;
     HEAP32[i1 + 60 >> 2] = i7;
     i1 = i1 + 64 | 0;
    } while ((i2 | 0) < (i12 | 0));
   }
  } while ((i3 | 0) < (i10 | 0));
 }
 return;
}

function _AppendChatLog(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i7 = i11 + 288 | 0;
 i8 = i11;
 i6 = i11 + 256 | 0;
 if ((HEAP16[6860] | 0) != 0 & (HEAP8[1868735] | 0) != 0) {
  _DateTime_CurrentLocal(i6);
  i4 = i6 + 8 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i5 = i6 + 4 | 0;
  if ((i3 | 0) == (HEAP32[415498] | 0)) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[415499] | 0)) {
    i2 = HEAP32[i6 >> 2] | 0;
    if ((i2 | 0) != (HEAP32[415500] | 0)) i10 = 5;
   } else i10 = 5;
  } else i10 = 5;
  if ((i10 | 0) == 5) {
   _CloseLogFile();
   _OpenChatLog(i6);
   i2 = HEAP32[i6 >> 2] | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i1 = HEAP32[i5 >> 2] | 0;
  }
  HEAP32[415498] = i3;
  HEAP32[415499] = i1;
  HEAP32[415500] = i2;
  if (HEAP32[415509] | 0) {
   HEAP32[i7 >> 2] = i8;
   HEAP16[i7 + 4 >> 1] = 0;
   HEAP16[i7 + 6 >> 1] = 256;
   _String_Format3(i7, 25369, i6 + 12 | 0, i6 + 16 | 0, i6 + 20 | 0);
   _Drawer2D_WithoutColors(i7, i9);
   i1 = _Stream_WriteLine(1662004, i7) | 0;
   if (i1 | 0) {
    _Chat_DisableLogging();
    _Logger_SysWarn2(i1, 51456, 13724);
   }
  }
 }
 STACKTOP = i11;
 return;
}

function _Physics_HandleTnt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = HEAP32[244733] | 0;
 i7 = (i2 | 0) / (i10 | 0) | 0;
 i10 = i2 - (Math_imul(i7, i10) | 0) | 0;
 i11 = HEAP32[244735] | 0;
 i12 = (i7 | 0) / (i11 | 0) | 0;
 i11 = i7 - (Math_imul(i12, i11) | 0) | 0;
 _Game_UpdateBlock(i10, i12, i11, 0);
 _Physics_ActivateNeighbours(i10, i12, i11, i2);
 i7 = -4;
 do {
  i9 = Math_imul(i7, i7) | 0;
  i3 = i7 + i12 | 0;
  i8 = -4;
  do {
   i1 = (Math_imul(i8, i8) | 0) + i9 | 0;
   i4 = i8 + i11 | 0;
   i6 = -4;
   do {
    if ((i1 + (Math_imul(i6, i6) | 0) | 0) >>> 0 <= 16) {
     i2 = i6 + i10 | 0;
     if ((_World_Contains(i2, i3, i4) | 0) << 24 >> 24) {
      i5 = (Math_imul(HEAP32[244735] | 0, i3) | 0) + i4 | 0;
      i5 = (Math_imul(i5, HEAP32[244733] | 0) | 0) + i2 | 0;
      if (!((_BlocksTNT(HEAPU8[(HEAP32[244730] | 0) + i5 >> 0] | 0) | 0) << 24 >> 24)) {
       _Game_UpdateBlock(i2, i3, i4, 0);
       _Physics_ActivateNeighbours(i2, i3, i4, i5);
      }
     }
    }
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 5);
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 5);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != 5);
 return;
}

function _FallbackFont_TextWidth(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i12;
 i9 = i12 + 8 | 0;
 i5 = i12 + 16 | 0;
 i7 = i11;
 i8 = HEAP32[i7 + 4 >> 2] | 0;
 i10 = i6;
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i10 + 4 >> 2] = i8;
 i10 = HEAPU16[(HEAP32[i11 + 8 >> 2] | 0) + 4 >> 1] | 0;
 i10 = 3 ? i10 >>> 3 : i10;
 HEAP8[i5 >> 0] = 102;
 if (!((_Drawer2D_UNSAFE_NextPart(i6, i9, i5) | 0) << 24 >> 24)) i1 = 1; else {
  i7 = i9 + 4 | 0;
  i8 = i10 << 1;
  i1 = 0;
  do {
   i2 = HEAP16[i7 >> 1] | 0;
   if (i2 << 16 >> 16) {
    i4 = 0;
    do {
     i3 = HEAP8[(HEAP32[i9 >> 2] | 0) + i4 >> 0] | 0;
     if (i3 << 24 >> 24 == 32) i3 = i8; else {
      i3 = Math_imul(_Fallback_CellWidth((i3 + -33 & 255) < 94 ? 7904 + ((i3 & 255) + -33 << 3) | 0 : 49548) | 0, i10) | 0;
      i2 = HEAP16[i7 >> 1] | 0;
     }
     i1 = i3 + i1 | 0;
     i4 = i4 + 1 | 0;
    } while (i4 >>> 0 < (i2 & 65535) >>> 0);
   }
  } while ((_Drawer2D_UNSAFE_NextPart(i6, i9, i5) | 0) << 24 >> 24 != 0);
  i1 = (i1 | 0) > 1 ? i1 : 1;
 }
 STACKTOP = i12;
 return ((HEAP8[i11 + 12 >> 0] | 0) == 0 ? 0 : i10) + i1 | 0;
}

function _Classic_LevelDataChunk(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP8[1868801] | 0)) _Classic_StartLoading();
 i4 = (_Stream_GetU16_BE(i1) | 0) & 65535;
 i3 = i1 + 2 | 0;
 HEAP32[454534] = i3;
 HEAP32[454537] = i3;
 HEAP32[454535] = i4;
 HEAP32[454536] = i4;
 if (!(HEAP8[21301] | 0)) i5 = 5; else if (!(HEAP8[i1 + 1026 >> 0] | 0)) i5 = 5; else i4 = 1773268;
 if ((i5 | 0) == 5) i4 = 1728444;
 i3 = i4 + 44801 | 0;
 do if (!(HEAP8[i3 >> 0] | 0)) {
  i1 = _GZipHeader_Read(1818104, i4 + 44800 | 0) | 0;
  if ((i1 | 0) < 0) switch (i1 | 0) {
  case -857812991:
   {
    i5 = 9;
    break;
   }
  default:
   i5 = 8;
  } else switch (i1 | 0) {
  case 0:
   {
    i5 = 9;
    break;
   }
  default:
   i5 = 8;
  }
  if ((i5 | 0) == 8) {
   _DisconnectInvalidMap(i1);
   break;
  } else if ((i5 | 0) == 9) if (!(HEAP8[i3 >> 0] | 0)) {
   i5 = 12;
   break;
  } else {
   i5 = 10;
   break;
  }
 } else i5 = 10; while (0);
 if ((i5 | 0) == 10) {
  i1 = _MapState_Read(i4) | 0;
  if (!i1) i5 = 12; else _DisconnectInvalidMap(i1);
 }
 if ((i5 | 0) == 12) {
  i1 = HEAP32[454540] | 0;
  if (!i1) d2 = 0.0; else d2 = +(HEAP32[443314] | 0) / +(i1 | 0);
  _Event_RaiseFloat(1680664, d2);
 }
 return;
}

function _Convert_TryParseDigits(i8, i3, i9, i7) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP8[i3 >> 0] = 0;
 i5 = i8 + 4 | 0;
 i4 = HEAP16[i5 >> 1] | 0;
 L1 : do if (!(i4 << 16 >> 16)) i1 = 0; else {
  i1 = i9 + (i7 + -1) | 0;
  i6 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP8[i6 >> 0] | 0;
  if (i2 << 24 >> 24 == 45) {
   HEAP8[i3 >> 0] = 1;
   i6 = HEAP32[i8 >> 2] | 0;
   i3 = HEAP8[i6 >> 0] | 0;
   i4 = HEAP16[i5 >> 1] | 0;
   i2 = 1;
  } else {
   i3 = i2;
   i2 = 0;
  }
  i5 = i3 << 24 >> 24 == 43 ? 1 : i2;
  i2 = i4 & 65535;
  L6 : do if (i5 >>> 0 < i2 >>> 0) {
   i2 = i2 + -1 | 0;
   i3 = HEAP8[i6 + i2 >> 0] | 0;
   if ((i7 | 0) < 1 | (i3 + -48 & 255) > 9) {
    i1 = 0;
    break L1;
   }
   while (1) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + -1 | 0;
    if ((i2 | 0) <= (i5 | 0)) break L6;
    i2 = i2 + -1 | 0;
    i3 = HEAP8[(HEAP32[i8 >> 2] | 0) + i2 >> 0] | 0;
    if (i1 >>> 0 < i9 >>> 0 | (i3 + -48 & 255) > 9) {
     i1 = 0;
     break L1;
    }
   }
  } while (0);
  if (i1 >>> 0 < i9 >>> 0) i1 = 1; else {
   do {
    HEAP8[i1 >> 0] = 48;
    i1 = i1 + -1 | 0;
   } while (i1 >>> 0 >= i9 >>> 0);
   i1 = 1;
  }
 } while (0);
 return i1 | 0;
}

function _InputWidget_BackspaceKey(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) {
  if (HEAP16[i6 + 68 >> 1] | 0) if (HEAP32[i6 + 160 >> 2] | 0) {
   _InputWidget_DeleteChar(i6);
   _InputWidget_UpdateText(i6);
  }
 } else {
  i5 = i6 + 160 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == -1) {
   i1 = (HEAPU16[i6 + 68 >> 1] | 0) + -1 | 0;
   HEAP32[i5 >> 2] = i1;
  }
  i4 = i6 + 64 | 0;
  i3 = _WordWrap_GetBackLength(i4, i1) | 0;
  if (i3 | 0) {
   i1 = (HEAP32[i5 >> 2] | 0) - i3 | 0;
   i1 = (i1 | 0) > 0 ? i1 : 0;
   HEAP32[i5 >> 2] = i1;
   if ((i3 | 0) >= 0) {
    i2 = 0;
    while (1) {
     _String_DeleteAt(i4, i1);
     i1 = HEAP32[i5 >> 2] | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i2 = i2 + 1 | 0;
    }
   }
   i2 = HEAP16[i6 + 68 >> 1] | 0;
   i3 = i2 & 65535;
   if ((i1 | 0) < (i3 | 0)) {
    if ((i1 | 0) == -1) i7 = 11; else if ((i1 | 0) > -1) if ((HEAP8[(HEAP32[i4 >> 2] | 0) + i1 >> 0] | 0) != 32) _String_InsertAt(i4, i1, 32);
   } else {
    HEAP32[i5 >> 2] = -1;
    i7 = 11;
   }
   if ((i7 | 0) == 11) if (i2 << 16 >> 16) _String_InsertAt(i4, i3, 32);
   _InputWidget_UpdateText(i6);
  }
 }
 return;
}

function _SetAsValid(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = i2 + 112 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP8[i2 + 124 >> 0] = 1;
 HEAPF32[431726] = 1.0e9;
 i3 = i2 + 100 | 0;
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 36 >> 2], 0);
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 48 >> 2], 1);
 i3 = i2 + 104 | 0;
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 40 >> 2], 4);
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 52 >> 2], 5);
 i3 = i2 + 108 | 0;
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 44 >> 2], 2);
 _TestAxis(i2, +HEAPF32[i3 >> 2] - +HEAPF32[i2 + 56 >> 2], 3);
 switch (HEAP8[i2 + 125 >> 0] | 0) {
 case 0:
  {
   i3 = -1;
   i4 = 8;
   break;
  }
 case 1:
  {
   i3 = 1;
   i4 = 8;
   break;
  }
 case 2:
  {
   i3 = -1;
   i1 = i2 + 120 | 0;
   i4 = 8;
   break;
  }
 case 3:
  {
   i3 = 1;
   i1 = i2 + 120 | 0;
   i4 = 8;
   break;
  }
 case 4:
  {
   i3 = -1;
   i1 = i2 + 116 | 0;
   i4 = 8;
   break;
  }
 case 5:
  {
   i3 = 1;
   i1 = i2 + 116 | 0;
   i4 = 8;
   break;
  }
 default:
  {}
 }
 if ((i4 | 0) == 8) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i3;
 return;
}

function _ChatScreen_ContextLost(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _ChatScreen_FreeChatFonts(i1);
 _Screen_ContextLost(i1);
 i2 = i1 + 1108 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 324 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 1292 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 924 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 1016 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 1200 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 108 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 180 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 252 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 2728 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 2560 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i1 = i1 + 2644 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 return;
}

function _MakeNameTexture(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i7 + 88 | 0;
 i1 = i7 + 72 | 0;
 i2 = i7 + 120 | 0;
 i4 = i7 + 96 | 0;
 i6 = i7 + 64 | 0;
 _Font_MakeBitmapped(i2, 24, 0);
 HEAP16[i2 + 4 >> 1] = 24;
 HEAP32[i2 + 8 >> 2] = 24;
 _String_FromRaw(i6, i5 + 260 | 0, 64);
 _DrawTextArgs_Make(i1, i6, i2, 0);
 i2 = _Drawer2D_TextWidth(i1) | 0;
 if (!i2) {
  HEAP32[i5 + 324 >> 2] = 0;
  HEAP16[i5 + 328 >> 1] = -3e4;
 } else {
  HEAP32[i3 >> 2] = i7;
  HEAP16[i3 + 4 >> 1] = 0;
  HEAP16[i3 + 6 >> 1] = 64;
  _Context2D_Alloc(i4, i2 + 3 | 0, (_Drawer2D_TextHeight(i1) | 0) + 3 | 0);
  i2 = HEAP32[416933] | 0;
  HEAP32[416933] = -11513776;
  _Drawer2D_WithoutColors(i3, i6);
  i9 = i3;
  i8 = HEAP32[i9 + 4 >> 2] | 0;
  i3 = i1;
  HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i3 + 4 >> 2] = i8;
  _Context2D_DrawText(i4, i1, 3, 3);
  HEAP32[416933] = i2;
  i2 = i6;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i6 = i1;
  HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i6 + 4 >> 2] = i3;
  _Context2D_DrawText(i4, i1, 0, 0);
  _Context2D_MakeTexture(i5 + 324 | 0, i4);
  _Context2D_Free(i4);
 }
 STACKTOP = i7;
 return;
}

function _StringsBuffer_Remove(i5, i7) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 if ((i7 | 0) < 0) i1 = 3; else if ((HEAP32[i5 + 8 >> 2] | 0) <= (i7 | 0)) i1 = 3;
 if ((i1 | 0) == 3) _Process_Abort2(0, 49386);
 i6 = i5 + 4 | 0;
 i8 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i7 << 2) >> 2] | 0;
 i4 = i5 + 5144 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i9 = HEAP32[i5 + 5148 >> 2] & i8;
 i3 = i9 + (i1 ? i8 >>> i1 : i8) | 0;
 i10 = i5 + 12 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i3 >>> 0 < i2 >>> 0) {
  i1 = i3;
  do {
   i2 = HEAP32[i5 >> 2] | 0;
   HEAP8[i2 + (i1 - i9) >> 0] = HEAP8[i2 + i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i2 = HEAP32[i10 >> 2] | 0;
  } while (i1 >>> 0 < i2 >>> 0);
  i1 = HEAP32[i4 >> 2] | 0;
 }
 i4 = i9 << i1;
 i5 = i5 + 8 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
 if (i1 >>> 0 > i7 >>> 0) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = i7;
  do {
   i1 = i2;
   i2 = i2 + 1 | 0;
   i7 = HEAP32[i3 + (i2 << 2) >> 2] | 0;
   HEAP32[i3 + (i1 << 2) >> 2] = i7 - (i7 >>> 0 < i8 >>> 0 ? 0 : i4);
   i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  } while (i2 >>> 0 < i1 >>> 0);
  i2 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i10 >> 2] = i2 - i9;
 return;
}

function _Model_DrawPart(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[428691] | 0;
 i9 = i1 + 36 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP16[i2 + 2 >> 1] | 0;
 i6 = i8 & 65535;
 d4 = +HEAPF32[428686];
 d5 = +HEAPF32[428687];
 if (i8 << 16 >> 16) {
  i7 = (HEAP32[428693] | 0) + (i3 * 24 | 0) | 0;
  i8 = 0;
  i1 = (HEAP32[i1 + 4 >> 2] | 0) + ((HEAPU16[i2 >> 1] | 0) << 4) | 0;
  while (1) {
   i12 = HEAP32[i1 + 4 >> 2] | 0;
   i11 = HEAP32[i1 + 8 >> 2] | 0;
   i10 = HEAP16[i1 + 12 >> 1] | 0;
   i2 = HEAP16[i1 + 14 >> 1] | 0;
   HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i7 + 4 >> 2] = i12;
   HEAP32[i7 + 8 >> 2] = i11;
   HEAP32[i7 + 12 >> 2] = HEAP32[1714720 + ((2 ? i8 >>> 2 : i8) << 2) >> 2];
   i10 = i10 & 65535;
   HEAPF32[i7 + 16 >> 2] = d4 * +(i10 & 32767 | 0) - d4 * (+((15 ? i10 >>> 15 : i10) | 0) * .009999999776482582);
   i2 = i2 & 65535;
   HEAPF32[i7 + 20 >> 2] = d5 * +(i2 & 32767 | 0) - d5 * (+((15 ? i2 >>> 15 : i2) | 0) * .009999999776482582);
   i8 = i8 + 1 | 0;
   if ((i8 | 0) == (i6 | 0)) break; else {
    i7 = i7 + 24 | 0;
    i1 = i1 + 16 | 0;
   }
  }
 }
 HEAP32[i9 >> 2] = i3 + i6;
 return;
}

function _EnvRenderer_RenderSkybox() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i1 = i7 + 208 | 0;
 i3 = i7 + 144 | 0;
 i4 = i7 + 80 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7;
 if (!(HEAP32[418851] | 0)) {
  _BuildSkybox();
  if (HEAP32[418851] | 0) i6 = 3;
 } else i6 = 3;
 if ((i6 | 0) == 3) {
  _Gfx_SetDepthWrite(0);
  _Gfx_BindTexture(HEAP32[418858] | 0);
  _Gfx_SetVertexFormat(1);
  d8 = +HEAPF64[122280] * 2.0 * 3.1415927410125732;
  _Matrix_RotateY(i4, +HEAPF32[466936] * d8);
  _Matrix_RotateX(i3, +HEAPF32[466937] * d8);
  _Matrix_Mul(i1, i4, i3);
  HEAP32[i2 >> 2] = HEAP32[414158];
  HEAP32[i2 + 4 >> 2] = HEAP32[414159];
  HEAP32[i2 + 8 >> 2] = HEAP32[414160];
  HEAPF32[414158] = 0.0;
  HEAPF32[414159] = 0.0;
  HEAPF32[414160] = 0.0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 8 >> 2] & 511](i5);
  _Matrix_Mul(i1, i1, i5);
  HEAP32[414158] = HEAP32[i2 >> 2];
  HEAP32[414159] = HEAP32[i2 + 4 >> 2];
  HEAP32[414160] = HEAP32[i2 + 8 >> 2];
  _Gfx_LoadMatrix(1, i1);
  _Gfx_BindVb(HEAP32[418851] | 0);
  _Gfx_DrawVb_IndexedTris(24);
  _Gfx_LoadMatrix(1, 1689084);
  _Gfx_SetDepthWrite(1);
 }
 STACKTOP = i7;
 return;
}

function _BuildChunk(i7, i1) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 HEAP32[244562] = (HEAP32[244562] | 0) + 1;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 _Builder_MakeChunk(i7);
 i3 = i7 + 6 | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i2 & -5;
 i5 = HEAP32[i7 + 12 >> 2] | 0;
 i4 = (i5 | 0) == 0;
 if (i4) i1 = ((HEAP32[i7 + 16 >> 2] | 0) == 0 & 1) << 4 & 255; else i1 = 0;
 HEAP8[i3 >> 0] = i1 | i2 & -23 | (3 ? (i1 & 255) >>> 3 : i1 & 255) & 2;
 if (!(i1 & 16)) {
  i8 = HEAP32[424247] | 0;
  i6 = (i8 | 0) > 0;
  if (i6 & (i4 ^ 1)) {
   i3 = HEAP32[424248] | 0;
   i4 = 0;
   i2 = i5;
   while (1) {
    i1 = 357744 + (i4 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) > -1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else i2 = i2 + (i3 * 20 | 0) | 0;
   }
  }
  i1 = HEAP32[i7 + 16 >> 2] | 0;
  if ((i1 | 0) != 0 & i6) {
   i3 = HEAP32[424248] | 0;
   i4 = 0;
   while (1) {
    i2 = 359792 + (i4 << 2) | 0;
    if ((HEAP32[i1 >> 2] | 0) > -1) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else i1 = i1 + (i3 * 20 | 0) | 0;
   }
  }
 }
 return;
}

function _BoxDesc_BuildBox(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0;
 i7 = HEAPU8[i1 + 6 >> 0] | 0;
 i16 = HEAPU8[i1 + 4 >> 0] | 0;
 i4 = HEAPU8[i1 + 5 >> 0] | 0;
 d8 = +HEAPF32[i1 + 8 >> 2];
 d10 = +HEAPF32[i1 + 12 >> 2];
 d11 = +HEAPF32[i1 + 16 >> 2];
 d15 = +HEAPF32[i1 + 20 >> 2];
 d9 = +HEAPF32[i1 + 24 >> 2];
 d12 = +HEAPF32[i1 + 28 >> 2];
 i13 = HEAPU16[i1 >> 1] | 0;
 i17 = HEAPU16[i1 + 2 >> 1] | 0;
 i3 = HEAP32[428691] | 0;
 i14 = i13 + i7 | 0;
 i5 = i14 + i16 | 0;
 i6 = i17 + i7 | 0;
 _BoxDesc_YQuad2(i3, d8, d15, d12, d11, d9, i5, i17, i14, i6);
 _BoxDesc_YQuad2(i3, d15, d8, d12, d11, d10, i5, i17, i5 + i16 | 0, i6);
 i4 = i6 + i4 | 0;
 _BoxDesc_ZQuad2(i3, d8, d15, d10, d9, d11, i5, i6, i14, i4);
 i7 = i5 + i7 | 0;
 _BoxDesc_ZQuad2(i3, d15, d8, d10, d9, d12, i7 + i16 | 0, i6, i7, i4);
 _BoxDesc_XQuad2(i3, d11, d12, d10, d9, d15, i14, i6, i13, i4);
 _BoxDesc_XQuad2(i3, d12, d11, d10, d9, d8, i7, i6, i5, i4);
 _ModelPart_Init(i2, (HEAP32[i3 + 36 >> 2] | 0) + -24 | 0, 24, +HEAPF32[i1 + 32 >> 2], +HEAPF32[i1 + 36 >> 2], +HEAPF32[i1 + 40 >> 2]);
 return;
}

function _Fallback_DrawCell(i13, i20, i1, i18, i17, i15) {
 i13 = i13 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i19 = 0;
 i14 = (i18 | 0) > 0;
 i16 = i13 + 8 | 0;
 i19 = i13 + 4 | 0;
 i12 = 0;
 do {
  if (i14) {
   i3 = i17 + i12 | 0;
   i7 = i1;
   i11 = 0;
   while (1) {
    if ((i7 | 0) >= 0) if ((i7 | 0) < (HEAP32[i16 >> 2] | 0)) {
     i2 = (HEAP32[i13 >> 2] | 0) + ((Math_imul(HEAP32[i19 >> 2] | 0, i7) | 0) << 2) | 0;
     i4 = HEAPU8[i3 >> 0] | 0;
     i5 = i20;
     i8 = 0;
     while (1) {
      i9 = (1 << i8 & i4 | 0) == 0;
      i6 = i5;
      i10 = 0;
      while (1) {
       if ((i6 | 0) >= 0) if (!((i6 | 0) >= (HEAP32[i19 >> 2] | 0) | i9)) HEAP32[i2 + (i6 << 2) >> 2] = i15;
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i18 | 0)) break; else i6 = i6 + 1 | 0;
      }
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == 8) break; else i5 = i5 + i18 | 0;
     }
    }
    i11 = i11 + 1 | 0;
    if ((i11 | 0) == (i18 | 0)) break; else i7 = i7 + 1 | 0;
   }
   i1 = i1 + i18 | 0;
  }
  i12 = i12 + 1 | 0;
 } while ((i12 | 0) != 8);
 return;
}

function _TouchScreen_Layout(i7) {
 i7 = i7 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 d1 = +HEAPF32[422386];
 i3 = _HUDScreen_LayoutHotbar() | 0;
 i6 = i7 + 40 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i2 = i7 + 1192 | 0;
  i4 = ~~(d1 * 60.0);
  i5 = 0;
  do {
   i8 = i2 + (i5 * 84 | 0) | 0;
   i9 = HEAP32[i2 + (i5 * 84 | 0) + 36 >> 2] | 0;
   _Widget_SetLocation(i8, 2, 2, HEAPU8[i9 + 5 >> 0] | 0, HEAPU8[i9 + 6 >> 0] | 0);
   i9 = i2 + (i5 * 84 | 0) + 28 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i3;
   i9 = _Display_ScaleX_2339(i4) | 0;
   HEAP32[i2 + (i5 * 84 | 0) + 72 >> 2] = i9;
   i9 = _Display_ScaleY_2340(i4) | 0;
   HEAP32[i2 + (i5 * 84 | 0) + 76 >> 2] = i9;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 511](i8);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i6 >> 2] | 0));
 }
 _TouchScreen_LayoutOnscreen(i7, 0);
 _TouchScreen_LayoutOnscreen(i7, 2);
 _Widget_SetLocation(i7 + 1360 | 0, 1, 0, 0, 10);
 i9 = i7 + 56 | 0;
 _Widget_SetLocation(i9, 0, 2, 30, 5);
 i8 = i7 + 84 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
 HEAPF32[i7 + 96 >> 2] = d1;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 511](i9);
 return;
}

function _CPE_SendPlayerClick(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i8 = HEAP32[417347] | 0;
 HEAP8[i5 >> 0] = 34;
 HEAP8[i5 + 1 >> 0] = i1;
 HEAP8[i5 + 2 >> 0] = i2 << 24 >> 24 == 0 & 1;
 _Stream_SetU16_BE(i5 + 3 | 0, ~~(+HEAPF32[i8 + 20 >> 2] * 65536.0 / 360.0) & 65535);
 _Stream_SetU16_BE(i5 + 5 | 0, ~~(+HEAPF32[i8 + 16 >> 2] * 65536.0 / 360.0) & 65535);
 HEAP8[i5 + 7 >> 0] = i3;
 _Stream_SetU16_BE(i5 + 8 | 0, HEAP32[i4 >> 2] & 65535);
 _Stream_SetU16_BE(i5 + 10 | 0, HEAP32[i4 + 4 >> 2] & 65535);
 _Stream_SetU16_BE(i5 + 12 | 0, HEAP32[i4 + 8 >> 2] & 65535);
 i2 = i5 + 14 | 0;
 HEAP8[i2 >> 0] = -1;
 switch (HEAP8[i4 + 125 >> 0] | 0) {
 case 1:
  {
   i1 = 0;
   i6 = 7;
   break;
  }
 case 0:
  {
   i1 = 1;
   i6 = 7;
   break;
  }
 case 5:
  {
   i1 = 2;
   i6 = 7;
   break;
  }
 case 4:
  {
   i1 = 3;
   i6 = 7;
   break;
  }
 case 3:
  {
   i1 = 4;
   i6 = 7;
   break;
  }
 case 2:
  {
   i1 = 5;
   i6 = 7;
   break;
  }
 default:
  {}
 }
 if ((i6 | 0) == 7) HEAP8[i2 >> 0] = i1;
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i5, 15);
 STACKTOP = i7;
 return;
}

function _TabListOverlay_AddGroup(i5, i1, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6;
 _StringsBuffer_UNSAFE_Get(i3, 1670160, (HEAPU16[1669392 + (i1 << 1) >> 1] | 0) + -1 | 0);
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) < 511) {
  i2 = 511;
  do {
   i1 = i2;
   i2 = i2 + -1 | 0;
   HEAP16[i5 + 152 + (i1 << 1) >> 1] = HEAP16[i5 + 152 + (i2 << 1) >> 1] | 0;
   i1 = i5 + 1176 + (i1 * 28 | 0) | 0;
   i7 = i5 + 1176 + (i2 * 28 | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) > (i1 | 0));
 }
 HEAP16[i5 + 152 + (i1 << 1) >> 1] = -1;
 HEAP32[i5 + 1176 + (i1 * 28 | 0) >> 2] = 0;
 _TabListOverlay_DrawText(i5 + 1176 + (i1 * 28 | 0) | 0, i5, i3);
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i7 = i5 + 56 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 STACKTOP = i6;
 return;
}

function _Entities_GetClosest(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i11 + 44 | 0;
 i8 = i11 + 32 | 0;
 i7 = i11 + 20 | 0;
 i5 = i11 + 8 | 0;
 i9 = i11 + 4 | 0;
 i10 = i11;
 _Entity_GetEyePosition(i7, i1);
 _Vec3_GetDirVector(i5, +HEAPF32[i1 + 20 >> 2] * .01745329238474369, +HEAPF32[i1 + 16 >> 2] * .01745329238474369);
 d2 = -200.0;
 i4 = 0;
 i3 = -1;
 while (1) {
  i1 = HEAP32[1668360 + (i4 << 2) >> 2] | 0;
  if (!i1) i1 = i3; else if ((i1 | 0) == (HEAP32[417347] | 0)) i1 = i3; else {
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   if (!((_Intersection_RayIntersectsRotatedBox(i8, i6, i1, i9, i10) | 0) << 24 >> 24)) i1 = i3; else {
    d12 = +HEAPF32[i9 >> 2];
    i1 = (i3 | 0) < 0 | d12 < d2;
    d2 = i1 ? d12 : d2;
    i1 = i1 ? i4 : i3;
   }
  }
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 256) break; else i3 = i1;
 }
 STACKTOP = i11;
 return i1 | 0;
}

function _LoadOptions() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = _Options_GetBool(32706, 0) | 0;
 HEAP8[1868754] = i1;
 i1 = _Options_GetBool(32719, 0) | 0;
 HEAP8[1868755] = i1;
 i1 = _Options_GetBool(39610, 0) | 0;
 HEAP8[1868758] = i1;
 i1 = _Options_GetBool(39573, 1) | 0;
 HEAP8[1868759] = i1;
 do if (!(HEAP8[1868754] | 0)) {
  i3 = (_Options_GetBool(43299, 1) | 0) << 24 >> 24 != 0 & 1;
  i1 = HEAP8[1868754] | 0;
  HEAP8[1868756] = i3;
  if (!(i1 << 24 >> 24)) {
   i1 = (_Options_GetBool(43004, 0) | 0) << 24 >> 24 != 0 & 1;
   i3 = HEAP8[1868754] | 0;
   HEAP8[1868753] = i1;
   if (i3 << 24 >> 24) {
    HEAP8[1868749] = 0;
    i1 = 0;
    break;
   }
   i1 = (_Options_GetBool(42457, 0) | 0) << 24 >> 24 != 0 & 1;
   i3 = HEAP8[1868754] | 0;
   HEAP8[1868749] = i1;
   if (!(i3 << 24 >> 24)) i1 = (_Options_GetBool(43322, 1) | 0) << 24 >> 24 != 0 & 1; else i1 = 0;
  } else i2 = 4;
 } else {
  HEAP8[1868756] = 0;
  i2 = 4;
 } while (0);
 if ((i2 | 0) == 4) {
  HEAP8[1868753] = 0;
  HEAP8[1868749] = 0;
  i1 = 0;
 }
 HEAP8[1868757] = i1;
 i3 = _Options_GetInt(32164, 8, 4096, 512) | 0;
 HEAP32[3680] = i3;
 HEAP32[3681] = i3;
 i3 = _Options_GetBool(32735, 1) | 0;
 HEAP8[1868761] = i3;
 return;
}

function _Physics_HandleSapling(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 i7 = i8 + 96 | 0;
 i6 = i8;
 i3 = HEAP32[244733] | 0;
 i1 = (i2 | 0) / (i3 | 0) | 0;
 i3 = i2 - (Math_imul(i1, i3) | 0) | 0;
 i4 = HEAP32[244735] | 0;
 i5 = (i1 | 0) / (i4 | 0) | 0;
 i4 = i1 - (Math_imul(i5, i4) | 0) | 0;
 if ((i5 | 0) > 0) {
  i1 = HEAP8[(HEAP32[244730] | 0) + (i2 - (HEAP32[244739] | 0)) >> 0] | 0;
  if (i1 << 24 >> 24 != 3) {
   _Game_UpdateBlock(i3, i5, i4, 0);
   if (i1 << 24 >> 24 == 2) if ((FUNCTION_TABLE_iiii[HEAP32[467170] & 63](i3, i5, i4) | 0) << 24 >> 24) {
    i1 = (_Random_Next(978184, 3) | 0) + 5 | 0;
    if ((_TreeGen_CanGrow(i3, i5, i4, i1) | 0) << 24 >> 24) {
     i1 = _TreeGen_Grow(i3, i5, i4, i1, i7, i6) | 0;
     if ((i1 | 0) > 0) {
      i2 = 0;
      do {
       _Game_UpdateBlock(HEAP32[i7 + (i2 * 12 | 0) >> 2] | 0, HEAP32[i7 + (i2 * 12 | 0) + 4 >> 2] | 0, HEAP32[i7 + (i2 * 12 | 0) + 8 >> 2] | 0, HEAPU8[i6 + i2 >> 0] | 0);
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i1 | 0));
     }
    }
   }
  }
 } else _Game_UpdateBlock(i3, i5, i4, 0);
 STACKTOP = i8;
 return;
}

function _Game_ValidateBitmap(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12 + 12 | 0;
 i7 = i12 + 8 | 0;
 i10 = i12 + 4 | 0;
 i8 = i12;
 i1 = HEAP32[422267] | 0;
 HEAP32[i9 >> 2] = i1;
 i3 = HEAP32[422268] | 0;
 HEAP32[i7 >> 2] = i3;
 do if (!(HEAP32[i5 >> 2] | 0)) {
  _Chat_Add1(32212, i6);
  i1 = 0;
 } else {
  i11 = i5 + 4 | 0;
  i4 = HEAP32[i11 >> 2] | 0;
  i2 = i5 + 8 | 0;
  if ((i4 | 0) <= (i1 | 0)) {
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) <= (i3 | 0)) {
    i9 = HEAP32[422269] | 0;
    if ((i9 | 0) != 0 & (Math_imul(i1, i4) | 0) > (i9 | 0)) {
     _Chat_Add1(32254, i6);
     d13 = +(Math_imul(HEAP32[i2 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) * 9.5367431640625e-07;
     HEAPF32[i10 >> 2] = d13;
     HEAPF32[i8 >> 2] = +(HEAP32[422269] | 0) * 9.5367431640625e-07;
     _Chat_Add2(32355, i10, i8);
     i1 = 0;
     break;
    } else {
     i1 = _Game_ValidateBitmapPow2(i6, i5) | 0;
     break;
    }
   }
  }
  _Chat_Add1(32254, i6);
  _Chat_Add4(32296, i11, i2, i9, i7);
  i1 = 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function _UpdateChunksAndVisibility(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i6 = HEAP32[424263] | 0;
 i7 = HEAP32[424262] | 0;
 if ((HEAP32[424248] | 0) > 0) {
  i8 = i7 + 512 | 0;
  i10 = 0;
  i1 = 0;
  do {
   i4 = HEAP32[(HEAP32[424253] | 0) + (i10 << 2) >> 2] | 0;
   i5 = i4 + 6 | 0;
   i3 = HEAP8[i5 >> 0] | 0;
   do if (!(i3 & 2)) {
    i2 = HEAP32[(HEAP32[424255] | 0) + (i10 << 2) >> 2] | 0;
    if (!((i3 & 16) != 0 | (i2 | 0) < (i8 | 0))) {
     _DeleteChunk(i4);
     break;
    }
    if (!((i3 & 4) == 0 | (i2 | 0) > (i7 | 0))) if ((HEAP32[i9 >> 2] | 0) < (HEAP32[3896] | 0)) {
     _DeleteChunk(i4);
     _BuildChunk(i4, i9);
    }
    if ((i2 | 0) > (i6 | 0)) i2 = 0; else i2 = (_FrustumCulling_SphereInFrustum(+(HEAPU16[i4 >> 1] | 0), +(HEAPU16[i4 + 2 >> 1] | 0), +(HEAPU16[i4 + 4 >> 1] | 0), 14.0) | 0) << 24 >> 24 != 0;
    i3 = HEAP8[i5 >> 0] | 0;
    HEAP8[i5 >> 0] = i3 & -2 | i2 & 1;
    if (i2 & (i3 & 2) == 0) {
     HEAP32[(HEAP32[424254] | 0) + (i1 << 2) >> 2] = i4;
     i1 = i1 + 1 | 0;
    }
   } while (0);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (HEAP32[424248] | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _MeasureBitmappedWidth(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i13;
 i10 = i7 + 8 | 0;
 i9 = HEAPU16[(HEAP32[i10 >> 2] | 0) + 4 >> 1] | 0;
 if (!(HEAP32[417087] | 0)) i1 = _FallbackFont_TextWidth(i7) | 0; else {
  i8 = _Math_CeilDiv(i9, 8) | 0;
  i1 = i7;
  i6 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i5 = i11;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i1;
  if (!((i1 & 65535) << 16 >> 16)) i1 = 0; else {
   i5 = i1 & 65535;
   i4 = 0;
   i1 = 0;
   do {
    i3 = HEAP8[i6 + i4 >> 0] | 0;
    if (i3 << 24 >> 24 == 38) {
     i2 = i4 + 1 | 0;
     if (!((_Drawer2D_ValidColorCodeAt(i11, i2) | 0) << 24 >> 24)) i12 = 7;
    } else i12 = 7;
    if ((i12 | 0) == 7) {
     i12 = 0;
     i2 = i4;
     i1 = i1 + i8 + (_Drawer2D_Width(i9, i3) | 0) | 0;
    }
    i4 = i2 + 1 | 0;
   } while ((i4 | 0) < (i5 | 0));
   if (!i1) i1 = 0; else i1 = ((HEAP16[(HEAP32[i10 >> 2] | 0) + 6 >> 1] & 4) == 0 ? 0 - i8 | 0 : 0) + i1 + ((HEAP8[i7 + 12 >> 0] | 0) == 0 ? 0 : 3 ? i9 >>> 3 : i9) | 0;
  }
 }
 STACKTOP = i13;
 return i1 | 0;
}

function _CalculateChunkLightingAll(i10, i1, i2, i3) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i9 = i1 + 1 | 0;
 i8 = i2 + 1 | 0;
 i5 = i3 + 1 | 0;
 i11 = (i1 | 0) == 0 ? 0 : i1 + -1 | 0;
 i4 = (i2 | 0) == 0 ? 0 : i2 + -1 | 0;
 i12 = (i3 | 0) == 0 ? 0 : i3 + -1 | 0;
 i9 = (i9 | 0) == (HEAP32[244750] | 0) ? i1 : i9;
 i8 = (i8 | 0) == (HEAP32[244751] | 0) ? i2 : i8;
 i5 = (i5 | 0) == (HEAP32[244752] | 0) ? i3 : i5;
 if ((i4 | 0) <= (i8 | 0)) {
  i6 = (i12 | 0) > (i5 | 0);
  i7 = (i11 | 0) > (i9 | 0);
  while (1) {
   if (!i6) {
    i3 = i12;
    while (1) {
     if (!i7) {
      i2 = i11;
      while (1) {
       i1 = (Math_imul(HEAP32[244752] | 0, i4) | 0) + i3 | 0;
       i1 = (Math_imul(i1, HEAP32[244750] | 0) | 0) + i2 | 0;
       if (!(HEAP8[(HEAP32[422181] | 0) + i1 >> 0] | 0)) _CalculateChunkLightingSelf(i1, i2, i4, i3);
       if ((i2 | 0) < (i9 | 0)) i2 = i2 + 1 | 0; else break;
      }
     }
     if ((i3 | 0) < (i5 | 0)) i3 = i3 + 1 | 0; else break;
    }
   }
   if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
  }
 }
 HEAP8[(HEAP32[422181] | 0) + i10 >> 0] = 2;
 return;
}

function _ClassicLighting_NeedsNeighour(i7, i3, i8, i2, i9) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = (i2 | 0) < (i8 | 0);
 L1 : do if ((HEAP32[244744] | 0) < 256) if (i1) i1 = 0; else {
  i4 = HEAP32[244730] | 0;
  i5 = HEAP32[244739] | 0;
  while (1) {
   i1 = HEAP8[i4 + i3 >> 0] | 0;
   if ((i2 | 0) == (i9 | 0)) i1 = (_ClassicLighting_Needs(i7, i1 & 255) | 0) & 255; else i1 = (HEAP8[1006372 + (i1 & 255) >> 0] | 0) != 4 & 1;
   if (i1 | 0) {
    i1 = 1;
    break L1;
   }
   if ((i2 | 0) > (i8 | 0)) {
    i3 = i3 - i5 | 0;
    i2 = i2 + -1 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
 } else if (i1) i1 = 0; else {
  i4 = HEAP32[244730] | 0;
  i5 = HEAP32[244731] | 0;
  i6 = HEAP32[244739] | 0;
  while (1) {
   i1 = HEAPU8[i5 + i3 >> 0] << 8 | HEAPU8[i4 + i3 >> 0];
   if ((i2 | 0) == (i9 | 0)) i1 = (_ClassicLighting_Needs(i7, i1 & 65535) | 0) & 255; else i1 = (HEAP8[1006372 + i1 >> 0] | 0) != 4 & 1;
   if (i1 | 0) {
    i1 = 1;
    break L1;
   }
   if ((i2 | 0) > (i8 | 0)) {
    i3 = i3 - i6 | 0;
    i2 = i2 + -1 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _LoadingScreen_BuildMesh(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = i7 + 48 | 0;
 i5 = i7 + 20 | 0;
 i2 = i7;
 i8 = _Screen_LockVb(i4) | 0;
 HEAP32[i1 >> 2] = i8;
 i8 = HEAP16[523945] | 0;
 HEAP16[i5 + 4 >> 1] = 0;
 i6 = i5 + 6 | 0;
 HEAP16[i6 >> 1] = 0;
 HEAP16[i5 + 8 >> 1] = HEAP32[466968];
 HEAP16[i5 + 10 >> 1] = 64;
 i3 = i5 + 12 | 0;
 _Atlas1D_TexRec(i2, i8, 1, i7 + 16 | 0);
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAPF32[i5 + 20 >> 2] = +(HEAP32[466968] | 0) * .015625;
 i3 = i4 + 52 | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   HEAP16[i6 >> 1] = i2 << 6;
   _Gfx_Make2DQuad(i5, -12566464, i1);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 i8 = i4 + 72 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8, i1);
 i8 = i4 + 144 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8, i1);
 _Gfx_UnlockDynamicVb(HEAP32[i4 + 12 >> 2] | 0);
 STACKTOP = i7;
 return;
}

function _RefreshBorderChunks(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i9;
 _IVec3_MaxValue_1233(i6);
 HEAP32[424258] = HEAP32[i6 >> 2];
 HEAP32[424259] = HEAP32[i6 + 4 >> 2];
 HEAP32[424260] = HEAP32[i6 + 8 >> 2];
 if ((HEAP32[424252] | 0) != 0 & (HEAP32[244730] | 0) != 0 & (HEAP32[244752] | 0) > 0) {
  i1 = HEAP32[244751] | 0;
  i6 = 0;
  do {
   if ((i1 | 0) > 0) {
    i4 = (i6 | 0) == 0;
    i2 = HEAP32[244750] | 0;
    i5 = 0;
    do {
     if ((i2 | 0) > 0) {
      i3 = (i5 << 4 | 0) < (i7 | 0);
      i1 = 0;
      do {
       if (i4 | (i1 | 0) == 0 | (i1 | 0) == (i2 + -1 | 0)) {
        if (i3) i8 = 10;
       } else if (i3 & (i6 | 0) == ((HEAP32[244752] | 0) + -1 | 0)) i8 = 10;
       if ((i8 | 0) == 10) {
        i8 = 0;
        _MapRenderer_RefreshChunk(i1, i5, i6);
        i2 = HEAP32[244750] | 0;
       }
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) < (i2 | 0));
     }
     i5 = i5 + 1 | 0;
     i1 = HEAP32[244751] | 0;
    } while ((i5 | 0) < (i1 | 0));
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[244752] | 0));
 }
 STACKTOP = i9;
 return;
}

function _Atlas_TryChange(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6;
 do if (!((_Game_ValidateBitmapPow2(22428, i3) | 0) << 24 >> 24)) i1 = 0; else {
  i5 = i3 + 4 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i1 = (i4 | 0) / 16 | 0;
  HEAP32[i2 >> 2] = i1;
  if ((i4 | 0) < 16) {
   _Chat_AddRaw(49731);
   _Chat_AddRaw(49782);
   i1 = 0;
   break;
  }
  i4 = i3 + 8 | 0;
  if ((HEAP32[i4 >> 2] | 0) < (i1 | 0)) {
   _Chat_AddRaw(49731);
   _Chat_AddRaw(49820);
   i1 = 0;
   break;
  }
  if (!((_Gfx_CheckTextureSize(i1, i1, 0) | 0) << 24 >> 24)) {
   _Chat_AddRaw(49731);
   _Chat_Add4(49860, i2, i2, 1689068, 1689072);
   i1 = 0;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) < (i1 | 0)) {
   _Chat_AddRaw(49920);
   _Chat_AddRaw(49968);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if ((i1 | 0) > (HEAP32[422267] | 0)) {
   _Chat_AddRaw(50022);
   _Chat_Add4(50078, i5, i4, 1689068, 1689072);
  }
  if (!(HEAP8[1689080] | 0)) {
   _Atlas1D_Free();
   _Atlas2D_Free();
   _Atlas_Update(i3);
   _Event_RaiseVoid(1676764);
   i1 = 1;
  } else i1 = 0;
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _LocalInterpComp_SetLocation(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAPU8[i6 + 28 >> 0] | 0;
 i3 = i1 & 128;
 if (i1 & 1 | 0) _LocalInterpComp_SetPosition(i4, i6, i1 & 96);
 if (i1 & 2 | 0) _LocalInterpComp_Angle(i4 + 364 | 0, i4 + 396 | 0, +HEAPF32[i6 + 12 >> 2], i3);
 if (i1 & 8 | 0) _LocalInterpComp_Angle(i4 + 372 | 0, i4 + 404 | 0, +HEAPF32[i6 + 20 >> 2], i3);
 if (i1 & 16 | 0) _LocalInterpComp_Angle(i4 + 380 | 0, i4 + 412 | 0, +HEAPF32[i6 + 24 >> 2], i3);
 do if (i1 & 4 | 0) {
  i1 = i4 + 368 | 0;
  i2 = i4 + 400 | 0;
  _LocalInterpComp_Angle(i1, i2, +HEAPF32[i6 + 16 >> 2], i3);
  if (!(i3 << 24 >> 24)) {
   HEAP32[i4 + 408 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i5 >> 2] = 0;
   break;
  } else {
   _InterpComp_AddRotY(i5, +_Math_LerpAngle(+HEAPF32[i1 >> 2], +HEAPF32[i2 >> 2], .3333333432674408));
   _InterpComp_AddRotY(i5, +_Math_LerpAngle(+HEAPF32[i1 >> 2], +HEAPF32[i2 >> 2], .6666666865348816));
   _InterpComp_AddRotY(i5, +_Math_LerpAngle(+HEAPF32[i1 >> 2], +HEAPF32[i2 >> 2], 1.0));
   HEAP32[i4 + 408 >> 2] = HEAP32[i5 + 4 >> 2];
   break;
  }
 } while (0);
 _Entity_LerpAngles(i4, 0.0);
 return;
}

function _NetInterpComp_AdvanceState(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = i1 + 352 | 0;
 i3 = i1 + 384 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 if (HEAP32[i2 + 92 >> 2] | 0) {
  i4 = i2 + 100 | 0;
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  _NetInterpComp_RemoveOldestPosition(i2);
 }
 if (HEAP32[i2 + 96 >> 2] | 0) {
  HEAP32[i1 + 396 >> 2] = HEAP32[i2 + 220 >> 2];
  HEAP32[i1 + 400 >> 2] = HEAP32[i2 + 224 >> 2];
  HEAP32[i1 + 404 >> 2] = HEAP32[i2 + 228 >> 2];
  HEAP32[i1 + 412 >> 2] = HEAP32[i2 + 232 >> 2];
  _NetInterpComp_RemoveOldestAngles(i2);
 }
 _InterpComp_AdvanceRotY(i2, i1);
 return;
}

function _TexPackOverlay_ContextRecreated(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 _Screen_UpdateVb(i3);
 _Gui_MakeTitleFont(i4);
 i1 = i3 + 56 | 0;
 _Gui_MakeBodyFont(i1);
 i2 = i3 + 36 | 0;
 _TextWidget_SetConst(i3 + 404 | 0, (HEAP8[i2 >> 0] | 0) == 0 ? 45849 : 45900, i4);
 _TextWidget_SetConst(i3 + 476 | 0, (HEAP8[i2 >> 0] | 0) == 0 ? 45928 : 45946, i1);
 _TexPackOverlay_UpdateLine2(i3);
 _TexPackOverlay_UpdateLine3(i3);
 _ButtonWidget_SetConst(i3 + 68 | 0, (HEAP8[i2 >> 0] | 0) == 0 ? 45819 : 46012, i4);
 _ButtonWidget_SetConst(i3 + 152 | 0, (HEAP8[i2 >> 0] | 0) == 0 ? 45823 : 46021, i4);
 i1 = HEAP8[i2 >> 0] | 0;
 i6 = i1 << 24 >> 24 == 0;
 HEAP32[i3 + 100 >> 2] = i6 ? 183 : 184;
 HEAP32[i3 + 184 >> 2] = i6 ? 185 : 186;
 if (i6) {
  _ButtonWidget_SetConst(i3 + 236 | 0, 46029, i4);
  _ButtonWidget_SetConst(i3 + 320 | 0, 46040, i4);
  HEAP32[i3 + 268 >> 2] = 183;
  HEAP32[i3 + 352 >> 2] = 185;
  HEAP32[i3 + 272 >> 2] = 1;
  HEAP32[i3 + 356 >> 2] = 1;
  i1 = HEAP8[i2 >> 0] | 0;
 }
 HEAP32[i3 + 20 >> 2] = i1 << 24 >> 24 == 0 ? 8 : 6;
 _Font_Free(i4);
 STACKTOP = i5;
 return;
}

function _HookEvents() {
 _emscripten_set_wheel_callback_on_thread(2, 0, 0, 35, 2) | 0;
 _emscripten_set_mousedown_callback_on_thread(53305, 0, 0, 36, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(53305, 0, 0, 36, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(53305, 0, 0, 37, 2) | 0;
 _emscripten_set_fullscreenchange_callback_on_thread(53305, 0, 0, 38, 2) | 0;
 _emscripten_set_focus_callback_on_thread(2, 0, 0, 39, 2) | 0;
 _emscripten_set_blur_callback_on_thread(2, 0, 0, 39, 2) | 0;
 _emscripten_set_resize_callback_on_thread(2, 0, 0, 40, 2) | 0;
 _emscripten_set_beforeunload_callback_on_thread(0, 41, 1) | 0;
 _emscripten_set_visibilitychange_callback_on_thread(0, 0, 42, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 0, 43, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 0, 44, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 0, 45, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(2, 0, 0, 46, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(2, 0, 0, 47, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(2, 0, 0, 48, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(2, 0, 0, 48, 2) | 0;
 return;
}

function _FindRotated(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6 + 8 | 0;
 i2 = i6;
 i1 = _String_LastIndexOfAt(i5, i3, 45) | 0;
 L1 : do if ((i1 | 0) == -1) i1 = -1; else {
  _String_UNSAFE_SubstringAt(i2, i5, i1);
  i7 = i2;
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  i2 = i4;
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i2 + 4 >> 2] = i1;
  i1 = (i1 & 65535) - i3 | 0;
  HEAP16[i4 + 4 >> 1] = i1;
  i1 = i1 & 65535;
  if (i1 >>> 0 > 3) i1 = -1; else {
   i1 = i1 + i3 | 0;
   switch (_AR_CalcGroup(i4) | 0) {
   case 0:
    {
     i1 = _RotateCorner(i5, i1) | 0;
     break L1;
    }
   case 1:
    {
     i1 = _RotateVertical(i5, i1) | 0;
     break L1;
    }
   case 2:
    {
     i1 = _RotateDirection(i5, i1) | 0;
     break L1;
    }
   case 3:
    {
     _AutoRotate_Insert(i5, i1, 25210);
     if ((_Block_FindID(i5) | 0) == -1) {
      i1 = _RotateFence(i5, i1) | 0;
      break L1;
     } else {
      i1 = _RotatePillar(i5, i1) | 0;
      break L1;
     }
    }
   default:
    {
     i1 = -1;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _CalcRainHeightAt(i2, i1, i3, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = (Math_imul(HEAP32[244735] | 0, i1) | 0) + i3 | 0;
 i6 = (Math_imul(i6, HEAP32[244733] | 0) | 0) + i2 | 0;
 i2 = (i1 | 0) > -1;
 L1 : do if ((HEAP32[244744] | 0) < 256) if (i2) {
  i3 = HEAP32[244730] | 0;
  i4 = HEAP32[244739] | 0;
  i2 = i6;
  while (1) {
   if ((HEAP8[1006372 + (HEAPU8[i3 + i2 >> 0] | 0) >> 0] & -2) << 24 >> 24 != 4) break;
   if ((i1 | 0) > 0) {
    i2 = i2 - i4 | 0;
    i1 = i1 + -1 | 0;
   } else {
    i2 = -1;
    i1 = -1;
    break L1;
   }
  }
  i2 = i1 & 65535;
 } else {
  i2 = -1;
  i1 = -1;
 } else if (i2) {
  i4 = HEAP32[244730] | 0;
  i5 = HEAP32[244731] | 0;
  i3 = HEAP32[244739] | 0;
  i2 = i6;
  while (1) {
   if ((HEAP8[1006372 + ((HEAPU8[i5 + i2 >> 0] | 0) << 8 | (HEAPU8[i4 + i2 >> 0] | 0)) >> 0] & -2) << 24 >> 24 != 4) break;
   if ((i1 | 0) > 0) {
    i2 = i2 - i3 | 0;
    i1 = i1 + -1 | 0;
   } else {
    i2 = -1;
    i1 = -1;
    break L1;
   }
  }
  i2 = i1 & 65535;
 } else {
  i2 = -1;
  i1 = -1;
 } while (0);
 HEAP16[(HEAP32[418844] | 0) + (i7 << 1) >> 1] = i2;
 return i1 | 0;
}

function _HotbarWidget_Reposition(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0;
 d5 = +HEAPF32[i1 + 116 >> 2];
 d7 = d5 * +HEAPF32[466958];
 d5 = d5 * +HEAPF32[466959];
 i2 = i1 + 12 | 0;
 HEAP32[i2 >> 2] = ~~(d7 * 182.0);
 i6 = _Math_Floor(d5 * 22.0) | 0;
 i4 = i1 + 16 | 0;
 HEAP32[i4 >> 2] = i6;
 _Widget_CalcPosition(i1);
 d3 = +(_Math_Ceil(d7 * 24.0) | 0);
 HEAPF32[i1 + 100 >> 2] = d3;
 HEAPF32[i1 + 108 >> 2] = d7 * 13.5;
 HEAPF32[i1 + 104 >> 2] = d7 * 11.100000381469727;
 HEAPF32[i1 + 96 >> 2] = d7 * 20.0;
 HEAP16[i1 + 72 >> 1] = HEAP32[i1 + 4 >> 2];
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP16[i1 + 74 >> 1] = i6;
 HEAP16[i1 + 76 >> 1] = HEAP32[i2 >> 2];
 i4 = HEAP32[i4 >> 2] | 0;
 i2 = i4 & 65535;
 HEAP16[i1 + 78 >> 1] = i2;
 HEAPF32[i1 + 80 >> 2] = 0.0;
 HEAPF32[i1 + 84 >> 2] = 0.0;
 HEAPF32[i1 + 88 >> 2] = .7109375;
 HEAPF32[i1 + 92 >> 2] = .171875;
 HEAP16[i1 + 44 >> 1] = 0;
 HEAP16[i1 + 46 >> 1] = i6 - ~~(d5 * 23.0) + i4;
 HEAP16[i1 + 48 >> 1] = ~~d3;
 HEAP16[i1 + 50 >> 1] = i2;
 HEAPF32[i1 + 52 >> 2] = 0.0;
 HEAPF32[i1 + 56 >> 2] = .171875;
 HEAPF32[i1 + 60 >> 2] = .09375;
 HEAPF32[i1 + 64 >> 2] = .34375;
 return;
}

function _EnsurePow2Skin(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = i4 + 4 | 0;
 i5 = _Math_NextPowOf2(HEAP32[i8 >> 2] | 0) | 0;
 i7 = i4 + 8 | 0;
 i6 = _Math_NextPowOf2(HEAP32[i7 >> 2] | 0) | 0;
 if ((i5 | 0) == (HEAP32[i8 >> 2] | 0)) if ((i6 | 0) == (HEAP32[i7 >> 2] | 0)) i1 = 0; else i2 = 3; else i2 = 3;
 if ((i2 | 0) == 3) {
  i3 = _Mem_TryAllocCleared(Math_imul(i6, i5) | 0, 4) | 0;
  if (!i3) i1 = -857812988; else {
   i2 = HEAP32[i8 >> 2] | 0;
   HEAPF32[i1 + 120 >> 2] = +(i2 | 0) / +(i5 | 0);
   i9 = HEAP32[i7 >> 2] | 0;
   HEAPF32[i1 + 124 >> 2] = +(i9 | 0) / +(i6 | 0);
   i2 = i2 << 2;
   if ((i9 | 0) > 0) {
    _Mem_Copy(i3, HEAP32[i4 >> 2] | 0, i2) | 0;
    if ((HEAP32[i7 >> 2] | 0) > 1) {
     i1 = 1;
     do {
      _Mem_Copy(i3 + ((Math_imul(i1, i5) | 0) << 2) | 0, (HEAP32[i4 >> 2] | 0) + ((Math_imul(HEAP32[i8 >> 2] | 0, i1) | 0) << 2) | 0, i2) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (HEAP32[i7 >> 2] | 0));
    }
   }
   _Mem_Free(HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = i3;
   HEAP32[i8 >> 2] = i5;
   HEAP32[i7 >> 2] = i6;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _Png_Expand_GRAYSCALE_8(i1, i2, i8, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i3 = i1 + -1 | 0;
 i2 = i8 + i3 | 0;
 i3 = i4 + (i3 << 2) | 0;
 if ((i1 | 0) > 3) {
  i7 = ~i1;
  i7 = ((i7 | 0) > -8 ? i7 : -8) + i1 + 4 & -4;
  i5 = i1 + -5 - i7 | 0;
  i4 = i4 + (i5 << 2) | 0;
  i6 = i1 + -4 | 0;
  while (1) {
   i9 = HEAPU8[i2 >> 0] | 0;
   HEAP32[i3 >> 2] = i9 << 8 | i9 | i9 << 16 | -16777216;
   i9 = HEAPU8[i2 + -1 >> 0] | 0;
   HEAP32[i3 + -4 >> 2] = i9 << 8 | i9 | i9 << 16 | -16777216;
   i9 = HEAPU8[i2 + -2 >> 0] | 0;
   HEAP32[i3 + -8 >> 2] = i9 << 8 | i9 | i9 << 16 | -16777216;
   i9 = HEAPU8[i2 + -3 >> 0] | 0;
   HEAP32[i3 + -12 >> 2] = i9 << 8 | i9 | i9 << 16 | -16777216;
   if ((i1 | 0) > 7) {
    i3 = i3 + -16 | 0;
    i2 = i2 + -4 | 0;
    i1 = i1 + -4 | 0;
   } else break;
  }
  i3 = i4;
  i2 = i8 + i5 | 0;
  i1 = i6 - i7 | 0;
 }
 if ((i1 | 0) > 0) while (1) {
  i9 = HEAPU8[i2 >> 0] | 0;
  HEAP32[i3 >> 2] = i9 << 8 | i9 | i9 << 16 | -16777216;
  if ((i1 | 0) > 1) {
   i3 = i3 + -4 | 0;
   i2 = i2 + -1 | 0;
   i1 = i1 + -1 | 0;
  } else break;
 }
 return;
}

function _TabListOverlay_SortEntries(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6;
 i5 = i4 + 56 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 do if (i2 | 0) {
  if (HEAP8[i4 + 52 >> 0] | 0) {
   HEAP32[455455] = 71;
   _TabListOverlay_QuickSort(0, i2 + -1 | 0);
   break;
  }
  i1 = i2 + -1 | 0;
  HEAP32[i3 >> 2] = i1;
  if ((i2 | 0) > 0) {
   while (1) {
    if ((HEAP16[i4 + 152 + (i1 << 1) >> 1] | 0) == -1) _TabListOverlay_DeleteAt(i4, i1);
    if ((i1 | 0) > 0) i1 = i1 + -1 | 0; else break;
   }
   HEAP32[i3 >> 2] = -1;
   i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  }
  HEAP32[455455] = 72;
  _TabListOverlay_QuickSort(0, i1);
  HEAP32[455455] = 71;
  HEAP32[i3 >> 2] = 0;
  if ((HEAP32[i5 >> 2] | 0) > 0) {
   i1 = 0;
   do {
    i7 = HEAPU16[i4 + 152 + (i1 << 1) >> 1] | 0;
    _TabListOverlay_AddGroup(i4, i7, i3);
    i2 = HEAP32[i3 >> 2] | 0;
    i1 = (_TabListOverlay_GetGroupCount(i4, i7, i2) | 0) + i2 | 0;
    _TabListOverlay_QuickSort(i2, i1 + -1 | 0);
    HEAP32[i3 >> 2] = i1;
   } while ((i1 | 0) < (HEAP32[i5 >> 2] | 0));
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _ChatScreen_ChatReceived(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if (!(HEAP8[1689080] | 0)) {
  HEAP8[i2 + 7 >> 0] = 1;
  if (!i3) {
   i3 = i2 + 44 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   if (!(HEAP32[422374] | 0)) break;
   _TextGroupWidget_ShiftUp(i2 + 1108 | 0);
   break;
  }
  if ((i3 + -1 | 0) >>> 0 < 3) {
   _TextGroupWidget_Redraw(i2 + 924 | 0, i3 + 1 | 0);
   break;
  }
  if ((i3 + -11 | 0) >>> 0 < 3) {
   _TextGroupWidget_Redraw(i2 + 1016 | 0, 13 - i3 | 0);
   break;
  }
  switch (i3 | 0) {
  case 100:
   {
    _TextWidget_Set(i2 + 108 | 0, i1, i2 + 72 | 0);
    break L1;
   }
  case 101:
   {
    _TextWidget_Set(i2 + 180 | 0, i1, i2 + 84 | 0);
    break L1;
   }
  case 102:
   {
    _TextWidget_Set(i2 + 252 | 0, i1, i2 + 96 | 0);
    break L1;
   }
  default:
   switch (i3 & -2 | 0) {
   case 256:
    {
     _TextGroupWidget_Redraw(i2 + 1200 | 0, i3 + -256 | 0);
     _ChatScreen_UpdateChatYOffsets(i2);
     break L1;
    }
   case 360:
    {
     _TextGroupWidget_Redraw(i2 + 924 | 0, i3 + -360 | 0);
     break L1;
    }
   default:
    break L1;
   }
  }
 } while (0);
 return;
}

function _Png_ReconstructFirst(i2, i1, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 switch (i2 << 24 >> 24) {
 case 1:
  {
   i1 = i1 & 255;
   if (i1 >>> 0 < i3 >>> 0) {
    i3 = i3 - i1 | 0;
    i2 = 0;
    while (1) {
     i5 = i4 + i1 | 0;
     HEAP8[i5 >> 0] = (HEAPU8[i5 >> 0] | 0) + (HEAPU8[i4 + i2 >> 0] | 0);
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 case 3:
  {
   i1 = i1 & 255;
   if (i1 >>> 0 < i3 >>> 0) {
    i3 = i3 - i1 | 0;
    i2 = 0;
    while (1) {
     i6 = HEAPU8[i4 + i2 >> 0] | 0;
     i5 = i4 + i1 | 0;
     HEAP8[i5 >> 0] = (1 ? i6 >>> 1 : i6) + (HEAPU8[i5 >> 0] | 0);
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 case 4:
  {
   i1 = i1 & 255;
   if (i1 >>> 0 < i3 >>> 0) {
    i3 = i3 - i1 | 0;
    i2 = 0;
    while (1) {
     i6 = i4 + i1 | 0;
     HEAP8[i6 >> 0] = (HEAPU8[i6 >> 0] | 0) + (HEAPU8[i4 + i2 >> 0] | 0);
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
    }
   }
   break;
  }
 default:
  {}
 }
 return;
}

function _ClipY(i7, i4, i3, i1) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i5 = 0, i6 = 0, d8 = 0.0;
 i6 = i7 + 28 | 0;
 if ((i4 | 0) < 0) {
  HEAPF32[i7 + 32 >> 2] = 1.0000000474974513e-03;
  HEAPF32[i7 + 20 >> 2] = 1.0000000474974513e-03;
  HEAPF32[i7 >> 2] = 0.0;
  HEAPF32[i7 + 4 >> 2] = 0.0;
  HEAPF32[i7 + 8 >> 2] = 0.0;
  HEAP8[1868795] = 1;
  i1 = 0;
 } else {
  i5 = _GetBlock(~~+HEAPF32[i6 >> 2], i4, ~~+HEAPF32[i7 + 36 >> 2]) | 0;
  if (!((FUNCTION_TABLE_ii[i1 & 63](i5) | 0) << 24 >> 24)) {
   i1 = i5 & 65535;
   i3 = i3 << 24 >> 24 != 0;
   d2 = (i3 ? +HEAPF32[1020196 + (i1 * 12 | 0) + 4 >> 2] : +HEAPF32[1010980 + (i1 * 12 | 0) + 4 >> 2]) + +(i4 | 0);
   i1 = i7 + 32 | 0;
   d8 = +HEAPF32[i1 >> 2];
   if (i3 ? d8 < d2 : d8 > d2) if (!((_CollidesHor(i6, i5) | 0) << 24 >> 24)) i1 = 1; else {
    d8 = (i3 ? 1.0000000474974513e-03 : -1.0000000474974513e-03) + d2;
    HEAPF32[i7 + 20 >> 2] = d8;
    HEAPF32[i1 >> 2] = d8;
    HEAPF32[i7 >> 2] = 0.0;
    HEAPF32[i7 + 4 >> 2] = 0.0;
    HEAPF32[i7 + 8 >> 2] = 0.0;
    HEAP8[1868795] = 1;
    i1 = 0;
   } else i1 = 1;
  } else i1 = 1;
 }
 return i1 | 0;
}

function _GenMipmaps(i10, i9, i3, i1, i8) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = (i9 | 0) > 0;
 if ((i8 | 0) == 1) {
  if (i2) {
   i2 = 0;
   while (1) {
    i8 = _AverageColor(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0;
    HEAP32[i3 >> 2] = i8;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i9 | 0)) break; else {
     i3 = i3 + (i10 << 2) | 0;
     i1 = i1 + 8 | 0;
    }
   }
  }
 } else if (i2) {
  i6 = (i10 | 0) > 0;
  i7 = i8 << 1;
  i5 = 0;
  while (1) {
   i2 = i1 + (i8 << 2) | 0;
   if (i6) {
    i4 = 0;
    do {
     i12 = i4 << 1;
     i11 = i12 | 1;
     i13 = _AverageColor(HEAP32[i1 + (i12 << 2) >> 2] | 0, HEAP32[i1 + (i11 << 2) >> 2] | 0) | 0;
     i11 = _AverageColor(i13, _AverageColor(HEAP32[i2 + (i12 << 2) >> 2] | 0, HEAP32[i2 + (i11 << 2) >> 2] | 0) | 0) | 0;
     HEAP32[i3 + (i4 << 2) >> 2] = i11;
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i10 | 0));
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i3 = i3 + (i10 << 2) | 0;
    i1 = i1 + (i7 << 2) | 0;
   }
  }
 }
 return;
}

function _TableWidget_Render2(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 4 | 0;
 i4 = i7;
 i8 = _Table_X(i6) | 0;
 i1 = _Table_Y(i6) | 0;
 i2 = _Table_Width(i6) | 0;
 _Gfx_Draw2DGradient(i8, i1, i2, _Table_Height(i6) | 0, -1474158046, -899139271);
 if ((HEAP32[i6 + 52 >> 2] | 0) < (HEAP32[i6 + 48 >> 2] | 0)) {
  i8 = i6 + 1628 | 0;
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i8 >> 2] >> 2] & 63](i8, 0.0);
 }
 i1 = HEAP32[i6 + 64 >> 2] | 0;
 i2 = HEAP32[i6 + 60 >> 2] | 0;
 if (!((i2 | 0) == -1 | (HEAP8[1689503] | 0) == 0)) if (HEAP16[i6 + 92 + (i2 << 1) >> 1] | 0) {
  _TableWidget_GetCoords(i6, i2, i3, i4) | 0;
  d10 = +(i1 | 0);
  d9 = d10 * .10000000149011612;
  i8 = ~~(d9 * 2.0 + d10);
  _Gfx_Draw2DGradient(~~(+(HEAP32[i3 >> 2] | 0) - d9), ~~(+(HEAP32[i4 >> 2] | 0) - d9), i8, i8, -1895825409, -1056964609);
 }
 _Gfx_SetVertexFormat(1);
 _Gfx_BindDynamicVb(HEAP32[i6 + 80 >> 2] | 0);
 i1 = HEAP32[i6 + 2712 >> 2] | 0;
 if (i1 | 0) _IsometricDrawer_Render(i1, i5, i6 + 1752 | 0);
 STACKTOP = i7;
 return i5 + 960 | 0;
}

function _PhysicsTick(i7, d3, i5, d6) {
 i7 = i7 | 0;
 d3 = +d3;
 i5 = i5 | 0;
 d6 = +d6;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 i1 = i7 + 16 | 0;
 i2 = i7 + 28 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 if (!((_IntersectsBlock(i7, i5) | 0) << 24 >> 24)) {
  i9 = i7 + 4 | 0;
  HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] - d3 * d6;
  i10 = i7 + 32 | 0;
  i1 = _Math_Floor(+HEAPF32[i10 >> 2]) | 0;
  _Vec3_Mul1_1730(i4, i7, d6 * 3.0);
  _Vec3_Add_1728(i2, i2, i4);
  i4 = _Math_Floor(+HEAPF32[i10 >> 2]) | 0;
  i2 = (i1 | 0) < (i4 | 0);
  L3 : do if (+HEAPF32[i9 >> 2] > 0.0) {
   if (i2) do i1 = i1 + 1 | 0; while ((_ClipY(i7, i1, 0, i5) | 0) << 24 >> 24 != 0 & (i1 | 0) < (i4 | 0));
  } else if (!i2) while (1) {
   if (!((_ClipY(i7, i1, 1, i5) | 0) << 24 >> 24)) break L3;
   if ((i1 | 0) > (i4 | 0)) i1 = i1 + -1 | 0; else break;
  } while (0);
  i1 = i7 + 12 | 0;
  d6 = +HEAPF32[i1 >> 2] - d6;
  HEAPF32[i1 >> 2] = d6;
  i1 = d6 < 0.0 & 1;
 } else i1 = 1;
 STACKTOP = i8;
 return i1 | 0;
}

function _MCLevel_ParseEnvironment(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 8 | 0;
 do if (!(_String_CaselessEqualsConst(i1, 31619) | 0)) {
  if (_String_CaselessEqualsConst(i1, 31628) | 0) {
   i2 = _MCLevel_ParseColor(i2) | 0;
   HEAP32[466939] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31637) | 0) {
   i2 = _MCLevel_ParseColor(i2) | 0;
   HEAP32[466940] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31648) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[466930] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31660) | 0) {
   i2 = _NbtTag_U8(i2) | 0;
   HEAP16[933855] = i2 << 24 >> 24 == 2 ? 3 : i2 & 255;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31682) | 0) {
   i2 = (_NbtTag_U8(i2) | 0) & 255;
   HEAP16[933854] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31703) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[422200] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31727) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[422199] = i2;
  }
 } else {
  i2 = _MCLevel_ParseColor(i2) | 0;
  HEAP32[466938] = i2;
 } while (0);
 return;
}

function _EditHotkeyScreen_KeyDown(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0;
 i5 = i4 + 24 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) > -1) {
  L3 : do switch (i1 | 0) {
  case 0:
   {
    HEAP8[i4 + 40 >> 0] = i3;
    break;
   }
  case 1:
   {
    i2 = i3 | 1;
    switch (i2 | 0) {
    case 39:
     {
      i3 = i4 + 41 | 0;
      HEAP8[i3 >> 0] = HEAP8[i3 >> 0] | 1;
      break L3;
     }
    case 37:
     {
      i3 = i4 + 41 | 0;
      HEAP8[i3 >> 0] = HEAP8[i3 >> 0] | 2;
      break L3;
     }
    default:
     {
      i1 = i4 + 41 | 0;
      if ((i2 | 0) == 41) {
       HEAP8[i1 >> 0] = HEAP8[i1 >> 0] | 4;
       break L3;
      } else {
       HEAP8[i1 >> 0] = 0;
       break L3;
      }
     }
    }
   }
  default:
   {}
  } while (0);
  HEAP8[i4 + 52 >> 0] = 1;
  HEAP32[i5 >> 2] = -1;
  _EditHotkeyScreen_UpdateBaseKey(i4);
  _EditHotkeyScreen_UpdateModifiers(i4);
  i1 = 1;
 } else {
  i5 = i4 + 100 | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 63](i5, i3, i2) | 0)) i1 = (_Screen_InputDown(i4, i3, i2) | 0) != 0 & 1; else i1 = 1;
 }
 return i1 | 0;
}

function _DrawBlockTransform(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i6 = i3 + 156 | 0;
 i7 = i3 + 144 | 0;
 i4 = i3 + 80 | 0;
 i5 = i3 + 16 | 0;
 i9 = i3;
 i8 = i2 + 4 | 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 i8 = i9 + 4 | 0;
 HEAPF32[i8 >> 2] = +HEAPF32[i2 + 128 >> 2] + +HEAPF32[i8 >> 2];
 i8 = i2 + 80 | 0;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 _Entity_GetTransform(i2, i7, i6, i4);
 _Matrix_Mul(i4, i4, 1689084);
 _Matrix_Translate(i5, .33000001311302185, d1, -.4375);
 _Matrix_Mul(i4, i5, i4);
 _Matrix_Scale(i5, .3333333432674408, .3333333432674408, .3333333432674408);
 _Matrix_Mul(i4, i5, i4);
 _Model_SetupState(17084, i2);
 _Gfx_LoadMatrix(1, i4);
 FUNCTION_TABLE_vi[HEAP32[17100 >> 2] & 511](i2);
 STACKTOP = i3;
 return;
}

function _ChatInputWidget_RemakeTexture(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i7 = i9 + 72 | 0;
 i3 = i9 + 44 | 0;
 if ((FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 63]() | 0) > 0) {
  i5 = i9 + 108 | 0;
  i6 = i9 + 96 | 0;
  i1 = 0;
  i4 = 0;
  i2 = 0;
  do {
   if (!(HEAP16[i7 + (i4 << 3) + 4 >> 1] | 0)) break;
   i1 = (HEAP32[i5 >> 2] | 0) + i1 | 0;
   i10 = HEAP32[i6 + (i4 << 2) >> 2] | 0;
   i2 = (i2 | 0) > (i10 | 0) ? i2 : i10;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 63]() | 0));
  if (!i2) i8 = 6;
 } else {
  i1 = 0;
  i8 = 6;
 }
 if ((i8 | 0) == 6) i2 = HEAP32[i9 + 140 >> 2] | 0;
 if (!i1) i1 = HEAP32[i9 + 108 >> 2] | 0;
 if (!(HEAP8[i9 + 21 >> 0] & 1)) _ChatInputWidget_MakeTexture(i9, i2, i1); else _Gfx_DeleteTexture(i9 + 112 | 0);
 HEAPF32[i9 + 200 >> 2] = 0.0;
 HEAP32[i9 + 12 >> 2] = i2;
 HEAP32[i9 + 16 >> 2] = i1;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 511](i9);
 HEAP16[i9 + 116 >> 1] = (HEAP32[i9 + 4 >> 2] | 0) + (HEAPU8[i9 + 145 >> 0] | 0);
 HEAP16[i9 + 118 >> 1] = HEAP32[i9 + 8 >> 2];
 return;
}

function _ScrollbarWidget_PointerDown(i9, i8, i3, i4) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i10 + 4 | 0;
 i7 = i10;
 i6 = i9 + 60 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) i1 = 1; else {
  i2 = HEAP32[i9 + 4 >> 2] | 0;
  if ((i2 | 0) > (i3 | 0)) i1 = 0; else if ((i1 | 0) == 0 ? ((HEAP32[i9 + 12 >> 2] | 0) + i2 + (HEAP32[i9 + 64 >> 2] | 0) | 0) > (i3 | 0) : 0) {
   i2 = i4 - (HEAP32[i9 + 8 >> 2] | 0) | 0;
   _ScrollbarWidget_GetScrollbarCoords(i9, i5, i7);
   i1 = HEAP32[i5 >> 2] | 0;
   do if ((i2 | 0) < (i1 | 0)) {
    i8 = i9 + 40 | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 + 48 >> 2] | 0);
   } else if ((i2 | 0) < ((HEAP32[i7 >> 2] | 0) + i1 | 0)) {
    HEAP32[i6 >> 2] = i8;
    HEAP32[i9 + 56 >> 2] = i2 - i1;
    break;
   } else {
    i8 = i9 + 40 | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i9 + 48 >> 2] | 0);
    break;
   } while (0);
   _ScrollbarWidget_ClampTopRow(i9);
   i1 = 1;
  } else i1 = 0;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _SoundComp_GetSound(i3) {
 i3 = i3 | 0;
 var i1 = 0, d2 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i6 + 24 | 0;
 i4 = i6 + 12 | 0;
 i1 = i6;
 _Entity_GetBounds(i3, i5);
 HEAP8[1868741] = 0;
 HEAP8[1868740] = 0;
 _Entity_TouchesAny(i5, 24) | 0;
 do if (!(HEAP8[1868741] | 0)) {
  i7 = i3 + 384 | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  i7 = i4 + 4 | 0;
  HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + -.009999999776482582;
  _IVec3_Floor(i1, i4);
  i4 = i1 + 4 | 0;
  i3 = _World_SafeGetBlock(HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0;
  i3 = i3 & 65535;
  i1 = HEAP8[1007908 + i3 >> 0] | 0;
  d2 = +HEAPF32[i7 >> 2];
  if (+HEAPF32[1020196 + (i3 * 12 | 0) + 4 >> 2] + +(HEAP32[i4 >> 2] | 0) >= d2) if (!(i1 << 24 >> 24 == 0 | (HEAP8[1000996 + i3 >> 0] | 0) != 2)) {
   HEAP8[1868740] = 1;
   HEAP8[1868741] = i1;
   break;
  }
  HEAPF32[i5 + 4 >> 2] = d2;
  HEAPF32[i5 + 16 >> 2] = d2;
  _Entity_TouchesAny(i5, 25) | 0;
 } while (0);
 STACKTOP = i6;
 return;
}

function _PhysicsComp_DoEntityPush(i6) {
 i6 = i6 | 0;
 var d1 = 0.0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i13;
 HEAPF32[i5 + 4 >> 2] = 0.0;
 i10 = i6 + 8 | 0;
 i9 = i6 + 96 | 0;
 i8 = i6 + 4 | 0;
 i11 = i6 + 12 | 0;
 i12 = i5 + 8 | 0;
 i4 = i6 + 36 | 0;
 i7 = 0;
 do {
  i3 = HEAP32[1668360 + (i7 << 2) >> 2] | 0;
  if (!((i3 | 0) == 0 | (i3 | 0) == (i6 | 0))) if (HEAP8[(HEAP32[i3 + 48 >> 2] | 0) + 47 >> 0] | 0) {
   d1 = +HEAPF32[i10 >> 2];
   d2 = +HEAPF32[i3 + 8 >> 2];
   if (d1 <= d2 + +HEAPF32[i3 + 96 >> 2]) if (d2 <= d1 + +HEAPF32[i9 >> 2]) {
    d2 = +HEAPF32[i3 + 4 >> 2] - +HEAPF32[i8 >> 2];
    HEAPF32[i5 >> 2] = d2;
    d1 = +HEAPF32[i3 + 12 >> 2] - +HEAPF32[i11 >> 2];
    HEAPF32[i12 >> 2] = d1;
    d1 = d2 * d2 + d1 * d1;
    if (!(d1 < 2.0000000949949026e-03 | d1 > 1.0)) {
     _Vec3_Normalise(i5);
     _Vec3_Mul1_345(i5, i5, (+HEAPF32[i3 + 420 >> 2] - d1) * .03125);
     _Vec3_Sub(i4, i4, i5);
    }
   }
  }
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != 256);
 STACKTOP = i13;
 return;
}

function _NotchyGen_FloodFillWaterBorders() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = (HEAP32[422264] | 0) + -1 | 0;
 HEAP32[422258] = 33070;
 i1 = HEAP32[244735] | 0;
 i3 = Math_imul(i1, i6) | 0;
 i2 = HEAP32[244733] | 0;
 if ((i2 | 0) > 0) {
  i4 = i2;
  i5 = Math_imul(i3, i2) | 0;
  i1 = Math_imul(i1 + -1 + i3 | 0, i2) | 0;
  i2 = 0;
  while (1) {
   HEAPF32[422259] = +(i2 | 0) / +(i4 | 0) * .5 + 0.0;
   _NotchyGen_FloodFill(i5, 9);
   _NotchyGen_FloodFill(i1, 9);
   i2 = i2 + 1 | 0;
   i4 = HEAP32[244733] | 0;
   if ((i2 | 0) >= (i4 | 0)) break; else {
    i5 = i5 + 1 | 0;
    i1 = i1 + 1 | 0;
   }
  }
  i3 = i4;
  i1 = HEAP32[244735] | 0;
 } else i3 = i2;
 i2 = Math_imul(Math_imul(i3, i6) | 0, i1) | 0;
 if ((i1 | 0) > 0) {
  i5 = i2;
  i3 = i3 + -1 + i2 | 0;
  i4 = 0;
  while (1) {
   HEAPF32[422259] = +(i4 | 0) / +(i1 | 0) * .5 + .5;
   _NotchyGen_FloodFill(i5, 9);
   _NotchyGen_FloodFill(i3, 9);
   i2 = HEAP32[244733] | 0;
   i4 = i4 + 1 | 0;
   i1 = HEAP32[244735] | 0;
   if ((i4 | 0) >= (i1 | 0)) break; else {
    i5 = i2 + i5 | 0;
    i3 = i2 + i3 | 0;
   }
  }
 }
 return;
}

function _Schematic_Save(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8448 | 0;
 i2 = i5 + 8192 | 0;
 i3 = i5;
 _memset(i3 | 0, 0, 8192) | 0;
 _Mem_Copy(i2, 3360, 78) | 0;
 _Stream_SetU16_BE(i2 + 41 | 0, HEAP32[244733] & 65535);
 _Stream_SetU16_BE(i2 + 52 | 0, HEAP32[244734] & 65535);
 _Stream_SetU16_BE(i2 + 63 | 0, HEAP32[244735] & 65535);
 _Stream_SetU32_BE(i2 + 74 | 0, HEAP32[244732] | 0);
 i1 = _Stream_Write(i4, i2, 78) | 0;
 L1 : do if (!i1) {
  i1 = _Stream_Write(i4, HEAP32[244730] | 0, HEAP32[244732] | 0) | 0;
  if (!i1) {
   _Mem_Copy(i2, 32003, 11) | 0;
   _Stream_SetU32_BE(i2 + 7 | 0, HEAP32[244732] | 0);
   i1 = _Stream_Write(i4, i2, 11) | 0;
   if (!i1) {
    i1 = HEAP32[244732] | 0;
    if ((i1 | 0) > 0) {
     i2 = 0;
     do {
      i1 = i1 - i2 | 0;
      i1 = _Stream_Write(i4, i3, i1 >>> 0 < 8192 ? i1 : 8192) | 0;
      i2 = i2 + 8192 | 0;
      if (i1 | 0) break L1;
      i1 = HEAP32[244732] | 0;
     } while ((i1 | 0) > (i2 | 0));
    }
    i1 = _Stream_Write(i4, 3440, 37) | 0;
   }
  }
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _LocalInterpComp_SetPosition(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, d5 = 0.0;
 i3 = (i1 | 0) == 0;
 L1 : do if ((i1 | 32 | 0) == 32) {
  i1 = i4 + 384 | 0;
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 } else switch (i1 | 0) {
 case 64:
  {
   i1 = i4 + 384 | 0;
   _Vec3_Add_328(i1, i1, i2);
   break L1;
  }
 case 96:
  {
   i1 = i4 + 352 | 0;
   _Vec3_Add_328(i1, i1, i2);
   i1 = i4 + 384 | 0;
   _Vec3_Add_328(i1, i1, i2);
   break L1;
  }
 default:
  {
   i1 = i4 + 384 | 0;
   break L1;
  }
 } while (0);
 i2 = i4 + 388 | 0;
 d5 = +HEAPF32[i2 >> 2];
 if (d5 - +(_Math_Floor(d5) | 0) < 1.0000000474974513e-03) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + 1.0000000474974513e-03;
 if (i3) {
  i3 = i4 + 352 | 0;
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  i4 = i4 + 4 | 0;
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 }
 return;
}

function _String_UNSAFE_Split(i6, i4, i10, i9) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i11;
 i5 = i6 + 4 | 0;
 L1 : do if ((i9 | 0) > 0) {
  i7 = i9 + -1 | 0;
  i3 = 0;
  i1 = 0;
  while (1) {
   i2 = HEAPU16[i5 >> 1] | 0;
   if ((i3 | 0) > (i2 | 0)) break L1;
   i13 = _String_IndexOfAt(i6, i3, i4) | 0;
   i2 = (i1 | 0) == (i7 | 0) | (i13 | 0) == -1 ? i2 : i13;
   _String_UNSAFE_Substring(i8, i6, i3, i2 - i3 | 0);
   i13 = i8;
   i12 = HEAP32[i13 + 4 >> 2] | 0;
   i3 = i10 + (i1 << 3) | 0;
   HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i3 + 4 >> 2] = i12;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i9 | 0)) i3 = i2 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 if ((i1 | 0) < (i9 | 0)) {
  i2 = i1;
  do {
   i8 = 1841616;
   i12 = HEAP32[i8 + 4 >> 2] | 0;
   i13 = i10 + (i2 << 3) | 0;
   HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i13 + 4 >> 2] = i12;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i9 | 0));
 }
 STACKTOP = i11;
 return i1 | 0;
}

function _MPConnection_SendData(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i10;
 L1 : do if (!((HEAP8[1841573] | 0) != 0 | (i2 | 0) == 0)) {
  i7 = HEAP32[5932] | 0;
  i8 = HEAP32[5933] | 0;
  i6 = i1;
  i4 = 0;
  L3 : while (1) {
   i1 = _Socket_Write(HEAP32[5574] | 0, i6, i2, i9) | 0;
   i3 = (i1 | 0) != 0;
   if ((i4 | 0) < 1e3 & i3) {
    i5 = i4;
    while (1) {
     if (!((i1 | 0) == (i7 | 0) | (i1 | 0) == (i8 | 0))) {
      i2 = 8;
      break L3;
     }
     i4 = i5 + 1 | 0;
     i1 = _Socket_Write(HEAP32[5574] | 0, i6, i2, i9) | 0;
     i3 = (i1 | 0) != 0;
     if ((i5 | 0) < 999 & i3) i5 = i4; else break;
    }
   }
   if (i3) {
    i2 = 8;
    break;
   }
   i1 = HEAP32[i9 >> 2] | 0;
   if (!i1) {
    i2 = 10;
    break;
   }
   i2 = i2 - i1 | 0;
   if (!i2) break L1; else i6 = i6 + i1 | 0;
  }
  if ((i2 | 0) == 8) {
   HEAP32[460399] = i1;
   break;
  } else if ((i2 | 0) == 10) {
   HEAP32[460399] = -857812989;
   break;
  }
 } while (0);
 STACKTOP = i10;
 return;
}

function _Adv_Lit(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 do if ((i3 | 0) > -1 & (HEAP32[244734] | 0) > (i3 | 0)) if (!((_World_ContainsXZ(i2, i4) | 0) << 24 >> 24)) {
  i4 = HEAP32[414107] | 0;
  return ((i4 | 0) > (i3 | 0) ? ((i4 + -1 | 0) == (i3 | 0) ? 6 : 0) : 7) | 0;
 } else {
  i5 = HEAPU16[(HEAP32[414115] | 0) + (i1 << 1) >> 1] | 0;
  i8 = HEAPU8[1005604 + i5 >> 0] | 0;
  i8 = (6 ? i8 >>> 6 : i8) & 1;
  i6 = (FUNCTION_TABLE_iiii[HEAP32[467173] & 63](i2, i3 - i8 | 0, i4) | 0) << 24 >> 24 != 0 & 1;
  i7 = (FUNCTION_TABLE_iiii[HEAP32[467173] & 63](i2, i3, i4) | 0) << 24 >> 24 == 0;
  i4 = (FUNCTION_TABLE_iiii[HEAP32[467173] & 63](i2, i3 + 1 - i8 | 0, i4) | 0) << 24 >> 24 == 0;
  i3 = HEAP32[414115] | 0;
  i4 = (i7 ? 0 : 2) | i6 | (i4 ? 0 : 4) | (HEAP8[994084 + (HEAPU16[i3 + (i1 + -324 << 1) >> 1] | 0) >> 0] | 0) != 0;
  i4 = (HEAP8[994084 + i5 >> 0] | 0) == 0 ? i4 : i4 | 2;
  i1 = (HEAP8[994084 + (HEAPU16[i3 + (i1 + 324 << 1) >> 1] | 0) >> 0] | 0) == 0 ? i4 : i4 | 4;
  break;
 } else i1 = 7; while (0);
 return i1 | 0;
}

function _ThirdPersonCamera_GetPosition(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i3 + 48 | 0;
 i5 = i3 + 36 | 0;
 i9 = i3 + 24 | 0;
 i8 = i3 + 16 | 0;
 i7 = i3;
 i10 = HEAP32[417347] | 0;
 d4 = +_ThirdPersonCamera_GetZoom(i10);
 _PerspectiveCamera_CalcViewBobbing(i10, d2, d4);
 _Entity_GetEyePosition(i9, i10);
 HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 i9 = i6 + 4 | 0;
 HEAPF32[i9 >> 2] = +HEAPF32[414156] + +HEAPF32[i9 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 12 >> 2] & 511](i8);
 _Vec3_GetDirVector(i7, +HEAPF32[i8 >> 2], +HEAPF32[i8 + 4 >> 2]);
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _Vec3_Negate(i5, i5);
 _Picking_ClipCameraPos(i6, i5, d4, 1656692);
 HEAP32[i1 >> 2] = HEAP32[414198];
 HEAP32[i1 + 4 >> 2] = HEAP32[414199];
 HEAP32[i1 + 8 >> 2] = HEAP32[414200];
 STACKTOP = i3;
 return;
}

function _ReloadUniforms() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[422314] | 0;
 if (i2 | 0) {
  i3 = i2 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 & 1) {
   _glUniformMatrix4fv(HEAP32[i2 + 12 >> 2] | 0, 1, 0, 1689264);
   i1 = HEAP32[i3 >> 2] & -2;
   HEAP32[i3 >> 2] = i1;
  }
  if (i1 & 2) if (HEAP32[i2 >> 2] & 4) {
   _glUniform2f(HEAP32[i2 + 16 >> 2] | 0, +(+HEAPF32[422332]), +(+HEAPF32[422333]));
   i1 = HEAP32[i3 >> 2] & -3;
   HEAP32[i3 >> 2] = i1;
  }
  if (i1 & 4) if (HEAP32[i2 >> 2] & 24) {
   i1 = HEAP32[422310] | 0;
   _glUniform3f(HEAP32[i2 + 20 >> 2] | 0, +(+(i1 & 255 | 0) / 255.0), +(+((8 ? i1 >>> 8 : i1) & 255 | 0) / 255.0), +(+((16 ? i1 >>> 16 : i1) & 255 | 0) / 255.0));
   i1 = HEAP32[i3 >> 2] & -5;
   HEAP32[i3 >> 2] = i1;
  }
  if (i1 & 8) if (HEAP32[i2 >> 2] & 8) {
   _glUniform1f(HEAP32[i2 + 24 >> 2] | 0, +(1.0 / +HEAPF32[3732]));
   i1 = HEAP32[i3 >> 2] & -9;
   HEAP32[i3 >> 2] = i1;
  }
  if (i1 & 16 | 0) if (HEAP32[i2 >> 2] & 16 | 0) {
   _glUniform1f(HEAP32[i2 + 28 >> 2] | 0, +-+HEAPF32[3733]);
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -17;
  }
 }
 return;
}

function _Java_ReadNewArray(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i4 + 4 | 0;
 i1 = _Java_ReadClassDesc(i7, i2) | 0;
 L1 : do if (!i1) {
  i1 = _Stream_ReadU32_BE(i7, i6) | 0;
  if (!i1) {
   i3 = HEAP8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0;
   HEAP32[422207] = (HEAP32[422207] | 0) + 1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i3 << 24 >> 24 == 66) {
    HEAP32[i4 + 12 >> 2] = i1;
    i1 = _Mem_TryAlloc(i1, 1) | 0;
    i2 = i4 + 8 | 0;
    HEAP32[i2 >> 2] = i1;
    if (!i1) {
     i1 = -857812988;
     break;
    }
    i1 = _Stream_Read(i7, i1, HEAP32[i6 >> 2] | 0) | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
    _Mem_Free(HEAP32[i2 >> 2] | 0);
    break;
   }
   if (!i1) i1 = 0; else {
    i2 = 0;
    while (1) {
     i1 = _Java_ReadValue(i7, i3, i5) | 0;
     i2 = i2 + 1 | 0;
     if (i1 | 0) break L1;
     if (i2 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
      i1 = 0;
      break;
     }
    }
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _Java_ReadNewClassDesc(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6;
 i1 = _Java_ReadString(i5, i4) | 0;
 L1 : do if (!i1) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 12 >> 2] & 127](i5, 8) | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 4 >> 2] & 127](i5, i4 + 48 | 0) | 0;
   if (!i1) {
    i1 = HEAP32[422207] | 0;
    HEAP32[i4 + 2336 >> 2] = i1;
    HEAP32[422207] = i1 + 1;
    i1 = _Stream_Read(i5, i2, 2) | 0;
    if (!i1) {
     i1 = _Stream_GetU16_BE(i2) | 0;
     i3 = i4 + 52 | 0;
     HEAP32[i3 >> 2] = i1 & 65535;
     if ((i1 & 65535) > 38) i1 = -857812921; else {
      if (i1 << 16 >> 16) {
       i2 = 0;
       do {
        i1 = _Java_ReadFieldDesc(i5, i4 + 56 + (i2 * 60 | 0) | 0) | 0;
        i2 = i2 + 1 | 0;
        if (i1 | 0) break L1;
       } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
      }
      i1 = _Java_SkipAnnotation(i5) | 0;
      if (!i1) i1 = _Java_ReadClassDesc(i5, i4 + 2340 | 0) | 0;
     }
    }
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _Event_UnregisterAll() {
 HEAP32[418930] = 0;
 HEAP32[418995] = 0;
 HEAP32[419060] = 0;
 HEAP32[419125] = 0;
 HEAP32[419190] = 0;
 HEAP32[419255] = 0;
 HEAP32[419320] = 0;
 HEAP32[419385] = 0;
 HEAP32[419450] = 0;
 HEAP32[419515] = 0;
 HEAP32[419580] = 0;
 HEAP32[419645] = 0;
 HEAP32[419710] = 0;
 HEAP32[419775] = 0;
 HEAP32[419840] = 0;
 HEAP32[419905] = 0;
 HEAP32[420035] = 0;
 HEAP32[420100] = 0;
 HEAP32[420165] = 0;
 HEAP32[420230] = 0;
 HEAP32[420295] = 0;
 HEAP32[420360] = 0;
 HEAP32[420425] = 0;
 HEAP32[420490] = 0;
 HEAP32[420555] = 0;
 HEAP32[420620] = 0;
 HEAP32[420685] = 0;
 HEAP32[420750] = 0;
 HEAP32[420815] = 0;
 HEAP32[420880] = 0;
 HEAP32[420945] = 0;
 HEAP32[421010] = 0;
 HEAP32[421075] = 0;
 HEAP32[421140] = 0;
 HEAP32[421205] = 0;
 HEAP32[421270] = 0;
 HEAP32[421335] = 0;
 HEAP32[421400] = 0;
 HEAP32[421465] = 0;
 HEAP32[421530] = 0;
 HEAP32[421595] = 0;
 HEAP32[421660] = 0;
 HEAP32[421725] = 0;
 HEAP32[421790] = 0;
 HEAP32[421855] = 0;
 HEAP32[421920] = 0;
 HEAP32[421985] = 0;
 HEAP32[422050] = 0;
 HEAP32[422115] = 0;
 HEAP32[422180] = 0;
 return;
}

function _Classic_ReadAbsoluteLocation(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i9;
 if (!(HEAP8[21317] | 0)) {
  i7 = (_Stream_GetU16_BE(i3) | 0) << 16 >> 16;
  i1 = (_Stream_GetU16_BE(i3 + 2 | 0) | 0) << 16 >> 16;
  i2 = 6;
  i8 = (_Stream_GetU16_BE(i3 + 4 | 0) | 0) << 16 >> 16;
 } else {
  i7 = _Stream_GetU32_BE(i3) | 0;
  i1 = _Stream_GetU32_BE(i3 + 4 | 0) | 0;
  i2 = 12;
  i8 = _Stream_GetU32_BE(i3 + 8 | 0) | 0;
 }
 i2 = i3 + i2 | 0;
 switch (i4 & 96) {
 case 0:
 case 32:
  {
   i1 = i1 + (i5 << 24 >> 24 == -1 ? -29 : -51) | 0;
   break;
  }
 default:
  {}
 }
 HEAP8[i6 + 28 >> 0] = i4;
 HEAPF32[i6 >> 2] = +(i7 | 0) * .03125;
 HEAPF32[i6 + 4 >> 2] = +(i1 | 0) * .03125;
 HEAPF32[i6 + 8 >> 2] = +(i8 | 0) * .03125;
 HEAPF32[i6 + 16 >> 2] = +(HEAPU8[i2 >> 0] | 0) * 360.0 * .00390625;
 HEAPF32[i6 + 12 >> 2] = +(HEAPU8[i2 + 1 >> 0] | 0) * 360.0 * .00390625;
 if (i5 << 24 >> 24 == -1) HEAP8[1868800] = 1;
 _UpdateLocation(i5, i6);
 STACKTOP = i9;
 return;
}

function _WriteClassDesc(i7, i1, i2, i6, i4) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i5 = i8;
 _memset(i5 | 0, 0, 256) | 0;
 HEAP8[i5 >> 0] = i1;
 i3 = i5 + 1 | 0;
 HEAP8[i3 >> 0] = 114;
 i1 = _WriteJavaString(i5 + 2 | 0, i2) | 0;
 HEAP8[i5 + (i1 + 12) >> 0] = 2;
 HEAP8[i5 + (i1 + 13) >> 0] = 0;
 HEAP8[i5 + (i1 + 14) >> 0] = i6;
 i1 = _Stream_Write(i7, i5, i1 + 15 | 0) | 0;
 L1 : do if (!i1) {
  if ((i6 | 0) > 0) {
   i2 = 0;
   do {
    i9 = i4 + (i2 * 12 | 0) | 0;
    HEAP8[i5 >> 0] = HEAP8[i9 >> 0] | 0;
    i1 = _WriteJavaString(i3, HEAP32[i4 + (i2 * 12 | 0) + 4 >> 2] | 0) | 0;
    if ((HEAP8[i9 >> 0] | 0) == 91) {
     HEAP8[i5 + (i1 + 3) >> 0] = 116;
     _WriteJavaString(i5 + (i1 + 4) | 0, 32056) | 0;
     i1 = i1 + 5 | 0;
    }
    i1 = _Stream_Write(i7, i5, i1 + 3 | 0) | 0;
    i2 = i2 + 1 | 0;
    if (i1 | 0) break L1;
   } while ((i2 | 0) < (i6 | 0));
  }
  i1 = _Stream_Write(i7, 32059, 2) | 0;
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _UnhookEvents() {
 _emscripten_set_wheel_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_mousedown_callback_on_thread(53305, 0, 0, 0, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(53305, 0, 0, 0, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(53305, 0, 0, 0, 2) | 0;
 _emscripten_set_focus_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_blur_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_resize_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_beforeunload_callback_on_thread(0, 0, 1) | 0;
 _emscripten_set_visibilitychange_callback_on_thread(0, 0, 0, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(2, 0, 0, 0, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(2, 0, 0, 0, 2) | 0;
 return;
}

function _Gfx_DoMipmaps(i4, i3, i11, i6, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = HEAP32[i11 >> 2] | 0;
 i7 = i11 + 4 | 0;
 i2 = i11 + 8 | 0;
 i10 = _CalcMipmapsLevels(HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 if ((i10 | 0) < 1) {
  i2 = i5;
  i1 = i5;
 } else {
  i9 = i1 << 24 >> 24 == 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i8 = 1;
  i1 = i5;
  i5 = HEAP32[i7 >> 2] | 0;
  while (1) {
   i7 = (i4 | 0) / 2 | 0;
   i3 = (i3 | 0) / 2 | 0;
   i5 = (i5 | 0) > 1 ? (i5 | 0) / 2 | 0 : i5;
   i2 = (i2 | 0) > 1 ? (i2 | 0) / 2 | 0 : i2;
   i4 = _Mem_Alloc(Math_imul(i2, i5) | 0, 4, 33332) | 0;
   _GenMipmaps(i5, i2, i4, i1, i6);
   if (i9) _CallTexImage2D(i8, i5, i2, i4); else _CallTexSubImage2D(i8, i7, i3, i5, i2, i4);
   if ((i1 | 0) != (HEAP32[i11 >> 2] | 0)) _Mem_Free(i1);
   if ((i8 | 0) == (i10 | 0)) break; else {
    i8 = i8 + 1 | 0;
    i1 = i4;
    i6 = i5;
    i4 = i7;
   }
  }
  i2 = i4;
  i1 = i4;
 }
 if ((i1 | 0) != (HEAP32[i11 >> 2] | 0)) _Mem_Free(i2);
 return;
}

function _Random_Next(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 if ((0 - i4 & i4 | 0) == (i4 | 0)) {
  i6 = i5;
  i6 = ___muldi3(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, -554899859, 5) | 0;
  i6 = _i64Add(i6 | 0, getTempRet0() | 0, 11, 0) | 0;
  i1 = (getTempRet0() | 0) & 65535;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i1;
  i1 = _bitshift64Lshr(i6 | 0, i1 | 0, 17) | 0;
  i1 = ___muldi3(i1 | 0, getTempRet0() | 0, i4 | 0, ((i4 | 0) < 0) << 31 >> 31 | 0) | 0;
  i1 = _bitshift64Lshr(i1 | 0, getTempRet0() | 0, 31) | 0;
  getTempRet0() | 0;
 } else {
  i6 = i4 + -1 | 0;
  i3 = i5;
  i2 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  do {
   i7 = ___muldi3(i2 | 0, i3 | 0, -554899859, 5) | 0;
   i2 = _i64Add(i7 | 0, getTempRet0() | 0, 11, 0) | 0;
   i3 = (getTempRet0() | 0) & 65535;
   i7 = _bitshift64Lshr(i2 | 0, i3 | 0, 17) | 0;
   getTempRet0() | 0;
   i1 = (i7 | 0) % (i4 | 0) | 0;
  } while ((i6 - i1 + i7 | 0) < 0);
  i7 = i5;
  HEAP32[i7 >> 2] = i2;
  HEAP32[i7 + 4 >> 2] = i3;
 }
 return i1 | 0;
}

function _String_UNSAFE_Separate(i3, i1, i2, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7 + 8 | 0;
 i5 = i7;
 i1 = _String_IndexOfAt(i3, 0, i1) | 0;
 if ((i1 | 0) == -1) {
  i1 = i3;
  i5 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = i2;
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = i5;
  i4 = 1841616;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
  i1 = i6;
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = i5;
  i1 = 0;
 } else {
  _String_UNSAFE_Substring(i4, i3, 0, i1);
  i9 = i4;
  i8 = HEAP32[i9 + 4 >> 2] | 0;
  i4 = i2;
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i4 + 4 >> 2] = i8;
  _String_UNSAFE_SubstringAt(i5, i3, i1 + 1 | 0);
  i3 = i5;
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  i5 = i6;
  HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
  _String_UNSAFE_TrimEnd(i2);
  _String_UNSAFE_TrimStart(i6);
  if (!(HEAP16[i2 + 4 >> 1] | 0)) i1 = 0; else i1 = (HEAP16[i6 + 4 >> 1] | 0) != 0 & 1;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _TextGroupWidget_Reposition(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = HEAP32[i5 + 84 >> 2] | 0;
 i7 = i5 + 40 | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i2 = 0;
  i4 = 0;
  i1 = 0;
  do {
   i8 = HEAPU16[i6 + (i4 * 28 | 0) + 8 >> 1] | 0;
   i1 = (i1 | 0) > (i8 | 0) ? i1 : i8;
   i2 = i2 + (HEAPU16[i6 + (i4 * 28 | 0) + 10 >> 1] | 0) | 0;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i3 | 0));
 } else {
  i2 = 0;
  i1 = 0;
 }
 HEAP32[i5 + 12 >> 2] = i1;
 HEAP32[i5 + 16 >> 2] = i2;
 _Widget_CalcPosition(i5);
 if ((HEAP32[i7 >> 2] | 0) > 0) {
  i2 = i5 + 22 | 0;
  i4 = i5 + 24 | 0;
  i3 = 0;
  i1 = HEAP32[i5 + 8 >> 2] | 0;
  do {
   i8 = (_Gui_CalcPos(HEAP8[i2 >> 0] | 0, HEAP32[i4 >> 2] | 0, HEAPU16[i6 + (i3 * 28 | 0) + 8 >> 1] | 0, HEAP32[466968] | 0) | 0) & 65535;
   HEAP16[i6 + (i3 * 28 | 0) + 4 >> 1] = i8;
   HEAP16[i6 + (i3 * 28 | 0) + 6 >> 1] = i1;
   i1 = i1 + (HEAPU16[i6 + (i3 * 28 | 0) + 10 >> 1] | 0) | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i7 >> 2] | 0));
 }
 return;
}

function _TableWidget_RecreateBlocks(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i9 = (HEAP8[1868752] | 0) == 0 ? 49 : 767;
 i8 = i10 + 40 | 0;
 HEAP32[i8 >> 2] = 0;
 i7 = HEAP32[i10 + 44 >> 2] | 0;
 i2 = 0;
 i1 = 0;
 do {
  i6 = i7 + i1 | 0;
  i6 = i6 >>> 0 < 768 ? i6 : 768;
  if ((i1 | 0) < (i6 | 0)) {
   i5 = i2;
   i3 = 1;
   do {
    i4 = HEAP16[1695402 + (i1 << 1) >> 1] | 0;
    if (i9 >>> 0 >= (i4 & 65535) >>> 0) {
     i12 = i5 + 1 | 0;
     HEAP32[i8 >> 2] = i12;
     HEAP16[i10 + 92 + (i5 << 1) >> 1] = i4;
     i5 = i12;
     i3 = i4 << 16 >> 16 == 0 ? i3 : 0;
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i6 | 0));
   if (!(i3 << 24 >> 24)) {
    i2 = i5;
    i1 = i6;
   } else {
    i1 = i6;
    i11 = 8;
   }
  } else i11 = 8;
  if ((i11 | 0) == 8) {
   i11 = 0;
   HEAP32[i8 >> 2] = i2;
  }
 } while (i1 >>> 0 < 768);
 i12 = _Math_CeilDiv(i2, i7) | 0;
 HEAP32[i10 + 48 >> 2] = i12;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 511](i10);
 return;
}

function _Png_Expand_INDEXED_8(i1, i9, i4, i6) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i3 = i1 + -1 | 0;
 i2 = i4 + i3 | 0;
 i3 = i6 + (i3 << 2) | 0;
 if ((i1 | 0) > 3) {
  i8 = ~i1;
  i8 = ((i8 | 0) > -8 ? i8 : -8) + i1 + 4 & -4;
  i5 = i1 + -5 - i8 | 0;
  i4 = i4 + i5 | 0;
  i7 = i1 + -4 | 0;
  while (1) {
   HEAP32[i3 >> 2] = HEAP32[i9 + ((HEAPU8[i2 >> 0] | 0) << 2) >> 2];
   HEAP32[i3 + -4 >> 2] = HEAP32[i9 + ((HEAPU8[i2 + -1 >> 0] | 0) << 2) >> 2];
   HEAP32[i3 + -8 >> 2] = HEAP32[i9 + ((HEAPU8[i2 + -2 >> 0] | 0) << 2) >> 2];
   HEAP32[i3 + -12 >> 2] = HEAP32[i9 + ((HEAPU8[i2 + -3 >> 0] | 0) << 2) >> 2];
   if ((i1 | 0) > 7) {
    i3 = i3 + -16 | 0;
    i2 = i2 + -4 | 0;
    i1 = i1 + -4 | 0;
   } else break;
  }
  i3 = i6 + (i5 << 2) | 0;
  i2 = i4;
  i1 = i7 - i8 | 0;
 }
 if ((i1 | 0) > 0) while (1) {
  HEAP32[i3 >> 2] = HEAP32[i9 + ((HEAPU8[i2 >> 0] | 0) << 2) >> 2];
  if ((i1 | 0) > 1) {
   i3 = i3 + -4 | 0;
   i2 = i2 + -1 | 0;
   i1 = i1 + -1 | 0;
  } else break;
 }
 return;
}

function _ReplaceCommand_Draw(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[416806] | 0;
 if ((i1 | 0) == -1) i12 = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0; else i12 = i1 & 65535;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i8 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i1 | 0) <= (i8 | 0)) {
  i9 = HEAP32[i2 + 8 >> 2] | 0;
  i10 = HEAP32[i3 + 8 >> 2] | 0;
  i11 = (i9 | 0) > (i10 | 0);
  i7 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i6 = (i7 | 0) > (i4 | 0);
  i5 = HEAP32[416807] & 65535;
  while (1) {
   if (!i11) {
    i3 = i9;
    while (1) {
     if (!i6) {
      i2 = i7;
      while (1) {
       if ((_World_GetBlock_121(i2, i1, i3) | 0) << 16 >> 16 == i5 << 16 >> 16) _Game_ChangeBlock(i2, i1, i3, i12);
       if ((i2 | 0) < (i4 | 0)) i2 = i2 + 1 | 0; else break;
      }
     }
     if ((i3 | 0) < (i10 | 0)) i3 = i3 + 1 | 0; else break;
    }
   }
   if ((i1 | 0) < (i8 | 0)) i1 = i1 + 1 | 0; else break;
  }
 }
 return;
}

function _Terrain_Render(d3) {
 d3 = +d3;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[431722] | 0;
 if (i1 | 0) {
  i1 = _Gfx_LockDynamicVb(HEAP32[431724] | 0, 1, i1 << 2) | 0;
  _Terrain_Update1DCounts();
  if ((HEAP32[431722] | 0) > 0) {
   i2 = 0;
   do {
    i5 = HEAPU16[847008 + (i2 << 6) + 60 >> 1] | 0;
    i4 = HEAP32[460410] | 0;
    i5 = 943008 + ((i4 ? i5 >>> i4 : i5) << 1) | 0;
    _TerrainParticle_Render(847008 + (i2 << 6) | 0, d3, i1 + ((HEAPU16[i5 >> 1] | 0) * 24 | 0) | 0);
    HEAP16[i5 >> 1] = (HEAPU16[i5 >> 1] | 0) + 4;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[431722] | 0));
  }
  _Gfx_UnlockDynamicVb(HEAP32[431724] | 0);
  i1 = HEAP32[460407] | 0;
  if ((i1 | 0) > 0) {
   i5 = 0;
   i2 = 0;
   do {
    i6 = HEAP16[944032 + (i5 << 1) >> 1] | 0;
    i4 = i6 & 65535;
    if (i6 << 16 >> 16) {
     _Atlas1D_Bind(i5);
     _Gfx_DrawVb_IndexedTris_Range(i4, i2, 0);
     i1 = HEAP32[460407] | 0;
     i2 = i2 + i4 | 0;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i1 | 0));
  }
 }
 return;
}

function _EditHotkeyScreen_Init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i5 + 16 | 0;
 i4 = i5 + 8 | 0;
 i1 = i5;
 HEAP32[i3 + 16 >> 2] = 364464;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 7;
 HEAP32[i3 + 24 >> 2] = -1;
 HEAP32[i2 >> 2] = 22912;
 _ButtonWidget_Add(i3, i3 + 400 | 0, 300, 154);
 _ButtonWidget_Add(i3, i3 + 484 | 0, 300, 155);
 _ButtonWidget_Add(i3, i3 + 568 | 0, 300, 156);
 _ButtonWidget_Add(i3, i3 + 652 | 0, 300, 157);
 _ButtonWidget_Add(i3, i3 + 736 | 0, 300, 158);
 if (!(HEAP8[i3 + 48 >> 0] | 0)) i1 = 1841616; else _StringsBuffer_UNSAFE_Get(i1, 1690080, HEAP32[i3 + 44 >> 2] | 0);
 i7 = i1;
 i6 = HEAP32[i7 + 4 >> 2] | 0;
 i1 = i4;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 + 4 >> 2] = i6;
 _TextInputWidget_Add(i3, i3 + 100 | 0, 500, i4, i2);
 _AddPrimaryButton(i3, i3 + 820 | 0, 31);
 HEAP32[i3 + 392 >> 2] = 44196;
 i4 = _Screen_CalcDefaultMaxVertices(i3) | 0;
 HEAP32[i3 + 8 >> 2] = i4;
 STACKTOP = i5;
 return;
}

function _memset(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + i4 | 0;
 i6 = i6 & 255;
 if ((i4 | 0) >= 67) {
  while (i5 & 3) {
   HEAP8[i5 >> 0] = i6;
   i5 = i5 + 1 | 0;
  }
  i1 = i3 & -4 | 0;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i2 = i1 - 64 | 0;
  while ((i5 | 0) <= (i2 | 0)) {
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 4 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i7;
   HEAP32[i5 + 12 >> 2] = i7;
   HEAP32[i5 + 16 >> 2] = i7;
   HEAP32[i5 + 20 >> 2] = i7;
   HEAP32[i5 + 24 >> 2] = i7;
   HEAP32[i5 + 28 >> 2] = i7;
   HEAP32[i5 + 32 >> 2] = i7;
   HEAP32[i5 + 36 >> 2] = i7;
   HEAP32[i5 + 40 >> 2] = i7;
   HEAP32[i5 + 44 >> 2] = i7;
   HEAP32[i5 + 48 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = i7;
   HEAP32[i5 + 56 >> 2] = i7;
   HEAP32[i5 + 60 >> 2] = i7;
   i5 = i5 + 64 | 0;
  }
  while ((i5 | 0) < (i1 | 0)) {
   HEAP32[i5 >> 2] = i7;
   i5 = i5 + 4 | 0;
  }
 }
 while ((i5 | 0) < (i3 | 0)) {
  HEAP8[i5 >> 0] = i6;
  i5 = i5 + 1 | 0;
 }
 return i3 - i4 | 0;
}

function _InputHandler_Tick(d2) {
 d2 = +d2;
 var i1 = 0, i3 = 0, i4 = 0;
 d2 = +HEAPF32[423809] + d2;
 HEAPF32[423809] = d2;
 do if (!(d2 < .24950000643730164 | (HEAP32[422387] | 0) != 0)) {
  HEAPF32[423809] = 0.0;
  if (!(HEAP8[1868784] | 0)) {
   i3 = HEAP8[1868786] | 0;
   i1 = HEAP8[1868788] | 0;
   i4 = HEAP8[1868787] | 0;
  } else {
   i1 = HEAP32[3784] | 0;
   if ((i1 | 0) == 1) {
    i3 = (_AnyBlockTouches() | 0) << 24 >> 24 != 0 & 1;
    i1 = HEAP32[3784] | 0;
   } else i3 = 0;
   if (!i1) {
    i1 = 0;
    i4 = (_AnyBlockTouches() | 0) << 24 >> 24 != 0 & 1;
   } else {
    i1 = 0;
    i4 = 0;
   }
  }
  if (HEAP8[1841575] | 0) {
   HEAP32[3864] = -1;
   if (i3 << 24 >> 24) _MouseStateUpdate(0, 1);
   if (i4 << 24 >> 24) _MouseStateUpdate(1, 1);
   if (i1 << 24 >> 24) _MouseStateUpdate(2, 1);
  }
  if (i3 << 24 >> 24) {
   _InputHandler_DeleteBlock();
   break;
  }
  if (i4 << 24 >> 24) {
   _InputHandler_PlaceBlock();
   break;
  }
  if (i1 << 24 >> 24) _InputHandler_PickBlock();
 } while (0);
 return;
}

function _Context2D_Clear(i6, i13, i3, i4, i2, i1) {
 i6 = i6 | 0;
 i13 = i13 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i14 + 12 | 0;
 i5 = i14 + 8 | 0;
 i10 = i14 + 4 | 0;
 i11 = i14;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 i12 = (_Drawer2D_Clamp(i6, i8, i5, i10, i11) | 0) << 24 >> 24 != 0;
 i11 = HEAP32[i11 >> 2] | 0;
 if (i12 & (i11 | 0) > 0) {
  i12 = HEAP32[i6 >> 2] | 0;
  i9 = HEAP32[i5 >> 2] | 0;
  i7 = i6 + 4 | 0;
  i6 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i3 = (i1 | 0) > 0;
  i5 = 0;
  do {
   i2 = i12 + ((Math_imul(i9 + i5 | 0, HEAP32[i7 >> 2] | 0) | 0) << 2) + (i6 << 2) | 0;
   if (i3) {
    i4 = 0;
    do {
     HEAP32[i2 + (i4 << 2) >> 2] = i13;
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i1 | 0));
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i11 | 0));
 }
 STACKTOP = i14;
 return;
}

function _CalculateTextWidths() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = HEAP32[417088] | 0;
 i2 = HEAP32[417089] | 0;
 i3 = HEAP32[3579] | 0;
 if ((i2 | 0) > 0) {
  i4 = HEAP32[417087] | 0;
  i6 = (i1 | 0) > 0;
  i7 = (i3 | 0) > 0;
  i12 = 0;
  do {
   i5 = i4 + ((Math_imul(i12, i1) | 0) << 2) | 0;
   if (i6) {
    i8 = ((i12 | 0) / (i3 | 0) | 0) << 4;
    i9 = 0;
    while (1) {
     L9 : do if (i7) {
      i11 = i3;
      while (1) {
       i10 = i11 + -1 | 0;
       if ((HEAP32[i5 + (i10 + i9 << 2) >> 2] | 0) >>> 0 > 16777215) break;
       if ((i11 | 0) > 1) i11 = i10; else break L9;
      }
      i10 = 145264 + (i8 << 2) | 0;
      i13 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = (i13 | 0) > (i11 | 0) ? i13 : i11;
     } while (0);
     i9 = i9 + i3 | 0;
     if ((i9 | 0) >= (i1 | 0)) break; else i8 = i8 + 1 | 0;
    }
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i2 | 0));
 }
 HEAP32[36348] = (i3 | 0) / 4 | 0;
 return;
}

function _AnimatedComp_Update(i8, i3, i2, d7) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d7 = +d7;
 var d1 = 0.0, i4 = 0, i5 = 0, d6 = 0.0;
 d6 = +HEAPF32[i2 >> 2] - +HEAPF32[i3 >> 2];
 d1 = +HEAPF32[i2 + 8 >> 2] - +HEAPF32[i3 + 8 >> 2];
 d1 = +Math_sqrt(+(d6 * d6 + d1 * d1));
 i3 = i8 + 144 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i8 + 140 >> 2] = i2;
 i4 = i8 + 152 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i8 + 148 >> 2] = i5;
 d6 = (HEAP32[tempDoublePtr >> 2] = i5, +HEAPF32[tempDoublePtr >> 2]);
 if (d1 > .05000000074505806) {
  HEAPF32[i3 >> 2] = d7 * 20.0 * (d1 * 2.0) + (HEAP32[tempDoublePtr >> 2] = i2, +HEAPF32[tempDoublePtr >> 2]);
  d1 = d7 * 3.0 + d6;
 } else d1 = d6 - d7 * 3.0;
 d7 = d1 < 0.0 ? 0.0 : d1;
 HEAPF32[i4 >> 2] = d7 > 1.0 ? 1.0 : d7;
 i5 = i8 + 160 | 0;
 HEAP32[i8 + 156 >> 2] = HEAP32[i5 >> 2];
 i3 = i8 + 111 | 0;
 i4 = 0;
 do {
  if (!(HEAP8[1868759] | 0)) i2 = 1; else i2 = (HEAP8[i3 >> 0] | 0) == 0;
  _AnimatedComp_DoTilt(i5, i2 & 1);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 3);
 return;
}

function _KeyBindsScreen_Layout(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i5 = i9 + 60 | 0;
 i3 = ((HEAP32[i5 >> 2] | 0) / 2 | 0) + 5 | 0;
 i10 = i9 + 64 | 0;
 i2 = HEAP32[i9 + 72 >> 2] | 0;
 i4 = i9 + 40 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i7 = (i2 | 0) == -1;
  i6 = i9 + 492 | 0;
  i8 = 0;
  i1 = HEAP32[i10 >> 2] | 0;
  while (1) {
   if ((i8 | 0) == (i2 | 0)) i1 = HEAP32[i10 >> 2] | 0;
   _Widget_SetLocation(i6 + (i8 * 84 | 0) | 0, 1, 1, Math_imul(i7 ? 0 : (i8 | 0) < (i2 | 0) ? -1 : 1, i3) | 0, i1);
   i8 = i8 + 1 | 0;
   if ((i8 | 0) >= (HEAP32[i4 >> 2] | 0)) break; else i1 = i1 + 50 | 0;
  }
 }
 _Widget_SetLocation(i9 + 96 | 0, 1, 1, 0, -180);
 _Widget_SetLocation(i9 + 168 | 0, 1, 1, 0, 100);
 _Menu_LayoutBack(i9 + 240 | 0);
 i10 = i9 + 68 | 0;
 _Widget_SetLocation(i9 + 324 | 0, 1, 1, -35 - (HEAP32[i5 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0);
 _Widget_SetLocation(i9 + 408 | 0, 1, 1, (HEAP32[i5 >> 2] | 0) + 35 | 0, HEAP32[i10 >> 2] | 0);
 return;
}

function _OpenChatLog(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 L1 : do if (!0) if ((_CreateLogsDirectory() | 0) << 24 >> 24) {
  HEAP32[i7 >> 2] = 0;
  i4 = i5 + 4 | 0;
  i3 = i5 + 8 | 0;
  i1 = HEAP32[5930] | 0;
  while (1) {
   HEAP16[6864] = 0;
   _String_Format3(13724, 25409, i5, i4, i3);
   if ((HEAP32[i7 >> 2] | 0) > 0) _String_Format2(13724, 25427, 13716, i7); else _String_Format1(13724, 25438, 13716);
   i6 = _Stream_AppendFile(1662004, 13724) | 0;
   i2 = (i6 | 0) == (i1 | 0);
   if (!((i6 | 0) == 0 | i2)) {
    i1 = 8;
    break;
   }
   if (!i2) break L1;
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i6 + 1;
   if ((i6 | 0) >= 19) {
    i1 = 11;
    break;
   }
  }
  if ((i1 | 0) == 8) {
   _Chat_DisableLogging();
   _Logger_SysWarn2(i6, 25445, 13724);
   break;
  } else if ((i1 | 0) == 11) {
   _Chat_DisableLogging();
   _Chat_Add1(25458, i7);
   break;
  }
 } while (0);
 STACKTOP = i8;
 return;
}

function _CPE_SetEnvCol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(HEAP8[i1 + 1 >> 0] | 0)) if (!(HEAP8[i1 + 3 >> 0] | 0)) i3 = (HEAP8[i1 + 5 >> 0] | 0) != 0 & 1; else i3 = 1; else i3 = 1;
 i1 = HEAPU8[i1 + 4 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] | HEAPU8[i1 + 6 >> 0] << 16 | -16777216;
 switch (i2 << 24 >> 24) {
 case 0:
  {
   _Env_SetSkyCol(i3 << 24 >> 24 == 0 ? i1 : -13159);
   break;
  }
 case 1:
  {
   _Env_SetCloudsCol(i3 << 24 >> 24 == 0 ? i1 : -1);
   break;
  }
 case 2:
  {
   _Env_SetFogCol(i3 << 24 >> 24 == 0 ? i1 : -1);
   break;
  }
 case 3:
  {
   _Env_SetShadowCol(i3 << 24 >> 24 == 0 ? i1 : -6579301);
   break;
  }
 case 4:
  {
   _Env_SetSunCol(i3 << 24 >> 24 == 0 ? i1 : -1);
   break;
  }
 case 5:
  {
   _Env_SetSkyboxCol(i3 << 24 >> 24 == 0 ? i1 : -1);
   break;
  }
 case 6:
  {
   _Env_SetLavaLightCol(i3 << 24 >> 24 == 0 ? i1 : -3740673);
   break;
  }
 case 7:
  {
   _Env_SetLampLightCol(i3 << 24 >> 24 == 0 ? i1 : -1);
   break;
  }
 default:
  {}
 }
 return;
}

function _Drawer2D_MakeTextTexture(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5;
 do if (!(HEAP8[1689080] | 0)) {
  i2 = _Drawer2D_TextWidth(i1) | 0;
  if (!i2) {
   HEAP32[i4 >> 2] = HEAP32[3580];
   HEAP32[i4 + 4 >> 2] = HEAP32[3581];
   HEAP32[i4 + 8 >> 2] = HEAP32[3582];
   HEAP32[i4 + 12 >> 2] = HEAP32[3583];
   HEAP32[i4 + 16 >> 2] = HEAP32[3584];
   HEAP32[i4 + 20 >> 2] = HEAP32[3585];
   HEAP32[i4 + 24 >> 2] = HEAP32[3586];
   break;
  } else {
   _Context2D_Alloc(i3, i2, _Drawer2D_TextHeight(i1) | 0);
   _Context2D_DrawText(i3, i1, 0, 0);
   _Context2D_MakeTexture(i4, i3);
   _Context2D_Free(i3);
   break;
  }
 } else {
  HEAP32[i4 >> 2] = HEAP32[3580];
  HEAP32[i4 + 4 >> 2] = HEAP32[3581];
  HEAP32[i4 + 8 >> 2] = HEAP32[3582];
  HEAP32[i4 + 12 >> 2] = HEAP32[3583];
  HEAP32[i4 + 16 >> 2] = HEAP32[3584];
  HEAP32[i4 + 20 >> 2] = HEAP32[3585];
  HEAP32[i4 + 24 >> 2] = HEAP32[3586];
 } while (0);
 STACKTOP = i5;
 return;
}

function _AudioPool_Play(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i3 = 0;
 while (1) {
  i2 = 977376 + (i3 * 12 | 0) | 0;
  if (!(HEAP32[977376 + (i3 * 12 | 0) + 4 >> 2] | 0)) _Audio_Init(i2, 1) | 0;
  i1 = _SoundContext_PollBusy(i2, i6) | 0;
  if (i1 | 0) break;
  i3 = i3 + 1 | 0;
  if (!(HEAP8[i6 >> 0] | 0)) {
   i4 = 8;
   break;
  }
  if (i3 >>> 0 >= 8) {
   i4 = 3;
   break;
  }
 }
 L8 : do if ((i4 | 0) == 3) {
  i3 = 0;
  while (1) {
   i2 = 977376 + (i3 * 12 | 0) | 0;
   i1 = _SoundContext_PollBusy(i2, i6) | 0;
   if (i1 | 0) break L8;
   i3 = i3 + 1 | 0;
   if (!(HEAP8[i6 >> 0] | 0)) break;
   if (i3 >>> 0 >= 8) {
    i1 = 0;
    break L8;
   }
  }
  _Audio_SetVolume(i2, HEAP32[i5 + 20 >> 2] | 0);
  i1 = _SoundContext_PlayData(i2, i5) | 0;
 } else if ((i4 | 0) == 8) {
  _Audio_SetVolume(i2, HEAP32[i5 + 20 >> 2] | 0);
  i1 = _SoundContext_PlayData(i2, i5) | 0;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _UpdateChunks(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 HEAP32[i6 >> 2] = 0;
 i2 = (HEAP32[3896] | 0) + (d1 < .04333333671092987 ? 1 : -1) | 0;
 i2 = (i2 | 0) > 4 ? i2 : 4;
 i4 = HEAP32[424261] | 0;
 HEAP32[3896] = (i2 | 0) > (i4 | 0) ? i4 : i2;
 i2 = HEAP32[417347] | 0;
 i4 = i2 + 16 | 0;
 if (!((_Vec3_Equals() | 0) << 24 >> 24)) i7 = 5; else if (+HEAPF32[i4 >> 2] == +HEAPF32[424266]) {
  i3 = i2 + 20 | 0;
  if (+HEAPF32[i3 >> 2] != +HEAPF32[424267]) i7 = 5; else {
   i5 = 0;
   i2 = _UpdateChunksStill(i6) | 0;
  }
 } else i7 = 5;
 if ((i7 | 0) == 5) {
  i5 = 1;
  i3 = i2 + 20 | 0;
  i2 = _UpdateChunksAndVisibility(i6) | 0;
 }
 HEAP32[424265] = i2;
 HEAP32[424249] = HEAP32[414158];
 HEAP32[424250] = HEAP32[414159];
 HEAP32[424251] = HEAP32[414160];
 HEAP32[424266] = HEAP32[i4 >> 2];
 HEAP32[424267] = HEAP32[i3 >> 2];
 if (i5 | (HEAP32[i6 >> 2] | 0) != 0) _ResetPartFlags();
 STACKTOP = i8;
 return;
}

function _TextGroupWidget_GetSelected(i8, i6, i9, i10) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i11;
 i5 = i8 + 40 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i7 = i8 + 84 | 0;
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i7 >> 2] | 0;
   if (!(HEAP32[i2 + (i1 * 28 | 0) >> 2] | 0)) i2 = i3; else {
    if (_Gui_Contains(HEAP16[i2 + (i1 * 28 | 0) + 4 >> 1] | 0, HEAP16[i2 + (i1 * 28 | 0) + 6 >> 1] | 0, HEAPU16[i2 + (i1 * 28 | 0) + 8 >> 1] | 0, HEAPU16[i2 + (i1 * 28 | 0) + 10 >> 1] | 0, i9, i10) | 0) break;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i2 | 0)) i3 = i2; else {
    i1 = -1;
    break L1;
   }
  }
  if (!((_TextGroupWidget_GetUrl(i8, i6, i1, i9) | 0) << 24 >> 24)) {
   _TextGroupWidget_UNSAFE_Get(i4, i8, i1);
   _String_AppendString(i6, i4);
  }
 } else i1 = -1; while (0);
 STACKTOP = i11;
 return i1 | 0;
}

function _InputWidget_CalculateLineSizes(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i7 + 80 | 0;
 i2 = i7 + 64 | 0;
 i3 = i5 + 100 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i5 + 96 >> 2] = HEAP32[i5 + 140 >> 2];
 _DrawTextArgs_MakeEmpty(i2, HEAP32[i5 + 40 >> 2] | 0, 1);
 HEAP32[i4 >> 2] = i7;
 i3 = i4 + 4 | 0;
 HEAP16[i3 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 i1 = i5 + 44 | 0;
 if ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 63]() | 0) > 0) {
  i6 = 0;
  do {
   HEAP16[i3 >> 1] = 0;
   _InputWidget_FormatLine(i5, i6, i4);
   i10 = i4;
   i8 = HEAP32[i10 + 4 >> 2] | 0;
   i9 = i2;
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i9 + 4 >> 2] = i8;
   i9 = _Drawer2D_TextWidth(i2) | 0;
   i8 = i5 + 96 + (i6 << 2) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i9;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 63]() | 0));
 }
 STACKTOP = i7;
 return;
}

function _Heightmap_InitialCoverage(i10, i13, i11, i14, i9) {
 i10 = i10 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i14 = i14 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i15 = 0;
 if ((i14 | 0) > 0) {
  i8 = (i11 | 0) > 0;
  i7 = HEAP32[424246] | 0;
  i1 = 0;
  i2 = 0;
  i12 = 0;
  do {
   if (i8) {
    i3 = 0;
    i4 = (Math_imul(HEAP32[244733] | 0, i12 + i13 | 0) | 0) + i10 | 0;
    i5 = i2;
    i6 = 0;
    while (1) {
     i15 = HEAP16[i7 + (i4 << 1) >> 1] | 0;
     HEAP32[i9 + (i5 << 2) >> 2] = 0;
     if (i15 << 16 >> 16 == 32767) {
      i3 = 0;
      i1 = i1 + 1 | 0;
     } else {
      i15 = i9 + (i5 - i3 << 2) | 0;
      HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      i3 = i3 + 1 | 0;
     }
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i11 | 0)) break; else {
      i4 = i4 + 1 | 0;
      i5 = i5 + 1 | 0;
     }
    }
    i2 = i2 + i11 | 0;
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i14 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _DeleteChunk(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 _Gfx_DeleteVb(i6 + 8 | 0);
 i7 = i6 + 6 | 0;
 HEAP8[i7 >> 0] = HEAP8[i7 >> 0] & -31 | 20;
 i7 = i6 + 12 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[424247] | 0;
  if ((i3 | 0) > 0) {
   i4 = HEAP32[424248] | 0;
   i5 = 0;
   while (1) {
    i2 = 357744 + (i5 << 2) | 0;
    if ((HEAP32[i1 >> 2] | 0) >= 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i3 | 0)) break; else i1 = i1 + (i4 * 20 | 0) | 0;
   }
  }
  HEAP32[i7 >> 2] = 0;
 }
 i6 = i6 + 16 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[424247] | 0;
  if ((i3 | 0) > 0) {
   i4 = HEAP32[424248] | 0;
   i5 = 0;
   while (1) {
    i2 = 359792 + (i5 << 2) | 0;
    if ((HEAP32[i1 >> 2] | 0) >= 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i3 | 0)) break; else i1 = i1 + (i4 * 20 | 0) | 0;
   }
  }
  HEAP32[i6 >> 2] = 0;
 }
 return;
}

function _TexPackOverlay_UpdateLine2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i3 = i5;
 i8 = 1841616;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = i7;
 if (!(HEAP8[i1 + 36 >> 0] | 0)) {
  i6 = i1 + 44 | 0;
  i7 = HEAP32[i6 + 4 >> 2] | 0;
  i8 = i4;
  HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i8 + 4 >> 2] = i7;
  if (_String_CaselessStarts(i4, 16812) | 0) {
   _String_UNSAFE_SubstringAt(i2, i4, 8);
   i6 = i2;
   i7 = HEAP32[i6 + 4 >> 2] | 0;
   i8 = i4;
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i8 + 4 >> 2] = i7;
  }
  if (_String_CaselessStarts(i4, 16820) | 0) {
   _String_UNSAFE_SubstringAt(i3, i4, 7);
   i6 = i3;
   i7 = HEAP32[i6 + 4 >> 2] | 0;
   i8 = i4;
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i8 + 4 >> 2] = i7;
  }
 }
 _TextWidget_Set(i1 + 548 | 0, i4, i1 + 56 | 0);
 STACKTOP = i5;
 return;
}

function _Drawer2D_Clamp(i3, i4, i8, i6, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 12 | 0;
 if ((i1 | 0) < (HEAP32[i7 >> 2] | 0)) {
  i2 = HEAP32[i8 >> 2] | 0;
  i3 = i3 + 16 | 0;
  if ((i2 | 0) < (HEAP32[i3 >> 2] | 0)) {
   if ((i1 | 0) < 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i1;
    HEAP32[i4 >> 2] = 0;
    i1 = 0;
    i2 = HEAP32[i8 >> 2] | 0;
   }
   if ((i2 | 0) < 0) {
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
    HEAP32[i8 >> 2] = 0;
    i1 = HEAP32[i4 >> 2] | 0;
   }
   i4 = (HEAP32[i6 >> 2] | 0) + i1 | 0;
   i7 = HEAP32[i7 >> 2] | 0;
   HEAP32[i6 >> 2] = ((i4 | 0) < (i7 | 0) ? i4 : i7) - i1;
   i1 = HEAP32[i8 >> 2] | 0;
   i7 = (HEAP32[i5 >> 2] | 0) + i1 | 0;
   i8 = HEAP32[i3 >> 2] | 0;
   i1 = ((i7 | 0) < (i8 | 0) ? i7 : i8) - i1 | 0;
   HEAP32[i5 >> 2] = i1;
   i1 = (HEAP32[i6 >> 2] | 0) > 0 & (i1 | 0) > 0 & 1;
  } else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _BoxDesc_ZQuad2(i1, d6, d7, d8, d9, d10, i2, i4, i3, i5) {
 i1 = i1 | 0;
 d6 = +d6;
 d7 = +d7;
 d8 = +d8;
 d9 = +d9;
 d10 = +d10;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i11 = 0, i12 = 0;
 i11 = (i2 | 0) > (i3 | 0);
 i12 = i11 ? i2 | 32768 : i2;
 i3 = i11 ? i3 : i3 | 32768;
 i11 = (i4 | 0) > (i5 | 0);
 i2 = i11 ? i4 | 32768 : i4;
 i4 = i11 ? i5 : i5 | 32768;
 i11 = i1 + 4 | 0;
 i5 = i1 + 36 | 0;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (HEAP32[i5 >> 2] << 4) | 0, d6, d8, d10, i12, i4);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d6, d9, d10, i12, i2);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d7, d9, d10, i3, i2);
 i2 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i2;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i2 << 4) | 0, d7, d8, d10, i3, i4);
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 return;
}

function _DrawOpCommand_BlockChanged(i2, i5, i6, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i1 = i4 + 64 | 0;
 HEAP32[i1 >> 2] = i4;
 HEAP16[i1 + 4 >> 1] = 0;
 HEAP16[i1 + 6 >> 1] = 64;
 i2 = i5 + 4 | 0;
 i3 = i5 + 8 | 0;
 _Game_UpdateBlock(HEAP32[i5 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, i6);
 do if (!(HEAP8[1868737] | 0)) {
  HEAP32[416808] = HEAP32[i5 >> 2];
  HEAP32[416809] = HEAP32[i5 + 4 >> 2];
  HEAP32[416810] = HEAP32[i5 + 8 >> 2];
  HEAP8[1868737] = 1;
  _String_Format4(i1, 25926, HEAP32[416804] | 0, i5, i2, i3);
  _Chat_AddOf(i1, 256);
 } else {
  HEAP32[416811] = HEAP32[i5 >> 2];
  HEAP32[416812] = HEAP32[i5 + 4 >> 2];
  HEAP32[416813] = HEAP32[i5 + 8 >> 2];
  _DrawOpCommand_Execute();
  _DrawOpCommand_ResetState();
  if (!(HEAP8[1868738] | 0)) {
   _Chat_AddOf(1841616, 256);
   break;
  } else {
   _DrawOpCommand_Begin();
   break;
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _BoxDesc_YQuad2(i1, d6, d7, d9, d10, d8, i2, i4, i3, i5) {
 i1 = i1 | 0;
 d6 = +d6;
 d7 = +d7;
 d9 = +d9;
 d10 = +d10;
 d8 = +d8;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i11 = 0, i12 = 0;
 i11 = (i2 | 0) > (i3 | 0);
 i12 = i11 ? i2 | 32768 : i2;
 i3 = i11 ? i3 : i3 | 32768;
 i11 = (i4 | 0) > (i5 | 0);
 i2 = i11 ? i4 | 32768 : i4;
 i4 = i11 ? i5 : i5 | 32768;
 i11 = i1 + 4 | 0;
 i5 = i1 + 36 | 0;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (HEAP32[i5 >> 2] << 4) | 0, d6, d8, d10, i12, i4);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d6, d8, d9, i12, i2);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d7, d8, d9, i3, i2);
 i2 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i2;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i2 << 4) | 0, d7, d8, d10, i3, i4);
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 return;
}

function _BoxDesc_XQuad2(i1, d9, d10, d7, d8, d6, i2, i4, i3, i5) {
 i1 = i1 | 0;
 d9 = +d9;
 d10 = +d10;
 d7 = +d7;
 d8 = +d8;
 d6 = +d6;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i11 = 0, i12 = 0;
 i11 = (i2 | 0) > (i3 | 0);
 i12 = i11 ? i2 | 32768 : i2;
 i3 = i11 ? i3 : i3 | 32768;
 i11 = (i4 | 0) > (i5 | 0);
 i2 = i11 ? i4 | 32768 : i4;
 i4 = i11 ? i5 : i5 | 32768;
 i11 = i1 + 4 | 0;
 i5 = i1 + 36 | 0;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (HEAP32[i5 >> 2] << 4) | 0, d6, d7, d9, i12, i4);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d6, d8, d9, i12, i2);
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i1 << 4) | 0, d6, d8, d10, i3, i2);
 i2 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i2;
 _ModelVertex_Init((HEAP32[i11 >> 2] | 0) + (i2 << 4) | 0, d6, d7, d10, i3, i4);
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 return;
}

function _SaveLevelScreen_Save(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 i4 = i6 + 272 | 0;
 i1 = i6 + 264 | 0;
 i2 = i6 + 280 | 0;
 i9 = i5 + 376 | 0;
 i7 = HEAP32[i9 + 4 >> 2] | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 + 4 >> 2] = i7;
 do if (0 == 0 & (i7 & 65535 | 0) == 0) _TextWidget_SetConst(i5 + 612 | 0, 43506, i5 + 48 | 0); else {
  HEAP32[i4 >> 2] = i6;
  HEAP16[i4 + 4 >> 1] = 0;
  HEAP16[i4 + 6 >> 1] = 260;
  _String_Format1(i4, 43532, i1);
  _String_Copy(978992, i1);
  _Platform_EncodePath(i2, i4);
  if (_File_Exists(i2) | 0) {
   i1 = i3 + 80 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) {
    HEAP32[i1 >> 2] = 1868813;
    _SaveLevelScreen_UpdateSave(i5);
    break;
   }
  }
  _SaveLevelScreen_RemoveOverwrites(i5);
  if (!(_SaveLevelScreen_SaveMap(i4) | 0)) {
   _Chat_Add1(43543, i4);
   _CPE_SendNotifyAction(2, 0);
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _ChatScreen_ChatUpdateFont(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i2 = ~~(+_Gui_GetChatScale() * 8.0);
 i2 = (i2 | 0) > 8 ? i2 : 8;
 i2 = (i2 | 0) < 64 ? i2 : 64;
 i4 = _Display_ScaleY_1898(i2) | 0;
 i1 = i3 + 60 | 0;
 if ((i4 | 0) == (HEAPU16[i3 + 64 >> 1] | 0 | 0)) i1 = 0; else {
  _ChatScreen_FreeChatFonts(i3);
  _Font_Make(i1, i2, 4);
  i4 = ~~(+_Gui_GetChatScale() * 16.0);
  i4 = (i4 | 0) > 8 ? i4 : 8;
  _Font_Make(i3 + 72 | 0, (i4 | 0) < 64 ? i4 : 64, 0);
  i4 = ~~(+_Gui_GetChatScale() * 24.0);
  i4 = (i4 | 0) > 8 ? i4 : 8;
  _Font_Make(i3 + 84 | 0, (i4 | 0) < 64 ? i4 : 64, 0);
  i4 = ~~(+_Gui_GetChatScale() * 8.0);
  i4 = (i4 | 0) > 8 ? i4 : 8;
  _Font_Make(i3 + 96 | 0, (i4 | 0) < 64 ? i4 : 64, 0);
  _ChatInputWidget_SetFont(i3 + 324 | 0, i1);
  _TextGroupWidget_SetFont(i3 + 924 | 0, i1);
  _TextGroupWidget_SetFont(i3 + 1016 | 0, i1);
  _TextGroupWidget_SetFont(i3 + 1108 | 0, i1);
  _TextGroupWidget_SetFont(i3 + 1200 | 0, i1);
  i1 = 1;
 }
 return i1 | 0;
}

function _HUDScreen_RemakeLine2(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i4 = i5 + 136 | 0;
 i3 = i5 + 128 | 0;
 i1 = HEAP32[417347] | 0;
 HEAP8[i2 + 7 >> 0] = 1;
 if (!(HEAP8[1868754] | 0)) {
  d7 = +_HacksComp_CalcSpeedFactor(i1 + 460 | 0, HEAP8[i1 + 473 >> 0] | 0);
  HEAPF32[i3 >> 2] = d7;
  HEAPF32[i2 + 312 >> 2] = d7;
  i6 = HEAP32[414163] | 0;
  HEAP32[i2 + 316 >> 2] = i6;
  HEAP8[i2 + 308 >> 0] = 0;
  HEAP32[i4 >> 2] = i5;
  HEAP16[i4 + 4 >> 1] = 0;
  HEAP16[i4 + 6 >> 1] = 128;
  if ((i6 | 0) != (HEAP32[414164] | 0)) _String_Format1(i4, 47976, 1656652);
  if (HEAP8[i1 + 495 >> 0] | 0) _String_AppendConst(i4, 47990);
  if (+HEAPF32[i3 >> 2] != 0.0) _String_Format1(i4, 48e3, i3);
  if (HEAP8[i1 + 494 >> 0] | 0) _String_AppendConst(i4, 48014);
  _TextWidget_Set(i2 + 120 | 0, i4, i2 + 36 | 0);
 } else _TextWidget_SetConst(i2 + 120 | 0, HEAP32[422246] | 0, i2 + 36 | 0);
 STACKTOP = i5;
 return;
}

function _Sounds_Play(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i8;
 if (i5 << 24 >> 24 != 0 & (HEAP32[248134] | 0) != 0) {
  i1 = _Soundboard_PickRandom(i3, i5) | 0;
  if (i1 | 0) {
   i4 = i1 + 8 | 0;
   HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i1 + 4 >> 2];
   i4 = i6 + 24 | 0;
   HEAP32[i4 >> 2] = 100;
   i1 = HEAP32[248134] | 0;
   i2 = i6 + 20 | 0;
   HEAP32[i2 >> 2] = i1;
   if ((i3 | 0) == 988456) {
    i1 = i5 << 24 >> 24 == 5 ? 120 : 80;
    i7 = 6;
   } else {
    HEAP32[i2 >> 2] = (i1 | 0) / 2 | 0;
    if (i5 << 24 >> 24 == 5) {
     i1 = 140;
     i7 = 6;
    }
   }
   if ((i7 | 0) == 6) HEAP32[i4 >> 2] = i1;
   i1 = _AudioPool_Play(i6) | 0;
   if (i1 | 0) _Sounds_Fail(i1);
  }
 }
 STACKTOP = i8;
 return;
}

function _Java_ReadValue(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i5;
 switch (i2 << 24 >> 24) {
 case 90:
 case 66:
  {
   i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 127](i1, i4) | 0;
   break;
  }
 case 73:
 case 70:
  {
   i1 = _Stream_ReadU32_BE(i1, i4) | 0;
   break;
  }
 case 74:
 case 68:
  {
   i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 12 >> 2] & 127](i1, 8) | 0;
   break;
  }
 case 76:
  {
   i1 = _Java_ReadObject(i1, i3) | 0;
   break;
  }
 case 91:
  {
   i1 = _Java_ReadObject(i1, i3) | 0;
   if (!i1) {
    i1 = i4 + 4 | 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i4 >> 2] = 0;
    if ((HEAP8[i3 >> 0] | 0) == 117) if ((HEAP8[(HEAP32[i3 + 4 >> 2] | 0) + 1 >> 0] | 0) == 66) {
     HEAP32[i1 >> 2] = HEAP32[i3 + 12 >> 2];
     HEAP32[i4 >> 2] = HEAP32[i3 + 8 >> 2];
     i1 = 0;
    } else i1 = 0; else i1 = 0;
   }
   break;
  }
 default:
  i1 = -857812916;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _SpecialInputWidget_DrawContent(i2, i1, i10, i12) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i13;
 i7 = HEAP32[i1 >> 2] | 0;
 _DrawTextArgs_MakeEmpty(i8, HEAP32[i2 + 88 >> 2] | 0, 0);
 i9 = i1 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 HEAP16[i8 + 4 >> 1] = i3;
 i11 = i1 + 24 | 0;
 if (HEAP16[i11 >> 1] | 0) {
  i5 = i1 + 20 | 0;
  i6 = i2 + 40 | 0;
  i4 = i2 + 44 | 0;
  i1 = i3;
  i2 = 0;
  do {
   HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
   i14 = (i2 | 0) / (i1 | 0) | 0;
   i3 = (i14 | 0) / (i7 | 0) | 0;
   i14 = i14 - (Math_imul(i3, i7) | 0) | 0;
   i14 = Math_imul(HEAP32[i6 >> 2] | 0, i14) | 0;
   _Context2D_DrawText(i10, i8, i14, (Math_imul(HEAP32[i4 >> 2] | 0, i3) | 0) + i12 | 0);
   i1 = HEAP32[i9 >> 2] | 0;
   i2 = i1 + i2 | 0;
  } while ((i2 | 0) < (HEAPU16[i11 >> 1] | 0));
 }
 STACKTOP = i13;
 return;
}

function _Bitmap_Scale(i2, i1, i13, i14, i12, i11) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i15 = 0, i16 = 0;
 i15 = i2 + 4 | 0;
 i8 = HEAP32[i15 >> 2] | 0;
 i9 = HEAP32[i2 + 8 >> 2] | 0;
 L1 : do if ((i9 | 0) > 0) {
  i10 = HEAP32[i1 >> 2] | 0;
  i7 = i1 + 4 | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  i6 = (i8 | 0) > 0;
  i2 = i8;
  i1 = 0;
  while (1) {
   i4 = ((Math_imul(i1, i11) | 0) / (i9 | 0) | 0) + i14 | 0;
   i4 = i10 + ((Math_imul(i4, HEAP32[i7 >> 2] | 0) | 0) << 2) | 0;
   i2 = i5 + ((Math_imul(i2, i1) | 0) << 2) | 0;
   if (i6) {
    i3 = 0;
    do {
     i16 = i4 + (((Math_imul(i3, i12) | 0) / (i8 | 0) | 0) + i13 << 2) | 0;
     HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i16 >> 2];
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i8 | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i9 | 0)) break L1;
   i2 = HEAP32[i15 >> 2] | 0;
  }
 } while (0);
 return;
}

function _Physics_DoFalling(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i2 = HEAP32[244739] | 0;
 if ((i2 | 0) <= (i6 | 0)) {
  i3 = HEAP32[244730] | 0;
  i1 = -1;
  i4 = i6;
  while (1) {
   i4 = i4 - i2 | 0;
   i7 = HEAP8[i3 + i4 >> 0] | 0;
   if (!(i7 << 24 >> 24 == 0 | (i7 & -4) << 24 >> 24 == 8)) break;
   if ((i4 | 0) < (i2 | 0)) {
    i1 = i4;
    break;
   } else i1 = i4;
  }
  if ((i1 | 0) != -1) {
   i2 = HEAP32[244733] | 0;
   i7 = (i1 | 0) / (i2 | 0) | 0;
   i2 = i1 - (Math_imul(i7, i2) | 0) | 0;
   i4 = HEAP32[244735] | 0;
   i3 = (i7 | 0) / (i4 | 0) | 0;
   _Game_UpdateBlock(i2, i3, i7 - (Math_imul(i3, i4) | 0) | 0, i5);
   i4 = HEAP32[244733] | 0;
   i3 = (i6 | 0) / (i4 | 0) | 0;
   i4 = i6 - (Math_imul(i3, i4) | 0) | 0;
   i7 = HEAP32[244735] | 0;
   i5 = (i3 | 0) / (i7 | 0) | 0;
   i7 = i3 - (Math_imul(i5, i7) | 0) | 0;
   _Game_UpdateBlock(i4, i5, i7, 0);
   _Physics_ActivateNeighbours(i4, i5, i7, i6);
  }
 }
 return;
}

function _Modern_GetColorYMin(i10, i8, i9, i3, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + i8 | 0;
 i6 = _Modern_IsOccluded(i7, i9, i3) | 0;
 i4 = i2 + i3 | 0;
 i1 = _Modern_IsOccluded(i8, i9, i4) | 0;
 i5 = _Modern_IsOccluded(i7, i9, i4) | 0;
 i6 = i6 << 24 >> 24 != 0;
 if (i6) i3 = _PackedCol_Scale(i10, .5) | 0; else i3 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i7, i9, i3) | 0;
 i1 = i1 << 24 >> 24 != 0;
 if (i1) i2 = _PackedCol_Scale(i10, .5) | 0; else i2 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i8, i9, i4) | 0;
 if (i5 << 24 >> 24 != 0 | i6 & i1) i1 = _PackedCol_Scale(i10, .5) | 0; else i1 = FUNCTION_TABLE_iiii[HEAP32[467176] & 63](i7, i9, i4) | 0;
 i9 = i2 ^ i3;
 i9 = ((1 ? i9 >>> 1 : i9) & 2139062143) + (i2 & i3) | 0;
 i8 = i1 ^ i10;
 i10 = ((1 ? i8 >>> 1 : i8) & 2139062143) + (i1 & i10) | 0;
 i8 = i10 ^ i9;
 return ((1 ? i8 >>> 1 : i8) & 2139062143) + (i10 & i9) | 0;
}

function _Modern_GetColorYMax(i10, i8, i9, i3, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + i8 | 0;
 i6 = _Modern_IsOccluded(i7, i9, i3) | 0;
 i4 = i2 + i3 | 0;
 i1 = _Modern_IsOccluded(i8, i9, i4) | 0;
 i5 = _Modern_IsOccluded(i7, i9, i4) | 0;
 i6 = i6 << 24 >> 24 != 0;
 if (i6) i3 = _PackedCol_Scale(i10, .5) | 0; else i3 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i7, i9, i3) | 0;
 i1 = i1 << 24 >> 24 != 0;
 if (i1) i2 = _PackedCol_Scale(i10, .5) | 0; else i2 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i8, i9, i4) | 0;
 if (i5 << 24 >> 24 != 0 | i6 & i1) i1 = _PackedCol_Scale(i10, .5) | 0; else i1 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i7, i9, i4) | 0;
 i9 = i2 ^ i3;
 i9 = ((1 ? i9 >>> 1 : i9) & 2139062143) + (i2 & i3) | 0;
 i8 = i1 ^ i10;
 i10 = ((1 ? i8 >>> 1 : i8) & 2139062143) + (i1 & i10) | 0;
 i8 = i10 ^ i9;
 return ((1 ? i8 >>> 1 : i8) & 2139062143) + (i10 & i9) | 0;
}

function _GenFragmentShader(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(i1 & 128)) _String_AppendConst(i6, 33608); else _String_AppendConst(i6, 33582);
 _String_AppendConst(i6, 33632);
 i2 = (i1 & 1 | 0) != 0;
 if (i2) {
  _String_AppendConst(i6, 33655);
  _String_AppendConst(i6, 33677);
 }
 i3 = (i1 & 24 | 0) != 0;
 if (i3) _String_AppendConst(i6, 33706);
 i4 = (i1 & 8 | 0) != 0;
 if (i4) _String_AppendConst(i6, 33728);
 i5 = (i1 & 16 | 0) != 0;
 if (i5) _String_AppendConst(i6, 33751);
 _String_AppendConst(i6, 33778);
 if (i2) _String_AppendConst(i6, 33793); else _String_AppendConst(i6, 33846);
 if (i1 & 2 | 0) _String_AppendConst(i6, 33869);
 if (i3) _String_AppendConst(i6, 33898);
 if (i4) _String_AppendConst(i6, 33937);
 if (i5) _String_AppendConst(i6, 33989);
 if (i3) {
  _String_AppendConst(i6, 34044);
  _AddPostProcessing(i6);
 }
 _String_AppendConst(i6, 34082);
 _String_AppendConst(i6, 34105);
 return;
}

function _Modern_GetColorZ(i10, i8, i3, i9, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + i8 | 0;
 i6 = _Modern_IsOccluded(i7, i3, i9) | 0;
 i4 = i2 + i3 | 0;
 i1 = _Modern_IsOccluded(i8, i4, i9) | 0;
 i5 = _Modern_IsOccluded(i7, i4, i9) | 0;
 i6 = i6 << 24 >> 24 != 0;
 if (i6) i3 = _PackedCol_Scale(i10, .5) | 0; else i3 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i7, i3, i9) | 0;
 i1 = i1 << 24 >> 24 != 0;
 if (i1) i2 = _PackedCol_Scale(i10, .5) | 0; else i2 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i8, i4, i9) | 0;
 if (i5 << 24 >> 24 != 0 | i6 & i1) i1 = _PackedCol_Scale(i10, .5) | 0; else i1 = FUNCTION_TABLE_iiii[HEAP32[467178] & 63](i7, i4, i9) | 0;
 i9 = i2 ^ i3;
 i9 = ((1 ? i9 >>> 1 : i9) & 2139062143) + (i2 & i3) | 0;
 i8 = i1 ^ i10;
 i10 = ((1 ? i8 >>> 1 : i8) & 2139062143) + (i1 & i10) | 0;
 i8 = i10 ^ i9;
 return ((1 ? i8 >>> 1 : i8) & 2139062143) + (i10 & i9) | 0;
}

function _Modern_GetColorX(i10, i9, i8, i3, i1, i2) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + i8 | 0;
 i6 = _Modern_IsOccluded(i9, i7, i3) | 0;
 i4 = i2 + i3 | 0;
 i1 = _Modern_IsOccluded(i9, i8, i4) | 0;
 i5 = _Modern_IsOccluded(i9, i7, i4) | 0;
 i6 = i6 << 24 >> 24 != 0;
 if (i6) i3 = _PackedCol_Scale(i10, .5) | 0; else i3 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i9, i7, i3) | 0;
 i1 = i1 << 24 >> 24 != 0;
 if (i1) i2 = _PackedCol_Scale(i10, .5) | 0; else i2 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i9, i8, i4) | 0;
 if (i5 << 24 >> 24 != 0 | i6 & i1) i1 = _PackedCol_Scale(i10, .5) | 0; else i1 = FUNCTION_TABLE_iiii[HEAP32[467177] & 63](i9, i7, i4) | 0;
 i9 = i2 ^ i3;
 i9 = ((1 ? i9 >>> 1 : i9) & 2139062143) + (i2 & i3) | 0;
 i8 = i1 ^ i10;
 i10 = ((1 ? i8 >>> 1 : i8) & 2139062143) + (i1 & i10) | 0;
 i8 = i10 ^ i9;
 return ((1 ? i8 >>> 1 : i8) & 2139062143) + (i10 & i9) | 0;
}

function _OnEnvVariableChanged(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 L1 : do switch (i1 | 0) {
 case 0:
  {
   _MakeBorderTex(1675380, HEAP16[933854] | 0);
   _DeleteEdgesVB();
   break;
  }
 case 1:
  {
   _MakeBorderTex(1675384, HEAP16[933855] | 0);
   _DeleteSidesVB();
   break;
  }
 default:
  {
   if ((i1 | 1 | 0) == 3) {
    _DeleteEdgesVB();
    _DeleteSidesVB();
    break L1;
   }
   switch (i1 | 0) {
   case 15:
    {
     _DeleteEdgesVB();
     break L1;
    }
   case 16:
    {
     _DeleteSidesVB();
     break L1;
    }
   case 12:
    {
     _UpdateFogBlend();
     _DeleteSkyVB();
     break L1;
    }
   case 14:
    {
     _UpdateFogBlend();
     _EnvRenderer_UpdateFog();
     break L1;
    }
   case 13:
    {
     _DeleteCloudsVB();
     break L1;
    }
   case 4:
    {
     _DeleteSkyVB();
     _DeleteCloudsVB();
     break L1;
    }
   case 17:
    {
     _DeleteSkyboxVB();
     break L1;
    }
   default:
    break L1;
   }
  }
 } while (0);
 return;
}

function _PerspectiveCamera_GetMouseDelta(i4, d2) {
 i4 = i4 | 0;
 d2 = +d2;
 var d1 = 0.0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 d5 = +(HEAP32[414138] | 0) * 3.8197184912860394e-03;
 i3 = HEAP32[244563] | 0;
 d1 = +HEAPF32[1656676 + (i3 << 3) >> 2];
 do if (!(HEAP8[1656556] | 0)) {
  HEAPF32[414171] = d1;
  i3 = HEAP32[1656676 + (i3 << 3) + 4 >> 2] | 0;
  HEAP32[414172] = i3;
  d2 = (HEAP32[tempDoublePtr >> 2] = i3, +HEAPF32[tempDoublePtr >> 2]);
 } else {
  d7 = +HEAPF32[414171];
  d8 = +HEAPF32[414162];
  d6 = +HEAPF32[414172];
  d1 = d7 + (d1 - d7) * 35.0 / d8 * d2;
  d2 = d6 + (+HEAPF32[1656676 + (i3 << 3) + 4 >> 2] - d6) * 35.0 / d8 * d2;
  d1 = d7 * d1 < 0.0 ? 0.0 : d1;
  HEAPF32[414171] = d1;
  if (d6 * d2 < 0.0) {
   HEAPF32[414172] = 0.0;
   d2 = 0.0;
   break;
  } else {
   HEAPF32[414172] = d2;
   break;
  }
 } while (0);
 d8 = d5 * d2;
 d8 = (HEAP8[1656558] | 0) == 0 ? d8 : -d8;
 HEAPF32[i4 >> 2] = d5 * d1;
 HEAPF32[i4 + 4 >> 2] = d8;
 return;
}

function _StringsBuffer_Add(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = i7 + 20 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  _StringsBuffer_Init(i7);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 i6 = i7 + 8 | 0;
 if ((HEAP32[i6 >> 2] | 0) == (i1 | 0)) _Utils_Resize(i7 + 4 | 0, i2, 4, 256, 512);
 i5 = i8 + 4 | 0;
 i1 = HEAPU16[i5 >> 1] | 0;
 if ((HEAP32[i7 + 5148 >> 2] | 0) < (i1 | 0)) {
  _Process_Abort2(0, 49342);
  i1 = HEAPU16[i5 >> 1] | 0;
 }
 i4 = i7 + 12 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = i7 + 16 | 0;
 if ((i3 + i1 | 0) >= (HEAP32[i2 >> 2] | 0)) {
  _Utils_Resize(i7, i2, 1, 4096, 8192);
  i1 = HEAPU16[i5 >> 1] | 0;
 }
 _Mem_Copy((HEAP32[i7 >> 2] | 0) + i3 | 0, HEAP32[i8 >> 2] | 0, i1) | 0;
 i8 = HEAPU16[i5 >> 1] | 0;
 HEAP32[(HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = i3 << HEAP32[i7 + 5144 >> 2] | i8;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i8;
 return;
}

function _OutputChunkPartsMeta(i1, i2, i3, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i4 = Math_imul(HEAP32[244751] | 0, 4 ? i3 >> 4 : i3) | 0;
 i4 = Math_imul(i4 + (4 ? i2 >> 4 : i2) | 0, HEAP32[244750] | 0) | 0;
 i1 = i4 + (4 ? i1 >> 4 : i1) | 0;
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[424247] | 0) > 0) {
  i2 = 0;
  i3 = 0;
  i4 = 0;
  do {
   i8 = (Math_imul(HEAP32[244753] | 0, i4) | 0) + i1 | 0;
   i2 = _SetPartInfo(110944 + (i4 << 5) | 0, i6, (HEAP32[424256] | 0) + (i8 * 20 | 0) | 0) | 0 | i2;
   i3 = _SetPartInfo(110944 + (i4 + 512 << 5) | 0, i6, (HEAP32[424257] | 0) + (i8 * 20 | 0) | 0) | 0 | i3;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[424247] | 0));
  if (i2 << 24 >> 24) HEAP32[i5 + 12 >> 2] = (HEAP32[424256] | 0) + (i1 * 20 | 0);
  if (i3 << 24 >> 24) HEAP32[i5 + 16 >> 2] = (HEAP32[424257] | 0) + (i1 * 20 | 0);
 }
 STACKTOP = i7;
 return;
}

function _CPE_SendCpeExtInfoReply() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7 + 8 | 0;
 i5 = i7;
 if (!(HEAP32[454524] | 0)) {
  _CPE_SendExtInfo((HEAP8[1868756] | 0) == 0 ? 37 : 40);
  i3 = 0;
  do {
   i2 = HEAP32[7056 + (i3 << 2) >> 2] | 0;
   _String_FromReadonly(i5, HEAP32[i2 >> 2] | 0);
   i9 = i5;
   i8 = HEAP32[i9 + 4 >> 2] | 0;
   i1 = i4;
   HEAP32[i1 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i1 + 4 >> 2] = i8;
   i1 = HEAP8[i2 + 5 >> 0] | 0;
   if (!(i1 << 24 >> 24)) i1 = HEAP8[i2 + 4 >> 0] | 0;
   i1 = i1 & 255;
   if (!(HEAP8[1868756] | 0)) {
    if (!(_String_CaselessEqualsConst(i4, 46739) | 0)) if (!(_String_CaselessEqualsConst(i4, 47148) | 0)) if (!(_String_CaselessEqualsConst(i4, 46724) | 0)) i6 = 9;
   } else i6 = 9;
   if ((i6 | 0) == 9) {
    i6 = 0;
    _CPE_SendExtEntry(i4, i1);
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 40);
 }
 STACKTOP = i7;
 return;
}

function _Dat_Save(i4) {
 i4 = i4 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _Stream_Write(i4, 32014, 9) | 0;
 L1 : do if (!i1) {
  i1 = _WriteClassDesc(i4, 115, 32023, 7, 3488) | 0;
  if (!i1) {
   i3 = 0;
   while (1) {
    if ((i3 | 0) == 6) {
     i1 = _WriteClassDesc(i4, 117, 32056, 0, 0) | 0;
     if (i1 | 0) break L1;
     _Stream_SetU32_BE(i5, HEAP32[244732] | 0);
     i1 = _Stream_Write(i4, i5, 4) | 0;
     if (i1 | 0) break L1;
     i1 = _WriteLevelBlocks(i4) | 0;
     if (i1 | 0) break L1;
    } else {
     i1 = HEAP32[3488 + (i3 * 12 | 0) + 8 >> 2] | 0;
     if ((i3 + -3 | 0) >>> 0 < 3) d2 = +HEAPF32[i1 >> 2]; else d2 = +(HEAP32[i1 >> 2] | 0);
     _Stream_SetU32_BE(i5, ~~d2);
     i1 = _Stream_Write(i4, i5, 4) | 0;
     if (i1 | 0) break L1;
    }
    i3 = i3 + 1 | 0;
    if (i3 >>> 0 >= 7) {
     i1 = 0;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _Options_UNSAFE_Get(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i6 + 24 | 0;
 i8 = i6 + 16 | 0;
 i3 = i6 + 8 | 0;
 i4 = i6;
 _String_FromReadonly(i2, i1);
 _EntryList_UNSAFE_Get(i8, 1716580, i2, 61);
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = i5;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = i1;
 if (0 == 0 & (i1 & 65535 | 0) == 0) {
  i1 = _String_IndexOfAt(i2, 0, 45) | 0;
  if ((i1 | 0) == -1) i1 = 0; else {
   _String_UNSAFE_SubstringAt(i3, i2, i1 + 1 | 0);
   i8 = i3;
   i1 = HEAP32[i8 + 4 >> 2] | 0;
   i7 = i2;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i7 + 4 >> 2] = i1;
   _EntryList_UNSAFE_Get(i4, 1716580, i2, 61);
   i7 = i4;
   i1 = HEAP32[i7 + 4 >> 2] | 0;
   i8 = i5;
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i8 + 4 >> 2] = i1;
   i1 = (0 != 0 | (i1 & 65535 | 0) != 0) & 1;
  }
 } else i1 = 1;
 STACKTOP = i6;
 return i1 | 0;
}

function _Entity_SetModel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i9 + 8 | 0;
 i4 = i9 + 16 | 0;
 i5 = i9;
 i6 = i1 + 80 | 0;
 HEAPF32[i6 >> 2] = 1.0;
 i7 = i1 + 84 | 0;
 HEAPF32[i7 >> 2] = 1.0;
 i8 = i1 + 88 | 0;
 HEAPF32[i8 >> 2] = 1.0;
 _String_UNSAFE_Separate(i2, 124, i3, i4) | 0;
 if (_String_CaselessEqualsConst(i3, 30686) | 0) {
  _String_FromReadonly(i5, 46302);
  i10 = i5;
  i2 = HEAP32[i10 + 4 >> 2] | 0;
  i5 = i3;
  HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i5 + 4 >> 2] = i2;
  HEAPF32[i6 >> 2] = 2.0;
  HEAPF32[i7 >> 2] = 2.0;
  HEAPF32[i8 >> 2] = 2.0;
 }
 HEAP16[i1 + 52 >> 1] = 0;
 i10 = _Model_Get(i3) | 0;
 HEAP32[i1 + 48 >> 2] = i10;
 if (!i10) _Entity_SetBlockModel(i1, i3);
 _Entity_ParseScale(i1, i4);
 _Entity_UpdateModelBounds(i1);
 if (HEAP8[i1 + 54 >> 0] & 2) _Gfx_DeleteDynamicVb(i1 + 416 | 0);
 STACKTOP = i9;
 return;
}

function _LoadingScreen_Render(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 _Gfx_SetVertexFormat(1);
 _Gfx_BindDynamicVb(HEAP32[i3 + 12 >> 2] | 0);
 i2 = i3 + 52 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) i2 = 0; else {
  i4 = HEAPU16[523945] | 0;
  i5 = HEAP32[460410] | 0;
  _Atlas1D_Bind(i5 ? i4 >>> i5 : i4);
  _Gfx_DrawVb_IndexedTris_Range(HEAP32[i2 >> 2] << 2, 0, 2);
  i2 = HEAP32[i2 >> 2] << 2;
 }
 i7 = i3 + 72 | 0;
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7, i2) | 0;
 i4 = i3 + 144 | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, i7) | 0;
 i7 = HEAP32[i3 + 64 >> 2] | 0;
 i4 = ~~(+HEAPF32[i3 + 48 >> 2] * +(i7 | 0));
 i6 = i3 + 56 | 0;
 i2 = i3 + 60 | 0;
 i5 = i3 + 68 | 0;
 _Gfx_Draw2DFlat(HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0, i7, HEAP32[i5 >> 2] | 0, -8355712);
 _Gfx_Draw2DFlat(HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0, i4, HEAP32[i5 >> 2] | 0, -8323200);
 return;
}

function _GenLevelScreen_Make(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i7 = i8 + 80 | 0;
 i4 = i8 + 64 | 0;
 if ((i5 | 0) == 3) {
  HEAP32[i4 >> 2] = 22840;
  i1 = 2147483647;
  i2 = -2147483648;
  i3 = 22840;
 } else {
  HEAP32[i4 >> 2] = 22816;
  HEAP32[i4 + 12 >> 2] = i1;
  i1 = 8192;
  i2 = 1;
  i3 = 22816;
 }
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i7 >> 2] = i8;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 64;
 FUNCTION_TABLE_vii[HEAP32[i3 + 16 >> 2] & 255](i4, i7);
 _TextWidget_Add(i6, i6 + 1500 + (i5 * 72 | 0) | 0);
 HEAP32[i6 + 1500 + (i5 * 72 | 0) + 68 >> 2] = -2039584;
 _TextInputWidget_Add(i6, i6 + 300 + (i5 * 300 | 0) | 0, 200, i7, i4);
 HEAP8[i6 + 300 + (i5 * 300 | 0) + 146 >> 0] = 0;
 HEAP32[i6 + 300 + (i5 * 300 | 0) + 296 >> 2] = 3;
 HEAP32[i6 + 300 + (i5 * 300 | 0) + 36 >> 2] = 1e4;
 STACKTOP = i8;
 return;
}

function _EntityShadow_DrawSquareShadow(i1, d3, d2, d4) {
 i1 = i1 | 0;
 d3 = +d3;
 d2 = +d2;
 d4 = +d4;
 var i5 = 0, d6 = 0.0;
 i5 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i5 >> 2] = d2;
 HEAPF32[i5 + 4 >> 2] = d3;
 HEAPF32[i5 + 8 >> 2] = d4;
 HEAP32[i5 + 12 >> 2] = -587202561;
 HEAPF32[i5 + 16 >> 2] = .4921875;
 HEAPF32[i5 + 20 >> 2] = .4921875;
 d6 = d2 + 1.0;
 HEAPF32[i5 + 24 >> 2] = d6;
 HEAPF32[i5 + 28 >> 2] = d3;
 HEAPF32[i5 + 32 >> 2] = d4;
 HEAP32[i5 + 36 >> 2] = -587202561;
 HEAPF32[i5 + 40 >> 2] = .5;
 HEAPF32[i5 + 44 >> 2] = .4921875;
 HEAPF32[i5 + 48 >> 2] = d6;
 HEAPF32[i5 + 52 >> 2] = d3;
 d4 = d4 + 1.0;
 HEAPF32[i5 + 56 >> 2] = d4;
 HEAP32[i5 + 60 >> 2] = -587202561;
 HEAPF32[i5 + 64 >> 2] = .5;
 HEAPF32[i5 + 68 >> 2] = .5;
 HEAPF32[i5 + 72 >> 2] = d2;
 HEAPF32[i5 + 76 >> 2] = d3;
 HEAPF32[i5 + 80 >> 2] = d4;
 HEAP32[i5 + 84 >> 2] = -587202561;
 HEAPF32[i5 + 88 >> 2] = .4921875;
 HEAPF32[i5 + 92 >> 2] = .5;
 HEAP32[i1 >> 2] = i5 + 96;
 return;
}

function _ChickenModel_Draw(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[428680] | 0;
 _Model_ApplyTexture(i2);
 _Model_LockVB(0, 160);
 i3 = i2 + 16 | 0;
 _Model_DrawRotate(+HEAPF32[i3 >> 2] * -.01745329238474369, 0.0, 0.0, 1716432, 1);
 _Model_DrawRotate(+HEAPF32[i3 >> 2] * -.01745329238474369, 0.0, 0.0, 1716448, 1);
 _Model_DrawRotate(+HEAPF32[i3 >> 2] * -.01745329238474369, 0.0, 0.0, 1716464, 1);
 _Model_DrawPart(1716480);
 i3 = i2 + 180 | 0;
 _Model_DrawRotate(0.0, 0.0, -+Math_abs(+(+HEAPF32[i3 >> 2])), 1716496, 0);
 _Model_DrawRotate(0.0, 0.0, +Math_abs(+(+HEAPF32[i3 >> 2])), 1716512, 0);
 i3 = 0;
 do {
  i4 = _PackedCol_Scale(i1, .699999988079071) | 0;
  HEAP32[1714720 + (i3 << 2) >> 2] = i4;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 6);
 _Model_DrawRotate(+HEAPF32[i2 + 164 >> 2], 0.0, 0.0, 1716528, 0);
 _Model_DrawRotate(+HEAPF32[i2 + 172 >> 2], 0.0, 0.0, 1716544, 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(160);
 return;
}

function _Stream_BufferedRead(i4, i7, i6, i9) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11;
 i5 = i4 + 32 | 0;
 i8 = i4 + 36 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 if (!i2) {
  i2 = HEAP32[i4 + 48 >> 2] | 0;
  i1 = HEAP32[i4 + 44 >> 2] | 0;
  HEAP32[i5 >> 2] = i1;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 63](i2, i1, HEAP32[i4 + 40 >> 2] | 0, i3) | 0;
  if (!i1) {
   i2 = HEAP32[i3 >> 2] | 0;
   HEAP32[i8 >> 2] = i2;
   i1 = i4 + 52 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i2;
   i1 = i5;
   i10 = 5;
  }
 } else {
  i1 = i5;
  i10 = 5;
 }
 if ((i10 | 0) == 5) {
  i10 = i2 >>> 0 > i6 >>> 0 ? i6 : i2;
  _Mem_Copy(i7, HEAP32[i1 >> 2] | 0, i10) | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i10;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - i10;
  HEAP32[i9 >> 2] = i10;
  i1 = 0;
 }
 STACKTOP = i11;
 return i1 | 0;
}

function _BlockDefs_DefineBlockExt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _BlockDefs_DefineBlockCommonStart(i3, (HEAPU8[21293] | 0) > 1 & 1) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 d9 = +(HEAP8[i3 + 1 >> 0] | 0) * .0625;
 d8 = +(HEAP8[i3 + 2 >> 0] | 0) * .0625;
 d7 = +(HEAP8[i3 + 3 >> 0] | 0) * .0625;
 d6 = +(HEAP8[i3 + 4 >> 0] | 0) * .0625;
 d5 = +(HEAP8[i3 + 5 >> 0] | 0) * .0625;
 i4 = i1 & 65535;
 HEAPF32[1010980 + (i4 * 12 | 0) >> 2] = +(HEAP8[i3 >> 0] | 0) * .0625;
 HEAPF32[1010980 + (i4 * 12 | 0) + 4 >> 2] = d9;
 HEAPF32[1010980 + (i4 * 12 | 0) + 8 >> 2] = d8;
 HEAPF32[1020196 + (i4 * 12 | 0) >> 2] = d7;
 HEAPF32[1020196 + (i4 * 12 | 0) + 4 >> 2] = d6;
 HEAPF32[1020196 + (i4 * 12 | 0) + 8 >> 2] = d5;
 _BlockDefs_DefineBlockCommonEnd(i3 + 6 | 0, 1, i1);
 _Block_DefineCustom(i1, 0);
 STACKTOP = i2;
 return;
}

function _String_CaselessContains(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i1 = HEAP16[i7 + 4 >> 1] | 0;
 L1 : do if (!(i1 << 16 >> 16)) i1 = 0; else {
  i4 = i1 & 65535;
  i3 = HEAP16[i8 + 4 >> 1] | 0;
  i5 = i3 & 65535;
  i3 = i3 << 16 >> 16 == 0;
  i6 = 0;
  while (1) {
   L5 : do if (i3) i1 = 0; else {
    i1 = 0;
    do {
     i2 = i1 + i6 | 0;
     if (i2 >>> 0 >= i4 >>> 0) break L5;
     i9 = HEAP8[(HEAP32[i7 >> 2] | 0) + i2 >> 0] | 0;
     i2 = HEAP8[(HEAP32[i8 >> 2] | 0) + i1 >> 0] | 0;
     if (((i9 + -65 & 255) < 26 ? (i9 & 255) + 32 & 255 : i9) << 24 >> 24 != ((i2 + -65 & 255) < 26 ? (i2 & 255) + 32 & 255 : i2) << 24 >> 24) break L5;
     i1 = i1 + 1 | 0;
    } while (i1 >>> 0 < i5 >>> 0);
   } while (0);
   i6 = i6 + 1 | 0;
   if ((i1 | 0) == (i5 | 0)) {
    i1 = 1;
    break L1;
   }
   if (i6 >>> 0 >= i4 >>> 0) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _InventoryScreen_KeyDown(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i5 = i4 + 48 | 0;
 if (!((_InputBind_Claims(8, i3, i2) | 0) << 24 >> 24)) i6 = 4; else if ((HEAP8[i4 + 2836 >> 0] | 0) == 0 | (HEAP8[1868754] | 0) != 0) i6 = 4; else {
  _Gui_Remove(i4);
  _CPE_SendNotifyAction(1, 0);
  i1 = 1;
 }
 do if ((i6 | 0) == 4) {
  if ((HEAP32[i2 + 32 >> 2] | 0) == (i3 | 0)) i6 = 6; else if ((HEAP32[i2 + 36 >> 2] | 0) == (i3 | 0)) i6 = 6;
  if ((i6 | 0) == 6) {
   i1 = HEAP32[i4 + 108 >> 2] | 0;
   if ((i1 | 0) != -1) {
    _Inventory_SetSelectedBlock(HEAP16[i4 + 140 + (i1 << 1) >> 1] | 0);
    _Gui_Remove(i4);
    _CPE_SendNotifyAction(1, 0);
    i1 = 1;
    break;
   }
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 63](i5, i3, i2) | 0)) i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[1818496 >> 2] | 0) + 12 >> 2] & 63](1818496, i3, i2) | 0; else i1 = 1;
 } while (0);
 return i1 | 0;
}

function _Dat_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 44816 | 0;
 i3 = i4 + 44800 | 0;
 i2 = i4 + 44744 | 0;
 _Inflate_MakeStream2(i2, i4, i1);
 i1 = _Map_SkipGZipHeader(i1) | 0;
 L1 : do if (!i1) {
  i1 = _Stream_Read(i2, i3, 5) | 0;
  if (!i1) {
   i1 = _Stream_GetU32_BE(i3) | 0;
   if ((i1 | 0) < 656127880) {
    switch (i1 | 0) {
    case 16843009:
     break;
    default:
     {
      i1 = -857812930;
      break L1;
     }
    }
    i1 = _Dat_LoadFormat0(i2) | 0;
    break;
   }
   switch (i1 | 0) {
   case 656127880:
    break;
   default:
    {
     i1 = -857812930;
     break L1;
    }
   }
   switch (HEAP8[i3 + 4 >> 0] | 0) {
   case 1:
    {
     i1 = _Dat_LoadFormat1(i2) | 0;
     break L1;
    }
   case 2:
    {
     i1 = _Dat_LoadFormat2(i2) | 0;
     break L1;
    }
   default:
    {
     i1 = -857812929;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function _Cw_Callback_1(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 8 | 0;
 do if (!(_String_CaselessEqualsConst(i1, 35643) | 0)) {
  if (_String_CaselessEqualsConst(i1, 35645) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[244734] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 35647) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[244735] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31538) | 0) if ((HEAP32[i2 + 16 >> 2] | 0) == 16) {
   _Mem_Copy(978960, i2 + 20 | 0, 16) | 0;
   break;
  } else {
   HEAP32[i2 + 220 >> 2] = -857812909;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31543) | 0) {
   HEAP32[244732] = HEAP32[i2 + 16 >> 2];
   i3 = _Nbt_TakeArray(i2, 31554) | 0;
   HEAP32[244730] = i3;
  }
  if (_String_CaselessEqualsConst(i1, 31569) | 0) _World_SetMapUpper(_Nbt_TakeArray(i2, 31581) | 0);
 } else {
  i3 = (_NbtTag_U16(i2) | 0) & 65535;
  HEAP32[244733] = i3;
 } while (0);
 return;
}

function _Classic_WritePosition(i2, i6, d8, d7) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 d8 = +d8;
 d7 = +d7;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = i2 + 1 | 0;
 HEAP8[i2 >> 0] = 8;
 if (!(HEAP8[21405] | 0)) i1 = 255; else i1 = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
 if (!(HEAP8[21301] | 0)) HEAP8[i3 >> 0] = i1; else {
  _Stream_SetU16_BE(i3, i1);
  i2 = i3;
 }
 i5 = i2 + 2 | 0;
 i4 = ~~(+HEAPF32[i6 >> 2] * 32.0);
 i3 = ~~(+HEAPF32[i6 + 4 >> 2] * 32.0) + 51 | 0;
 i1 = ~~(+HEAPF32[i6 + 8 >> 2] * 32.0);
 if (!(HEAP8[21317] | 0)) {
  _Stream_SetU16_BE(i5, i4 & 65535);
  _Stream_SetU16_BE(i2 + 4 | 0, i3 & 65535);
  _Stream_SetU16_BE(i2 + 6 | 0, i1 & 65535);
  i1 = 8;
 } else {
  _Stream_SetU32_BE(i5, i4);
  _Stream_SetU32_BE(i2 + 6 | 0, i3);
  _Stream_SetU32_BE(i2 + 10 | 0, i1);
  i1 = 14;
 }
 i6 = i2 + i1 | 0;
 HEAP8[i6 >> 0] = ~~(d8 * 256.0 / 360.0);
 HEAP8[i6 + 1 >> 0] = ~~(d7 * 256.0 / 360.0);
 return i6 + 2 | 0;
}

function _DoSaveMap(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i6 + 56 | 0;
 i3 = i6;
 i1 = _Stream_CreateFile(i4, i5) | 0;
 do if (!i1) {
  _GZip_MakeStream(i3, i2, i4);
  do if (!(_String_CaselessEnds(i5, 15860) | 0)) if (!(_String_CaselessEnds(i5, 15868) | 0)) {
   i1 = _Cw_Save(i3) | 0;
   break;
  } else {
   i1 = _Dat_Save(i3) | 0;
   break;
  } else i1 = _Schematic_Save(i3) | 0; while (0);
  if (i1 | 0) {
   FUNCTION_TABLE_ii[HEAP32[i4 + 28 >> 2] & 63](i4) | 0;
   _Logger_SysWarn2(i1, 43585, i5);
   break;
  }
  i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 28 >> 2] & 63](i3) | 0;
  i2 = FUNCTION_TABLE_ii[HEAP32[i4 + 28 >> 2] & 63](i4) | 0;
  if (i1 | 0) {
   _Logger_SysWarn2(i1, 51467, i5);
   break;
  }
  if (!i2) i1 = 0; else {
   _Logger_SysWarn2(i2, 51467, i5);
   i1 = i2;
  }
 } else _Logger_SysWarn2(i1, 51447, i5); while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _TickQueue_Resize(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) > 536870910) {
  _Chat_AddRaw(25256);
  _TickQueue_Clear(i10);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i8 = i1 << 1;
 i8 = (i8 | 0) > 32 ? i8 : 32;
 i6 = _Mem_Alloc(i8, 4, 25293) | 0;
 i7 = i10 + 12 | 0;
 if ((HEAP32[i7 >> 2] | 0) > 0) {
  i3 = i10 + 16 | 0;
  i5 = i10 + 8 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  i1 = 0;
  do {
   HEAP32[i6 + (i1 << 2) >> 2] = HEAP32[i2 + (((HEAP32[i3 >> 2] | 0) + i1 & HEAP32[i5 >> 2]) << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i7 >> 2] | 0));
  i4 = i10;
  i1 = i5;
 } else {
  i4 = i10;
  i2 = HEAP32[i10 >> 2] | 0;
  i3 = i10 + 16 | 0;
  i1 = i10 + 8 | 0;
 }
 _Mem_Free(i2);
 HEAP32[i4 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i1 >> 2] = i8 + -1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = HEAP32[i7 >> 2];
 return;
}

function _OnInputUp(i1, i5, i2, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 do if ((i5 | 0) == 92) {
  i1 = _Gui_GetClosable() | 0;
  if (!i1) i3 = 6; else if (!(HEAP8[1868785] | 0)) {
   _Gui_Remove(i1);
   break;
  } else {
   HEAP8[1868785] = 0;
   break;
  }
 } else i3 = 6; while (0);
 if ((i3 | 0) == 6) {
  if ((HEAP32[422372] | 0) > 0) {
   i1 = 0;
   do {
    i3 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
    HEAP8[i3 + 7 >> 0] = 1;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 31](i3, i5, i4);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[422372] | 0));
  }
  i2 = 0;
  do {
   if ((_InputBind_Claims(i2, i5, i4) | 0) << 24 >> 24) {
    i1 = 357264 + i2 | 0;
    HEAP8[i1 >> 0] = (HEAP32[i4 >> 2] ^ 255) & HEAPU8[i1 >> 0];
    i1 = HEAP32[357536 + (i2 << 2) >> 2] | 0;
    if (i1 | 0) FUNCTION_TABLE_vii[i1 & 255](i5, i4);
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 50);
 }
 return;
}

function _CPE_SetTextHotkey(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 i5 = i6 + 8 | 0;
 _UNSAFE_GetString(i4, i2 + 64 | 0);
 i1 = _Stream_GetU32_BE(i2 + 128 | 0) | 0;
 HEAP8[i5 >> 0] = HEAP8[i2 + 132 >> 0] | 0;
 do if (i1 >>> 0 <= 255) {
  i3 = HEAP8[6160 + i1 >> 0] | 0;
  i2 = i3 & 255;
  if (i3 << 24 >> 24) {
   _Platform_Log3(46836, HEAP32[5008 + (i2 << 2) >> 2] | 0, i5, i4);
   i3 = i4 + 4 | 0;
   i1 = HEAP16[i3 >> 1] | 0;
   if (!(i1 << 16 >> 16)) {
    _Hotkeys_Remove(i2, HEAP8[i5 >> 0] | 0) | 0;
    _StoredHotkeys_Load(i2, HEAP8[i5 >> 0] | 0);
    break;
   }
   if ((HEAP8[(HEAP32[i4 >> 2] | 0) + ((i1 & 65535) + -1) >> 0] | 0) == 10) {
    HEAP16[i3 >> 1] = i1 + -1 << 16 >> 16;
    _Hotkeys_Add(i2, HEAP8[i5 >> 0] | 0, i4, 2);
    break;
   } else {
    _Hotkeys_Add(i2, HEAP8[i5 >> 0] | 0, i4, 3);
    break;
   }
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _PerspectiveCamera_UpdateMouseRotation(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i7 + 8 | 0;
 i5 = i7;
 _PerspectiveCamera_GetMouseDelta(i5, d1);
 if (!((HEAP8[1868517] | HEAP8[1868516]) << 24 >> 24)) i2 = 4; else if (!(HEAP8[HEAP32[414161] >> 0] | 0)) i2 = 4; else {
  HEAPF32[414167] = +HEAPF32[i5 >> 2] + +HEAPF32[414167];
  HEAPF32[414168] = +HEAPF32[i5 + 4 >> 2] + +HEAPF32[414168];
 }
 if ((i2 | 0) == 4) {
  HEAP8[i6 + 28 >> 0] = 6;
  HEAPF32[i6 + 16 >> 2] = +HEAPF32[i4 + 400 >> 2] + +HEAPF32[i5 >> 2];
  i2 = i4 + 396 | 0;
  i3 = i6 + 12 | 0;
  d1 = +_Math_ClampAngle(+HEAPF32[i2 >> 2] + +HEAPF32[i5 + 4 >> 2]);
  HEAPF32[i3 >> 2] = d1;
  if (!(!(d1 >= 90.0) | !(d1 <= 270.0))) HEAPF32[i3 >> 2] = +HEAPF32[i2 >> 2] < 180.0 ? 90.0 : 270.0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 255](i4, i6);
 }
 STACKTOP = i7;
 return;
}

function _ChatInputWidget_UpKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) {
  i2 = i4 + 204 | 0;
  i1 = HEAP32[415517] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
   _String_Copy(i4 + 208 | 0, i4 + 64 | 0);
   i1 = HEAP32[415517] | 0;
  }
  if (i1 | 0) {
   i6 = HEAP32[i2 >> 2] | 0;
   i1 = i6 + -1 | 0;
   HEAP32[i2 >> 2] = i1;
   HEAP16[i4 + 68 >> 1] = 0;
   if ((i6 | 0) < 1) {
    HEAP32[i2 >> 2] = 0;
    i1 = 0;
   }
   _StringsBuffer_UNSAFE_Get(i3, 1662060, i1);
   _String_AppendString(i4 + 64 | 0, i3);
   HEAP32[i4 + 160 >> 2] = -1;
   _InputWidget_UpdateText(i4);
  }
 } else {
  i2 = i4 + 160 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) i1 = HEAPU16[i4 + 68 >> 1] | 0;
  if ((i1 | 0) >= 64) {
   HEAP32[i2 >> 2] = i1 + -64;
   _InputWidget_UpdateCaret(i4);
  }
 }
 STACKTOP = i5;
 return;
}

function _InitChunks() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[244735] | 0;
 if ((i1 | 0) > 0) {
  i2 = HEAP32[244734] | 0;
  i3 = 0;
  i6 = 0;
  do {
   if ((i2 | 0) > 0) {
    i1 = HEAP32[244733] | 0;
    i5 = 0;
    do {
     if ((i1 | 0) > 0) {
      i4 = HEAP32[424252] | 0;
      i2 = 0;
      do {
       _ChunkInfo_Init(i4 + (i3 * 20 | 0) | 0, i2, i5, i6);
       i4 = HEAP32[424252] | 0;
       i1 = i4 + (i3 * 20 | 0) | 0;
       HEAP32[(HEAP32[424253] | 0) + (i3 << 2) >> 2] = i1;
       HEAP32[(HEAP32[424254] | 0) + (i3 << 2) >> 2] = i1;
       HEAP32[(HEAP32[424255] | 0) + (i3 << 2) >> 2] = 0;
       i3 = i3 + 1 | 0;
       i2 = i2 + 16 | 0;
       i1 = HEAP32[244733] | 0;
      } while ((i2 | 0) < (i1 | 0));
      i2 = HEAP32[244734] | 0;
     }
     i5 = i5 + 16 | 0;
    } while ((i5 | 0) < (i2 | 0));
    i1 = HEAP32[244735] | 0;
   }
   i6 = i6 + 16 | 0;
  } while ((i6 | 0) < (i1 | 0));
 }
 return;
}

function _AR_CalcGroup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP16[i1 + 4 >> 1] | 0;
 if ((i3 & 65535) > 1) {
  i1 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP8[i1 + 1 >> 0] | 0;
  i2 = i6 << 24 >> 24;
  i2 = (i6 + -65 & 255) < 26 ? i2 + 32 | 0 : i2;
  if (i3 << 16 >> 16 == 2) i1 = 0; else i1 = HEAP8[i1 + 2 >> 0] | 0;
 } else {
  i1 = 0;
  i2 = 0;
 }
 i6 = ((i1 + -65 | 0) >>> 0 < 26 ? i1 + 32 | 0 : i1) & 255;
 i5 = i2 << 24;
 i1 = (i5 | 0) == 1845493760;
 i2 = i6 << 24 >> 24 == 101;
 if ((i1 | (i5 | 0) == 1929379840) & (i6 << 24 >> 24 == 119 | i2)) i1 = 0; else {
  i3 = (i5 | 0) == 1962934272;
  i4 = i6 << 24 >> 24 == 0;
  if ((i3 | (i5 | 0) == 1677721600) & i4) i1 = 1; else if (i1 & i4) i1 = 2; else if (((i5 | 0) == 1694498816 | (i5 | 67108864 | 0) == 1996488704) & i4) i1 = 2; else return (i1 & i6 << 24 >> 24 == 115 | (i3 & i6 << 24 >> 24 == 100 | (i5 | 0) == 1996488704 & i2) ? 3 : -1) | 0;
 }
 return i1 | 0;
}

function _EntityNames_RenderHovered() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[417347] | 0;
 i1 = HEAP8[1669384] | 0;
 if (i1 << 24 >> 24 != 0 & (HEAP8[1841572] | 0) == 0) {
  if ((i1 + -1 & 255) < 2) i4 = 0; else i4 = (HEAP8[i6 + 478 >> 0] | 0) != 0;
  i1 = 0;
  i5 = 0;
  i2 = 0;
  do {
   i3 = HEAP32[1668360 + (i5 << 2) >> 2] | 0;
   if (!((i3 | 0) == 0 | (i3 | 0) == (i6 | 0))) if (i4 | (i5 | 0) == (HEAP32[418843] | 0)) {
    if (!(i2 << 24 >> 24)) {
     _Gfx_SetAlphaTest(1);
     _Gfx_SetDepthTest(0);
     _Gfx_SetDepthWrite(0);
     i1 = _Gfx_GetFog() | 0;
     if (!(i1 << 24 >> 24)) {
      i1 = 0;
      i2 = 1;
     } else {
      _Gfx_SetFog(0);
      i2 = 1;
     }
    }
    _DrawName(i3);
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 256);
  if (i2 << 24 >> 24) {
   _Gfx_SetAlphaTest(0);
   _Gfx_SetDepthTest(1);
   _Gfx_SetDepthWrite(1);
   if (i1 << 24 >> 24) _Gfx_SetFog(1);
  }
 }
 return;
}

function _Respawn_FindSpawnPosition(i7, d1, d3, i2) {
 i7 = i7 | 0;
 d1 = +d1;
 d3 = +d3;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i10 + 24 | 0;
 i8 = i10;
 HEAPF32[i9 >> 2] = d1;
 i6 = i9 + 4 | 0;
 HEAPF32[i6 >> 2] = +(HEAP32[244734] | 0) + 1.0000000474974513e-03;
 HEAPF32[i9 + 8 >> 2] = d3;
 _AABB_Make(i8, i9, i2);
 HEAPF32[i6 >> 2] = 0.0;
 i2 = HEAP32[244734] | 0;
 L1 : do if ((i2 | 0) > -1) {
  i5 = i8 + 4 | 0;
  i4 = i8 + 16 | 0;
  while (1) {
   d1 = +_Respawn_HighestSolidY(i8);
   if (d1 != -1.0e5) break;
   HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + -1.0;
   HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] + -1.0;
   if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break L1;
  }
  HEAPF32[i6 >> 2] = d1;
 } while (0);
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 STACKTOP = i10;
 return;
}

function _Commands_PrintDefault() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i7 + 80 | 0;
 i4 = i7 + 72 | 0;
 i6 = i7 + 64 | 0;
 _Chat_AddRaw(29968);
 HEAP32[i5 >> 2] = i7;
 i3 = i5 + 4 | 0;
 HEAP16[i3 >> 1] = 0;
 i2 = i5 + 6 | 0;
 HEAP16[i2 >> 1] = 64;
 i1 = HEAP32[416803] | 0;
 if (i1 | 0) {
  do {
   _String_FromReadonly(i6, HEAP32[i1 >> 2] | 0);
   i10 = i6;
   i8 = HEAP32[i10 + 4 >> 2] | 0;
   i9 = i4;
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i9 + 4 >> 2] = i8;
   if (((HEAPU16[i3 >> 1] | 0) + 2 + (i8 & 65535) | 0) >>> 0 > (HEAPU16[i2 >> 1] | 0) >>> 0) {
    _Chat_Add(i5);
    HEAP16[i3 >> 1] = 0;
   }
   _String_AppendString(i5, i4);
   _String_AppendConst(i5, 29995);
   i1 = HEAP32[i1 + 32 >> 2] | 0;
  } while ((i1 | 0) != 0);
  if (HEAP16[i3 >> 1] | 0) _Chat_Add(i5);
 }
 _Chat_AddRaw(29998);
 STACKTOP = i7;
 return;
}

function _UpdateCache(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i2 = i3 + 288 | 0;
 i5 = i3 + 280 | 0;
 i8 = i3 + 272 | 0;
 i4 = i3 + 296 | 0;
 i9 = i3 + 264 | 0;
 _String_FromRaw(i2, i1, 128);
 _String_FromRaw(i8, i1 + 240 | 0, 64);
 _SetCachedTag(i2, 1854028, i8, 50507);
 _String_FromRaw(i9, i1 + 176 | 0, 64);
 i6 = HEAP32[i9 + 4 >> 2] | 0;
 i7 = i8;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = i6;
 _SetCachedTag(i2, 1859180, i8, 50530);
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 260;
 i8 = 1841616;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = i7;
 _MakeCachePath(i4, i5, i2);
 i1 = _Stream_WriteAllTo(i4, HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 160 >> 2] | 0) | 0;
 if (i1 | 0) _Logger_SysWarn2(i1, 50875, i2);
 STACKTOP = i3;
 return;
}

function _CuboidCommand_Draw(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[416814] | 0;
 if ((i1 | 0) == -1) i11 = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0; else i11 = i1 & 65535;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i1 | 0) <= (i7 | 0)) {
  i8 = HEAP32[i2 + 8 >> 2] | 0;
  i9 = HEAP32[i3 + 8 >> 2] | 0;
  i10 = (i8 | 0) > (i9 | 0);
  i6 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = (i6 | 0) > (i4 | 0);
  while (1) {
   if (!i10) {
    i3 = i8;
    while (1) {
     if (!i5) {
      i2 = i6;
      while (1) {
       _Game_ChangeBlock(i2, i1, i3, i11);
       if ((i2 | 0) < (i4 | 0)) i2 = i2 + 1 | 0; else break;
      }
     }
     if ((i3 | 0) < (i9 | 0)) i3 = i3 + 1 | 0; else break;
    }
   }
   if ((i1 | 0) < (i7 | 0)) i1 = i1 + 1 | 0; else break;
  }
 }
 return;
}

function _TabListOverlay_Render(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!(HEAP8[1868760] | 0)) if ((_IsOnlyChatActive() | 0) << 24 >> 24) {
  _Gfx_Draw2DGradient(HEAP32[i3 + 36 >> 2] | 0, HEAP32[i3 + 40 >> 2] | 0, HEAP32[i3 + 44 >> 2] | 0, HEAP32[i3 + 48 >> 2] | 0, -1275068416, -852348366);
  _Gfx_SetVertexFormat(1);
  _Gfx_BindDynamicVb(HEAP32[i3 + 12 >> 2] | 0);
  i4 = i3 + 64 | 0;
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4, 0) | 0;
  i7 = i3 + 56 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i6 = i3 + 1176 | 0;
   i5 = 0;
   while (1) {
    i3 = HEAP32[i6 + (i5 * 28 | 0) >> 2] | 0;
    if (!i3) i3 = i4; else {
     _Gfx_BindTexture(i3);
     _Gfx_DrawVb_IndexedTris_Range(4, i4, 4);
     i2 = HEAP32[i7 >> 2] | 0;
     i3 = i4 + 4 | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i2 | 0)) break; else i4 = i3;
   }
  }
 }
 return;
}

function _TabListOverlay_DeleteAt(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 _Gfx_DeleteTexture(i3 + 1176 + (i2 * 28 | 0) | 0);
 i4 = i3 + 56 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
 if ((i1 | 0) > (i2 | 0)) do {
  i1 = i2;
  i2 = i2 + 1 | 0;
  HEAP16[i3 + 152 + (i1 << 1) >> 1] = HEAP16[i3 + 152 + (i2 << 1) >> 1] | 0;
  i1 = i3 + 1176 + (i1 * 28 | 0) | 0;
  i5 = i3 + 1176 + (i2 * 28 | 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  HEAP32[i1 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
  HEAP32[i1 + 24 >> 2] = HEAP32[i5 + 24 >> 2];
  i1 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
 } while ((i2 | 0) < (i1 | 0));
 HEAP32[i4 >> 2] = i1;
 HEAP16[i3 + 152 + (i1 << 1) >> 1] = 0;
 HEAP32[i3 + 1176 + (i1 * 28 | 0) >> 2] = 0;
 return;
}

function _TextInputWidget_Create(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _InputWidget_Reset(i3);
 HEAP32[i3 >> 2] = 23296;
 i4 = _Display_ScaleX_2472(i4) | 0;
 HEAP32[i3 + 204 >> 2] = i4;
 i4 = _Display_ScaleY_2473(30) | 0;
 HEAP32[i3 + 208 >> 2] = i4;
 i4 = i3 + 212 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP8[i3 + 144 >> 0] = 0;
 HEAP8[i3 + 145 >> 0] = 3;
 HEAP8[i3 + 146 >> 0] = (HEAP8[1689553] | 0) == 0 & 1;
 HEAP8[i3 + 21 >> 0] = 2;
 HEAP32[i3 + 44 >> 2] = 61;
 HEAP32[i3 + 48 >> 2] = 419;
 HEAP32[i3 + 52 >> 2] = 420;
 HEAP32[i3 + 56 >> 2] = 92;
 i4 = i3 + 64 | 0;
 HEAP32[i4 >> 2] = i3 + 228;
 HEAP16[i3 + 68 >> 1] = 0;
 HEAP16[i3 + 70 >> 1] = 64;
 _String_Copy(i4, i2);
 HEAP32[i3 + 292 >> 2] = 1868813;
 HEAP32[i3 + 296 >> 2] = 0;
 return;
}
function _OnKeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _MapNativeKey(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0;
 do if ((i1 | 0) != 94 | (HEAP8[1868784] | 0) == 0 | (HEAP8[1868814] | 0) == 0) {
  if (!i1) {
   _DeferredEnableRawMouse();
   i1 = 0;
   break;
  }
  _Input_SetPressed(i1);
  _DeferredEnableRawMouse();
  if (!((HEAP8[1868517] | HEAP8[1868516]) << 24 >> 24)) {
   if ((HEAP8[1868519] | HEAP8[1868518]) << 24 >> 24) {
    i1 = (i1 | 0) != 67 & (i1 | 0) != 86;
    break;
   }
   if ((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24) {
    i1 = (i1 | 0) != 67 & (i1 | 0) != 86;
    break;
   }
   if ((i1 | 0) == 93) {
    i1 = (HEAP8[1868814] | 0) == 0;
    break;
   } else {
    i1 = (i1 + -91 | 0) >>> 0 < 10 | ((i1 + -58 | 0) >>> 0 < 7 | ((i1 + -1 | 0) >>> 0 < 24 | (i1 & -4 | 0) == 44));
    break;
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 return i1 & 1 | 0;
}

function _TextAtlas_Add(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 i7 = HEAP16[i1 + 40 + (i2 << 1) >> 1] | 0;
 i6 = i1 + 32 | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 HEAP16[i5 + 4 >> 1] = i8;
 HEAP16[i5 + 8 >> 1] = i7;
 d9 = +HEAPF32[i1 + 36 >> 2];
 d10 = d9 * +(HEAP16[i1 + 72 + (i2 << 1) >> 1] | 0);
 HEAPF32[i5 + 12 >> 2] = d10;
 HEAPF32[i5 + 20 >> 2] = d10 + d9 * +(i7 << 16 >> 16);
 HEAP32[i6 >> 2] = i8 + (i7 << 16 >> 16);
 _Gfx_Make2DQuad(i5, -1, i3);
 STACKTOP = i4;
 return;
}

function _EntryList_UNSAFE_Get(i1, i8, i7, i9) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i11 + 16 | 0;
 i4 = i11 + 8 | 0;
 i5 = i11;
 i2 = i8 + 8 | 0;
 L1 : do if ((HEAP32[i2 >> 2] | 0) > 0) {
  i6 = 0;
  while (1) {
   _StringsBuffer_UNSAFE_GetRaw(i8, i6, i3);
   _String_UNSAFE_Separate(i3, i9, i4, i5) | 0;
   i6 = i6 + 1 | 0;
   if (_String_CaselessEquals(i7, i4) | 0) break;
   if ((i6 | 0) >= (HEAP32[i2 >> 2] | 0)) {
    i10 = 6;
    break L1;
   }
  }
  i7 = i5;
  i8 = HEAP32[i7 + 4 >> 2] | 0;
  i9 = i1;
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i9 + 4 >> 2] = i8;
 } else i10 = 6; while (0);
 if ((i10 | 0) == 6) {
  i8 = 1841616;
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i10 = i1;
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 4 >> 2] = i9;
 }
 STACKTOP = i11;
 return;
}

function _Java_SkipAnnotation(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i8 + 53 | 0;
 i4 = i8 + 52 | 0;
 i5 = i8;
 i3 = i6 + 12 | 0;
 i2 = i6 + 4 | 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i6, i7) | 0;
 L1 : do if (!i1) while (1) {
  i1 = HEAP8[i7 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 120:
   {
    i1 = 0;
    break L1;
   }
  case 119:
   {
    i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i6, i4) | 0;
    if (i1 | 0) break L1;
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i6, HEAPU8[i4 >> 0] | 0) | 0;
    if (i1 | 0) break L1;
    break;
   }
  default:
   {
    HEAP8[i5 >> 0] = i1;
    i1 = _Java_ReadObjectData(i6, i5) | 0;
    if (i1 | 0) break L1;
   }
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i6, i7) | 0;
  if (i1 | 0) break L1;
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _DisconnectScreen_Show(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i4 + 64 | 0;
 HEAP8[978316] = 1;
 HEAP8[978317] = 1;
 HEAP32[244724] = 978704;
 HEAP16[489450] = 0;
 HEAP16[489451] = 128;
 _String_AppendString(978896, i2);
 HEAP32[244726] = 978832;
 HEAP16[489454] = 0;
 HEAP16[489455] = 64;
 _String_AppendString(978904, i1);
 HEAP32[i3 >> 2] = i4;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_AppendColorless(i3, i1);
 if (!(_String_CaselessStarts(i3, 22132) | 0)) i1 = (_String_CaselessStarts(i3, 22140) | 0) == 0 & 1; else i1 = 0;
 HEAP8[978360] = i1;
 HEAP32[244578] = 22148;
 _Gui_Add(978312, 60);
 i1 = HEAP32[422372] | 0;
 if ((i1 | 0) > 0) do {
  i3 = i1;
  i1 = i1 + -1 | 0;
  i2 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
  if ((i2 | 0) != 978312) _Gui_Remove(i2);
 } while ((i3 | 0) > 1);
 STACKTOP = i4;
 return;
}

function _ClassicLighting_ResetNeighbour(i7, i8, i9, i3, i4, i2, i5, i6, i1) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i10 = 0, i11 = 0;
 if ((i6 | 0) == (i1 | 0)) {
  i9 = (Math_imul(HEAP32[244735] | 0, i8) | 0) + i9 | 0;
  if ((_ClassicLighting_NeedsNeighour(i3, (Math_imul(i9, HEAP32[244733] | 0) | 0) + i7 | 0, i2 << 4, i8, i8) | 0) << 24 >> 24) _MapRenderer_RefreshChunk(i4, i2, i5);
 } else if ((i1 | 0) >= (i6 | 0)) while (1) {
  i10 = i1 << 4;
  i2 = i10 | 15;
  i11 = HEAP32[244737] | 0;
  i2 = (i2 | 0) > (i11 | 0) ? i11 : i2;
  i11 = (Math_imul(i2, HEAP32[244735] | 0) | 0) + i9 | 0;
  if ((_ClassicLighting_NeedsNeighour(i3, (Math_imul(i11, HEAP32[244733] | 0) | 0) + i7 | 0, i10, i2, i8) | 0) << 24 >> 24) _MapRenderer_RefreshChunk(i4, i1, i5);
  if ((i1 | 0) > (i6 | 0)) i1 = i1 + -1 | 0; else break;
 }
 return;
}

function _ProcessProgramArgs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i3 = i6;
 i5 = i6 + 48 | 0;
 i4 = i6 + 40 | 0;
 i1 = _Platform_GetCommandLineArgs(i1, i2, i3) | 0;
 L1 : do switch (i1 | 0) {
 case 0:
  {
   i1 = 1;
   break;
  }
 case 1:
  {
   i1 = i5 + 32 | 0;
   if (!((_DirectUrl_Claims(i3, i4, i5, i1) | 0) << 24 >> 24)) {
    _String_Copy(14732, i3);
    i1 = 2;
    break L1;
   } else {
    i2 = i5 + 8 | 0;
    i3 = i5 + 16 | 0;
    _DirectUrl_ExtractAddress(i4, i2, i3);
    i1 = (_ParseMPArgs(i5, i1, i2, i3) | 0) == 0;
    i1 = i1 ? 3 : 2;
    break L1;
   }
  }
 default:
  if ((i1 | 0) < 4) {
   _WarnMissingArgs(i1, i3);
   i1 = 3;
   break L1;
  } else {
   i1 = (_ParseMPArgs(i3, i3 + 8 | 0, i3 + 16 | 0, i3 + 24 | 0) | 0) == 0;
   i1 = i1 ? 3 : 2;
   break L1;
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _LocalPlayer_HandleJump(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = 146288 + (i1 * 796 | 0) + 728 | 0;
 if (!(HEAP32[422387] | 0)) {
  HEAP8[146288 + (i1 * 796 | 0) + 730 >> 0] = 1;
  if (!(HEAP8[146288 + (i1 * 796 | 0) + 111 >> 0] | 0)) if (!(HEAP8[146288 + (i1 * 796 | 0) + 495 >> 0] | 0)) if (!(HEAP8[146288 + (i1 * 796 | 0) + 494 >> 0] | 0)) {
   if (!(HEAP8[146288 + (i1 * 796 | 0) + 479 >> 0] | 0)) i2 = 0; else i2 = (HEAP8[146288 + (i1 * 796 | 0) + 493 >> 0] | 0) == 0 ? 0 : 2;
   i4 = HEAP32[146288 + (i1 * 796 | 0) + 488 >> 2] | 0;
   i1 = 146288 + (i1 * 796 | 0) + 732 | 0;
   if ((HEAP32[i1 >> 2] | 0) < (((i2 | 0) < (i4 | 0) ? i4 + -1 | 0 : i2) | 0)) {
    _PhysicsComp_DoNormalJump(i3);
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    i1 = 1;
   } else i1 = 1;
  } else i1 = 0; else i1 = 0; else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _HeldBlockRenderer_Render(d2) {
 d2 = +d2;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i5;
 if (HEAP8[1868780] | 0) {
  d1 = +HEAPF32[422499];
  HEAPF32[422499] = 0.0;
  HEAP16[934361] = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
  i4 = i3;
  i6 = 1689084;
  i7 = i4 + 64 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   i4 = i4 + 4 | 0;
   i6 = i6 + 4 | 0;
  } while ((i4 | 0) < (i7 | 0));
  _Gfx_LoadMatrix(0, 169e4);
  _SetMatrix();
  _ResetHeldState();
  _DoAnimation(d2, d1);
  _SetBaseOffset();
  if (!(HEAP8[HEAP32[414161] >> 0] | 0)) _HeldBlockRenderer_RenderModel();
  i4 = 1689084;
  i6 = i3;
  i7 = i4 + 64 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   i4 = i4 + 4 | 0;
   i6 = i6 + 4 | 0;
  } while ((i4 | 0) < (i7 | 0));
  _Gfx_LoadMatrix(0, 1689148);
 }
 STACKTOP = i5;
 return;
}

function _TabListOverlay_PlayerCompare(i3, i6) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i4 = i9 + 152 | 0;
 i7 = i9 + 144 | 0;
 i5 = i9 + 136 | 0;
 i8 = i9 + 128 | 0;
 i1 = HEAP8[1669904 + i3 >> 0] | 0;
 i2 = HEAP8[1669904 + i6 >> 0] | 0;
 if (i1 << 24 >> 24 == i2 << 24 >> 24) {
  HEAP32[i4 >> 2] = i9 + 64;
  HEAP16[i4 + 4 >> 1] = 0;
  HEAP16[i4 + 6 >> 1] = 64;
  _StringsBuffer_UNSAFE_Get(i5, 1670160, (HEAPU16[1669392 + (i3 << 1) >> 1] | 0) + -2 | 0);
  _String_AppendColorless(i4, i5);
  HEAP32[i7 >> 2] = i9;
  HEAP16[i7 + 4 >> 1] = 0;
  HEAP16[i7 + 6 >> 1] = 64;
  _StringsBuffer_UNSAFE_Get(i8, 1670160, (HEAPU16[1669392 + (i6 << 1) >> 1] | 0) + -2 | 0);
  _String_AppendColorless(i7, i8);
  i1 = _String_Compare(i4, i7) | 0;
 } else i1 = (i1 & 255) < (i2 & 255) ? -1 : 1;
 STACKTOP = i9;
 return i1 | 0;
}

function _ChatInputWidget_DownKey(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) {
  i1 = HEAP32[415517] | 0;
  if (i1 | 0) {
   i5 = i6 + 204 | 0;
   i2 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
   HEAP32[i5 >> 2] = i2;
   i4 = i6 + 64 | 0;
   HEAP16[i6 + 68 >> 1] = 0;
   if ((i2 | 0) < (i1 | 0)) {
    _StringsBuffer_UNSAFE_Get(i3, 1662060, i2);
    _String_AppendString(i4, i3);
   } else {
    HEAP32[i5 >> 2] = i1;
    _String_AppendString(i4, i6 + 208 | 0);
   }
   HEAP32[i6 + 160 >> 2] = -1;
   _InputWidget_UpdateText(i6);
  }
 } else {
  i2 = i6 + 160 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != -1) {
   i5 = i1 + 64 | 0;
   HEAP32[i2 >> 2] = (i5 | 0) < (HEAPU16[i6 + 68 >> 1] | 0 | 0) ? i5 : -1;
   _InputWidget_UpdateCaret(i6);
  }
 }
 STACKTOP = i7;
 return;
}

function _InputHandler_DeleteBlock() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i8 + 12 | 0;
 i6 = i8;
 _HeldBlockRenderer_ClickAnim(1);
 HEAP32[i6 >> 2] = HEAP32[422211];
 HEAP32[i6 + 4 >> 2] = HEAP32[422212];
 HEAP32[i6 + 8 >> 2] = HEAP32[422213];
 if (HEAP8[1688968] | 0) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  i3 = HEAP32[i6 + 8 >> 2] | 0;
  if ((_World_Contains_1085(i1, i2, i3) | 0) << 24 >> 24) {
   i4 = _World_GetBlock_1086(i1, i2, i3) | 0;
   i5 = i4 & 65535;
   if ((HEAP8[1006372 + i5 >> 0] | 0) != 4) if (HEAP8[1057828 + i5 >> 0] | 0) {
    _Game_ChangeBlock(i1, i2, i3, 0);
    HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    _Event_RaiseBlock(1678844, i7, i4, 0);
   }
  }
 }
 STACKTOP = i8;
 return;
}

function _Convert_Utf8ToCodepoint(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0;
 HEAP32[i2 >> 2] = 0;
 do if (!i4) i1 = 0; else {
  i5 = HEAP8[i3 >> 0] | 0;
  i1 = i5 & 255;
  if (i5 << 24 >> 24 > -1) {
   HEAP32[i2 >> 2] = i1;
   i1 = 1;
   break;
  }
  if ((i1 & 224 | 0) == 192) {
   if (i4 >>> 0 < 2) {
    i1 = 0;
    break;
   }
   HEAP32[i2 >> 2] = i1 << 6 & 1984 | HEAP8[i3 + 1 >> 0] & 63;
   i1 = 2;
   break;
  }
  if ((i1 & 240 | 0) == 224) {
   if (i4 >>> 0 < 3) {
    i1 = 0;
    break;
   }
   HEAP32[i2 >> 2] = (HEAP8[i3 + 1 >> 0] & 63) << 6 | i1 << 12 & 61440 | HEAP8[i3 + 2 >> 0] & 63;
   i1 = 3;
   break;
  } else {
   if (i4 >>> 0 < 4) {
    i1 = 0;
    break;
   }
   HEAP32[i2 >> 2] = (HEAP8[i3 + 1 >> 0] & 63) << 12 | i1 << 18 & 1835008 | (HEAP8[i3 + 2 >> 0] & 63) << 6 | HEAP8[i3 + 3 >> 0] & 63;
   i1 = 4;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _EditHotkeyScreen_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = _Display_ScaleX_1477() | 0;
 HEAP32[i1 + 68 >> 2] = i3;
 i3 = _Gui_CalcPos(1, 0, i3, HEAP32[466968] | 0) | 0;
 HEAP32[i1 + 56 >> 2] = i3;
 i3 = _Display_ScaleY_1478(2) | 0;
 i2 = i1 + 72 | 0;
 HEAP32[i2 >> 2] = i3;
 i4 = _Display_ScaleY_1478(-65) | 0;
 i3 = _Gui_CalcPos(1, i4, i3, HEAP32[466969] | 0) | 0;
 HEAP32[i1 + 60 >> 2] = i3;
 i3 = _Display_ScaleY_1478(45) | 0;
 i2 = _Gui_CalcPos(1, i3, HEAP32[i2 >> 2] | 0, HEAP32[466969] | 0) | 0;
 HEAP32[i1 + 64 >> 2] = i2;
 _Widget_SetLocation(i1 + 400 | 0, 1, 1, 0, -150);
 _Widget_SetLocation(i1 + 484 | 0, 1, 1, 0, -100);
 _Widget_SetLocation(i1 + 568 | 0, 1, 1, -100, 10);
 _Widget_SetLocation(i1 + 652 | 0, 1, 1, 0, 80);
 _Widget_SetLocation(i1 + 736 | 0, 1, 1, 0, 130);
 _Widget_SetLocation(i1 + 100 | 0, 1, 1, 0, -35);
 _Menu_LayoutBack(i1 + 820 | 0);
 return;
}

function _Huffman_UNSAFE_Decode_Slow(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i5 = _Huffman_ReverseBits(i3 & 511, 9) | 0;
 i1 = 10;
 i2 = 9;
 while (1) {
  i5 = i5 << 1 | (i2 ? i3 >>> i2 : i3) & 1;
  if (i5 >>> 0 < (HEAPU16[i7 + 1056 + (i1 << 1) >> 1] | 0) >>> 0) {
   i2 = 3;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 16) {
   i2 = 5;
   break;
  } else i2 = i2 + 1 | 0;
 }
 if ((i2 | 0) == 3) {
  i5 = i5 + (HEAPU16[i7 + 1088 + (i1 << 1) >> 1] | 0) - (HEAPU16[i7 + 1024 + (i1 << 1) >> 1] | 0) | 0;
  HEAP32[i4 >> 2] = i1 ? i3 >>> i1 : i3;
  i6 = i6 + 8 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i1;
  i1 = HEAPU16[i7 + 1120 + (i5 << 1) >> 1] | 0;
 } else if ((i2 | 0) == 5) {
  HEAP32[i6 + 44736 >> 2] = -857812902;
  HEAP8[i6 >> 0] = 13;
  HEAP32[i6 + 16 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function _TabListOverlay_GetGroupCount(i6, i1, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8 + 16 | 0;
 i4 = i8 + 8 | 0;
 i7 = i8;
 _StringsBuffer_UNSAFE_Get(i5, 1670160, (HEAPU16[1669392 + (i1 << 1) >> 1] | 0) + -1 | 0);
 i3 = i6 + 56 | 0;
 L1 : do if ((HEAP32[i3 >> 2] | 0) > (i2 | 0)) {
  i1 = 0;
  do {
   _StringsBuffer_UNSAFE_Get(i7, 1670160, (HEAPU16[1669392 + ((HEAPU16[i6 + 152 + (i2 << 1) >> 1] | 0) << 1) >> 1] | 0) + -1 | 0);
   i11 = i7;
   i10 = HEAP32[i11 + 4 >> 2] | 0;
   i9 = i4;
   HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i9 + 4 >> 2] = i10;
   if (!(_String_CaselessEquals(i5, i4) | 0)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 } else i1 = 0; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _WriteLevelBlocks(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32768 | 0;
 i5 = i7;
 i1 = HEAP32[244732] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i3 = 0;
  i4 = 0;
  while (1) {
   i2 = ((HEAPU8[(HEAP32[244731] | 0) + i4 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i4 >> 0] | 0)) & HEAP32[244744];
   i2 = i2 >>> 0 > 65 ? 1 : i2 & 65535;
   if ((i2 & 65535) > 49) i2 = HEAP8[3584 + ((i2 & 65535) + -50) >> 0] | 0; else i2 = i2 & 255;
   HEAP8[i5 + i3 >> 0] = i2;
   if ((i3 | 0) < 32767) i2 = i3 + 1 | 0; else {
    i1 = _Stream_Write(i6, i5, 32768) | 0;
    if (i1 | 0) break L1;
    i1 = HEAP32[244732] | 0;
    i2 = 0;
   }
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i1 | 0)) break; else i3 = i2;
  }
  if (!i2) i1 = 0; else i1 = _Stream_Write(i6, i5, i2) | 0;
 } else i1 = 0; while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _Png_GetExpander(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 L1 : do switch (i2 << 24 >> 24) {
 case 0:
  switch (i1 << 24 >> 24) {
  case 1:
   {
    i1 = 13;
    break L1;
   }
  case 2:
   {
    i1 = 14;
    break L1;
   }
  case 4:
   {
    i1 = 15;
    break L1;
   }
  case 8:
   {
    i1 = 16;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 2:
  {
   i1 = i1 << 24 >> 24 == 8 ? 10 : 0;
   break;
  }
 case 3:
  switch (i1 << 24 >> 24) {
  case 1:
   {
    i1 = 17;
    break L1;
   }
  case 2:
   {
    i1 = 18;
    break L1;
   }
  case 4:
   {
    i1 = 19;
    break L1;
   }
  case 8:
   {
    i1 = 20;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 4:
  {
   i1 = i1 << 24 >> 24 == 8 ? 11 : 0;
   break;
  }
 case 6:
  {
   i1 = i1 << 24 >> 24 == 8 ? 12 : 0;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _HacksComp_RecheckFlags(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0;
 i2 = _String_IndexOfConst(i1 + 44 | 0, 30749) | 0;
 _HacksComp_SetAll(i1, (31 ? i2 >>> 31 : i2) & 255);
 i2 = i1 + 20 | 0;
 HEAP8[i2 >> 0] = 1;
 _HacksComp_ParseFlag(i1, 30754, 30759, i1 + 14 | 0);
 _HacksComp_ParseFlag(i1, 30764, 30772, i1 + 16 | 0);
 _HacksComp_ParseFlag(i1, 30780, 30787, i1 + 13 | 0);
 _HacksComp_ParseFlag(i1, 30794, 30803, i1 + 15 | 0);
 _HacksComp_ParseFlag(i1, 30812, 30818, i2);
 _HacksComp_ParseFlag(i1, 30824, 30837, i1 + 12 | 0);
 _HacksComp_ParseFlag(i1, 30850, 30857, i1 + 18 | 0);
 if (HEAP8[i1 >> 0] | 0) _HacksComp_ParseAllFlag(i1);
 d3 = +_HacksComp_ParseFlagFloat(30864, i1);
 HEAPF32[i1 + 24 >> 2] = d3;
 d3 = +_HacksComp_ParseFlagFloat(30874, i1);
 HEAPF32[i1 + 40 >> 2] = d3;
 i2 = _HacksComp_ParseFlagInt(i1) | 0;
 HEAP32[i1 + 28 >> 2] = i2;
 _HacksComp_Update(i1);
 return;
}

function _Http_StartNextDownload() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 752 | 0;
 i1 = i4 + 736 | 0;
 i2 = i4;
 L1 : do if (!((HEAP32[245540] | 0) > 5 | (HEAP32[244756] | 0) == 0)) {
  HEAP32[i1 >> 2] = i4 + 608;
  HEAP16[i1 + 4 >> 1] = 0;
  HEAP16[i1 + 6 >> 1] = 128;
  i3 = HEAP32[244758] | 0;
  _Http_GetUrl(i3, i1);
  _Platform_Log1(52832, i1);
  _String_EncodeUtf8(i2, i1) | 0;
  i1 = _interop_DownloadAsync(i2 | 0, HEAPU8[i3 + 304 >> 0] | 0 | 0, HEAP32[i3 + 128 >> 2] | 0) | 0;
  switch (i1 | 0) {
  case 0:
   {
    _RequestList_Append(982160, i3, 0);
    _RequestList_RemoveAt(979024, 0);
    break L1;
   }
  case 1:
   {
    i1 = -857812898;
    break;
   }
  default:
   {}
  }
  HEAP32[i3 + 152 >> 2] = i1;
  _Http_FinishRequest(i3);
  _RequestList_RemoveAt(979024, 0);
  _Http_StartNextDownload();
 } while (0);
 STACKTOP = i4;
 return;
}

function _Entity_SetSkinAll(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8 + 16 | 0;
 i4 = i8 + 8 | 0;
 i7 = i8;
 _String_FromRaw(i5, i6 + 196 | 0, 64);
 if (!((_Utils_IsUrlPrefix(i5) | 0) << 24 >> 24)) i1 = 0; else i1 = HEAP32[i6 + 112 >> 2] | 0;
 HEAP32[i6 + 116 >> 2] = i1;
 i3 = i2 << 24 >> 24 == 0;
 i2 = 0;
 do {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) {
   _String_FromRaw(i7, i1 + 196 | 0, 64);
   i11 = i7;
   i10 = HEAP32[i11 + 4 >> 2] | 0;
   i9 = i4;
   HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i9 + 4 >> 2] = i10;
   if (_String_Equals(i5, i4) | 0) {
    if (i3) _Entity_CopySkin(i1, i6); else _Entity_ResetSkin(i1);
    HEAP8[i1 + 109 >> 0] = 2;
   }
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 STACKTOP = i8;
 return;
}

function _SPConnection_SendChat(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 24 | 0;
 i2 = i6 + 16 | 0;
 i4 = i6 + 8 | 0;
 i5 = i6;
 if (HEAP16[i3 + 4 >> 1] | 0) {
  HEAP8[1868805] = 0;
  i8 = i3;
  i3 = HEAP32[i8 + 4 >> 2] | 0;
  i7 = i1;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 4 >> 2] = i3;
  if ((i3 & 65535) > 64) do {
   _String_UNSAFE_Substring(i4, i1, 0, 64);
   i7 = i4;
   i8 = HEAP32[i7 + 4 >> 2] | 0;
   i3 = i2;
   HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i3 + 4 >> 2] = i8;
   _SPConnection_AddPart(i2);
   _String_UNSAFE_SubstringAt(i5, i1, 64);
   i3 = i5;
   i8 = HEAP32[i3 + 4 >> 2] | 0;
   i7 = i1;
   HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i7 + 4 >> 2] = i8;
  } while ((i8 & 65535) > 64);
  _SPConnection_AddPart(i1);
 }
 STACKTOP = i6;
 return;
}

function _EntryList_Save(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i7 = i8 + 328 | 0;
 i4 = i8 + 320 | 0;
 i6 = i8 + 264 | 0;
 HEAP32[i7 >> 2] = i8;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 260;
 _String_AppendConst(i7, i1);
 i1 = _Stream_CreateFile(i6, i7) | 0;
 if (!i1) {
  i2 = i5 + 8 | 0;
  L3 : do if ((HEAP32[i2 >> 2] | 0) > 0) {
   i3 = 0;
   while (1) {
    _StringsBuffer_UNSAFE_GetRaw(i5, i3, i4);
    i1 = _Stream_WriteLine(i6, i4) | 0;
    i3 = i3 + 1 | 0;
    if (i1 | 0) break;
    if ((i3 | 0) >= (HEAP32[i2 >> 2] | 0)) break L3;
   }
   _Logger_SysWarn2(i1, 51456, i7);
  } while (0);
  i1 = FUNCTION_TABLE_ii[HEAP32[i6 + 28 >> 2] & 63](i6) | 0;
  if (i1 | 0) _Logger_SysWarn2(i1, 51467, i7);
 } else _Logger_SysWarn2(i1, 51447, i7);
 STACKTOP = i8;
 return;
}

function _Adv_StretchXLiquid(i4, i1, i5, i6, i2, i7) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i3 = 0;
 if (!((_Builder_OccludedLiquid(i2) | 0) << 24 >> 24)) {
  i3 = _Adv_ComputeLightFlags(i1, i5, i6, i2) | 0;
  HEAP32[414137] = i3;
  HEAP32[(HEAP32[414122] | 0) + (i2 << 2) >> 2] = i3;
  i3 = i1 + 1 | 0;
  L3 : do if ((i3 | 0) >= (HEAP32[414119] | 0) ? 1 : (HEAP8[1648420 + (i7 & 65535) >> 0] & 32) == 0) i1 = 1; else {
   i1 = 1;
   do {
    i4 = i4 + 6 | 0;
    i2 = i2 + 1 | 0;
    if (!((_Adv_CanStretch(i7, i2, i3, i5, i6, 5) | 0) << 24 >> 24)) break L3;
    if ((_Builder_OccludedLiquid(i2) | 0) << 24 >> 24) break L3;
    HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[414119] | 0));
  } while (0);
  _AddVertices(i7, 5);
 } else i1 = 0;
 return i1 | 0;
}

function _KeyBindsScreen_ContextRecreated(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7;
 _Screen_UpdateVb(i3);
 i5 = i3 + 84 | 0;
 _Gui_MakeTitleFont(i5);
 _Gui_MakeBodyFont(i4);
 i1 = i3 + 40 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _KeyBindsScreen_Update(i3, i2);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 _TextWidget_SetConst(i3 + 96 | 0, HEAP32[i3 + 76 >> 2] | 0, i5);
 _TextWidget_SetConst(i3 + 168 | 0, HEAP32[i3 + 80 >> 2] | 0, i4);
 _ButtonWidget_SetConst(i3 + 240 | 0, 50883, i5);
 _Font_Free(i4);
 if (!(HEAP32[i3 + 52 >> 2] | 0)) {
  if (HEAP32[i3 + 56 >> 2] | 0) i6 = 6;
 } else i6 = 6;
 if ((i6 | 0) == 6) {
  _ButtonWidget_SetConst(i3 + 324 | 0, 50888, i5);
  _ButtonWidget_SetConst(i3 + 408 | 0, 50890, i5);
 }
 STACKTOP = i7;
 return;
}

function _DownloadAsync(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 24 | 0;
 i2 = i6 + 16 | 0;
 i3 = i6 + 8 | 0;
 i4 = i6;
 i8 = 1841616;
 i9 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = i1;
 HEAP32[i7 >> 2] = i9;
 HEAP32[i7 + 4 >> 2] = i8;
 i7 = i2;
 HEAP32[i7 >> 2] = i9;
 HEAP32[i7 + 4 >> 2] = i8;
 if (_IsCached(i5) | 0) {
  _GetCachedLastModified(i3, i5);
  i9 = i3;
  i8 = HEAP32[i9 + 4 >> 2] | 0;
  i7 = i2;
  HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i7 + 4 >> 2] = i8;
  _GetCachedETag(i4, i5);
  i7 = i4;
  i8 = HEAP32[i7 + 4 >> 2] | 0;
  i9 = i1;
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i9 + 4 >> 2] = i8;
 }
 _Http_TryCancel(HEAP32[460929] | 0);
 i9 = _Http_AsyncGetDataEx(i5, 1, i2, i1, 0) | 0;
 HEAP32[460929] = i9;
 STACKTOP = i6;
 return;
}

function _TouchScreen_LayoutOnscreen(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i6 = i7 + 36 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i8 = i7 + 1200 | 0;
  i5 = 0;
  i3 = 10;
  i2 = 10;
  while (1) {
   do if ((HEAP8[(HEAP32[i7 + 100 + (i5 * 84 | 0) + 36 >> 2] | 0) + 5 >> 0] | 0) == i4 << 24 >> 24) {
    i1 = i7 + 100 + (i5 * 84 | 0) | 0;
    _Widget_SetLocation(i1, i4, 0, i3, i2);
    if (((HEAP32[i7 + 100 + (i5 * 84 | 0) + 16 >> 2] | 0) + (HEAP32[i7 + 100 + (i5 * 84 | 0) + 8 >> 2] | 0) | 0) > (HEAP32[i8 >> 2] | 0)) {
     i2 = i3 + 110 | 0;
     _Widget_SetLocation(i1, i4, 0, i2, 10);
     i1 = i2;
     i2 = 10;
     break;
    } else {
     i1 = i3;
     i2 = i2 + 40 | 0;
     break;
    }
   } else i1 = i3; while (0);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (HEAP32[i6 >> 2] | 0)) break; else i3 = i1;
  }
 }
 return;
}

function _TextGroupWidget_RedrawAllWithCol(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i10;
 i7 = i3 + 40 | 0;
 if ((HEAP32[i7 >> 2] | 0) > 0) {
  i6 = i9 + 4 | 0;
  i4 = 0;
  do {
   _TextGroupWidget_UNSAFE_Get(i9, i3, i4);
   i5 = HEAP32[i9 >> 2] | 0;
   i1 = HEAP16[i6 >> 1] | 0;
   L5 : do if (i1 << 16 >> 16) {
    i8 = (i1 & 65535) + -1 | 0;
    if (i1 << 16 >> 16 != 1) {
     i1 = 0;
     while (1) {
      i11 = i1;
      i1 = i1 + 1 | 0;
      if ((HEAP8[i5 + i11 >> 0] | 0) == 38) if ((HEAP8[i5 + i1 >> 0] | 0) == i2 << 24 >> 24) break;
      if ((i1 | 0) >= (i8 | 0)) break L5;
     }
     _TextGroupWidget_Redraw(i3, i4);
    }
   } while (0);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i7 >> 2] | 0));
 }
 STACKTOP = i10;
 return;
}

function _TerrainParticle_Render(i5, d2, i8) {
 i5 = i5 | 0;
 d2 = +d2;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i9 + 8 | 0;
 i7 = i9;
 _Vec3_Lerp(i6, i5 + 16 | 0, i5 + 28 | 0, d2);
 d2 = +HEAPF32[i5 + 40 >> 2] * .015625;
 HEAPF32[i7 >> 2] = d2;
 HEAPF32[i7 + 4 >> 2] = d2;
 i4 = i5 + 62 | 0;
 i3 = HEAPU16[i4 >> 1] | 0;
 if (!(HEAP8[994084 + i3 >> 0] | 0)) {
  i10 = _Math_Floor(+HEAPF32[i6 >> 2]) | 0;
  i3 = _Math_Floor(+HEAPF32[i6 + 4 >> 2]) | 0;
  i1 = _Math_Floor(+HEAPF32[i6 + 8 >> 2]) | 0;
  i1 = FUNCTION_TABLE_iiii[HEAP32[467172] & 63](i10, i3, i1) | 0;
  i3 = HEAPU16[i4 >> 1] | 0;
 } else i1 = -1;
 if (HEAP8[1008676 + i3 >> 0] | 0) i1 = _PackedCol_Tint(i1, HEAP32[994852 + (i3 << 2) >> 2] | 0) | 0;
 _Particle_DoRender(i7, i6, i5 + 44 | 0, i1, i8);
 STACKTOP = i9;
 return;
}

function _HotbarWidget_PointerDown(i5, i4, i6, i8) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i9 = 0, i10 = 0;
 L1 : do if (!(_Widget_Contains(i5, i6, i8) | 0)) i1 = 0; else {
  i3 = ~~+HEAPF32[i5 + 96 >> 2];
  i2 = HEAP32[i5 + 16 >> 2] | 0;
  i7 = i5 + 4 | 0;
  i9 = i5 + 8 | 0;
  i1 = 0;
  while (1) {
   i10 = (HEAP32[i7 >> 2] | 0) + (Math_imul(i1, i3) | 0) | 0;
   if (_Gui_Contains(i10, HEAP32[i9 >> 2] | 0, i3, i2, i6, i8) | 0) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 9) {
    i1 = 0;
    break L1;
   }
  }
  do if (HEAP8[1689553] | 0) if ((i1 | 0) == 8) {
   _InventoryScreen_Show();
   i1 = 1;
   break L1;
  } else {
   HEAP32[i5 + 264 + (i1 << 2) >> 2] = i4;
   HEAPF32[i5 + 296 + (i1 << 2) >> 2] = 0.0;
   break;
  } while (0);
  _Inventory_SetSelectedIndex(i1);
  i1 = 1;
 } while (0);
 return i1 | 0;
}

function _Model_SetupState(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, d5 = 0.0, d6 = 0.0;
 HEAP32[i4 + 36 >> 2] = 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3) | 0;
 HEAP32[428680] = i1;
 HEAPF32[428686] = 100.0;
 HEAPF32[428687] = 100.0;
 if (!(HEAP8[i3 + 110 >> 0] | 0)) {
  i2 = _PackedCol_Scale(i1, .5) | 0;
  HEAP32[428681] = i2;
  i2 = _PackedCol_Scale(i1, .800000011920929) | 0;
  HEAP32[428682] = i2;
  i1 = _PackedCol_Scale(i1, .6000000238418579) | 0;
  i2 = HEAP32[428682] | 0;
 } else {
  HEAP32[428681] = i1;
  HEAP32[428682] = i1;
  i2 = i1;
 }
 HEAP32[428684] = i1;
 HEAP32[428683] = i2;
 HEAP32[428685] = i1;
 d5 = (+HEAPF32[i3 + 20 >> 2] - +HEAPF32[i3 + 28 >> 2]) * .01745329238474369;
 d6 = +_Math_CosF(d5);
 HEAPF32[428688] = d6;
 d5 = +_Math_SinF(d5);
 HEAPF32[428689] = d5;
 HEAP32[428691] = i4;
 return;
}

function _Gfx_AllocTexture(i4, i5, i1, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 _glGenTextures(1, i6 | 0);
 _glBindTexture(3553, HEAP32[i6 >> 2] | 0);
 i2 = (4 ? (i1 & 255) >>> 4 : i1 & 255) & 1 | 9728;
 _glTexParameteri(3553, 10240, i2 | 0);
 i1 = i3 << 24 >> 24 != 0;
 if (i1) {
  _glTexParameteri(3553, 10241, 9986);
  if (HEAP8[1868763] | 0) _glTexParameteri(3553, 33085, _CalcMipmapsLevels(HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0);
 } else _glTexParameteri(3553, 10241, i2 | 0);
 if ((HEAP32[i4 + 4 >> 2] | 0) == (i5 | 0)) _CallTexImage2D(0, i5, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 >> 2] | 0); else _UpdateTextureSlow(0, 0, i4, i5, 1);
 if (i1) _Gfx_DoMipmaps(0, 0, i4, i5, 0);
 STACKTOP = i7;
 return HEAP32[i6 >> 2] | 0;
}

function _Window_OpenFileDialog(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i7 = i8 + 1024 | 0;
 i1 = i8;
 i4 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i7 >> 2] = i1;
 i5 = i7 + 4 | 0;
 HEAP16[i5 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 1023;
 i2 = HEAP32[i4 >> 2] | 0;
 if (!i2) i2 = 0; else {
  i1 = i4;
  i3 = 0;
  do {
   if (i3) {
    _String_Append(i7, 44);
    i2 = HEAP32[i1 >> 2] | 0;
   }
   _String_AppendConst(i7, i2);
   i3 = i3 + 1 | 0;
   i1 = i4 + (i3 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
  i2 = HEAP16[i5 >> 1] | 0;
  i1 = HEAP32[i7 >> 2] | 0;
 }
 HEAP8[i1 + (i2 & 65535) >> 0] = 0;
 HEAP32[466976] = HEAP32[i6 + 8 >> 2];
 _interop_OpenFileDialog(HEAP32[i7 >> 2] | 0, HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 16 >> 2] | 0);
 STACKTOP = i8;
 return 0;
}

function _SPConnection_AddPart(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i5 = i6 + 128 | 0;
 HEAP32[i5 >> 2] = i6;
 i4 = i5 + 4 | 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 128;
 if (!((_Drawer2D_IsWhiteColor(HEAP8[1868805] | 0) | 0) << 24 >> 24)) {
  _String_Append(i5, 38);
  _String_Append(i5, HEAP8[1868805] | 0);
 }
 _String_AppendString(i5, i1);
 i1 = HEAP16[i4 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i3 = 0;
  do {
   i2 = (HEAP32[i5 >> 2] | 0) + i3 | 0;
   if ((HEAP8[i2 >> 0] | 0) == 37) {
    HEAP8[i2 >> 0] = 38;
    i1 = HEAP16[i4 >> 1] | 0;
   }
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < (i1 & 65535) >>> 0);
 }
 _String_UNSAFE_TrimEnd(i5);
 i1 = _Drawer2D_LastColor(i5, HEAPU16[i4 >> 1] | 0) | 0;
 if (i1 << 24 >> 24) HEAP8[1868805] = i1;
 _Chat_Add(i5);
 STACKTOP = i6;
 return;
}

function _Http_OnFinishedAsync(i1, i5, i6, i7) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i8;
 HEAP32[i2 >> 2] = i1;
 i4 = _RequestList_Find(982160, i1) | 0;
 if ((i4 | 0) == -1) {
  _Mem_Free(i5);
  _Platform_Log1(52773, i2);
 } else {
  i1 = HEAP32[245542] | 0;
  i2 = i1 + (i4 * 312 | 0) | 0;
  HEAP32[i1 + (i4 * 312 | 0) + 156 >> 2] = i5;
  i3 = i1 + (i4 * 312 | 0) + 160 | 0;
  HEAP32[i3 >> 2] = i6;
  HEAP32[i1 + (i4 * 312 | 0) + 144 >> 2] = i7;
  HEAP32[i1 + (i4 * 312 | 0) + 148 >> 2] = i6;
  if ((i5 | 0) != 0 | (i7 | 0) != 0) {
   if (i5 | 0) _Platform_Log1(52803, i3);
  } else HEAP32[i1 + (i4 * 312 | 0) + 152 >> 2] = -857812900;
  _Http_FinishRequest(i2);
  _RequestList_RemoveAt(982160, i4);
 }
 _Http_StartNextDownload();
 STACKTOP = i8;
 return;
}

function _Gfx_Draw2DGradient(i5, i6, i4, i2, i3, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 _Gfx_SetVertexFormat(0);
 i7 = _Gfx_LockDynamicVb(0, 0, 4) | 0;
 d9 = +(i5 | 0);
 HEAPF32[i7 >> 2] = d9;
 d10 = +(i6 | 0);
 HEAPF32[i7 + 4 >> 2] = d10;
 HEAPF32[i7 + 8 >> 2] = 0.0;
 HEAP32[i7 + 12 >> 2] = i3;
 d8 = +(i4 + i5 | 0);
 HEAPF32[i7 + 16 >> 2] = d8;
 HEAPF32[i7 + 20 >> 2] = d10;
 HEAPF32[i7 + 24 >> 2] = 0.0;
 HEAP32[i7 + 28 >> 2] = i3;
 HEAPF32[i7 + 32 >> 2] = d8;
 d8 = +(i2 + i6 | 0);
 HEAPF32[i7 + 36 >> 2] = d8;
 HEAPF32[i7 + 40 >> 2] = 0.0;
 HEAP32[i7 + 44 >> 2] = i1;
 HEAPF32[i7 + 48 >> 2] = d9;
 HEAPF32[i7 + 52 >> 2] = d8;
 HEAPF32[i7 + 56 >> 2] = 0.0;
 HEAP32[i7 + 60 >> 2] = i1;
 _Gfx_UnlockDynamicVb(HEAP32[422312] | 0);
 _Gfx_DrawVb_IndexedTris(4);
 return;
}

function _DirectUrl_ExtractAddress(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7;
 i2 = _String_LastIndexOfAt(i1, 0, 58) | 0;
 if ((i2 | 0) == -1) {
  i6 = i1;
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i3 + 4 >> 2] = i5;
  i3 = 13272;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  i6 = i4;
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i6 + 4 >> 2] = i5;
 } else {
  _String_UNSAFE_Substring(i5, i1, 0, i2);
  i8 = i5;
  i5 = HEAP32[i8 + 4 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i3 + 4 >> 2] = i5;
  _String_UNSAFE_SubstringAt(i6, i1, i2 + 1 | 0);
  i3 = i6;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  i6 = i4;
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i6 + 4 >> 2] = i5;
 }
 STACKTOP = i7;
 return;
}

function _Deflate_BuildTable(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 1696 | 0;
 i9 = i10;
 _Huffman_Build(i9, 1552, 288) | 0;
 i8 = 0;
 do {
  i1 = HEAP16[i9 + 1056 + (i8 << 1) >> 1] | 0;
  if (i1 << 16 >> 16) {
   i7 = HEAPU16[i9 + 1024 + (i8 << 1) >> 1] | 0;
   i4 = (i1 & 65535) - i7 | 0;
   if ((i4 | 0) > 0) {
    i1 = HEAPU16[i9 + 1088 + (i8 << 1) >> 1] | 0;
    i2 = i8 & 255;
    i3 = 0;
    do {
     i11 = HEAPU16[i9 + 1120 + (i3 + i1 << 1) >> 1] | 0;
     HEAP8[i5 + i11 >> 0] = i2;
     i12 = (_Huffman_ReverseBits(i3 + i7 | 0, i2) | 0) & 65535;
     HEAP16[i6 + (i11 << 1) >> 1] = i12;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i4 | 0));
   }
  }
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != 16);
 STACKTOP = i10;
 return;
}

function _Gamepad_SetAxis(i3, i1, d5, d6, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d5 = +d5;
 d6 = +d6;
 d2 = +d2;
 var i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i7;
 HEAPF32[353600 + (i3 * 220 | 0) + 80 + (i1 << 2) >> 2] = d5;
 HEAPF32[353600 + (i3 * 220 | 0) + 88 + (i1 << 2) >> 2] = d6;
 if (!(d5 == 0.0 & d6 == 0.0)) {
  d2 = d2 * 60.0 * +HEAPF32[6128 + (HEAP32[15300 + (i1 << 2) >> 2] << 2) >> 2];
  HEAP32[i4 >> 2] = i3;
  HEAP32[i4 + 4 >> 2] = i1;
  d5 = d2 * d5;
  HEAPF32[i4 + 8 >> 2] = d5;
  d6 = d2 * d6;
  HEAPF32[i4 + 12 >> 2] = d6;
  i1 = _Utils_AccumulateWheelDelta(353600 + (i3 * 220 | 0) + 212 | 0, d5 / 100.0) | 0;
  HEAP32[i4 + 16 >> 2] = i1;
  i3 = _Utils_AccumulateWheelDelta(353600 + (i3 * 220 | 0) + 216 | 0, d6 / 100.0) | 0;
  HEAP32[i4 + 20 >> 2] = i3;
  _Event_RaisePadAxis(1687684, i4);
 }
 STACKTOP = i7;
 return;
}

function _SpecialInputWidget_MeasureContent(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i10;
 _DrawTextArgs_MakeEmpty(i1, HEAP32[i9 + 88 >> 2] | 0, 0);
 i3 = i8 + 4 | 0;
 HEAP16[i1 + 4 >> 1] = HEAP32[i3 >> 2];
 i7 = _Drawer2D_TextHeight(i1) | 0;
 i5 = i8 + 24 | 0;
 if (!(HEAP16[i5 >> 1] | 0)) i1 = 5; else {
  i2 = i8 + 20 | 0;
  i4 = 0;
  i6 = 0;
  do {
   HEAP32[i1 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
   i11 = _Drawer2D_TextWidth(i1) | 0;
   i6 = (i6 | 0) > (i11 | 0) ? i6 : i11;
   i4 = (HEAP32[i3 >> 2] | 0) + i4 | 0;
  } while ((i4 | 0) < (HEAPU16[i5 >> 1] | 0));
  i1 = i6 + 5 | 0;
 }
 HEAP32[i9 + 40 >> 2] = i1;
 HEAP32[i9 + 44 >> 2] = i7 + 5;
 i11 = Math_imul(HEAP32[i8 >> 2] | 0, i1) | 0;
 STACKTOP = i10;
 return i11 | 0;
}

function _KeyBindsScreen_Update(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i8 + 64 | 0;
 HEAP32[i6 >> 2] = i8;
 HEAP16[i6 + 4 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 64;
 i2 = HEAP32[(HEAP32[427513] | 0) + 72 >> 2] | 0;
 i4 = HEAPU8[(HEAP32[i5 + 48 >> 2] | 0) + i3 >> 0] | 0;
 i1 = HEAP8[i2 + (i4 << 1) + 1 >> 0] | 0;
 i7 = i1 << 24 >> 24 != 0;
 if (i7) i1 = HEAP32[5008 + ((i1 & 255) << 2) >> 2] | 0; else i1 = 1868813;
 _String_Format4(i6, (HEAP32[i5 + 36 >> 2] | 0) == (i3 | 0) ? 44814 : 44829, HEAP32[(HEAP32[i5 + 44 >> 2] | 0) + (i3 << 2) >> 2] | 0, HEAP32[5008 + ((HEAPU8[i2 + (i4 << 1) >> 0] | 0) << 2) >> 2] | 0, i7 ? 44840 : 1868813, i1);
 _ButtonWidget_Set(i5 + 492 + (i3 * 84 | 0) | 0, i6, i5 + 84 | 0);
 HEAP8[i5 + 7 >> 0] = 1;
 STACKTOP = i8;
 return;
}

function _HacksSettingsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 39531, 36, 285, 0);
 _MenuOptionsScreen_AddNum(i1, 41534, .10000000149011612, 50.0, 10.0, 286, 287, 0);
 _MenuOptionsScreen_AddBool(i1, 41551, 37, 288, 41567);
 _MenuOptionsScreen_AddNum(i1, 41670, .10000000149011612, 2048.0, 1.2330000400543213, 289, 290, 41682);
 _MenuOptionsScreen_AddBool(i1, 41797, 38, 291, 41813);
 _MenuOptionsScreen_AddBool(i1, 42062, 39, 292, 0);
 _MenuOptionsScreen_AddBool(i1, 45108, 40, 293, 0);
 _MenuOptionsScreen_AddBool(i1, 42082, 41, 294, 42099);
 _MenuOptionsScreen_AddBool(i1, 42282, 42, 295, 42295);
 _MenuOptionsScreen_AddInt(i1, 42393, 1, 179, 70, 43, 296, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 HEAP32[i1 + 96 >> 2] = 297;
 _HacksSettingsScreen_CheckHacksAllowed(i1);
 return;
}

function _LocalPlayer_HandleNoclip(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = 146288 + (i1 * 796 | 0) + 460 | 0;
 HEAP8[146288 + (i1 * 796 | 0) + 462 >> 0] = 1;
 do if (!(HEAP32[422387] | 0)) {
  if (HEAP8[146288 + (i1 * 796 | 0) + 476 >> 0] | 0) if (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) {
   if (HEAP8[146288 + (i1 * 796 | 0) + 493 >> 0] | 0) {
    i1 = 1;
    break;
   }
   i3 = (HEAP8[146288 + (i1 * 796 | 0) + 494 >> 0] | 0) == 0;
   if (!i3) HEAPF32[146288 + (i1 * 796 | 0) + 40 >> 2] = 0.0;
   _HacksComp_SetNoclip(i2, i3 & 1);
   i1 = 1;
   break;
  }
  i1 = 146288 + (i1 * 796 | 0) + 790 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   HEAP8[i1 >> 0] = 1;
   if (!(HEAP8[1868739] | 0)) i1 = 0; else {
    _Chat_AddRaw(30477);
    i1 = 0;
   }
  } else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _ListScreen_Init(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 + 16 >> 2] = 364288;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 10;
 HEAP32[i4 + 804 >> 2] = 0;
 i2 = i4 + 36 | 0;
 i1 = i4 + 808 | 0;
 i3 = 0;
 do {
  _ButtonWidget_Add(i4, i2 + (i3 * 84 | 0) | 0, 300, HEAP32[i1 >> 2] | 0);
  HEAP32[i2 + (i3 * 84 | 0) + 36 >> 2] = i3;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 5);
 i3 = (HEAP8[1868784] | 0) == 0 ? 400 : 140;
 _ButtonWidget_Add(i4, i4 + 708 | 0, i3, HEAP32[i4 + 816 >> 2] | 0);
 _ButtonWidget_Add(i4, i4 + 456 | 0, 40, 141);
 _ButtonWidget_Add(i4, i4 + 540 | 0, 40, 142);
 _TextWidget_Add(i4, i4 + 836 | 0);
 _ButtonWidget_Add(i4, i4 + 624 | 0, i3, HEAP32[i4 + 812 >> 2] | 0);
 i3 = _Screen_CalcDefaultMaxVertices(i4) | 0;
 HEAP32[i4 + 8 >> 2] = i3;
 FUNCTION_TABLE_vi[HEAP32[i4 + 824 >> 2] & 511](i4);
 return;
}

function _GenLevelScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Gui_MakeTitleFont(i3);
 i4 = i1 + 36 | 0;
 _Gui_MakeBodyFont(i4);
 _Screen_UpdateVb(i1);
 _TextInputWidget_SetFont(i1 + 300 | 0, i4);
 _TextInputWidget_SetFont(i1 + 600 | 0, i4);
 _TextInputWidget_SetFont(i1 + 900 | 0, i4);
 _TextInputWidget_SetFont(i1 + 1200 | 0, i4);
 _TextWidget_SetConst(i1 + 1500 | 0, 43856, i4);
 _TextWidget_SetConst(i1 + 1572 | 0, 43863, i4);
 _TextWidget_SetConst(i1 + 1644 | 0, 43871, i4);
 _TextWidget_SetConst(i1 + 1716 | 0, 43879, i4);
 _TextWidget_SetConst(i1 + 1788 | 0, 43885, i4);
 _ButtonWidget_SetConst(i1 + 48 | 0, 43904, i3);
 _ButtonWidget_SetConst(i1 + 132 | 0, 43914, i3);
 _ButtonWidget_SetConst(i1 + 216 | 0, 48180, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _Input_HandleMouseWheel(d4) {
 d4 = +d4;
 var i1 = 0, d2 = 0.0, i3 = 0;
 if (!((HEAP8[1868517] | HEAP8[1868516] | HEAP8[1868514] | HEAP8[1868515]) << 24 >> 24)) if (!((HEAP8[1868513] | HEAP8[1868512]) << 24 >> 24)) if (!((FUNCTION_TABLE_id[HEAP32[(HEAP32[1656644 >> 2] | 0) + 40 >> 2] & 3](d4) | 0) << 24 >> 24)) i3 = 4; else i1 = 1; else i3 = 4; else i3 = 4;
 if ((i3 | 0) == 4) if (!(HEAP8[357288] | 0)) i1 = 0; else {
  i1 = HEAP32[417347] | 0;
  if (!(HEAP8[i1 + 470 >> 0] | 0)) i1 = 0; else if (!(HEAP8[i1 + 472 >> 0] | 0)) i1 = 0; else {
   d2 = +HEAPF32[3865];
   if (d2 == -1.0) {
    d2 = +(HEAP32[414165] | 0);
    HEAPF32[3865] = d2;
   }
   d4 = d2 - d4 * 5.0;
   d4 = d4 < 1.0 ? 1.0 : d4;
   d2 = +(HEAP32[414164] | 0);
   d4 = d4 > d2 ? d2 : d4;
   HEAPF32[3865] = d4;
   i1 = _InputHandler_SetFOV(~~d4) | 0;
  }
 }
 return i1 | 0;
}

function _CPE_MakeSelection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 12 | 0;
 i3 = i2;
 i5 = (_Stream_GetU16_BE(i1 + 65 | 0) | 0) << 16 >> 16;
 HEAP32[i4 >> 2] = i5;
 i5 = (_Stream_GetU16_BE(i1 + 67 | 0) | 0) << 16 >> 16;
 HEAP32[i4 + 4 >> 2] = i5;
 i5 = (_Stream_GetU16_BE(i1 + 69 | 0) | 0) << 16 >> 16;
 HEAP32[i4 + 8 >> 2] = i5;
 i5 = (_Stream_GetU16_BE(i1 + 71 | 0) | 0) << 16 >> 16;
 HEAP32[i3 >> 2] = i5;
 i5 = (_Stream_GetU16_BE(i1 + 73 | 0) | 0) << 16 >> 16;
 HEAP32[i3 + 4 >> 2] = i5;
 i5 = (_Stream_GetU16_BE(i1 + 75 | 0) | 0) << 16 >> 16;
 HEAP32[i3 + 8 >> 2] = i5;
 _Selections_Add(HEAP8[i1 >> 0] | 0, i4, i3, (HEAPU8[i1 + 80 >> 0] | 0) << 8 | (HEAPU8[i1 + 78 >> 0] | 0) | (HEAPU8[i1 + 82 >> 0] | 0) << 16 | (HEAPU8[i1 + 84 >> 0] | 0) << 24);
 STACKTOP = i2;
 return;
}

function _String_UNSAFE_SplitBy(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6 + 8 | 0;
 i5 = i6;
 i1 = _String_IndexOfAt(i3, 0, i1) | 0;
 if ((i1 | 0) == -1) {
  i5 = i3;
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i2 + 4 >> 2] = i4;
  i2 = 1841616;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i5 = i3;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
 } else {
  _String_UNSAFE_Substring(i4, i3, 0, i1);
  i7 = i4;
  i4 = HEAP32[i7 + 4 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i2 + 4 >> 2] = i4;
  _String_UNSAFE_SubstringAt(i5, i3, i1 + 1 | 0);
  i2 = i5;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i5 = i3;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
 }
 STACKTOP = i6;
 return;
}

function _DrawOpCommand_Execute() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i5 + 36 | 0;
 i4 = i5 + 24 | 0;
 i3 = i5 + 12 | 0;
 i1 = i5;
 _IVec3_Min(i3, 1667232, 1667244);
 _IVec3_Max(i1, 1667232, 1667244);
 if ((_World_Contains_120(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0) << 24 >> 24) if ((_World_Contains_120(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0) << 24 >> 24) {
  i6 = HEAP32[416805] | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  FUNCTION_TABLE_vii[i6 & 255](i4, i2);
 }
 STACKTOP = i5;
 return;
}

function _Queue_Resize(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i6 = i7 + 8 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 536870910) {
  _Chat_AddRaw(47919);
  _Queue_Clear(i7);
 } else {
  i5 = i1 << 1;
  i5 = (i5 | 0) > 32 ? i5 : 32;
  i8 = i7 + 4 | 0;
  i1 = _Mem_Alloc(i5, HEAP32[i8 >> 2] | 0, 47962) | 0;
  i2 = i7 + 20 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i8 = HEAP32[i8 >> 2] | 0;
  i4 = Math_imul((HEAP32[i6 >> 2] | 0) - i3 | 0, i8) | 0;
  i3 = Math_imul(i8, i3) | 0;
  _Mem_Copy(i1, (HEAP32[i7 >> 2] | 0) + i3 | 0, i4) | 0;
  if (HEAP32[i2 >> 2] | 0) _Mem_Copy(i1 + i4 | 0, HEAP32[i7 >> 2] | 0, i3) | 0;
  _Mem_Free(HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = i1;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i7 + 12 >> 2] = i5 + -1;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i7 + 24 >> 2] = HEAP32[i7 + 16 >> 2];
 }
 return;
}

function _Animations_Apply(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = i2 + 12 | 0;
 i1 = HEAP16[i3 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i1 = i2 + 8 | 0;
  i6 = ((HEAP16[i1 >> 1] | 0) + 1 & 65535) % (HEAPU16[i2 + 10 >> 1] | 0) | 0;
  HEAP16[i1 >> 1] = i6;
  HEAP16[i3 >> 1] = HEAP16[i2 + 14 >> 1] | 0;
  i1 = HEAPU16[i2 >> 1] | 0;
  i7 = HEAPU16[i2 + 6 >> 1] | 0;
  HEAP32[i4 + 4 >> 2] = i7;
  HEAP32[i4 + 8 >> 2] = i7;
  i3 = HEAP32[247111] | 0;
  i8 = (HEAP32[247110] | 0) + ((Math_imul(i3, HEAPU16[i2 + 4 >> 1] | 0) | 0) << 2) | 0;
  i2 = i8 + ((Math_imul(i7, i6 & 65535) | 0) + (HEAPU16[i2 + 2 >> 1] | 0) << 2) | 0;
  HEAP32[i4 >> 2] = i2;
  _Animations_Update(i1, i4, i3);
 } else HEAP16[i3 >> 1] = i1 + -1 << 16 >> 16;
 STACKTOP = i5;
 return;
}

function _InputWidget_FormatLine(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i2 = i3 + 72 + (i1 << 3) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i2;
 L1 : do if (!(HEAP8[i3 + 144 >> 0] | 0)) _String_AppendString(i4, i5); else {
  i3 = i5 + 4 | 0;
  if (!(0 == 0 & (i2 & 65535 | 0) == 0)) {
   i2 = 0;
   while (1) {
    i1 = HEAP8[i1 + i2 >> 0] | 0;
    i2 = i2 + 1 | 0;
    if (i1 << 24 >> 24 == 37) {
     i1 = (_Drawer2D_ValidColorCodeAt(i5, i2) | 0) << 24 >> 24 == 0;
     i1 = i1 ? 37 : 38;
    }
    _String_Append(i4, i1);
    if (i2 >>> 0 >= (HEAPU16[i3 >> 1] | 0) >>> 0) break L1;
    i1 = HEAP32[i5 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _InputWidget_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 L1 : do if ((HEAP32[i1 + 24 >> 2] | 0) == (i2 | 0)) {
  _InputWidget_LeftKey(i3);
  i4 = 11;
 } else {
  if ((HEAP32[i1 + 28 >> 2] | 0) == (i2 | 0)) {
   _InputWidget_RightKey(i3);
   i4 = 11;
   break;
  }
  switch (i2 | 0) {
  case 94:
   {
    _InputWidget_BackspaceKey(i3);
    i4 = 11;
    break L1;
   }
  case 59:
   {
    _InputWidget_DeleteKey(i3);
    i4 = 11;
    break L1;
   }
  case 60:
   {
    _InputWidget_HomeKey(i3);
    i4 = 11;
    break L1;
   }
  case 61:
   {
    _InputWidget_EndKey(i3);
    i4 = 11;
    break L1;
   }
  default:
   if (!((_InputWidget_OtherKey(i3, i2) | 0) << 24 >> 24)) {
    i1 = 0;
    break L1;
   } else {
    i4 = 11;
    break L1;
   }
  }
 } while (0);
 if ((i4 | 0) == 11) i1 = 1;
 return i1 | 0;
}

function _BlockEditCommand_GetCoords(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6;
 i5 = i6 + 24 | 0;
 if ((_String_UNSAFE_Split(i1, 32, i4, 3) | 0) == 3) if (!((_BlockEditCommand_GetInt(i4, 27681, i5, -127, 127) | 0) << 24 >> 24)) i1 = 0; else {
  i1 = i5 + 4 | 0;
  if (!((_BlockEditCommand_GetInt(i4 + 8 | 0, 27689, i1, -127, 127) | 0) << 24 >> 24)) i1 = 0; else {
   i2 = i5 + 8 | 0;
   if (!((_BlockEditCommand_GetInt(i4 + 16 | 0, 27697, i2, -127, 127) | 0) << 24 >> 24)) i1 = 0; else {
    HEAPF32[i3 >> 2] = +(HEAP32[i5 >> 2] | 0) * .0625;
    HEAPF32[i3 + 4 >> 2] = +(HEAP32[i1 >> 2] | 0) * .0625;
    HEAPF32[i3 + 8 >> 2] = +(HEAP32[i2 >> 2] | 0) * .0625;
    i1 = 1;
   }
  }
 } else {
  _Chat_AddRaw(27619);
  i1 = 0;
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _Physics_Init() {
 var i1 = 0;
 _Event_Register(1680924, 0, 193);
 i1 = _Options_GetBool(42728, 1) | 0;
 HEAP8[1652260] = i1;
 _TickQueue_Init(1656360);
 _TickQueue_Init(1656384);
 HEAP32[413590] = 79;
 HEAP32[413591] = 79;
 HEAP32[413078] = 79;
 HEAP32[413079] = 79;
 HEAP32[413334] = 79;
 HEAP32[413335] = 79;
 HEAP32[413328] = 80;
 HEAP32[413325] = 81;
 HEAP32[413324] = 82;
 HEAP32[413359] = 83;
 HEAP32[413360] = 83;
 HEAP32[413362] = 84;
 HEAP32[413361] = 84;
 HEAP32[413588] = 85;
 HEAP32[413586] = 86;
 HEAP32[413597] = 87;
 HEAP32[413853] = 88;
 HEAP32[413074] = 86;
 HEAP32[413075] = 86;
 HEAP32[413076] = 85;
 HEAP32[413077] = 85;
 HEAP32[413330] = 89;
 HEAP32[413331] = 89;
 HEAP32[413332] = 90;
 HEAP32[413333] = 90;
 HEAP32[413622] = 91;
 if (!(HEAP8[1868754] | 0)) {
  HEAP32[413628] = 92;
  HEAP32[413624] = 93;
 }
 return;
}

function _Ping_AveragePingMS() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = 0;
 i2 = 0;
 i3 = 0;
 i4 = 0;
 do {
  i7 = 955840 + (i3 * 24 | 0) | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i7 + 4 >> 2] | 0;
  i10 = 955840 + (i3 * 24 | 0) + 8 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i10 = HEAP32[i10 + 4 >> 2] | 0;
  i9 = (i5 | 0) == 0 & (i7 | 0) == 0;
  i8 = (i11 | 0) == 0 & (i10 | 0) == 0;
  i6 = i9 | i8;
  i7 = _i64Subtract(i11 | 0, i10 | 0, i5 | 0, i7 | 0) | 0;
  i5 = getTempRet0() | 0;
  i4 = i4 + (((i9 | i8) ^ 1) & 1) | 0;
  i1 = _i64Add((i6 ? 0 : i7) | 0, (i6 ? 0 : i5) | 0, i1 | 0, i2 | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 10);
 if (!i4) i1 = 0; else i1 = ((_Stopwatch_ElapsedMS(0, 0, i1, i2) | 0) / 2 | 0 | 0) / (i4 | 0) | 0;
 return i1 | 0;
}

function _NotchyGen_CreateStrataFast() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[244739] | 0;
 HEAPF32[422259] = 0.0;
 HEAP32[422258] = 33120;
 _Mem_Set(HEAP32[422257] | 0, 11, i4) | 0;
 i1 = HEAP32[422265] | 0;
 i5 = i1 + -14 | 0;
 if ((i1 | 0) < 15) i2 = HEAP32[244734] | 0; else {
  i1 = i1 + -13 | 0;
  i3 = 1;
  do {
   _Mem_Set((HEAP32[422257] | 0) + (Math_imul(i3, i4) | 0) | 0, 1, i4) | 0;
   i2 = HEAP32[244734] | 0;
   HEAPF32[422259] = +(i3 | 0) / +(i2 | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i1 | 0));
 }
 i1 = ((i5 | 0) > 0 ? i5 : 0) + 1 | 0;
 if ((i1 | 0) < (i2 | 0)) do {
  _Mem_Set((HEAP32[422257] | 0) + (Math_imul(i1, i4) | 0) | 0, 0, i4) | 0;
  i3 = HEAP32[244734] | 0;
  HEAPF32[422259] = +(i1 | 0) / +(i3 | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return ((i5 | 0) > 1 ? i5 : 1) | 0;
}

function _GetCachedLastModified(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 _GetCachedTag(i6, i1, 1859180);
 i4 = i6 + 4 | 0;
 i1 = HEAP16[i4 >> 1] | 0;
 L1 : do if (!(i1 << 16 >> 16)) i7 = 6; else {
  i3 = HEAP32[i6 >> 2] | 0;
  i1 = i1 & 65535;
  i2 = 0;
  while (1) {
   if (((HEAP8[i3 + i2 >> 0] | 0) + -48 & 255) > 9) break;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) {
    i7 = 6;
    break L1;
   }
  }
  i3 = i6;
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  i6 = i5;
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i6 + 4 >> 2] = i4;
 } while (0);
 if ((i7 | 0) == 6) {
  HEAP16[i4 >> 1] = 0;
  i4 = i6;
  i6 = HEAP32[i4 + 4 >> 2] | 0;
  i7 = i5;
  HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i7 + 4 >> 2] = i6;
 }
 STACKTOP = i8;
 return;
}

function _Block_DefineCustom(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 _Block_UNSAFE_GetName(i1, i4);
 i3 = i4 & 65535;
 i2 = _DefaultSet_MapOldCollide(i4, HEAP8[1000996 + i3 >> 0] | 0) | 0;
 if ((HEAP32[994852 + (i3 << 2) >> 2] | 0) == -16777216) i1 = 0; else {
  i1 = _String_IndexOfAt(i1, 0, 35) | 0;
  i1 = (31 ? i1 >>> 31 : i1) & 255 ^ 1;
 }
 HEAP8[1008676 + i3 >> 0] = i1;
 _Block_SetCollide(i4, i2);
 i1 = 1006372 + i3 | 0;
 _Block_SetDrawType(i4, HEAP8[i1 >> 0] | 0);
 _Block_CalcRenderBounds(i4);
 _Block_UpdateCulling(i4);
 _Block_CalcLightOffset(i4);
 _Inventory_AddDefault(i4);
 _Block_SetCustomDefined(i4, 1);
 _Event_RaiseVoid(1680144);
 if (i5 << 24 >> 24) if ((HEAP8[i1 >> 0] | 0) == 5) _Block_RecalculateBB(i4);
 STACKTOP = i6;
 return;
}

function _HeadModel_Draw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 48);
 HEAP32[i3 >> 2] = HEAP32[428722];
 HEAP32[i3 + 4 >> 2] = HEAP32[428723];
 HEAP32[i3 + 8 >> 2] = HEAP32[428724];
 HEAP32[i3 + 12 >> 2] = HEAP32[428725];
 i4 = i3 + 8 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] + .25;
 i1 = i1 + 16 | 0;
 _Model_DrawRotate(+HEAPF32[i1 >> 2] * -.01745329238474369, 0.0, 0.0, i3, 1);
 HEAP32[i3 >> 2] = HEAP32[428730];
 HEAP32[i3 + 4 >> 2] = HEAP32[428731];
 HEAP32[i3 + 8 >> 2] = HEAP32[428732];
 HEAP32[i3 + 12 >> 2] = HEAP32[428733];
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] + .25;
 _Model_DrawRotate(+HEAPF32[i1 >> 2] * -.01745329238474369, 0.0, 0.0, i3, 1);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(48);
 STACKTOP = i2;
 return;
}

function _ReplaceCommand_Execute(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i4 + 16 | 0;
 i3 = i4;
 i6 = i2;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i2 + 4 >> 2] = i5;
 _DrawOpCommand_ResetState();
 HEAP32[416804] = 25522;
 HEAP32[416805] = 96;
 _DrawOpCommand_ExtractPersistArg(i1);
 HEAP32[416806] = -1;
 do if (!(HEAP16[i1 + 4 >> 1] | 0)) _Chat_AddRaw(25846); else {
  i1 = _String_UNSAFE_Split(i1, 32, i3, 2) | 0;
  i6 = _DrawOpCommand_ParseBlock(i3) | 0;
  HEAP32[416807] = i6;
  if ((i6 | 0) != -1) {
   if ((i1 | 0) > 1) {
    i6 = _DrawOpCommand_ParseBlock(i3 + 8 | 0) | 0;
    HEAP32[416806] = i6;
    if ((i6 | 0) == -1) break;
   }
   _DrawOpCommand_Begin();
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _Gfx_Draw2DFlat(i4, i5, i3, i2, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 _Gfx_SetVertexFormat(0);
 i6 = _Gfx_LockDynamicVb(0, 0, 4) | 0;
 d8 = +(i4 | 0);
 HEAPF32[i6 >> 2] = d8;
 d9 = +(i5 | 0);
 HEAPF32[i6 + 4 >> 2] = d9;
 HEAPF32[i6 + 8 >> 2] = 0.0;
 HEAP32[i6 + 12 >> 2] = i1;
 d7 = +(i3 + i4 | 0);
 HEAPF32[i6 + 16 >> 2] = d7;
 HEAPF32[i6 + 20 >> 2] = d9;
 HEAPF32[i6 + 24 >> 2] = 0.0;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAPF32[i6 + 32 >> 2] = d7;
 d7 = +(i2 + i5 | 0);
 HEAPF32[i6 + 36 >> 2] = d7;
 HEAPF32[i6 + 40 >> 2] = 0.0;
 HEAP32[i6 + 44 >> 2] = i1;
 HEAPF32[i6 + 48 >> 2] = d8;
 HEAPF32[i6 + 52 >> 2] = d7;
 HEAPF32[i6 + 56 >> 2] = 0.0;
 HEAP32[i6 + 60 >> 2] = i1;
 _Gfx_UnlockDynamicVb(HEAP32[422312] | 0);
 _Gfx_DrawVb_IndexedTris(4);
 return;
}

function _ScrollbarWidget_Create(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Widget_Reset(i1);
 HEAP32[i1 >> 2] = 23124;
 i2 = _Display_ScaleX_2472(i2) | 0;
 HEAP32[i1 + 12 >> 2] = i2;
 i2 = _Display_ScaleX_2472(2) | 0;
 HEAP32[i1 + 68 >> 2] = i2;
 i2 = _Display_ScaleY_2473(2) | 0;
 HEAP32[i1 + 72 >> 2] = i2;
 i2 = _Display_ScaleX_2472(3) | 0;
 HEAP32[i1 + 76 >> 2] = i2;
 i2 = _Display_ScaleY_2473(-5) | 0;
 HEAP32[i1 + 80 >> 2] = i2;
 i2 = _Display_ScaleY_2473(-1) | 0;
 HEAP32[i1 + 84 >> 2] = i2;
 i2 = _Display_ScaleY_2473(3) | 0;
 HEAP32[i1 + 88 >> 2] = i2;
 i2 = i1 + 40 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 if (HEAP8[1689553] | 0) {
  i2 = _Display_ScaleX_2472(15) | 0;
  HEAP32[i1 + 64 >> 2] = i2;
 }
 return;
}

function _PackedCol_TryParseHex(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i7;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = HEAP16[i2 + 4 >> 1] | 0;
 do if ((i3 & 65535) < 6) i1 = 0; else {
  i2 = HEAP8[i1 >> 0] | 0;
  if (i3 << 16 >> 16 == 6) {
   if (i2 << 24 >> 24 == 35) i6 = 5;
  } else if ((i3 & 65535) > 7 | i2 << 24 >> 24 != 35) {
   i1 = 0;
   break;
  } else i6 = 5;
  if ((i6 | 0) == 5) i1 = i1 + 1 | 0;
  if (!((_PackedCol_Unhex(i1, i4, 6) | 0) << 24 >> 24)) i1 = 0; else {
   HEAP8[i5 >> 0] = HEAP32[i4 >> 2] << 4 | HEAP32[i4 + 4 >> 2];
   HEAP8[i5 + 1 >> 0] = HEAP32[i4 + 8 >> 2] << 4 | HEAP32[i4 + 12 >> 2];
   HEAP8[i5 + 2 >> 0] = HEAP32[i4 + 16 >> 2] << 4 | HEAP32[i4 + 20 >> 2];
   i1 = 1;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _TryUpdateTouch(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[422517] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP32[352464 + (i1 * 24 | 0) >> 2] | 0) == (i5 | 0)) {
    i3 = 352464 + (i1 * 24 | 0) + 4 | 0;
    i2 = HEAP8[i3 >> 0] | 0;
    if (i2 << 24 >> 24) break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) {
    i1 = 0;
    break L1;
   }
  }
  if (!((i2 & 2) == 0 | (HEAP8[1868648] | 0) == 0)) {
   if (i2 << 24 >> 24 == 7) if ((_MovedFromBeg(i1, i6, i7) | 0) << 24 >> 24) HEAP8[i3 >> 0] = 2;
   _Event_RaiseRawMove(1687424, +(i6 - (HEAP32[353344 + (i1 << 3) >> 2] | 0) | 0), +(i7 - (HEAP32[353344 + (i1 << 3) + 4 >> 2] | 0) | 0));
  }
  _Pointer_SetPosition(i1, i6, i7);
  i1 = 1;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _String_Compare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = HEAP16[i1 + 4 >> 1] | 0;
 i5 = HEAP16[i2 + 4 >> 1] | 0;
 i7 = i6 & 65535;
 i8 = i5 & 65535;
 i5 = (i6 & 65535) < (i5 & 65535) ? i6 : i5;
 i6 = i5 & 65535;
 L1 : do if (!(i5 << 16 >> 16)) i9 = 6; else {
  i5 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  i4 = 0;
  while (1) {
   i2 = HEAP8[i5 + i4 >> 0] | 0;
   i2 = (i2 + -65 & 255) < 26 ? (i2 & 255) + 32 & 255 : i2;
   i3 = HEAP8[i1 + i4 >> 0] | 0;
   i3 = (i3 + -65 & 255) < 26 ? (i3 & 255) + 32 & 255 : i3;
   i4 = i4 + 1 | 0;
   if (i2 << 24 >> 24 != i3 << 24 >> 24) break;
   if (i4 >>> 0 >= i6 >>> 0) {
    i9 = 6;
    break L1;
   }
  }
  i1 = (i2 & 255) - (i3 & 255) | 0;
 } while (0);
 if ((i9 | 0) == 6) i1 = i7 - i8 | 0;
 return i1 | 0;
}

function _Physics_PlaceSponge(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = HEAP32[244733] | 0;
 i1 = (i2 | 0) / (i3 | 0) | 0;
 i2 = i2 - (Math_imul(i1, i3) | 0) | 0;
 i3 = HEAP32[244735] | 0;
 i7 = (i1 | 0) / (i3 | 0) | 0;
 i3 = i1 - (Math_imul(i7, i3) | 0) | 0;
 i1 = i7 + 2 | 0;
 i4 = i3 + -2 | 0;
 i3 = i3 + 2 | 0;
 i5 = i2 + -2 | 0;
 i2 = i2 + 2 | 0;
 i7 = i7 + -2 | 0;
 while (1) {
  i8 = i4;
  while (1) {
   i6 = i5;
   while (1) {
    if ((_World_Contains(i6, i7, i8) | 0) << 24 >> 24) if (((_World_GetBlock(i6, i7, i8) | 0) & -2) << 16 >> 16 == 8) _Game_UpdateBlock(i6, i7, i8, 0);
    if ((i6 | 0) < (i2 | 0)) i6 = i6 + 1 | 0; else break;
   }
   if ((i8 | 0) < (i3 | 0)) i8 = i8 + 1 | 0; else break;
  }
  if ((i7 | 0) < (i1 | 0)) i7 = i7 + 1 | 0; else break;
 }
 return;
}

function _GameVersion_Load() {
 var i1 = 0, i2 = 0, i3 = 0;
 if (!(HEAP8[1868754] | 0)) {
  i3 = (_Options_GetBool(43282, 1) | 0) << 24 >> 24 == 0;
  i1 = _Options_GetInt(43269, 27, 30, 30) | 0;
  if (i3) i2 = 4; else i1 = 14756;
 } else {
  i1 = _Options_GetInt(43269, 27, 30, 30) | 0;
  i2 = 4;
 }
 L4 : do if ((i2 | 0) == 4) switch (i1 | 0) {
 case 30:
  {
   i1 = 14852;
   break L4;
  }
 case 29:
  {
   i1 = 14780;
   break L4;
  }
 case 28:
  {
   i1 = 14804;
   break L4;
  }
 case 27:
  {
   i1 = 14828;
   break L4;
  }
 default:
  {
   i1 = 14756;
   break L4;
  }
 } while (0);
 HEAP32[422246] = HEAP32[i1 >> 2];
 HEAP32[422247] = HEAP32[i1 + 4 >> 2];
 HEAP32[422248] = HEAP32[i1 + 8 >> 2];
 HEAP32[422249] = HEAP32[i1 + 12 >> 2];
 HEAP32[422250] = HEAP32[i1 + 16 >> 2];
 HEAP32[422251] = HEAP32[i1 + 20 >> 2];
 return;
}

function _AddEntity(i4, i5, i6, i8, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i9 = 0;
 i2 = HEAP32[417347] | 0;
 i1 = i5 & 255;
 i3 = i5 << 24 >> 24 != -1;
 if (i3) {
  _Entities_Remove(i1);
  i9 = 147088 + (i1 * 804 | 0) | 0;
  _NetPlayer_Init(i9);
  HEAP32[1668360 + (i1 << 2) >> 2] = i9;
  _Event_RaiseInt(1675464, i1);
  i1 = i9;
 } else i1 = i2;
 _Entity_SetSkin(i1, i8);
 _Entity_SetName(i1, i6);
 if (i7 << 24 >> 24) {
  _Classic_ReadAbsoluteLocation(i4, i5, 7);
  if (!i3) {
   i9 = i2 + 424 | 0;
   i8 = i2 + 4 | 0;
   HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i2 + 448 >> 2] = HEAP32[i2 + 20 >> 2];
   HEAP32[i2 + 452 >> 2] = HEAP32[i2 + 16 >> 2];
  }
 }
 return;
}

function _TextGroupWidget_ShiftUp(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i3 = i5 + 84 | 0;
 _Gfx_DeleteTexture(HEAP32[i3 >> 2] | 0);
 i2 = HEAP32[i5 + 40 >> 2] | 0;
 i4 = i2 + -1 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) > 1) {
  i2 = 0;
  do {
   i6 = i1 + (i2 * 28 | 0) | 0;
   i2 = i2 + 1 | 0;
   i1 = i1 + (i2 * 28 | 0) | 0;
   HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i6 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
   HEAP32[i6 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
   i1 = HEAP32[i3 >> 2] | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 HEAP32[i1 + (i4 * 28 | 0) >> 2] = 0;
 _TextGroupWidget_Redraw(i5, i4);
 return;
}

function _SoundComp_Tick(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 12 | 0;
 i2 = i5;
 i6 = i1 + 384 | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 _SoundComp_GetSound(i1);
 if (!(HEAP8[1868740] | 0)) _Vec3_BigPos(i2);
 if (HEAP8[i1 + 111 >> 0] | 0) {
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  if (!(i4 << 24 >> 24 != 0 & (_SoundComp_ShouldPlay(i1, i3) | 0) << 24 >> 24 == 0)) {
   _Audio_PlayStepSound(HEAP8[1868741] | 0);
   HEAP32[3627] = HEAP32[i2 >> 2];
   HEAP32[3628] = HEAP32[i2 + 4 >> 2];
   HEAP32[3629] = HEAP32[i2 + 8 >> 2];
  }
 }
 STACKTOP = i5;
 return;
}

function _TouchScreen_PointerUp(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0;
 i7 = ~i6;
 i4 = i3 + 76 | 0;
 HEAP8[i4 >> 0] = (HEAPU8[i4 >> 0] | 0) & i7;
 i4 = i3 + 1380 | 0;
 HEAP8[i4 >> 0] = (HEAPU8[i4 >> 0] | 0) & i7;
 i4 = HEAP32[i3 + 40 >> 2] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i3 = i3 + 1192 | 0;
  i1 = 0;
  while (1) {
   i5 = i3 + (i1 * 84 | 0) + 20 | 0;
   i2 = HEAP8[i5 >> 0] | 0;
   if (i2 & 255 & i6 | 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L1;
  }
  i1 = HEAP8[(HEAP32[i3 + (i1 * 84 | 0) + 36 >> 2] | 0) + 4 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i1 = i2 & 255; else {
   FUNCTION_TABLE_vii[HEAP32[357536 + ((i1 & 255) << 2) >> 2] & 255](0, 15216);
   i1 = HEAPU8[i5 >> 0] | 0;
  }
  HEAP8[i5 >> 0] = i1 & i7;
 } while (0);
 return;
}

function _ZLibHeader_Read(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 switch (HEAP8[i4 >> 0] | 0) {
 case 0:
  {
   i2 = i3 + 4 | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 127](i3, i5) | 0;
   if (!i1) if ((HEAP8[i5 >> 0] & 15) == 8) {
    HEAP8[i4 >> 0] = (HEAP8[i4 >> 0] | 0) + 1 << 24 >> 24;
    i1 = i2;
    i6 = 6;
   } else i1 = -857812935;
   break;
  }
 case 1:
  {
   i1 = i3 + 4 | 0;
   i6 = 6;
   break;
  }
 default:
  i1 = 0;
 }
 if ((i6 | 0) == 6) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 127](i3, i5) | 0;
  if (!i1) if (!(HEAP8[i5 >> 0] & 32)) {
   HEAP8[i4 >> 0] = (HEAP8[i4 >> 0] | 0) + 1 << 24 >> 24;
   HEAP8[i4 + 1 >> 0] = 1;
   i1 = 0;
  } else i1 = -857812934;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _RegisterDefaultModels() {
 _Model_RegisterTexture(16852);
 _Model_RegisterTexture(16868);
 _Model_RegisterTexture(16884);
 _Model_RegisterTexture(16900);
 _Model_RegisterTexture(16916);
 _Model_RegisterTexture(16932);
 _Model_RegisterTexture(16948);
 _Model_RegisterTexture(16964);
 _Model_RegisterTexture(16980);
 _Model_RegisterTexture(16996);
 _HumanoidModel_Register();
 _MakeModel(17012);
 HEAP32[428695] = 17012;
 _BlockModel_Register();
 _ChickenModel_Register();
 _CreeperModel_Register();
 _PigModel_Register();
 _SheepModel_Register();
 _NoFurModel_Register();
 _SkeletonModel_Register();
 _SpiderModel_Register();
 _ZombieModel_Register();
 _ChibiModel_Register();
 _HeadModel_Register();
 _SittingModel_Register();
 _CorpseModel_Register();
 _SkinnedCubeModel_Register();
 _HoldModel_Register();
 return;
}

function _EnvSettingsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddHex(i1, 39668, -1, 13, 245, 0);
 _MenuOptionsScreen_AddHex(i1, 39681, -13159, 14, 246, 0);
 _MenuOptionsScreen_AddHex(i1, 39691, -1, 15, 247, 0);
 _MenuOptionsScreen_AddNum(i1, 39701, 0.0, 1.0e3, 1.0, 248, 249, 0);
 _MenuOptionsScreen_AddInt(i1, 39714, -1e4, 1e4, (HEAP32[244734] | 0) + 2 | 0, 16, 250, 0);
 _MenuOptionsScreen_AddHex(i1, 39728, -1, 17, 251, 0);
 _MenuOptionsScreen_AddHex(i1, 39743, -6579301, 18, 252, 0);
 _MenuOptionsScreen_AddEnum(i1, 39756, 23636, 3, 19, 253, 0);
 _MenuOptionsScreen_AddNum(i1, 39764, -100.0, 100.0, 1.0, 254, 255, 0);
 _MenuOptionsScreen_AddInt(i1, 39780, -2048, 2048, (HEAP32[244734] | 0) / 2 | 0, 20, 256, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 return;
}

function _Classic_Reset() {
 _Stream_ReadonlyMemory(1818104, 0, 0);
 HEAP8[1868801] = 0;
 HEAP8[1868800] = 0;
 HEAP32[431855] = 346;
 HEAP16[863454] = (HEAPU8[1688990] | 0) > 5 ? 131 : 130;
 HEAP32[431856] = 347;
 HEAP16[863455] = 1;
 HEAP32[431857] = 348;
 HEAP16[863456] = 1;
 HEAP32[431858] = 349;
 HEAP16[863457] = 1028;
 HEAP32[431859] = 350;
 HEAP16[863458] = 7;
 HEAP32[431861] = 351;
 HEAP16[863460] = 8;
 HEAP32[431862] = 352;
 HEAP16[863461] = 74;
 HEAP32[431863] = 353;
 HEAP16[863462] = 10;
 HEAP32[431864] = 354;
 HEAP16[863463] = 7;
 HEAP32[431865] = 355;
 HEAP16[863464] = 5;
 HEAP32[431866] = 356;
 HEAP16[863465] = 4;
 HEAP32[431867] = 357;
 HEAP16[863466] = 2;
 HEAP32[431868] = 358;
 HEAP16[863467] = 66;
 HEAP32[431869] = 359;
 HEAP16[863468] = 65;
 HEAP32[431870] = 360;
 HEAP16[863469] = 2;
 return;
}

function _Model_GetEntityTransform(i2, i1, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i6 + 12 | 0;
 i3 = i6;
 i7 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 if (HEAP8[i2 + 43 >> 0] | 0) {
  i7 = i3 + 4 | 0;
  HEAPF32[i7 >> 2] = +HEAPF32[i1 + 128 >> 2] + +HEAPF32[i7 >> 2];
 }
 if (HEAP8[1868754] | 0) if (HEAP8[i1 + 54 >> 0] & 4) {
  i7 = i3 + 4 | 0;
  HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] + -.09375;
 }
 i7 = HEAP32[i2 + 48 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 FUNCTION_TABLE_viii[i7 & 31](i1, i4, i5);
 STACKTOP = i6;
 return;
}

function _TableWidget_Add(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 _Widget_Reset(i3);
 HEAP32[i3 >> 2] = 23236;
 HEAP32[i3 + 56 >> 2] = -1e3;
 _ScrollbarWidget_Create(i3 + 1628 | 0, i1);
 HEAP8[i3 + 22 >> 0] = 1;
 HEAP8[i3 + 23 >> 0] = 1;
 HEAP32[i3 + 1720 >> 2] = -20;
 HEAP32[i3 + 1724 >> 2] = -20;
 HEAPF32[i3 + 88 >> 2] = 1.0;
 i1 = i3 + 85 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  HEAP8[i1 >> 0] = 1;
  HEAP32[i3 + 60 >> 2] = -1;
 }
 _AddWidget(i2, i3);
 i2 = (HEAP8[1689503] | 0) != 0;
 i1 = _Display_ScaleX_2472(i2 ? 20 : 15) | 0;
 HEAP32[i3 + 1732 >> 2] = i1;
 i1 = _Display_ScaleX_2472(i2 ? 28 : 15) | 0;
 HEAP32[i3 + 1736 >> 2] = i1;
 i1 = _Display_ScaleY_2473(i2 ? 46 : 35) | 0;
 HEAP32[i3 + 1740 >> 2] = i1;
 i2 = _Display_ScaleY_2473(i2 ? 14 : 15) | 0;
 HEAP32[i3 + 1744 >> 2] = i2;
 return;
}

function _TexPackOverlay_UpdateLine3(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i6 + 72 | 0;
 i4 = i6;
 i2 = i6 + 64 | 0;
 do if (!(HEAP8[i5 + 36 >> 0] | 0)) {
  i1 = HEAP32[i5 + 40 >> 2] | 0;
  if (i1 | 0) {
   HEAP32[i3 >> 2] = i4;
   HEAP16[i3 + 4 >> 1] = 0;
   HEAP16[i3 + 6 >> 1] = 64;
   HEAPF32[i2 >> 2] = +(i1 >>> 0) * 9.5367431640625e-07;
   _String_Format1(i3, 46100, i2);
   _TextWidget_Set(i5 + 620 | 0, i3, i5 + 56 | 0);
   break;
  }
  i1 = i5 + 620 | 0;
  i2 = i5 + 56 | 0;
  if (!(HEAP8[i5 + 38 >> 0] | 0)) {
   _TextWidget_SetConst(i1, 46145, i2);
   break;
  } else {
   _TextWidget_SetConst(i1, 46122, i2);
   break;
  }
 } else _TextWidget_SetConst(i5 + 620 | 0, 46050, i5 + 56 | 0); while (0);
 STACKTOP = i6;
 return;
}

function _WordWrap_GetCoords(i1, i8, i5, i6, i7) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0;
 i3 = (i1 | 0) == -1 ? 2147483647 : i1;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i7 >> 2] = 0;
 L1 : do if ((i5 | 0) > 0) {
  i2 = 0;
  i4 = 0;
  while (1) {
   i1 = HEAP16[i8 + (i4 << 3) + 4 >> 1] | 0;
   if (!(i1 << 16 >> 16)) {
    i9 = 7;
    break L1;
   }
   HEAP32[i7 >> 2] = i4;
   i1 = i2 + (i1 & 65535) | 0;
   i4 = i4 + 1 | 0;
   if ((i3 | 0) < (i1 | 0)) break;
   if ((i4 | 0) >= (i5 | 0)) {
    i9 = 7;
    break L1;
   } else i2 = i1;
  }
  i1 = i3 - i2 | 0;
  HEAP32[i6 >> 2] = i1;
 } else i9 = 7; while (0);
 if ((i9 | 0) == 7) i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) == -1) HEAP32[i6 >> 2] = HEAPU16[i8 + (HEAP32[i7 >> 2] << 3) + 4 >> 1];
 return;
}

function _TextGroupWidget_ShiftDown(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i4 + 40 >> 2] | 0;
 i2 = i5 + -1 | 0;
 i3 = i4 + 84 | 0;
 _Gfx_DeleteTexture((HEAP32[i3 >> 2] | 0) + (i2 * 28 | 0) | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i5 | 0) > 1) do {
  i6 = i1 + (i2 * 28 | 0) | 0;
  i5 = i2;
  i2 = i2 + -1 | 0;
  i1 = i1 + (i2 * 28 | 0) | 0;
  HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i6 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i6 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
  HEAP32[i6 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i5 | 0) > 1);
 HEAP32[i1 >> 2] = 0;
 _TextGroupWidget_Redraw(i4, 0);
 return;
}

function _SpecialInputWidget_DrawTitles(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9;
 _DrawTextArgs_MakeEmpty(i2, HEAP32[i7 + 88 >> 2] | 0, 0);
 i5 = i7 + 48 | 0;
 i6 = i7 + 92 | 0;
 i4 = 0;
 i8 = 0;
 while (1) {
  i11 = i7 + 96 + (i4 * 28 | 0) + 12 | 0;
  i10 = HEAP32[i11 + 4 >> 2] | 0;
  i1 = i2;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = i10;
  i1 = HEAP32[i7 + 96 + (i4 * 28 | 0) + 8 >> 2] | 0;
  _Context2D_Clear(i3, (i4 | 0) == (HEAP32[i5 >> 2] | 0) ? -937550306 : 2130706432, i8, 0, i1, HEAP32[i6 >> 2] | 0);
  _Context2D_DrawText(i3, i2, i8 + 5 | 0, 0);
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 5) break; else i8 = i1 + i8 | 0;
 }
 STACKTOP = i9;
 return;
}

function _Logger_DoAbort(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 3088 | 0;
 i6 = i4 + 3072 | 0;
 i5 = i4 + 3080 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i4;
 i4 = i5 + 4 | 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 3070;
 _String_AppendConst(i5, 39139);
 if (i2) {
  _String_Format1(i5, 39160, i2);
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (!i1) HEAP32[i6 >> 2] = 1; else _String_Format1(i5, 39172, i6);
 _Logger_Log(i5);
 _String_AppendConst(i5, 39176);
 _String_AppendConst(i5, 39238);
 if (!i3) _Logger_Log(15528); else {
  _DumpRegisters();
  _Logger_Log(15528);
 }
 HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAPU16[i4 >> 1] | 0) >> 0] = 0;
 _Window_ShowDialog(39296, HEAP32[i5 >> 2] | 0);
 _Process_Exit(HEAP32[i6 >> 2] | 0);
}

function _Hotkeys_Remove(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[422522] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = 355216;
  i1 = 0;
  while (1) {
   if ((HEAPU8[i3 + 4 >> 0] | 0) == (i5 | 0)) if ((HEAP8[i3 + 5 >> 0] | 0) == i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i2 | 0)) i3 = i3 + 8 | 0; else {
    i1 = 0;
    break L1;
   }
  }
  _Hotkeys_RemoveText(HEAP32[i3 >> 2] | 0);
  i2 = HEAP32[422522] | 0;
  if ((i1 | 0) < (i2 | 0)) {
   do {
    i5 = i1;
    i1 = i1 + 1 | 0;
    i3 = 355216 + (i1 << 3) | 0;
    i4 = HEAP32[i3 + 4 >> 2] | 0;
    i5 = 355216 + (i5 << 3) | 0;
    HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i5 + 4 >> 2] = i4;
   } while ((i1 | 0) < (i2 | 0));
   i1 = 1;
  } else i1 = 1;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _SpecialInputWidget_IntersectsBody(i7, i1, i2) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i5 = i7 + 48 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = HEAP32[i7 + 96 + (i3 * 28 | 0) + 4 >> 2] | 0;
 i1 = Math_imul((Math_imul((i2 - (HEAP32[i7 + 92 >> 2] | 0) | 0) / (HEAP32[i7 + 44 >> 2] | 0) | 0, HEAP32[i7 + 96 + (i3 * 28 | 0) >> 2] | 0) | 0) + ((i1 | 0) / (HEAP32[i7 + 40 >> 2] | 0) | 0) | 0, i4) | 0;
 if ((i1 | 0) < (HEAPU16[i7 + 96 + (i3 * 28 | 0) + 24 >> 1] | 0 | 0)) {
  _String_Init_2534(i6, (HEAP32[i7 + 96 + (i3 * 28 | 0) + 20 >> 2] | 0) + i1 | 0, i4, 0);
  if (!(HEAP32[i5 >> 2] | 0)) HEAP16[i6 + 4 >> 1] = 2;
  _InputWidget_AppendText(HEAP32[i7 + 56 >> 2] | 0, i6);
 }
 STACKTOP = i8;
 return;
}

function _TableWidget_MouseScroll(i6, d2) {
 i6 = i6 | 0;
 d2 = +d2;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = _Table_X(i6) | 0;
 i4 = _Table_Y(i6) | 0;
 i5 = _Table_Width(i6) | 0;
 i1 = i6 + 1628 | 0;
 i5 = (HEAP32[i6 + 1640 >> 2] | 0) + i5 | 0;
 if (!(((_Gui_ContainsPointers(i3, i4, i5, _Table_Height(i6) | 0) | 0) & 255) << 24 >> 24)) i1 = 0; else {
  i5 = i6 + 1668 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  FUNCTION_TABLE_iid[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, d2) | 0;
  i3 = i6 + 60 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) == -1) i1 = 1; else {
   i1 = (Math_imul((HEAP32[i5 >> 2] | 0) - i4 | 0, HEAP32[i6 + 44 >> 2] | 0) | 0) + i1 | 0;
   HEAP32[i3 >> 2] = (i1 | 0) < (HEAP32[i6 + 40 >> 2] | 0) ? i1 : -1;
   _TableWidget_RecreateTitle(i6, 0);
   i1 = 1;
  }
 }
 return i1 | 0;
}

function _Stream_WriteLine(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 i6 = i9;
 i4 = i5 + 4 | 0;
 L1 : do if (!(HEAP16[i4 >> 1] | 0)) {
  i1 = 0;
  i8 = 7;
 } else {
  i3 = 0;
  i1 = 0;
  while (1) {
   if ((i1 | 0) > 2047) {
    i1 = _Stream_Write(i7, i6, i1) | 0;
    if (!i1) {
     i2 = i6;
     i1 = 0;
    } else break L1;
   } else i2 = i6 + i1 | 0;
   i1 = (_Convert_CP437ToUtf8(HEAP8[(HEAP32[i5 >> 2] | 0) + i3 >> 0] | 0, i2) | 0) + i1 | 0;
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= (HEAPU16[i4 >> 1] | 0) >>> 0) {
    i8 = 7;
    break;
   }
  }
 } while (0);
 if ((i8 | 0) == 7) {
  HEAP8[i6 + i1 >> 0] = 10;
  i1 = _Stream_Write(i7, i6, i1 + 1 | 0) | 0;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _OnTouchStart(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5 + 4 | 0;
 i4 = i5;
 if (!(HEAP8[1867881] | 0)) {
  HEAP8[1867881] = 1;
  _Event_RaiseVoid(1683524);
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = 0;
  do {
   if (HEAP32[i6 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) {
    HEAP32[i3 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 36 >> 2];
    HEAP32[i4 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 40 >> 2];
    _interop_AdjustXY(i3 | 0, i4 | 0);
    _RescaleXY(i3, i4);
    _Input_AddTouch(HEAP32[i6 + 20 + (i2 * 52 | 0) >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 STACKTOP = i5;
 return 1;
}

function _MenuOptionsScreen_ContextRecreated(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i5 = i7 + 108 | 0;
 _Gui_MakeTitleFont(i5);
 i8 = i7 + 120 | 0;
 _Gui_MakeBodyFont(i8);
 _Screen_UpdateVb(i7);
 i4 = i7 + 104 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i6 = i7 + 16 | 0;
  i3 = i7 + 364 | 0;
  i2 = 0;
  do {
   if (HEAP32[(HEAP32[i6 >> 2] | 0) + (i2 << 2) >> 2] | 0) {
    _MenuOptionsScreen_Update(i7, i3 + (i2 * 84 | 0) | 0);
    i1 = HEAP32[i4 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 _ButtonWidget_SetConst(i7 + 1288 | 0, 50883, i5);
 i1 = HEAP32[i7 + 92 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i7);
 i7 = i7 + 132 | 0;
 _TextGroupWidget_SetFont(i7, i8);
 _TextGroupWidget_RedrawAll(i7);
 return;
}

function _OnPointerDown(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAPF32[423809] = 0.0;
 if (!(HEAP8[1868784] | 0)) i2 = 3; else if (HEAP8[352464 + (i6 * 24 | 0) + 4 >> 0] & 1) i2 = 3;
 L3 : do if ((i2 | 0) == 3) {
  i1 = HEAP32[353344 + (i6 << 3) >> 2] | 0;
  i2 = HEAP32[353344 + (i6 << 3) + 4 >> 2] | 0;
  if ((HEAP32[422372] | 0) > 0) {
   i5 = 1 << i6;
   i4 = 0;
   while (1) {
    i3 = HEAP32[352416 + (i4 << 2) >> 2] | 0;
    HEAP8[i3 + 7 >> 0] = 1;
    i3 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3, i5, i1, i2) | 0;
    i4 = i4 + 1 | 0;
    if (i3 | 0) break;
    if ((i4 | 0) >= (HEAP32[422372] | 0)) break L3;
   }
   i6 = 352464 + (i6 * 24 | 0) + 4 | 0;
   HEAP8[i6 >> 0] = i3 & HEAPU8[i6 >> 0];
  }
 } while (0);
 return;
}

function _NotchyGen_FloodFillLava() {
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i1 = HEAP32[244733] | 0;
 i2 = Math_imul(HEAP32[244735] | 0, i1) | 0;
 i4 = (i2 | 0) / 2e4 | 0;
 HEAP32[422258] = 33041;
 L1 : do if ((i2 | 0) > 19999) {
  d3 = +(i4 | 0);
  i2 = 0;
  while (1) {
   HEAPF32[422259] = +(i2 | 0) / d3;
   i1 = _Random_Next(978288, i1) | 0;
   i5 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
   d7 = +((HEAP32[422264] | 0) + -3 | 0);
   d7 = +_Random_Float(978288) * d7;
   i6 = ~~(+_Random_Float(978288) * d7);
   i5 = (Math_imul(HEAP32[244735] | 0, i6) | 0) + i5 | 0;
   _NotchyGen_FloodFill((Math_imul(i5, HEAP32[244733] | 0) | 0) + i1 | 0, 11);
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i4 | 0)) break L1;
   i1 = HEAP32[244733] | 0;
  }
 } while (0);
 return;
}

function _MiscSettingsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddNum(i1, 42582, 1.0, 1024.0, 5.0, 299, 300, 0);
 _MenuOptionsScreen_AddNum(i1, 42597, 1.0, 100.0, 20.0, 301, 302, 42609);
 _MenuOptionsScreen_AddInt(i1, 42655, 0, 100, 0, 44, 303, 0);
 _MenuOptionsScreen_AddInt(i1, 42668, 0, 100, 0, 45, 304, 0);
 _MenuOptionsScreen_AddBool(i1, 42682, 46, 305, 0);
 _MenuOptionsScreen_AddBool(i1, 45083, 47, 306, 0);
 _MenuOptionsScreen_AddBool(i1, 39502, 48, 307, 0);
 _MenuOptionsScreen_AddBool(i1, 39446, 49, 308, 0);
 _MenuOptionsScreen_AddInt(i1, 42696, 1, 200, 30, 50, 309, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 if (!(HEAP8[1841572] | 0)) {
  _Menu_Remove(i1, 0);
  if (!(HEAP8[1841572] | 0)) _Menu_Remove(i1, 4);
 }
 return;
}

function _Entity_GetTransform(i3, i5, i2, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i7;
 _Matrix_Scale(i4, +HEAPF32[i2 >> 2], +HEAPF32[i2 + 4 >> 2], +HEAPF32[i2 + 8 >> 2]);
 d1 = +HEAPF32[i3 + 32 >> 2];
 if (d1 != 0.0) {
  _Matrix_RotateZ(i6, d1 * -.01745329238474369);
  _Matrix_Mul(i4, i4, i6);
 }
 d1 = +HEAPF32[i3 + 24 >> 2];
 if (d1 != 0.0) {
  _Matrix_RotateX(i6, d1 * -.01745329238474369);
  _Matrix_Mul(i4, i4, i6);
 }
 d1 = +HEAPF32[i3 + 28 >> 2];
 if (d1 != 0.0) {
  _Matrix_RotateY(i6, d1 * -.01745329238474369);
  _Matrix_Mul(i4, i4, i6);
 }
 _Matrix_Translate(i6, +HEAPF32[i5 >> 2], +HEAPF32[i5 + 4 >> 2], +HEAPF32[i5 + 8 >> 2]);
 _Matrix_Mul(i4, i4, i6);
 STACKTOP = i7;
 return;
}

function _Adv_ComputeLightFlags(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!(HEAP8[1868731] | 0)) {
  i7 = i2 + -1 | 0;
  i6 = i4 + -1 | 0;
  i8 = _Adv_Lit(i7, i3, i6, i1 + -19 | 0) | 0;
  i8 = (_Adv_Lit(i7, i3, i4, i1 + -1 | 0) | 0) << 9 | i8;
  i5 = i4 + 1 | 0;
  i7 = i8 | (_Adv_Lit(i7, i3, i5, i1 + 17 | 0) | 0) << 18;
  i7 = i7 | (_Adv_Lit(i2, i3, i6, i1 + -18 | 0) | 0) << 3;
  i7 = i7 | (_Adv_Lit(i2, i3, i4, i1) | 0) << 12;
  i7 = i7 | (_Adv_Lit(i2, i3, i5, i1 + 18 | 0) | 0) << 21;
  i2 = i2 + 1 | 0;
  i6 = i7 | (_Adv_Lit(i2, i3, i6, i1 + -17 | 0) | 0) << 6;
  i4 = i6 | (_Adv_Lit(i2, i3, i4, i1 + 1 | 0) | 0) << 15;
  i1 = i4 | (_Adv_Lit(i2, i3, i5, i1 + 19 | 0) | 0) << 24;
 } else i1 = 67108863;
 return i1 | 0;
}

function _SysFont_TextWidth(i2) {
 i2 = i2 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i5 = i7 + 600 | 0;
 i6 = i7 + 608 | 0;
 i4 = i7 + 616 | 0;
 i3 = i7;
 i8 = HEAP32[i2 + 8 >> 2] | 0;
 i10 = i2;
 i9 = HEAP32[i10 + 4 >> 2] | 0;
 i2 = i5;
 HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i2 + 4 >> 2] = i9;
 _interop_SetFont(HEAP32[i8 >> 2] | 0, HEAPU16[i8 + 4 >> 1] | 0 | 0, HEAPU16[i8 + 6 >> 1] | 0 | 0);
 if (!((_Drawer2D_UNSAFE_NextPart(i5, i6, i4) | 0) << 24 >> 24)) d1 = 0.0; else {
  d1 = 0.0;
  do d1 = d1 + +_interop_TextWidth(i3 | 0, _String_EncodeUtf8(i3, i6) | 0); while ((_Drawer2D_UNSAFE_NextPart(i5, i6, i4) | 0) << 24 >> 24 != 0);
 }
 i10 = _Math_Ceil(d1) | 0;
 STACKTOP = i7;
 return i10 | 0;
}

function _ChatScreen_UpdateChatYOffsets(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 _HUDScreen_LayoutHotbar() | 0;
 i4 = HEAP32[i1 + 332 >> 2] | 0;
 i3 = HEAP32[454626] | 0;
 i2 = i1 + 1292 | 0;
 HEAP32[i1 + 1320 >> 2] = (HEAP32[i1 + 352 >> 2] | 0) - ((i4 | 0) < (i3 | 0) ? i4 : i3) + (HEAP32[466969] | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 1200 | 0;
 i3 = i1 + 1228 | 0;
 HEAP32[i3 >> 2] = (HEAP32[466969] | 0) - (HEAP32[i1 + 1300 >> 2] | 0) + ((HEAP8[i1 + 1312 >> 0] | 0) == 0 ? 10 : 5);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 i2 = i1 + 1108 | 0;
 HEAP32[i1 + 1136 >> 2] = (HEAP32[i1 + 1216 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _HotkeyListScreen_LoadEntries(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i6 + 64 | 0;
 HEAP32[i5 >> 2] = i6;
 i4 = i5 + 4 | 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 64;
 i1 = i1 + 908 | 0;
 if ((HEAP32[422522] | 0) > 0) {
  i3 = 0;
  do {
   i7 = HEAP8[355216 + (i3 << 3) + 4 >> 0] | 0;
   i2 = HEAP8[355216 + (i3 << 3) + 5 >> 0] | 0;
   HEAP16[i4 >> 1] = 0;
   _String_AppendConst(i5, HEAP32[5008 + ((i7 & 255) << 2) >> 2] | 0);
   if (i2 << 24 >> 24) {
    _String_AppendConst(i5, 44208);
    _HotkeyListScreen_MakeFlags(i2 & 255, i5);
   }
   _StringsBuffer_Add(i1, i5);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[422522] | 0));
 }
 _StringsBuffer_Sort(i1);
 STACKTOP = i6;
 return;
}

function _Model_Unregister(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i1 = HEAP32[428697] | 0;
 if ((i1 | 0) == (i6 | 0)) HEAP32[428697] = HEAP32[i6 + 68 >> 2];
 if (i1 | 0) {
  i4 = i6 + 68 | 0;
  while (1) {
   i3 = i1 + 68 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if ((i2 | 0) == (i6 | 0)) {
    i2 = HEAP32[i4 >> 2] | 0;
    HEAP32[i3 >> 2] = i2;
   }
   if (!i2) break; else i1 = i2;
  }
  HEAP32[428698] = i1;
 }
 i2 = 0;
 do {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) if ((HEAP32[i1 + 48 >> 2] | 0) == (i6 | 0)) {
   _String_FromReadonly(i5, HEAP32[HEAP32[428695] >> 2] | 0);
   _Entity_SetModel(i1, i5);
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 STACKTOP = i7;
 return;
}

function _InputBind_Claims(i1, i6, i7) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i7 + 72 >> 2] | 0;
 i5 = i4 + (i1 << 1) | 0;
 i1 = i4 + (i1 << 1) + 1 | 0;
 i3 = i7 + 12 | 0;
 L1 : do if (!(HEAP8[i1 >> 0] | 0)) {
  i2 = 0;
  do {
   i1 = i4 + (i2 << 1) + 1 | 0;
   if (HEAP8[i1 >> 0] | 0) if ((FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i7, HEAPU8[i4 + (i2 << 1) >> 0] | 0) | 0) << 24 >> 24) if ((HEAPU8[i1 >> 0] | 0) == (i6 | 0)) {
    i1 = 0;
    break L1;
   }
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 50);
  i1 = (HEAPU8[i5 >> 0] | 0) == (i6 | 0);
 } else if (!((FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 127](i7, HEAPU8[i5 >> 0] | 0) | 0) << 24 >> 24)) i1 = 0; else i1 = (HEAPU8[i1 >> 0] | 0) == (i6 | 0); while (0);
 return i1 & 1 | 0;
}

function _Convert_ParseInt(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 10 | 0;
 i4 = i6;
 HEAP32[i5 >> 2] = 0;
 do if (!((_Convert_TryParseDigits(i2, i1, i4, 10) | 0) << 24 >> 24)) i1 = 0; else {
  i3 = (HEAP8[i1 >> 0] | 0) == 0;
  if (i3) i1 = _Convert_CompareDigits(i4, 49288) | 0; else {
   i1 = _Convert_CompareDigits(i4, 49277) | 0;
   if (!i1) {
    HEAP32[i5 >> 2] = -2147483648;
    i1 = 1;
    break;
   }
  }
  if ((i1 | 0) > 0) i1 = 0; else {
   i1 = 0;
   i2 = 0;
   do {
    i2 = (i2 * 10 | 0) + -48 + (HEAP8[i4 + i1 >> 0] | 0) | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 10);
   HEAP32[i5 >> 2] = i3 ? i2 : 0 - i2 | 0;
   i1 = 1;
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _ClassicOptionsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 39440, 4, 234, 0);
 _MenuOptionsScreen_AddBool(i1, 39446, 5, 235, 0);
 _MenuOptionsScreen_AddEnum(i1, 39459, 6416, 4, 6, 236, 0);
 _MenuOptionsScreen_AddBool(i1, 39475, 7, 237, 0);
 _MenuOptionsScreen_AddBool(i1, 39487, 8, 238, 0);
 _MenuOptionsScreen_AddBool(i1, 39493, 9, 239, 0);
 _MenuOptionsScreen_AddBool(i1, 39502, 10, 240, 0);
 _MenuOptionsScreen_AddBool(i1, 39515, 11, 241, 0);
 if (HEAP8[1868755] | 0) _MenuOptionsScreen_AddBool(i1, 39531, 12, 242, 0);
 _MenuOptionsScreen_EndButtons(i1, 4, 133);
 HEAP32[i1 + 92 >> 2] = 243;
 i2 = i1 + 1120 | 0;
 _ButtonWidget_Add(i1, i2, 400, 134);
 _Widget_SetLocation(i2, 1, 2, 0, 95);
 return;
}

function _ThumbstickWidget_CalcDirs(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i4 = i1 + 20 | 0;
 i6 = i1 + 4 | 0;
 i5 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i2 = i1 + 16 | 0;
 i1 = 0;
 i3 = 0;
 do {
  if (1 << i3 & (HEAPU8[i4 >> 0] | 0)) {
   d8 = +_Math_Atan2f(+((HEAP32[353344 + (i3 << 3) >> 2] | 0) - (HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) / -2 | 0) | 0), +((HEAP32[353344 + (i3 << 3) + 4 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) / -2 | 0) | 0)) * 57.2957763671875;
   i1 = i1 | d8 >= 30.0 & d8 <= 150.0 & 1;
   i1 = d8 >= -60.0 & d8 <= 60.0 ? i1 | 4 : i1;
   i1 = d8 >= -150.0 & d8 <= -30.0 ? i1 | 2 : i1;
   i1 = d8 < -120.0 | d8 > 120.0 ? i1 | 8 : i1;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 32);
 return i1 | 0;
}

function _WoM_CheckMotd() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i6 + 80 | 0;
 i5 = i6;
 i3 = i6 + 72 | 0;
 i2 = i6 + 64 | 0;
 i8 = 1841552;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = i3;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = i1;
 if (!(0 == 0 & (i1 & 65535 | 0) == 0)) {
  i1 = _String_IndexOfConst(i3, 47824) | 0;
  if (!((i1 | 0) == -1 | (HEAP8[1868754] | 0) != 0 & (HEAP8[1868755] | 0) == 0)) {
   _String_UNSAFE_SubstringAt(i2, i3, i1 + 4 | 0);
   HEAP32[i4 >> 2] = i5;
   HEAP16[i4 + 4 >> 1] = 0;
   HEAP16[i4 + 6 >> 1] = 64;
   _String_Format1(i4, 47829, i2);
   i8 = _Http_AsyncGetData(i4, 1) | 0;
   HEAP32[454523] = i8;
   HEAP8[1868797] = 1;
  }
 }
 STACKTOP = i6;
 return;
}

function _TexturePack_CheckPending() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i1 = i3;
 if ((_Http_GetResult(HEAP32[460929] | 0, i1) | 0) << 24 >> 24) {
  L3 : do if (!(HEAP8[i1 + 305 >> 0] | 0)) {
   if (HEAP32[i1 + 152 >> 2] | 0) {
    _Http_LogError(50560, i1);
    break;
   }
   i2 = i1 + 144 | 0;
   switch (HEAP32[i2 >> 2] | 0) {
   case 304:
   case 200:
    break L3;
   case 404:
    {
     _Chat_AddRaw(50592);
     _Chat_AddRaw(50651);
     break L3;
    }
   case 403:
   case 401:
    {
     _Chat_Add1(50712, i2);
     _Chat_AddRaw(50775);
     break L3;
    }
   default:
    {
     _Chat_Add1(50827, i2);
     break L3;
    }
   }
  } else _ApplyDownloaded(i1); while (0);
  _HttpRequest_Free(i1);
 }
 STACKTOP = i3;
 return;
}

function _Screen_DoPointerDown(i6, i5, i7, i8) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[i6 + 16 >> 2] | 0;
 i4 = HEAP32[i6 + 20 >> 2] | 0;
 i1 = i4 + -1 | 0;
 L1 : do if ((i4 | 0) > 0) {
  i4 = i1;
  while (1) {
   i2 = HEAP32[i3 + (i4 << 2) >> 2] | 0;
   if (i2 | 0) if (_Widget_Contains(i2, i7, i8) | 0) break;
   i1 = i4 + -1 | 0;
   if ((i4 | 0) > 0) i4 = i1; else break L1;
  }
  if (!(HEAP8[i2 + 21 >> 0] & 1)) {
   i1 = HEAP32[i2 + 32 >> 2] | 0;
   if (!i1) {
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2, i5, i7, i8) | 0;
    i1 = i4;
    break;
   } else {
    FUNCTION_TABLE_vii[i1 & 255](i6, i2);
    i1 = i4;
    break;
   }
  } else i1 = i4;
 } while (0);
 return i1 | 0;
}

function _Physics_ActivateWater(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[244733] | 0;
 i5 = (i4 | 0) / (i1 | 0) | 0;
 i1 = i4 - (Math_imul(i5, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i5 | 0) / (i2 | 0) | 0;
 i2 = i5 - (Math_imul(i3, i2) | 0) | 0;
 if ((i1 | 0) > 0) _Physics_PropagateWater(i4 + -1 | 0, i1 + -1 | 0, i3, i2);
 if ((i1 | 0) < (HEAP32[244736] | 0)) _Physics_PropagateWater(i4 + 1 | 0, i1 + 1 | 0, i3, i2);
 if ((i2 | 0) > 0) _Physics_PropagateWater(i4 - (HEAP32[244733] | 0) | 0, i1, i3, i2 + -1 | 0);
 if ((i2 | 0) < (HEAP32[244738] | 0)) _Physics_PropagateWater((HEAP32[244733] | 0) + i4 | 0, i1, i3, i2 + 1 | 0);
 if ((i3 | 0) > 0) _Physics_PropagateWater(i4 - (HEAP32[244739] | 0) | 0, i1, i3 + -1 | 0, i2);
 return;
}

function _CheckWeather(d5) {
 d5 = +d5;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 _IVec3_Floor(i1, 1656632);
 i3 = i1 + 4 | 0;
 i2 = i1 + 8 | 0;
 i4 = _World_SafeGetBlock(HEAP32[i1 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 if ((i3 | 0) < 0) i1 = 1; else i1 = (_World_ContainsXZ_1244(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) << 24 >> 24 == 0 & 1;
 if ((HEAP8[1006372 + (i4 & 65535) >> 0] | 0) == 3) i1 = 1; else i1 = (i1 | 0) != 0 & (i3 | 0) < (HEAP32[466928] | 0) & 1;
 HEAP8[1868794] = i1;
 if (!(i1 << 24 >> 24 == 0 | (HEAP32[466934] | 0) == 0)) {
  _Gfx_SetAlphaBlending(1);
  _EnvRenderer_RenderWeather(d5);
  _Gfx_SetAlphaBlending(0);
 }
 STACKTOP = i6;
 return;
}

function _UpdateTextureSlow(i10, i11, i4, i5, i9) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16384 | 0;
 i6 = i4 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i4 + 8 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = Math_imul(i2, i1) | 0;
 i8 = (i3 | 0) > 4096;
 if (i8) {
  i3 = _Mem_Alloc(i3, 4, 33340) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
 } else i3 = i12;
 _CopyPixels(i3, i1 << 2, HEAP32[i4 >> 2] | 0, i5 << 2, i1, i2);
 i2 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!(i9 << 24 >> 24)) _CallTexSubImage2D(0, i10, i11, i2, i1, i3); else _CallTexImage2D(0, i2, i1, i3);
 if (i8) _Mem_Free(i3);
 STACKTOP = i12;
 return;
}

function _ResolutionCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5 + 4 | 0;
 i3 = i5;
 do if ((i2 | 0) < 2) _Chat_Add4(29101, 1867872, 1867832, 1867876, 1867836); else {
  if ((_Convert_ParseInt(i1, i4) | 0) << 24 >> 24) if ((_Convert_ParseInt(i1 + 8 | 0, i3) | 0) << 24 >> 24) {
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if ((i1 | 0) < 1 | (i2 | 0) < 1) {
    _Chat_AddRaw(29200);
    break;
   } else {
    _Window_SetSize(i1, i2);
    _Options_SetInt(32510, ~~(+(HEAP32[i4 >> 2] | 0) / +HEAPF32[466958]));
    _Options_SetInt(32523, ~~(+(HEAP32[i3 >> 2] | 0) / +HEAPF32[466959]));
    break;
   }
  }
  _Chat_AddRaw(29152);
 } while (0);
 STACKTOP = i5;
 return;
}

function _Drawer2D_Fill(i8, i11, i3, i2, i1, i9) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = i8 + 8 | 0;
 i7 = i1 + i3 | 0;
 L1 : do if ((i1 | 0) > 0) {
  i6 = i8 + 4 | 0;
  i5 = i2 + i11 | 0;
  i4 = (i2 | 0) > 0;
  do {
   if ((i3 | 0) >= (HEAP32[i10 >> 2] | 0)) break L1;
   i2 = HEAP32[i6 >> 2] | 0;
   i1 = (HEAP32[i8 >> 2] | 0) + ((Math_imul(i2, i3) | 0) << 2) | 0;
   L6 : do if (i4 & (i2 | 0) > (i11 | 0)) {
    i2 = i11;
    do {
     HEAP32[i1 + (i2 << 2) >> 2] = i9;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (i5 | 0)) break L6;
    } while ((i2 | 0) < (HEAP32[i6 >> 2] | 0));
   } while (0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i7 | 0));
 } while (0);
 return;
}

function _Physics_ActivateLava(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[244733] | 0;
 i5 = (i4 | 0) / (i1 | 0) | 0;
 i1 = i4 - (Math_imul(i5, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i5 | 0) / (i2 | 0) | 0;
 i2 = i5 - (Math_imul(i3, i2) | 0) | 0;
 if ((i1 | 0) > 0) _Physics_PropagateLava(i4 + -1 | 0, i1 + -1 | 0, i3, i2);
 if ((i1 | 0) < (HEAP32[244736] | 0)) _Physics_PropagateLava(i4 + 1 | 0, i1 + 1 | 0, i3, i2);
 if ((i2 | 0) > 0) _Physics_PropagateLava(i4 - (HEAP32[244733] | 0) | 0, i1, i3, i2 + -1 | 0);
 if ((i2 | 0) < (HEAP32[244738] | 0)) _Physics_PropagateLava((HEAP32[244733] | 0) + i4 | 0, i1, i3, i2 + 1 | 0);
 if ((i3 | 0) > 0) _Physics_PropagateLava(i4 - (HEAP32[244739] | 0) | 0, i1, i3 + -1 | 0, i2);
 return;
}

function _CPE_SetSpawnPoint(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[417347] | 0;
 if (!(HEAP8[21317] | 0)) {
  i4 = (_Stream_GetU16_BE(i3) | 0) << 16 >> 16;
  i5 = (_Stream_GetU16_BE(i3 + 2 | 0) | 0) << 16 >> 16;
  i1 = 6;
  i6 = (_Stream_GetU16_BE(i3 + 4 | 0) | 0) << 16 >> 16;
 } else {
  i4 = _Stream_GetU32_BE(i3) | 0;
  i5 = _Stream_GetU32_BE(i3 + 4 | 0) | 0;
  i1 = 12;
  i6 = _Stream_GetU32_BE(i3 + 8 | 0) | 0;
 }
 i3 = i3 + i1 | 0;
 HEAPF32[i2 + 448 >> 2] = +(HEAPU8[i3 >> 0] | 0) * 360.0 * .00390625;
 HEAPF32[i2 + 452 >> 2] = +(HEAPU8[i3 + 1 >> 0] | 0) * 360.0 * .00390625;
 HEAPF32[i2 + 424 >> 2] = +(i4 | 0) * .03125;
 HEAPF32[i2 + 428 >> 2] = +(i5 + -51 | 0) * .03125;
 HEAPF32[i2 + 432 >> 2] = +(i6 | 0) * .03125;
 return;
}

function _Game_UpdateTexture(i8, i1, i6, i7, i4) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i10;
 i1 = _Png_Decode(i9, i1) | 0;
 i5 = (i1 | 0) != 0;
 if (i5) _Logger_SysWarn2(i1, 50210, i6);
 if (i4 | 0) {
  i3 = i9 + 8 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) >= (i1 | 0)) HEAP32[i3 >> 2] = (i2 | 0) / (i1 | 0) | 0;
 }
 if (i5) i1 = 0; else if (!((_Game_ValidateBitmap(i6, i9) | 0) << 24 >> 24)) i1 = 0; else {
  if (i7 | 0) {
   i6 = _Utils_CalcSkinType(i9) | 0;
   HEAP8[i7 >> 0] = i6;
  }
  _Gfx_RecreateTexture(i8, i9, 1, 0);
  i1 = 1;
 }
 _Mem_Free(HEAP32[i9 >> 2] | 0);
 STACKTOP = i10;
 return i1 | 0;
}

function _HacksSettingsScreen_CheckHacksAllowed(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i3 = HEAP32[i4 + 16 >> 2] | 0;
 i1 = HEAP32[417347] | 0;
 i2 = HEAP32[i3 + 12 >> 2] | 0;
 if (!(HEAP8[i1 + 470 >> 0] | 0)) {
  _Widget_SetDisabled(i2, 1);
  _Widget_SetDisabled(HEAP32[i3 + 16 >> 2] | 0, 1);
  _Widget_SetDisabled(HEAP32[i3 + 20 >> 2] | 0, 1);
  i1 = 1;
 } else {
  i5 = i1 + 473 | 0;
  _Widget_SetDisabled(i2, (HEAP8[i5 >> 0] | 0) == 0 & 1);
  _Widget_SetDisabled(HEAP32[i3 + 16 >> 2] | 0, (HEAP8[i5 >> 0] | 0) == 0 & 1);
  _Widget_SetDisabled(HEAP32[i3 + 20 >> 2] | 0, (HEAP8[i5 >> 0] | 0) == 0 & 1);
  i1 = (HEAP8[i1 + 477 >> 0] | 0) == 0 & 1;
 }
 _Widget_SetDisabled(HEAP32[i3 + 28 >> 2] | 0, i1);
 _MenuInputOverlay_CheckStillValid(i4);
 return;
}

function _Classic_Message(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i2 = i5 + 88 | 0;
 i4 = i5 + 80 | 0;
 i3 = i5 + 72 | 0;
 HEAP32[i2 >> 2] = i1 + 1;
 i1 = HEAP8[i1 >> 0] | 0;
 HEAP32[i4 >> 2] = i5;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 66;
 if (!(HEAP8[21469] | 0)) if (i1 << 24 >> 24 == -1) {
  _String_AppendConst(i4, 47379);
  i1 = 0;
 } else i1 = 0;
 _ReadString(i2, i4);
 if (_String_CaselessStarts(i4, 21616) | 0) {
  _String_UNSAFE_SubstringAt(i3, i4, 13);
  i2 = i3;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i1 = i4;
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = 3;
 }
 if (!(_String_CaselessStarts(i4, 21624) | 0)) _Chat_AddOf(i4, i1 & 255);
 STACKTOP = i5;
 return;
}

function _Event_Unregister(i6, i4, i3) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = i6 + 256 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP32[i6 + (i1 << 2) >> 2] | 0) == (i3 | 0)) if ((HEAP32[i6 + 128 + (i1 << 2) >> 2] | 0) == (i4 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L1;
  }
  i2 = i2 + -1 | 0;
  if ((i1 | 0) < (i2 | 0)) do {
   i4 = i1;
   i1 = i1 + 1 | 0;
   HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i6 + (i1 << 2) >> 2];
   HEAP32[i6 + 128 + (i4 << 2) >> 2] = HEAP32[i6 + 128 + (i1 << 2) >> 2];
  } while ((i1 | 0) != (i2 | 0));
  HEAP32[i5 >> 2] = i2;
  HEAP32[i6 + (i2 << 2) >> 2] = 0;
  HEAP32[i6 + 128 + (i2 << 2) >> 2] = 0;
 } while (0);
 return;
}

function _ApplySkin(i4, i3, i1, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i1 = _Png_Decode(i3, i1) | 0;
 do if (!i1) {
  i2 = i4 + 112 | 0;
  _Gfx_DeleteTexture(i2);
  _Entity_SetSkinAll(i4, 1);
  i1 = _EnsurePow2Skin(i4, i3) | 0;
  if (!i1) {
   i6 = _Utils_CalcSkinType(i3) | 0;
   i1 = i4 + 108 | 0;
   HEAP8[i1 >> 0] = i6;
   if (!((_Gfx_CheckTextureSize(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, 0) | 0) << 24 >> 24)) {
    _Chat_Add1(30663, i5);
    i1 = 0;
    break;
   }
   if (HEAP8[(HEAP32[i4 + 48 >> 2] | 0) + 42 >> 0] & 2) _Entity_ClearHat(i3, HEAP8[i1 >> 0] | 0);
   i1 = _Gfx_CreateTexture(i3, 1, 0) | 0;
   HEAP32[i2 >> 2] = i1;
   _Entity_SetSkinAll(i4, 0);
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _HotbarWidget_BuildEntriesMesh(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 _IsometricDrawer_BeginBatch(HEAP32[i1 >> 2] | 0, i8 + 152 | 0);
 d2 = +HEAPF32[i8 + 108 >> 2] * .5;
 i7 = i8 + 8 | 0;
 i1 = i8 + 16 | 0;
 i5 = i8 + 104 | 0;
 i6 = i8 + 4 | 0;
 i4 = i8 + 96 | 0;
 i3 = 0;
 do {
  if (!((i3 | 0) != 8 | (HEAP8[1689553] | 0) == 0)) break;
  _IsometricDrawer_AddBatch(HEAP16[1695240 + ((HEAP32[424236] | 0) + i3 << 1) >> 1] | 0, d2, +(~~(+HEAPF32[i5 >> 2] + +(HEAP32[i6 >> 2] | 0) + +HEAPF32[i4 >> 2] * +(i3 | 0)) | 0), +(((HEAP32[i1 >> 2] | 0) / 2 | 0) + (HEAP32[i7 >> 2] | 0) | 0));
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 9);
 i7 = _IsometricDrawer_EndBatch() | 0;
 HEAP32[i8 + 260 >> 2] = i7;
 return;
}

function _Adv_StretchZ(i4, i5, i6, i1, i2, i7, i8) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0;
 i3 = _Adv_ComputeLightFlags(i5, i6, i1, i2) | 0;
 HEAP32[414137] = i3;
 HEAP32[(HEAP32[414122] | 0) + (i2 << 2) >> 2] = i3;
 i3 = i1 + 1 | 0;
 L1 : do if ((i3 | 0) >= (HEAP32[414114] | 0) ? 1 : (1 << (i8 & 255) & (HEAPU8[1648420 + (i7 & 65535) >> 0] | 0) | 0) == 0) i1 = 1; else {
  i1 = 1;
  do {
   i4 = i4 + 96 | 0;
   i2 = i2 + 18 | 0;
   if (!((_Adv_CanStretch(i7, i2, i5, i6, i3, i8) | 0) << 24 >> 24)) break L1;
   HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
   i1 = i1 + 1 | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[414114] | 0));
 } while (0);
 _AddVertices(i7, i8);
 return i1 | 0;
}

function _TexturePack_ExtractDefault(i3, i8) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i9 + 16 | 0;
 i6 = i9 + 8 | 0;
 i7 = i9;
 HEAP32[i4 >> 2] = HEAP32[422251];
 HEAP32[i4 + 4 >> 2] = 53217;
 HEAP32[i4 + 8 >> 2] = 50376;
 i5 = 0;
 while (1) {
  i1 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
  _String_FromReadonly(i7, i1);
  i11 = i7;
  i10 = HEAP32[i11 + 4 >> 2] | 0;
  i2 = i6;
  HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i2 + 4 >> 2] = i10;
  i2 = FUNCTION_TABLE_ii[i3 & 63](i6) | 0;
  i5 = i5 + 1 | 0;
  if (!i2) {
   i2 = 0;
   break;
  }
  if (i5 >>> 0 >= 3) {
   i1 = 0;
   break;
  }
 }
 HEAP32[i8 >> 2] = i1;
 STACKTOP = i9;
 return i2 | 0;
}

function _NormalBuilder_StretchXLiquid(i4, i1, i5, i6, i2, i7) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i3 = 0;
 if (!((_Builder_OccludedLiquid(i2) | 0) << 24 >> 24)) {
  i3 = i1 + 1 | 0;
  L3 : do if ((i3 | 0) >= (HEAP32[414119] | 0) ? 1 : (HEAP8[1648420 + (i7 & 65535) >> 0] & 32) == 0) i1 = 1; else {
   i1 = 1;
   do {
    i4 = i4 + 6 | 0;
    i2 = i2 + 1 | 0;
    if (!((_Normal_CanStretch(i7, i2, i3, i5, i6, 5) | 0) << 24 >> 24)) break L3;
    if ((_Builder_OccludedLiquid(i2) | 0) << 24 >> 24) break L3;
    HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[414119] | 0));
  } while (0);
  _AddVertices(i7, 5);
 } else i1 = 0;
 return i1 | 0;
}

function _FirstPersonCamera_GetPosition(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = HEAP32[417347] | 0;
 _Entity_GetEyePosition(i4, i5);
 d6 = +HEAPF32[i5 + 20 >> 2] * .01745329238474369;
 _PerspectiveCamera_CalcViewBobbing(i5, d2, 1.0);
 i5 = i4 + 4 | 0;
 HEAPF32[i5 >> 2] = +HEAPF32[414156] + +HEAPF32[i5 >> 2];
 d2 = +HEAPF32[414157];
 d2 = d2 * +_Math_CosF(d6);
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] + d2;
 d2 = +HEAPF32[414157];
 d2 = d2 * +_Math_SinF(d6);
 i5 = i4 + 8 | 0;
 HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + d2;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 STACKTOP = i3;
 return;
}

function _Adv_StretchX(i4, i1, i5, i6, i2, i7, i8) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0;
 i3 = _Adv_ComputeLightFlags(i1, i5, i6, i2) | 0;
 HEAP32[414137] = i3;
 HEAP32[(HEAP32[414122] | 0) + (i2 << 2) >> 2] = i3;
 i3 = i1 + 1 | 0;
 L1 : do if ((i3 | 0) >= (HEAP32[414119] | 0) ? 1 : (1 << (i8 & 255) & (HEAPU8[1648420 + (i7 & 65535) >> 0] | 0) | 0) == 0) i1 = 1; else {
  i1 = 1;
  do {
   i4 = i4 + 6 | 0;
   i2 = i2 + 1 | 0;
   if (!((_Adv_CanStretch(i7, i2, i3, i5, i6, i8) | 0) << 24 >> 24)) break L1;
   HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
   i1 = i1 + 1 | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[414119] | 0));
 } while (0);
 _AddVertices(i7, i8);
 return i1 | 0;
}

function _SaveLevelScreen_File(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i2;
 HEAP32[i1 >> 2] = 6512;
 HEAP32[i1 + 4 >> 2] = 6528;
 i7 = i3 + 376 | 0;
 i6 = HEAP32[i7 + 4 >> 2] | 0;
 i5 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = i6;
 HEAP32[i1 + 16 >> 2] = 324;
 i1 = _Window_SaveFileDialog(i1) | 0;
 L1 : do if ((i1 | 0) < 0) {
  switch (i1 | 0) {
  case -857812980:
   break;
  default:
   {
    i4 = 3;
    break L1;
   }
  }
  _TextWidget_SetConst(i3 + 612 | 0, 43506, i3 + 48 | 0);
 } else switch (i1 | 0) {
 case 0:
  break;
 default:
  i4 = 3;
 } while (0);
 if ((i4 | 0) == 3) _Logger_SimpleWarn(i1, 43620);
 STACKTOP = i2;
 return;
}

function _TouchScreen_ContextRecreated(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 _Screen_UpdateVb(i5);
 i4 = i5 + 44 | 0;
 _Gui_MakeTitleFont(i4);
 i2 = i5 + 36 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 0) {
  i3 = i5 + 100 | 0;
  i1 = 0;
  do {
   _ButtonWidget_SetConst(i3 + (i1 * 84 | 0) | 0, HEAP32[HEAP32[i3 + (i1 * 84 | 0) + 36 >> 2] >> 2] | 0, i4);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i2 >> 2] | 0));
 }
 i3 = i5 + 40 | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i1 = i5 + 1192 | 0;
  i2 = 0;
  do {
   _ButtonWidget_SetConst(i1 + (i2 * 84 | 0) | 0, HEAP32[HEAP32[i1 + (i2 * 84 | 0) + 36 >> 2] >> 2] | 0, i4);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 _ButtonWidget_SetConst(i5 + 1360 | 0, 51608, i4);
 return;
}

function _ThumbstickWidget_BuildGroup(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i3 + 8 | 0;
 i7 = i1 + 6 | 0;
 HEAP16[i7 >> 1] = ((HEAP32[i3 + 16 >> 2] | 0) / 2 | 0) + (HEAP32[i4 >> 2] | 0);
 _Gfx_Make2DQuad(i1, -1, i2);
 HEAP16[i7 >> 1] = HEAP32[i4 >> 2];
 i7 = i1 + 16 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 i5 = i1 + 24 | 0;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i4;
 _Gfx_Make2DQuad(i1, -1, i2);
 _Gfx_Make2DQuad(i1, -1, i2);
 i4 = i3 + 12 | 0;
 _ThumbstickWidget_Rotate(i3, i2, HEAP32[i4 >> 2] | 0);
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i6;
 _Gfx_Make2DQuad(i1, -1, i2);
 _ThumbstickWidget_Rotate(i3, i2, (HEAP32[i4 >> 2] | 0) / 2 | 0);
 return;
}

function _TeleportCommand_Execute(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6 + 16 | 0;
 i5 = i6;
 i1 = HEAP32[417347] | 0;
 do if ((i3 | 0) == 3) {
  if ((_Convert_ParseFloat(i2, i5) | 0) << 24 >> 24) if ((_Convert_ParseFloat(i2 + 8 | 0, i5 + 4 | 0) | 0) << 24 >> 24) if ((_Convert_ParseFloat(i2 + 16 | 0, i5 + 8 | 0) | 0) << 24 >> 24) {
   HEAP8[i4 + 28 >> 0] = 1;
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1, i4);
   break;
  }
  _Chat_AddRaw(28564);
 } else _Chat_AddRaw(28499); while (0);
 STACKTOP = i6;
 return;
}

function _ButtonWidget_Reposition(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + 48 | 0;
 i7 = HEAPU16[i4 >> 1] | 0;
 i2 = HEAP32[i1 + 72 >> 2] | 0;
 i5 = i1 + 12 | 0;
 HEAP32[i5 >> 2] = (i2 | 0) < (i7 | 0) ? i7 : i2;
 i2 = i1 + 50 | 0;
 i7 = HEAPU16[i2 >> 1] | 0;
 i6 = HEAP32[i1 + 76 >> 2] | 0;
 i3 = i1 + 16 | 0;
 HEAP32[i3 >> 2] = (i6 | 0) < (i7 | 0) ? i7 : i6;
 _Widget_CalcPosition(i1);
 i4 = HEAP16[i4 >> 1] | 0;
 HEAP16[i1 + 44 >> 1] = ((HEAP32[i5 >> 2] | 0) / 2 | 0) + (HEAP32[i1 + 4 >> 2] | 0) - ((1 ? (i4 & 65535) >>> 1 : i4 & 65535) & 65535);
 i2 = HEAP16[i2 >> 1] | 0;
 HEAP16[i1 + 46 >> 1] = ((HEAP32[i3 >> 2] | 0) / 2 | 0) + (HEAP32[i1 + 8 >> 2] | 0) - ((1 ? (i2 & 65535) >>> 1 : i2 & 65535) & 65535);
 return;
}

function _ExtractUserTextures() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 8 | 0;
 i4 = i6;
 i1 = _TexturePack_ExtractDefault(35, i2) | 0;
 HEAP8[1868810] = (i1 | 0) == (HEAP32[5931] | 0) & 1;
 i8 = 22396;
 i3 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = i4;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = i3;
 i2 = HEAP32[i2 >> 2] | 0;
 if (!i2) {
  if (!(HEAP8[1868754] | 0)) {
   i2 = i3 & 65535;
   i5 = 5;
  }
 } else {
  i8 = (_String_CaselessEqualsConst(i4, i2) | 0) == 0;
  if (i8 & (HEAP8[1868754] | 0) == 0) {
   i2 = HEAP16[i4 + 4 >> 1] | 0;
   i5 = 5;
  }
 }
 if ((i5 | 0) == 5) if (i2 << 16 >> 16) i1 = _ExtractFromFile(i4) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _Block_MightCull(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = i1 & 65535;
 i3 = HEAP8[1006372 + i4 >> 0] | 0;
 do if (i3 << 24 >> 24 == 5) i1 = 0; else if ((i1 & -2) << 16 >> 16 == 8 & (i2 & -2) << 16 >> 16 == 10) i1 = 1; else {
  i5 = i2 & 65535;
  if (i1 << 16 >> 16 == i2 << 16 >> 16) {
   i1 = i3 << 24 >> 24 != 2;
   break;
  }
  i1 = HEAP8[1006372 + i5 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i1 = (HEAP8[992548 + i5 >> 0] | 0) == 0;
   break;
  }
  if (i3 << 24 >> 24 == 3 & i1 << 24 >> 24 == 3) {
   i1 = HEAP8[1000996 + i4 >> 0] | 0;
   if (i1 << 24 >> 24 == 2) if ((HEAP8[1000996 + i5 >> 0] | 0) == 2) {
    i1 = 1;
    break;
   }
   i1 = i1 << 24 >> 24 != 2;
  } else i1 = 0;
 } while (0);
 return i1 & 1 | 0;
}

function _StoredHotkey_Parse(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i9 + 24 | 0;
 i6 = i9 + 16 | 0;
 i7 = i9 + 8 | 0;
 i8 = i9;
 i4 = i9 + 33 | 0;
 i5 = i9 + 32 | 0;
 i10 = i1 + 4 | 0;
 HEAP16[i10 >> 1] = (HEAPU16[i10 >> 1] | 0) + 65529;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 7;
 if (_String_UNSAFE_Separate(i1, 38, i2, i6) | 0) if (_String_UNSAFE_Separate(i3, 38, i7, i8) | 0) {
  i1 = _Utils_ParseEnum(i2, 0, 4320, 172) | 0;
  if (i1 | 0) if ((_Convert_ParseUInt8(i6, i4) | 0) << 24 >> 24) if ((_Convert_ParseBool(i7, i5) | 0) << 24 >> 24) _Hotkeys_Add(i1, HEAP8[i4 >> 0] | 0, i8, HEAP8[i5 >> 0] | 0);
 }
 STACKTOP = i9;
 return;
}

function _InitPalette(i7, d8, i1) {
 i7 = i7 | 0;
 d8 = +d8;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i9 = 0, d10 = 0.0;
 i4 = 0;
 do {
  i2 = (i4 | 0) == 15;
  i9 = i4 << 4;
  d6 = +(i4 | 0) / 15.0 * 1.5707963705062866;
  i5 = 0;
  do {
   if (i2) i3 = HEAP32[466951] | 0; else {
    d10 = +_Math_CosF(d6);
    i3 = _PackedCol_Lerp(0, HEAP32[466951] | 0, 1.0 - d10) | 0;
   }
   d10 = +_Math_CosF(+(i5 | 0) / 15.0 * 1.5707963705062866);
   i3 = _PackedCol_Scale(_PackedCol_ScreenBlend(_PackedCol_ScreenBlend(i3, _PackedCol_Lerp(0, HEAP32[466950] | 0, 1.0 - d10) | 0) | 0, i1) | 0, d8) | 0;
   HEAP32[i7 + ((i5 | i9) << 2) >> 2] = i3;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 16);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 16);
 return;
}

function _GraphicsOptionsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddEnum(i1, 39792, 3600, 6, 21, 258, 39801);
 _MenuOptionsScreen_AddInt(i1, 40090, 8, 4096, 512, 22, 259, 0);
 _MenuOptionsScreen_AddBool(i1, 40104, 23, 260, 40120);
 _MenuOptionsScreen_AddEnum(i1, 40242, 15488, 2, 24, 261, 40256);
 _MenuOptionsScreen_AddEnum(i1, 40504, 2304, 5, 25, 262, 40510);
 _MenuOptionsScreen_AddEnum(i1, 40807, 2336, 4, 26, 263, 40815);
 if (!((_Gfx_GetUIOptions(i1) | 0) << 24 >> 24)) _MenuOptionsScreen_AddBool(i1, 41068, 27, 264, 0);
 _MenuOptionsScreen_AddBool(i1, 41076, 7, 237, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 HEAP32[i1 + 100 >> 2] = 265;
 _GrO_CheckLightingModeAllowed(i1);
 return;
}

function _BuildEdges(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i6;
 d7 = +HEAPF32[i1 + 28 >> 2] < 1024.0 ? .03125 : .0625;
 _Vec3_Add1_1964(i5, i1, -d7);
 _Vec3_Add1_1964(i5 + 12 | 0, i1 + 12 | 0, d7);
 i3 = HEAP32[i1 + 24 >> 2] ^ 16777215;
 i2 = 0;
 i1 = i4;
 while (1) {
  i4 = HEAPU8[7536 + i2 >> 0] | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 + ((i4 & 1) * 12 | 0) >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + (((1 ? i4 >>> 1 : i4) & 1) * 12 | 0) + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + ((2 ? i4 >>> 2 : i4) * 12 | 0) + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = i3;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 24) break; else i1 = i1 + 16 | 0;
 }
 STACKTOP = i6;
 return;
}

function _TouchOnscreen_UpdateButton(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i6 + 64 | 0;
 i5 = _GetOnscreenButtons() | 0;
 i7 = _GetOnscreenHAligns() | 0;
 i1 = HEAP32[i2 + 36 >> 2] | 0;
 i8 = 1 << i1;
 i5 = (i8 & i5 | 0) != 0;
 HEAP32[i2 + 68 >> 2] = i5 ? -1 : -8421505;
 HEAP32[i4 >> 2] = i6;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 i1 = HEAP32[9248 + (i1 << 2) >> 2] | 0;
 do if ((i8 & i7 | 0) == 0 | i5 ^ 1) if (i5) {
  _String_Format1(i4, 50909, i1);
  break;
 } else {
  _String_AppendConst(i4, i1);
  break;
 } else _String_Format1(i4, 50892, i1); while (0);
 _ButtonWidget_Set(i2, i4, i3 + 624 | 0);
 STACKTOP = i6;
 return;
}

function _Physics_HandleMushroom(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[244733] | 0;
 i5 = (i4 | 0) / (i1 | 0) | 0;
 i1 = i4 - (Math_imul(i5, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i5 | 0) / (i2 | 0) | 0;
 i2 = i5 - (Math_imul(i3, i2) | 0) | 0;
 L1 : do if (!((FUNCTION_TABLE_iiii[HEAP32[467170] & 63](i1, i3, i2) | 0) << 24 >> 24)) {
  if ((i3 | 0) > 0) {
   switch (HEAP8[(HEAP32[244730] | 0) + (i4 - (HEAP32[244739] | 0)) >> 0] | 0) {
   case 4:
   case 1:
    break L1;
   default:
    {}
   }
   _Game_UpdateBlock(i1, i3, i2, 0);
   _Physics_ActivateNeighbours(i1, i3, i2, i4);
  }
 } else {
  _Game_UpdateBlock(i1, i3, i2, 0);
  _Physics_ActivateNeighbours(i1, i3, i2, i4);
 } while (0);
 return;
}

function _Entity_FirstOtherWithSameSkinAndFetchedSkin(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7 + 8 | 0;
 i6 = i7;
 _String_FromRaw(i5, i3 + 196 | 0, 64);
 i4 = 0;
 while (1) {
  i1 = HEAP32[1668360 + (i4 << 2) >> 2] | 0;
  if (!((i1 | 0) == 0 | (i1 | 0) == (i3 | 0))) {
   _String_FromRaw(i6, i1 + 196 | 0, 64);
   i10 = i6;
   i9 = HEAP32[i10 + 4 >> 2] | 0;
   i8 = i2;
   HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i8 + 4 >> 2] = i9;
   if (HEAP8[i1 + 109 >> 0] | 0) if (_String_Equals(i5, i2) | 0) break;
  }
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 256) {
   i1 = 0;
   break;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _CustomModel_DrawArm(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[428691] | 0;
 i4 = i3 + 189 | 0;
 if (HEAP8[i4 >> 0] | 0) {
  _Gfx_SetAlphaTest(1);
  HEAPF32[428686] = 1.0 / +(HEAPU16[i3 + 184 >> 1] | 0);
  HEAPF32[428687] = 1.0 / +(HEAPU16[i3 + 186 >> 1] | 0);
  _Model_LockVB(0, (HEAPU8[i4 >> 0] | 0) * 24 | 0);
  i5 = i3 + 188 | 0;
  i1 = HEAP8[i5 >> 0] | 0;
  if (i1 << 24 >> 24) {
   i2 = 0;
   do {
    if (HEAP8[i3 + 192 + (i2 * 104 | 0) + 101 >> 0] | 0) {
     _Model_DrawArmPart(i3 + 192 + (i2 * 104 | 0) | 0);
     i1 = HEAP8[i5 >> 0] | 0;
    }
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 < (i1 & 255) >>> 0);
  }
  _Model_UnlockVB();
  _Gfx_DrawVb_IndexedTris((HEAPU8[i4 >> 0] | 0) * 24 | 0);
 }
 return;
}

function _ComputeTransparency(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = i1 & 16777215;
 i9 = i2 + 4 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 L1 : do if ((i7 | 0) > 0) {
  i4 = HEAP32[i2 >> 2] | 0;
  i5 = (i6 | 0) > 0;
  i2 = i6;
  i1 = 0;
  while (1) {
   i2 = i4 + ((Math_imul(i2, i1) | 0) << 2) | 0;
   if (i5) {
    i3 = 0;
    do {
     i10 = i2 + (i3 << 2) | 0;
     i11 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = (i11 & 16777215 | 0) == (i8 | 0) ? i8 : i11;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i6 | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i7 | 0)) break L1;
   i2 = HEAP32[i9 >> 2] | 0;
  }
 } while (0);
 return;
}

function _OnTouchEnd(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5 + 4 | 0;
 i4 = i5;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = 0;
  do {
   if (HEAP32[i6 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) {
    HEAP32[i3 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 36 >> 2];
    HEAP32[i4 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 40 >> 2];
    _interop_AdjustXY(i3 | 0, i4 | 0);
    _RescaleXY(i3, i4);
    _Input_RemoveTouch(HEAP32[i6 + 20 + (i2 * 52 | 0) >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 STACKTOP = i5;
 return (HEAP8[1868814] ^ 1) & 255 | 0;
}

function _LocalPlayers_MoveToSpawn(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 i2 = i4 + 28 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[36572] | 0) + 8 >> 2] & 255](146288, i4);
 i1 = HEAP8[i2 >> 0] | 0;
 if (i1 & 1) {
  HEAP32[36678] = HEAP32[i4 >> 2];
  HEAP32[36679] = HEAP32[i4 + 4 >> 2];
  HEAP32[36680] = HEAP32[i4 + 8 >> 2];
  i1 = HEAP8[i2 >> 0] | 0;
 }
 if (i1 & 4) HEAP32[36684] = HEAP32[i4 + 16 >> 2];
 if (i1 & 2) HEAP32[36685] = HEAP32[i4 + 12 >> 2];
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[1656644 >> 2] | 0) + 16 >> 2] & 63](i3, 0.0);
 HEAP32[414158] = HEAP32[i3 >> 2];
 HEAP32[414159] = HEAP32[i3 + 4 >> 2];
 HEAP32[414160] = HEAP32[i3 + 8 >> 2];
 STACKTOP = i5;
 return;
}

function _LocalPlayer_HandleInput(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 460 | 0;
 if (!(HEAP32[422387] | 0)) {
  i1 = HEAP32[418836] | 0;
  if (i1 | 0) do {
   FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](i3, i4, i5);
   i1 = HEAP32[i1 + 4 >> 2] | 0;
  } while ((i1 | 0) != 0);
  HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] * .9800000190734863;
  HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] * .9800000190734863;
  if (HEAP8[i3 + 493 >> 0] | 0) if (HEAP8[i3 + 470 >> 0] | 0) if (HEAP8[i3 + 476 >> 0] | 0) {
   if (HEAP8[i3 + 494 >> 0] | 0) {
    HEAPF32[i3 + 36 >> 2] = 0.0;
    HEAPF32[i3 + 40 >> 2] = 0.0;
    HEAPF32[i3 + 44 >> 2] = 0.0;
   }
   _HacksComp_SetNoclip(i2, HEAP8[i3 + 462 >> 0] | 0);
  }
 }
 return;
}

function _Java_ReadNewObject(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i2 = i1 + 4 | 0;
 i1 = _Java_ReadClassDesc(i3, i2) | 0;
 L1 : do if (!i1) {
  HEAP32[422207] = (HEAP32[422207] | 0) + 1;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i1 + 2344 >> 2] = 0;
  i2 = HEAP32[i1 + 2340 >> 2] | 0;
  if (!i2) {
   if (!i1) {
    i1 = 0;
    break;
   }
  } else while (1) {
   HEAP32[i2 + 2344 >> 2] = i1;
   i1 = HEAP32[i2 + 2340 >> 2] | 0;
   if (!i1) {
    i1 = i2;
    break;
   } else {
    i4 = i2;
    i2 = i1;
    i1 = i4;
   }
  }
  i2 = i1;
  while (1) {
   i1 = _Java_ReadClassData(i3, i2) | 0;
   if (i1 | 0) break L1;
   i2 = HEAP32[i2 + 2344 >> 2] | 0;
   if (!i2) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _Game_Setup() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i4 + 64 | 0;
 i2 = _Options_GetInt(32510, 0, HEAP32[466962] | 0, 0) | 0;
 i1 = _Options_GetInt(32523, 0, HEAP32[466963] | 0, 0) | 0;
 if ((i2 | 0) == 0 | (i1 | 0) == 0) {
  i1 = 480;
  i2 = (HEAP32[466962] | 0) < 854 ? 640 : 854;
 }
 HEAP32[i3 >> 2] = i4;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_Format2(i3, 32537, 32545, 14732);
 _Window_Create3D(i2, i1);
 _Window_SetTitle(i3);
 HEAP8[1868751] = 1;
 HEAP32[244563] = 0;
 _Game_Load();
 _Event_RaiseVoid(1683004);
 i1 = _Stopwatch_Measure() | 0;
 i2 = getTempRet0() | 0;
 i3 = 978272;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 STACKTOP = i4;
 return;
}

function _Font_SetBitmapAtlas(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 do if ((i1 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((i1 | 0) < 16) {
   FUNCTION_TABLE_vi[HEAP32[3881] & 511](14300);
   i1 = 0;
   break;
  }
  if (!((_Math_IsPowOf2(i1) | 0) << 24 >> 24)) {
   FUNCTION_TABLE_vi[HEAP32[3881] & 511](14308);
   i1 = 0;
   break;
  } else {
   _FreeFontBitmap();
   HEAP32[417087] = HEAP32[i2 >> 2];
   HEAP32[417088] = HEAP32[i2 + 4 >> 2];
   HEAP32[417089] = HEAP32[i2 + 8 >> 2];
   i1 = HEAP32[i3 >> 2] | 0;
   HEAP32[3579] = 4 ? i1 >> 4 : i1;
   _CalculateTextWidths();
   i1 = 1;
   break;
  }
 } else {
  FUNCTION_TABLE_vi[HEAP32[3881] & 511](14292);
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _EditHotkeyScreen_SaveChanges(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = HEAP8[i6 + 48 >> 0] | 0;
 i2 = HEAP8[i6 + 49 >> 0] | 0;
 i1 = i3 & 255;
 if (i3 << 24 >> 24) {
  _Hotkeys_Remove(i1, i2) | 0;
  _StoredHotkeys_Remove(i1, i2);
 }
 i3 = HEAP8[i6 + 40 >> 0] | 0;
 i1 = HEAP8[i6 + 41 >> 0] | 0;
 i2 = HEAP8[i6 + 42 >> 0] | 0;
 if (i3 << 24 >> 24) {
  i8 = i6 + 164 | 0;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = i4;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 + 4 >> 2] = i7;
  i6 = i3 & 255;
  _Hotkeys_Add(i6, i1, i4, i2);
  _StoredHotkeys_Add(i6, i1, i2 & 1, i4);
 }
 _HotkeyListScreen_Show();
 STACKTOP = i5;
 return;
}

function _BuildFaces(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i6;
 d7 = +HEAPF32[i1 + 28 >> 2] < 1024.0 ? .03125 : .0625;
 _Vec3_Add1_1964(i5, i1, -d7);
 _Vec3_Add1_1964(i5 + 12 | 0, i1 + 12 | 0, d7);
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = 0;
 i1 = i4;
 while (1) {
  i4 = HEAPU8[7504 + i3 >> 0] | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 + ((i4 & 1) * 12 | 0) >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + (((1 ? i4 >>> 1 : i4) & 1) * 12 | 0) + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + ((2 ? i4 >>> 2 : i4) * 12 | 0) + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = i2;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == 24) break; else i1 = i1 + 16 | 0;
 }
 STACKTOP = i6;
 return;
}

function _Physics_OnBlockChanged(i4, i5, i6, i2, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (HEAP8[1652260] | 0) {
  if (!(i1 << 16 >> 16)) if (!((_Physics_IsEdgeWater(i4, i5, i6) | 0) << 24 >> 24)) i1 = 0; else {
   _Game_UpdateBlock(i4, i5, i6, 9);
   i1 = 9;
  }
  i3 = (Math_imul(HEAP32[244735] | 0, i5) | 0) + i6 | 0;
  i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i4 | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = HEAP32[1655336 + ((i2 & 255) << 2) >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i1 & 255](i3, i2);
  } else {
   i2 = HEAP32[1654312 + ((i1 & 255) << 2) >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[i2 & 255](i3, i1);
  }
  _Physics_ActivateNeighbours(i4, i5, i6, i3);
 }
 return;
}

function _OnInit_89() {
 var i1 = 0, d2 = 0.0;
 _Camera_Register(13516);
 _Camera_Register(13564);
 _Camera_Register(13612);
 HEAP32[89408] = 94;
 HEAP32[414161] = 13516;
 _Event_Register(1687424, 0, 3);
 _Event_Register(1687684, 0, 95);
 _Event_Register(1679104, 0, 194);
 i1 = _Options_GetInt(51194, 1, 200, 30) | 0;
 HEAP32[414138] = i1;
 i1 = _Options_GetBool(42539, 1) | 0;
 HEAP8[1656557] = i1;
 i1 = _Options_GetBool(39644, 0) | 0;
 HEAP8[1656558] = i1;
 d2 = +_Options_GetFloat(42748, 1.0, 100.0, 20.0);
 HEAPF32[414162] = d2;
 i1 = _Options_GetBool(42714, 0) | 0;
 HEAP8[1656556] = i1;
 i1 = _Options_GetInt(42407, 1, 179, 70) | 0;
 HEAP32[414164] = i1;
 HEAP32[414163] = i1;
 HEAP32[414165] = i1;
 _Camera_UpdateProjection();
 return;
}

function _TouchScreen_PointerDown(i5, i3, i1, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 L1 : do if (!(HEAP32[422387] | 0)) {
  i1 = _Screen_DoPointerDown(i5, i3, i1, i2) | 0;
  if ((i1 | 0) < 13) {
   i1 = (31 ? i1 >>> 31 : i1) ^ 1;
   break;
  }
  i4 = HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0;
  i1 = i4 + 20 | 0;
  HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | 0 | i3;
  i3 = i5 + 1192 | 0;
  i1 = HEAP32[i5 + 40 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i2 = 0;
   while (1) {
    if ((i4 | 0) == (i3 + (i2 * 84 | 0) | 0)) {
     i1 = 3;
     break L1;
    }
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (i1 | 0)) {
     i1 = 1;
     break;
    }
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _NotchyGen_FloodFillWater() {
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[244733] | 0;
 i2 = Math_imul(HEAP32[244735] | 0, i1) | 0;
 i4 = (i2 | 0) / 800 | 0;
 HEAP32[422258] = 33055;
 L1 : do if ((i2 | 0) > 799) {
  d3 = +(i4 | 0);
  i2 = 0;
  while (1) {
   HEAPF32[422259] = +(i2 | 0) / d3;
   i1 = _Random_Next(978288, i1) | 0;
   i5 = _Random_Next(978288, HEAP32[244735] | 0) | 0;
   i6 = HEAP32[422264] | 0;
   i6 = i6 - (_Random_Range_650(1, 3) | 0) | 0;
   i5 = (Math_imul(i6, HEAP32[244735] | 0) | 0) + i5 | 0;
   _NotchyGen_FloodFill((Math_imul(i5, HEAP32[244733] | 0) | 0) + i1 | 0, 9);
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i4 | 0)) break L1;
   i1 = HEAP32[244733] | 0;
  }
 } while (0);
 return;
}

function _MenuOptionsScreen_Init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = i3 + 16 | 0;
 HEAP32[i4 >> 2] = 364240;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 12;
 i1 = i3 + 36 | 0;
 HEAP32[91060] = 0;
 HEAP32[i1 >> 2] = 0;
 i2 = 1;
 do {
  HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] = 0;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 11);
 HEAP32[i3 + 84 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = -1;
 FUNCTION_TABLE_vi[HEAP32[i3 + 88 >> 2] & 511](i3);
 _TextGroupWidget_Create(i3 + 132 | 0, 5, i3 + 224 | 0, 132);
 HEAP32[i3 + 172 >> 2] = 0;
 _Event_Register(1679104, i3, 232);
 _Event_Register(1681444, i3, 15);
 i4 = _Screen_CalcDefaultMaxVertices(i3) | 0;
 HEAP32[i3 + 8 >> 2] = i4;
 return;
}

function _Bitmap_UNSAFE_CopyBlock(i12, i13, i9, i10, i1, i2, i11) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if ((i11 | 0) > 0) {
  i8 = HEAP32[i1 >> 2] | 0;
  i7 = i1 + 4 | 0;
  i6 = HEAP32[i2 >> 2] | 0;
  i3 = i2 + 4 | 0;
  i5 = 0;
  do {
   i1 = i8 + ((Math_imul(HEAP32[i7 >> 2] | 0, i5 + i13 | 0) | 0) << 2) + (i12 << 2) | 0;
   i2 = i6 + ((Math_imul(HEAP32[i3 >> 2] | 0, i5 + i10 | 0) | 0) << 2) + (i9 << 2) | 0;
   i4 = 0;
   do {
    HEAP32[i2 + (i4 << 2) >> 2] = HEAP32[i1 + (i4 << 2) >> 2];
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i11 | 0));
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i11 | 0));
 }
 return;
}

function _TextGroupWidget_SetFont(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 i4 = _Font_CalcHeight(i5, 1) | 0;
 HEAP32[i1 >> 2] = i4;
 _Drawer2D_ReducePadding_Height(i1, HEAPU16[i5 + 4 >> 1] | 0, 3);
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i6 + 44 >> 2] = i1;
 i4 = HEAP32[i6 + 40 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i2 = i1 & 65535;
  i1 = HEAP32[i6 + 84 >> 2] | 0;
  i3 = 0;
  do {
   HEAP16[i1 + (i3 * 28 | 0) + 10 >> 1] = (HEAP8[i6 + 52 + i3 >> 0] | 0) == 0 ? i2 : 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i4 | 0));
 }
 HEAP32[i6 + 48 >> 2] = i5;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 511](i6);
 STACKTOP = i7;
 return;
}

function _HUDScreen_Layout(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i2 = i4 + 48 | 0;
 i3 = i4 + 120 | 0;
 _Widget_SetLocation(i2, 0, 0, (HEAP32[466965] | 0) + 2 | 0, (HEAP32[466966] | 0) + 2 | 0);
 i1 = (HEAP32[i4 + 64 >> 2] | 0) + (HEAP32[i4 + 56 >> 2] | 0) | 0;
 HEAP16[i4 + 198 >> 1] = i1;
 _Widget_SetLocation(i3, 0, 0, (HEAP32[466965] | 0) + 2 | 0, 0);
 if (!(HEAP8[1868754] | 0)) HEAP32[i4 + 148 >> 2] = i1 + (HEAPU16[i4 + 202 >> 1] | 0); else {
  i5 = i4 + 76 | 0;
  HEAP32[i4 + 148 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i1;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 }
 _HUDScreen_LayoutHotbar() | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 511](i3);
 return;
}

function _RayTracer_Step(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0;
 i2 = i7 + 76 | 0;
 d3 = +HEAPF32[i2 >> 2];
 i1 = i7 + 80 | 0;
 d4 = +HEAPF32[i1 >> 2];
 i6 = i7 + 84 | 0;
 d5 = +HEAPF32[i6 >> 2];
 do if (d3 < d4 & d3 < d5) {
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i7 + 64 >> 2] | 0);
  i1 = i7 + 88 | 0;
 } else if (d4 < d5) {
  i2 = i7 + 4 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i7 + 68 >> 2] | 0);
  d3 = d4;
  i2 = i1;
  i1 = i7 + 92 | 0;
  break;
 } else {
  i2 = i7 + 8 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i7 + 72 >> 2] | 0);
  d3 = d5;
  i2 = i6;
  i1 = i7 + 96 | 0;
  break;
 } while (0);
 HEAPF32[i2 >> 2] = d3 + +HEAPF32[i1 >> 2];
 return;
}

function _HacksComp_Update(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!(HEAP8[i3 + 14 >> 0] | 0)) i4 = 3; else if (!(HEAP8[i3 + 10 >> 0] | 0)) i4 = 3;
 if ((i4 | 0) == 3) {
  _HacksComp_SetFlying(i3, 0);
  HEAP8[i3 + 37 >> 0] = 0;
  HEAP8[i3 + 36 >> 0] = 0;
 }
 if (!(HEAP8[i3 + 16 >> 0] | 0)) i4 = 6; else if (!(HEAP8[i3 + 10 >> 0] | 0)) i4 = 6;
 if ((i4 | 0) == 6) _HacksComp_SetNoclip(i3, 0);
 i2 = HEAP8[i3 + 13 >> 0] | 0;
 i1 = HEAP8[i3 + 10 >> 0] | 0;
 if (!(i2 << 24 >> 24)) i4 = 9; else if (!(i1 << 24 >> 24)) {
  i1 = 0;
  i4 = 9;
 }
 if ((i4 | 0) == 9) {
  HEAP8[i3 + 38 >> 0] = 0;
  HEAP8[i3 + 39 >> 0] = 0;
 }
 HEAP8[i3 + 19 >> 0] = i2 << 24 >> 24 != 0 & i1 << 24 >> 24 != 0 & 1;
 _Event_RaiseVoid(1679104);
 return;
}

function _DirectUrl_Claims(i2, i1, i5, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6;
 if (!(_String_CaselessStarts(i2, 23740) | 0)) i1 = 0; else if ((_String_UNSAFE_Split(i2, 47, i4, 6) | 0) == 5) {
  i8 = i4 + 16 | 0;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = i1;
  HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 + 4 >> 2] = i7;
  i2 = i4 + 24 | 0;
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = i1;
  i4 = i4 + 32 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
  i1 = i3;
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = i5;
  i1 = 1;
 } else i1 = 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _CollidesHor(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i8 + 24 | 0;
 i7 = i8 + 12 | 0;
 i6 = i8;
 d3 = +(_Math_Floor(+HEAPF32[i4 >> 2]) | 0);
 i5 = i4 + 8 | 0;
 _Vec3_Create3(i9, d3, 0.0, +(_Math_Floor(+HEAPF32[i5 >> 2]) | 0));
 i1 = i1 & 65535;
 _Vec3_Add_1728(i7, 1010980 + (i1 * 12 | 0) | 0, i9);
 _Vec3_Add_1728(i6, 1020196 + (i1 * 12 | 0) | 0, i9);
 d3 = +HEAPF32[i4 >> 2];
 if (!(d3 >= +HEAPF32[i7 >> 2])) i1 = 0; else {
  d2 = +HEAPF32[i5 >> 2];
  if (!(d2 >= +HEAPF32[i7 + 8 >> 2])) i1 = 0; else if (d3 < +HEAPF32[i6 >> 2]) i1 = d2 < +HEAPF32[i6 + 8 >> 2] & 1; else i1 = 0;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _Stream_BufferedSeek(i3, i9) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i6 = i3 + 32 | 0;
 i8 = i3 + 36 | 0;
 i5 = i3 + 44 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = (HEAP32[i6 >> 2] | 0) - i1 + (HEAP32[i8 >> 2] | 0) | 0;
 i7 = i3 + 52 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i4 = i10 - i2 | 0;
 if (i10 >>> 0 > i9 >>> 0 & i4 >>> 0 <= i9 >>> 0) {
  i10 = i9 - i4 | 0;
  HEAP32[i6 >> 2] = i1 + i10;
  HEAP32[i8 >> 2] = i2 - i10;
  i1 = 0;
 } else {
  i1 = HEAP32[i3 + 48 >> 2] | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 16 >> 2] & 127](i1, i9) | 0;
  if (!i1) {
   HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i7 >> 2] = i9;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _DisconnectScreen_UpdateReconnect(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i7 + 72 | 0;
 i2 = i7 + 64 | 0;
 HEAP32[i4 >> 2] = i7;
 i3 = i4 + 4 | 0;
 HEAP16[i3 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 if (!(HEAP8[i5 + 48 >> 0] | 0)) i6 = 5; else {
  i1 = 5 - ~~(+HEAPF64[122280] - +HEAPF64[i5 + 40 >> 3]) | 0;
  HEAP32[i2 >> 2] = i1;
  if ((i1 | 0) > 0) {
   _String_Format1(i4, 48437, i2);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  _Widget_SetDisabled(i5 + 56 | 0, (i1 | 0) > 0 & 1);
  if (!(HEAP16[i3 >> 1] | 0)) i6 = 5;
 }
 if ((i6 | 0) == 5) _String_AppendConst(i4, 48453);
 _ButtonWidget_Set(i5 + 56 | 0, i4, i5 + 224 | 0);
 STACKTOP = i7;
 return;
}

function _String_IndexOfConst(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP16[i8 + 4 >> 1] | 0;
 L1 : do if (!(i1 << 16 >> 16)) i1 = -1; else {
  i5 = i1 & 65535;
  i2 = HEAP8[i9 >> 0] | 0;
  i7 = i2 << 24 >> 24 == 0;
  i1 = 0;
  while (1) {
   if (i7) {
    i1 = 0;
    break L1;
   }
   i3 = i2;
   i6 = 0;
   while (1) {
    i4 = i6 + i1 | 0;
    if (i4 >>> 0 >= i5 >>> 0) break;
    i6 = i6 + 1 | 0;
    if ((HEAP8[(HEAP32[i8 >> 2] | 0) + i4 >> 0] | 0) != i3 << 24 >> 24) break;
    i3 = HEAP8[i9 + i6 >> 0] | 0;
    if (!(i3 << 24 >> 24)) break L1;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i5 >>> 0) {
    i1 = -1;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _Adv_CanStretch(i6, i5, i1, i2, i3, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i7 = 0;
 i7 = HEAP16[(HEAP32[414115] | 0) + (i5 << 1) >> 1] | 0;
 i2 = _Adv_ComputeLightFlags(i1, i2, i3, i5) | 0;
 HEAP32[(HEAP32[414122] | 0) + (i5 << 2) >> 2] = i2;
 if (i7 << 16 >> 16 == i6 << 16 >> 16) {
  i1 = i4 & 255;
  if ((HEAP32[414137] | 0) == (i2 | 0) ? (1 << i1 & (HEAPU8[1058596 + (((i6 & 65535) * 768 | 0) + (HEAPU16[(HEAP32[414115] | 0) + ((HEAP32[1392 + (i1 << 2) >> 2] | 0) + i5 << 1) >> 1] | 0)) >> 0] | 0) | 0) == 0 : 0) if (!i2) i1 = 1; else {
   i1 = HEAP32[1424 + (i1 << 2) >> 2] | 0;
   i1 = (i1 & i2 | 0) == (i1 | 0) & 1;
  } else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _Selections_Remove(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[460377] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP8[955312 + i1 >> 0] | 0) == i3 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L1;
  }
  i6 = i2 + -1 | 0;
  if ((i1 | 0) < (i6 | 0)) do {
   i2 = i1;
   i1 = i1 + 1 | 0;
   i3 = 946096 + (i2 * 36 | 0) | 0;
   i4 = 946096 + (i1 * 36 | 0) | 0;
   i5 = i3 + 36 | 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
    i3 = i3 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i3 | 0) < (i5 | 0));
   HEAP8[955312 + i2 >> 0] = HEAP8[955312 + i1 >> 0] | 0;
  } while ((i1 | 0) != (i6 | 0));
  HEAP32[460377] = i6;
 } while (0);
 return;
}

function _ListScreen_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 L1 : do if ((HEAP32[i1 + 24 >> 2] | 0) == (i2 | 0)) i4 = 3; else if ((HEAP32[i1 + 52 >> 2] | 0) == (i2 | 0)) i4 = 3; else {
  if ((HEAP32[i1 + 28 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i1 + 56 >> 2] | 0) != (i2 | 0)) switch (i2 | 0) {
  case 122:
   {
    _ListScreen_SetCurrentIndex(i3, (HEAP32[i3 + 804 >> 2] | 0) + -1 | 0);
    break L1;
   }
  case 123:
   {
    _ListScreen_SetCurrentIndex(i3, (HEAP32[i3 + 804 >> 2] | 0) + 1 | 0);
    break L1;
   }
  default:
   {
    _Menu_InputDown(i3, i2, i1) | 0;
    break L1;
   }
  }
  _ListScreen_PageClick(i3, 1);
 } while (0);
 if ((i4 | 0) == 3) _ListScreen_PageClick(i3, 0);
 return 1;
}

function _HUDScreen_Update(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 _HUDScreen_UpdateFPS(i3, d1);
 _HotbarWidget_Update(i3 + 332 | 0, d1);
 do if (!(HEAP8[1868754] | 0)) {
  i5 = (_IsOnlyChatActive() | 0) << 24 >> 24 == 0;
  if (!(i5 | (HEAP8[1689502] | 0) == 0)) if ((_HUDScreen_HasHacksChanged(i3) | 0) << 24 >> 24) _HUDScreen_RemakeLine2(i3);
  _IVec3_Floor(i2, (HEAP32[417347] | 0) + 4 | 0);
  if ((HEAP32[i2 >> 2] | 0) == (HEAP32[i3 + 320 >> 2] | 0)) if ((HEAP32[i2 + 4 >> 2] | 0) == (HEAP32[i3 + 324 >> 2] | 0)) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i3 + 328 >> 2] | 0)) break;
  HEAP8[i3 + 7 >> 0] = 1;
 } while (0);
 STACKTOP = i4;
 return;
}

function _Color_Core(i6, i7, i8, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i2 = 4 ? i6 >> 4 : i6;
 i3 = 4 ? i7 >> 4 : i7;
 i4 = 4 ? i8 >> 4 : i8;
 i1 = (Math_imul(HEAP32[244752] | 0, i3) | 0) + i4 | 0;
 i1 = (Math_imul(i1, HEAP32[244750] | 0) | 0) + i2 | 0;
 if ((HEAPU8[(HEAP32[422181] | 0) + i1 >> 0] | 0) < 2) _CalculateChunkLightingAll(i1, i2, i3, i4);
 i1 = HEAP32[(HEAP32[422189] | 0) + (i1 << 2) >> 2] | 0;
 if (!i1) i1 = 0; else i1 = HEAP8[i1 + (i7 << 8 & 3840 | i6 & 15 | i8 << 4 & 240) >> 0] | 0;
 i8 = (_ClassicLighting_GetLightHeight(i6, i8) | 0) < (i7 | 0);
 return HEAP32[(HEAP32[352112 + ((i8 ? i5 + 4 | 0 : i5) << 2) >> 2] | 0) + ((i1 & 255) << 2) >> 2] | 0;
}

function _HeldBlockRenderer_RenderModel() {
 var i1 = 0, i2 = 0;
 _Gfx_SetFaceCulling(1);
 _Gfx_SetDepthTest(0);
 i1 = HEAP8[1006372 + (HEAPU16[934361] | 0) >> 0] | 0;
 if (i1 << 24 >> 24 == 4) {
  i1 = HEAP32[(HEAP32[417347] | 0) + 48 >> 2] | 0;
  HEAPF32[422412] = 1.0;
  HEAPF32[422413] = 1.0;
  HEAPF32[422414] = 1.0;
  _Model_RenderArm(i1, 1689568);
  _Gfx_SetAlphaTest(0);
 } else {
  i2 = HEAP32[428696] | 0;
  HEAPF32[422412] = .4000000059604645;
  HEAPF32[422413] = .4000000059604645;
  HEAPF32[422414] = .4000000059604645;
  _Gfx_SetupAlphaState(i1);
  _Model_Render(i2, 1689568);
  _Gfx_RestoreAlphaState(HEAP8[1006372 + (HEAPU16[934361] | 0) >> 0] | 0);
 }
 _Gfx_SetDepthTest(1);
 _Gfx_SetFaceCulling(0);
 return;
}

function _FrustumCulling_SphereInFrustum(d3, d4, d5, d2) {
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d2 = +d2;
 var i1 = 0;
 d2 = -d2;
 if (!(+HEAPF32[466910] + (+HEAPF32[466907] * d3 + +HEAPF32[466908] * d4 + +HEAPF32[466909] * d5) <= d2)) if (!(+HEAPF32[466914] + (+HEAPF32[466911] * d3 + +HEAPF32[466912] * d4 + +HEAPF32[466913] * d5) <= d2)) if (!(+HEAPF32[466918] + (+HEAPF32[466915] * d3 + +HEAPF32[466916] * d4 + +HEAPF32[466917] * d5) <= d2)) if (!(+HEAPF32[466922] + (+HEAPF32[466919] * d3 + +HEAPF32[466920] * d4 + +HEAPF32[466921] * d5) <= d2)) i1 = !(+HEAPF32[466926] + (+HEAPF32[466923] * d3 + +HEAPF32[466924] * d4 + +HEAPF32[466925] * d5) <= d2) & 1; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0;
 return i1 | 0;
}

function _InputWidget_LeftKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) {
  i3 = HEAP16[i4 + 68 >> 1] | 0;
  i2 = i3 & 65535;
  if (i3 << 16 >> 16) {
   i3 = i4 + 160 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i3 >> 2] = i2;
    i1 = i2;
   }
   HEAP32[i3 >> 2] = (i1 | 0) < 1 ? 0 : i1 + -1 | 0;
   _InputWidget_UpdateCaret(i4);
  }
 } else {
  i2 = i4 + 160 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   i1 = (HEAPU16[i4 + 68 >> 1] | 0) + -1 | 0;
   HEAP32[i2 >> 2] = i1;
  }
  i3 = _WordWrap_GetBackLength(i4 + 64 | 0, i1) | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - i3;
  _InputWidget_UpdateCaret(i4);
 }
 return;
}

function _String_InsertAt(i3, i6, i5) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i4 = i3 + 4 | 0;
 if ((i6 | 0) < 0) i2 = 3; else {
  i1 = HEAP16[i4 >> 1] | 0;
  if ((i1 & 65535 | 0) < (i6 | 0)) i2 = 3;
 }
 if ((i2 | 0) == 3) {
  _Process_Abort2(0, 49113);
  i1 = HEAP16[i4 >> 1] | 0;
 }
 if (i1 << 16 >> 16 == (HEAP16[i3 + 6 >> 1] | 0)) _Process_Abort2(0, 49146);
 i2 = HEAPU16[i4 >> 1] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) > (i6 | 0)) do {
  i7 = i2;
  i2 = i2 + -1 | 0;
  HEAP8[i1 + i7 >> 0] = HEAP8[i1 + i2 >> 0] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i2 | 0) > (i6 | 0));
 HEAP8[i1 + i6 >> 0] = i5;
 HEAP16[i4 >> 1] = (HEAP16[i4 >> 1] | 0) + 1 << 16 >> 16;
 return;
}

function _BlockModel_DrawParts() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[200760] | 0;
 i1 = HEAP32[428718] | 0;
 if ((i1 | 0) > 0) {
  i7 = i2;
  i6 = 0;
  i3 = 0;
  i4 = 0;
  while (1) {
   if ((i7 | 0) == (i2 | 0)) {
    i2 = i6;
    i5 = i7;
   } else {
    _Atlas1D_Bind(i2);
    _Gfx_DrawVb_IndexedTris_Range(i6, i4, 0);
    i1 = HEAP32[428718] | 0;
    i2 = 0;
    i5 = HEAP32[803040 + (i3 << 2) >> 2] | 0;
    i4 = i6 + i4 | 0;
   }
   i3 = i3 + 1 | 0;
   i2 = i2 + 4 | 0;
   if ((i3 | 0) >= (i1 | 0)) break;
   i7 = HEAP32[803040 + (i3 << 2) >> 2] | 0;
   i6 = i2;
   i2 = i5;
  }
  if (i2 | 0) {
   _Atlas1D_Bind(i5);
   _Gfx_DrawVb_IndexedTris_Range(i2, i4, 0);
  }
 }
 return;
}

function _String_CaselessEquals(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP16[i2 + 4 >> 1] | 0;
 L1 : do if (i1 << 16 >> 16 == (HEAP16[i4 + 4 >> 1] | 0)) {
  i5 = i1 & 65535;
  if (!(i1 << 16 >> 16)) i1 = 1; else {
   i3 = HEAP32[i2 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = 0;
   while (1) {
    i6 = HEAP8[i3 + i2 >> 0] | 0;
    i4 = HEAP8[i1 + i2 >> 0] | 0;
    i2 = i2 + 1 | 0;
    if (((i6 + -65 & 255) < 26 ? (i6 & 255) + 32 & 255 : i6) << 24 >> 24 != ((i4 + -65 & 255) < 26 ? (i4 & 255) + 32 & 255 : i4) << 24 >> 24) {
     i1 = 0;
     break L1;
    }
    if (i2 >>> 0 >= i5 >>> 0) {
     i1 = 1;
     break;
    }
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _String_CaselessEnds(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP16[i4 + 4 >> 1] | 0;
 i5 = i1 & 65535;
 i6 = (HEAPU16[i2 + 4 >> 1] | 0) - i5 | 0;
 L1 : do if ((i6 | 0) < 0) i1 = 0; else if (!(i1 << 16 >> 16)) i1 = 1; else {
  i3 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i3 + (i2 + i6) >> 0] | 0;
   i4 = HEAP8[i1 + i2 >> 0] | 0;
   i2 = i2 + 1 | 0;
   if (((i7 + -65 & 255) < 26 ? (i7 & 255) + 32 & 255 : i7) << 24 >> 24 != ((i4 + -65 & 255) < 26 ? (i4 & 255) + 32 & 255 : i4) << 24 >> 24) {
    i1 = 0;
    break L1;
   }
   if (i2 >>> 0 >= i5 >>> 0) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _ExtractFrom(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 6144 | 0;
 i2 = i5;
 _Event_RaiseVoid(1677024);
 L1 : do if (!(HEAP8[1689080] | 0)) {
  HEAP8[1868807] = 0;
  i1 = _ExtractPng(i3) | 0;
  L3 : do if ((i1 | 0) < 0) {
   switch (i1 | 0) {
   case -857812961:
    break;
   default:
    break L3;
   }
   i1 = _Zip_Extract(i3, 36, 34, i2, 512) | 0;
   if (!i1) {
    i1 = 0;
    break L1;
   }
   _Logger_SysWarn2(i1, 50199, i4);
   break L1;
  } else switch (i1 | 0) {
  case 0:
   break L1;
  default:
   {}
  } while (0);
  _Logger_SysWarn2(i1, 50210, i4);
 } else {
  HEAP8[1868807] = 1;
  i1 = 0;
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _OnTouchMove(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5 + 4 | 0;
 i4 = i5;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = 0;
  do {
   if (HEAP32[i6 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) {
    HEAP32[i3 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 36 >> 2];
    HEAP32[i4 >> 2] = HEAP32[i6 + 20 + (i2 * 52 | 0) + 40 >> 2];
    _interop_AdjustXY(i3 | 0, i4 | 0);
    _RescaleXY(i3, i4);
    _Input_UpdateTouch(HEAP32[i6 + 20 + (i2 * 52 | 0) >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 STACKTOP = i5;
 return 1;
}

function _Builder1DPart_CalcOffsets(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i6;
 HEAP32[i5 + 28 >> 2] = i1;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
 i2 = HEAP32[414113] | 0;
 i4 = 0;
 i1 = (HEAP32[i5 + 24 >> 2] | 0) + i1 | 0;
 do {
  HEAP32[i5 + (i4 << 2) >> 2] = i2 + (i1 * 24 | 0);
  i1 = (HEAP32[i3 + (i4 << 2) >> 2] | 0) + i1 | 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 6);
 STACKTOP = i6;
 return i1 | 0;
}

function _String_CaselessStarts(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP16[i4 + 4 >> 1] | 0;
 L1 : do if ((HEAPU16[i2 + 4 >> 1] | 0) < (i1 & 65535)) i1 = 0; else {
  i5 = i1 & 65535;
  if (!(i1 << 16 >> 16)) i1 = 1; else {
   i3 = HEAP32[i2 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = 0;
   while (1) {
    i6 = HEAP8[i3 + i2 >> 0] | 0;
    i4 = HEAP8[i1 + i2 >> 0] | 0;
    i2 = i2 + 1 | 0;
    if (((i6 + -65 & 255) < 26 ? (i6 & 255) + 32 & 255 : i6) << 24 >> 24 != ((i4 + -65 & 255) < 26 ? (i4 & 255) + 32 & 255 : i4) << 24 >> 24) {
     i1 = 0;
     break L1;
    }
    if (i2 >>> 0 >= i5 >>> 0) {
     i1 = 1;
     break;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _LocalPlayer_CalcDefaultSpawn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i3 + 12 | 0;
 i4 = i3;
 d7 = +((HEAP32[244733] | 0) / 2 | 0 | 0) + .5;
 d6 = +((HEAP32[244735] | 0) / 2 | 0 | 0) + .5;
 HEAP8[i2 + 28 >> 0] = 7;
 i1 = i1 + 92 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 _Respawn_FindSpawnPosition(i4, d7, d6, i5);
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAPF32[i2 + 16 >> 2] = 0.0;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}

function _IntersectsOthers(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6 + 24 | 0;
 i5 = i6;
 i3 = i1 & 65535;
 _Vec3_Add_1087(i4, i2, 1010980 + (i3 * 12 | 0) | 0);
 _Vec3_Add_1087(i4 + 12 | 0, i2, 1020196 + (i3 * 12 | 0) | 0);
 i3 = i5 + 4 | 0;
 i2 = 0;
 while (1) {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) if ((i1 | 0) != (HEAP32[417347] | 0)) {
   _Entity_GetBounds(i1, i5);
   HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + .03125;
   if ((_AABB_Intersects(i5, i4) | 0) << 24 >> 24) {
    i1 = 1;
    break;
   }
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= 256) {
   i1 = 0;
   break;
  }
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _Convert_TryCodepointToCP437(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 L1 : do if ((i1 + -32 | 0) >>> 0 < 95) {
  i1 = i1 & 255;
  i2 = 1;
 } else {
  if (i1 >>> 0 > 126975) i1 = _ReduceEmoji(i1) | 0;
  i2 = 0;
  do {
   if ((i1 | 0) == (HEAPU16[7568 + (i2 << 1) >> 1] | 0 | 0)) {
    i3 = 7;
    break;
   }
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 32);
  if ((i3 | 0) == 7) {
   i1 = i2 & 255;
   i2 = 1;
   break;
  }
  i2 = 0;
  while (1) {
   if ((i1 | 0) == (HEAPU16[7632 + (i2 << 1) >> 1] | 0 | 0)) break;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= 129) {
    i1 = 63;
    i2 = 0;
    break L1;
   }
  }
  i1 = i2 + 127 & 255;
  i2 = 1;
 } while (0);
 HEAP8[i4 >> 0] = i1;
 return i2 | 0;
}

function _InitPalettes() {
 var i1 = 0, i2 = 0;
 i1 = 0;
 do {
  i2 = _Mem_Alloc(256, 4, 31193) | 0;
  HEAP32[352112 + (i1 << 2) >> 2] = i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 8);
 _InitPalette(HEAP32[88028] | 0, 1.0, HEAP32[466946] | 0);
 _InitPalette(HEAP32[88029] | 0, .6000000238418579, HEAP32[466946] | 0);
 _InitPalette(HEAP32[88030] | 0, .800000011920929, HEAP32[466946] | 0);
 _InitPalette(HEAP32[88031] | 0, .5, HEAP32[466946] | 0);
 _InitPalette(HEAP32[88032] | 0, 1.0, HEAP32[466942] | 0);
 _InitPalette(HEAP32[88033] | 0, .6000000238418579, HEAP32[466942] | 0);
 _InitPalette(HEAP32[88034] | 0, .800000011920929, HEAP32[466942] | 0);
 _InitPalette(HEAP32[88035] | 0, .5, HEAP32[466942] | 0);
 return;
}

function _Deflate_StreamWrite(i1, i2, i3, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0;
 i4 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 L1 : do if (!i3) i1 = 0; else {
  i5 = i4 + 8 | 0;
  while (1) {
   i7 = HEAP32[i5 >> 2] | 0;
   i1 = (i7 + i3 | 0) >>> 0 > 32767 ? 32768 - i7 | 0 : i3;
   _Mem_Copy(i4 + 888 + i7 | 0, i2, i1) | 0;
   i3 = i3 - i1 | 0;
   HEAP32[i5 >> 2] = i1 + (HEAP32[i5 >> 2] | 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i1;
   i2 = i2 + i1 | 0;
   if ((HEAP32[i5 >> 2] | 0) == 32768) {
    i1 = _Deflate_FlushBlock(i4, 16384) | 0;
    if (i1 | 0) break L1;
   }
   if (!i3) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _String_CaselessEqualsConst(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP16[i1 + 4 >> 1] | 0;
 i4 = i2 & 65535;
 L1 : do if (!(i2 << 16 >> 16)) i5 = 5; else {
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i1 + i2 >> 0] | 0;
   i6 = HEAP8[i3 + i2 >> 0] | 0;
   i6 = (i6 + -65 & 255) < 26 ? (i6 & 255) + 32 & 255 : i6;
   i2 = i2 + 1 | 0;
   if (i6 << 24 >> 24 == 0 ? 1 : ((i7 + -65 & 255) < 26 ? (i7 & 255) + 32 & 255 : i7) << 24 >> 24 != i6 << 24 >> 24) {
    i1 = 0;
    break L1;
   }
   if (i2 >>> 0 >= i4 >>> 0) {
    i5 = 5;
    break;
   }
  }
 } while (0);
 if ((i5 | 0) == 5) i1 = (HEAP8[i3 + i4 >> 0] | 0) == 0 & 1;
 return i1 | 0;
}

function _InputWidget_GetLastCol(i7, i1, i2) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i8 + 64 | 0;
 HEAP32[i6 >> 2] = i8;
 i5 = i6 + 4 | 0;
 HEAP16[i5 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 64;
 L1 : do if ((i2 | 0) > -1) {
  i4 = i1;
  while (1) {
   HEAP16[i5 >> 1] = 0;
   _InputWidget_FormatLine(i7, i2, i6);
   i1 = _Drawer2D_LastColor(i6, i4) | 0;
   if (i1 << 24 >> 24) break L1;
   i3 = (i2 | 0) > 0;
   i2 = i2 + -1 | 0;
   if (i3) i1 = HEAPU16[i7 + 72 + (i2 << 3) + 4 >> 1] | 0; else i1 = i4;
   if (!i3) {
    i1 = 0;
    break;
   } else i4 = i1;
  }
 } else i1 = 0; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _PerspectiveCamera_GetView(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 20 | 0;
 i6 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i6 >> 2] = HEAP32[414158];
 HEAP32[i6 + 4 >> 2] = HEAP32[414159];
 HEAP32[i6 + 8 >> 2] = HEAP32[414160];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 12 >> 2] & 511](i5);
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 _Matrix_LookRot(i1, i4, i3);
 if (HEAP8[1868759] | 0) _Matrix_Mul(i1, i1, 1656560);
 STACKTOP = i2;
 return;
}

function _TexturePack_ExtractCurrent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i5;
 i3 = i5 + 8 | 0;
 i7 = 22388;
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 4 >> 2] = i2;
 if (i1 << 24 >> 24 == 0 & (HEAP8[1868806] | 0) != 0) i1 = 0; else {
  i1 = _ExtractUserTextures() | 0;
  HEAP8[1868806] = 1;
 }
 if (!(0 == 0 & (i2 & 65535 | 0) == 0)) if ((_OpenCachedData(i4, i3) | 0) << 24 >> 24) {
  i1 = _ExtractFrom(i3, i4) | 0;
  HEAP8[1868806] = 0;
  FUNCTION_TABLE_ii[HEAP32[i3 + 28 >> 2] & 63](i3) | 0;
 }
 if (!(HEAP32[460924] | 0)) _LoadFallbackAtlas();
 STACKTOP = i5;
 return i1 | 0;
}

function _MenuOptionsScreen_SelectExtHelp(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6 + 40 | 0;
 i3 = i6;
 _MenuOptionsScreen_FreeExtHelp(i5);
 if (!(HEAP32[i5 + 84 >> 2] | 0)) {
  i2 = HEAP32[i5 + 36 + (i1 << 2) >> 2] | 0;
  if (i2 | 0) {
   i1 = HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0;
   if (i1 | 0) if (!(HEAP8[i1 + 21 >> 0] & 1)) {
    _String_FromReadonly(i4, i2);
    i4 = _String_UNSAFE_Split(i4, 10, i3, 5) | 0;
    HEAP32[i5 + 172 >> 2] = i4;
    HEAP32[i5 + 1372 >> 2] = i2;
    _TextGroupWidget_RedrawAll(i5 + 132 | 0);
    _MenuOptionsScreen_LayoutExtHelp(i5);
   }
  }
 }
 STACKTOP = i6;
 return;
}

function _GetSpriteBB_MinY(i10, i3, i2) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if ((i10 | 0) > 0) {
  i9 = HEAP32[460924] | 0;
  i8 = Math_imul(i2, i10) | 0;
  i7 = HEAP32[460925] | 0;
  i3 = Math_imul(i3, i10) | 0;
  i6 = i10;
  L3 : while (1) {
   i5 = i6 + -1 | 0;
   i2 = i9 + ((Math_imul(i7, i5 + i8 | 0) | 0) << 2) + (i3 << 2) | 0;
   i4 = 0;
   do {
    if ((HEAP32[i2 + (i4 << 2) >> 2] | 0) >>> 0 > 16777215) break L3;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i10 | 0));
   if ((i6 | 0) > 1) i6 = i5; else {
    d1 = 1.0;
    break L1;
   }
  }
  d1 = 1.0 - +(i6 | 0) / +(i10 | 0);
 } else d1 = 1.0; while (0);
 return +d1;
}

function _EntityShadows_Render() {
 var i1 = 0, i2 = 0;
 if (HEAP8[1669385] | 0) {
  HEAP8[1868742] = 0;
  if (!(HEAP32[418838] | 0)) _EntityShadows_MakeTexture();
  if (!(HEAP32[418839] | 0)) {
   i2 = _Gfx_CreateDynamicVb(1, 208) | 0;
   HEAP32[418839] = i2;
  }
  _Gfx_SetDepthWrite(0);
  _Gfx_SetAlphaBlending(1);
  _Gfx_SetVertexFormat(1);
  _EntityShadow_Draw(HEAP32[417347] | 0);
  if ((HEAP8[1669385] | 0) == 3) {
   i2 = 0;
   do {
    i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
    if (i1 | 0) if (HEAP8[i1 + 55 >> 0] | 0) if ((i1 | 0) != (HEAP32[417347] | 0)) _EntityShadow_Draw(i1);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 256);
  }
  _Gfx_SetDepthWrite(1);
  _Gfx_SetAlphaBlending(0);
 }
 return;
}

function _TableWidget_PointerDown(i3, i1, i4, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i2 = i3 + 84 | 0;
 HEAP8[i2 >> 0] = 0;
 i6 = i3 + 1628 | 0;
 do if (!(FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 63](i6, i1, i4, i5) | 0)) {
  i1 = HEAP32[i3 + 60 >> 2] | 0;
  if ((i1 | 0) != -1) {
   i1 = HEAP16[i3 + 92 + (i1 << 1) >> 1] | 0;
   if (i1 << 16 >> 16) {
    _Inventory_SetSelectedBlock(i1);
    HEAP8[i2 >> 0] = 1;
    i1 = 1;
    break;
   }
  }
  i2 = _Table_X(i3) | 0;
  i6 = _Table_Y(i3) | 0;
  i1 = _Table_Width(i3) | 0;
  i1 = (_Gui_Contains(i2, i6, i1, _Table_Height(i3) | 0, i4, i5) | 0) != 0 & 1;
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _SpecialInputWidget_Make(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = _SpecialInputWidget_MeasureTitles(i2) | 0;
 i6 = HEAP32[i2 + 92 >> 2] | 0;
 i8 = _SpecialInputWidget_MeasureContent(i2, i1) | 0;
 i7 = _SpecialInputWidget_ContentHeight(i2, i1) | 0;
 i8 = (i5 | 0) > (i8 | 0) ? i5 : i8;
 i5 = i2 + 60 | 0;
 _Gfx_DeleteTexture(i5);
 _Context2D_Alloc(i4, i8, i7 + i6 | 0);
 _SpecialInputWidget_DrawTitles(i2, i4);
 _Context2D_Clear(i4, -937550306, 0, i6, i8, i7);
 _SpecialInputWidget_DrawContent(i2, i1, i4, i6);
 _Context2D_MakeTexture(i5, i4);
 _Context2D_Free(i4);
 STACKTOP = i3;
 return;
}

function _HeldBlockRenderer_DigAnimation() {
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d1 = +HEAPF32[422498] / +HEAPF32[3777];
 d3 = +_Math_SinF(d1 * 3.1415927410125732);
 d2 = +Math_sqrt(+d1) * 3.1415927410125732;
 d4 = +_Math_SinF(d2) * .4000000059604645;
 HEAPF32[422393] = +HEAPF32[422393] - d4;
 d4 = +_Math_SinF(d2 * 2.0) * .20000000298023224;
 HEAPF32[422394] = +HEAPF32[422394] + d4;
 HEAPF32[422395] = +HEAPF32[422395] - d3 * .20000000298023224;
 d1 = +_Math_SinF(d1 * d1 * 3.1415927410125732);
 d3 = +_Math_SinF(d2) * 80.0;
 HEAPF32[422399] = +HEAPF32[422399] - d3;
 d2 = +_Math_SinF(d2) * 80.0;
 HEAPF32[422397] = +HEAPF32[422397] - d2;
 HEAPF32[422398] = d1 * 20.0 + +HEAPF32[422398];
 return;
}

function _Input_AddTouch(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 L1 : do if (!((_TryUpdateTouch(i3, i4, i5) | 0) << 24 >> 24)) {
  i1 = 0;
  while (1) {
   i2 = 352464 + (i1 * 24 | 0) + 4 | 0;
   if (!(HEAP8[i2 >> 0] | 0)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 32) break L1;
  }
  HEAP32[352464 + (i1 * 24 | 0) >> 2] = i3;
  HEAP8[i2 >> 0] = 7;
  HEAP32[352464 + (i1 * 24 | 0) + 8 >> 2] = i4;
  HEAP32[352464 + (i1 * 24 | 0) + 12 >> 2] = i5;
  HEAPF64[352464 + (i1 * 24 | 0) + 16 >> 3] = +HEAPF64[122280];
  if ((i1 | 0) == (HEAP32[422517] | 0)) HEAP32[422517] = i1 + 1;
  _Pointer_SetPosition(i1, i4, i5);
  _Pointer_SetPressed(i1, 1);
 } while (0);
 return;
}

function _Http_FinishRequest(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[i1 + 152 >> 2] | 0)) if ((HEAP32[i1 + 144 >> 2] | 0) == 200) if (!(HEAP32[i1 + 156 >> 2] | 0)) i2 = 4; else {
  i3 = (HEAP32[i1 + 160 >> 2] | 0) != 0;
  HEAP8[i1 + 305 >> 0] = i3 & 1;
  if (!i3) i2 = 6;
 } else i2 = 4; else i2 = 4;
 if ((i2 | 0) == 4) {
  HEAP8[i1 + 305 >> 0] = 0;
  i2 = 6;
 }
 if ((i2 | 0) == 6) {
  i3 = i1 + 172 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  _HttpRequest_Free(i1);
  HEAP32[i3 >> 2] = i2;
 }
 i4 = _Stopwatch_Measure() | 0;
 i2 = getTempRet0() | 0;
 i3 = i1 + 136 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i3 + 4 >> 2] = i2;
 _RequestList_Append(985304, i1, 0);
 return;
}

function _IsAllBlack(i2, i10, i5, i3, i1) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i1 + i5 | 0;
 L1 : do if ((i1 | 0) > 0) {
  i8 = HEAP32[i2 >> 2] | 0;
  i6 = HEAP32[i2 + 4 >> 2] | 0;
  i7 = i3 + i10 | 0;
  i4 = (i3 | 0) > 0;
  i3 = i5;
  while (1) {
   i1 = i8 + ((Math_imul(i6, i3) | 0) << 2) | 0;
   if (i4) {
    i2 = i10;
    do {
     if ((HEAP32[i1 + (i2 << 2) >> 2] | 0) != -16777216) {
      i1 = 0;
      break L1;
     }
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (i7 | 0));
   }
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (i9 | 0)) {
    i1 = 1;
    break;
   }
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _AverageColor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = 24 ? i1 >>> 24 : i1;
 i8 = 24 ? i2 >>> 24 : i2;
 i3 = i8 + i7 | 0;
 i3 = (i3 | 0) == 0 ? 1 : i3;
 i5 = Math_imul(i1 & 255, i7) | 0;
 i4 = Math_imul((8 ? i1 >>> 8 : i1) & 255, i7) | 0;
 i7 = Math_imul((16 ? i1 >>> 16 : i1) & 255, i7) | 0;
 i6 = Math_imul(i2 & 255, i8) | 0;
 i1 = Math_imul((8 ? i2 >>> 8 : i2) & 255, i8) | 0;
 i2 = ((((Math_imul((16 ? i2 >>> 16 : i2) & 255, i8) | 0) + i7 | 0) >>> 0) / (i3 >>> 0) | 0) << 16 & 16711680;
 return (((i6 + i5 | 0) >>> 0) / (i3 >>> 0) | 0) & 255 | (1 ? i3 >>> 1 : i3) << 24 | (((i1 + i4 | 0) >>> 0) / (i3 >>> 0) | 0) << 8 & 65280 | i2 | 0;
}

function _GetSpriteBB_MaxX(i9, i3, i2) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 L1 : do if ((i9 | 0) > 0) {
  i8 = HEAP32[460924] | 0;
  i7 = Math_imul(i2, i9) | 0;
  i6 = HEAP32[460925] | 0;
  i2 = Math_imul(i3, i9) | 0;
  i4 = i9;
  L3 : while (1) {
   i3 = i4 + -1 | 0;
   i5 = 0;
   do {
    i10 = i8 + ((Math_imul(i6, i5 + i7 | 0) | 0) << 2) + (i2 << 2) + (i3 << 2) | 0;
    i5 = i5 + 1 | 0;
    if ((HEAP32[i10 >> 2] | 0) >>> 0 > 16777215) break L3;
   } while ((i5 | 0) < (i9 | 0));
   if ((i4 | 0) > 1) i4 = i3; else {
    d1 = 0.0;
    break L1;
   }
  }
  d1 = +(i4 | 0) / +(i9 | 0);
 } else d1 = 0.0; while (0);
 return +d1;
}

function _DoAnimation(d4, d2) {
 d4 = +d4;
 d2 = +d2;
 var i1 = 0, d3 = 0.0;
 if (HEAP8[1868783] | 0) {
  if ((HEAP8[1868781] | 0) == 0 & (HEAP8[1868782] | 0) != 0) _HeldBlockRenderer_DigAnimation(); else {
   d3 = +_Math_SinF(+HEAPF32[422498] / +HEAPF32[3777] * 3.1415927410125732) * -.4000000059604645;
   HEAPF32[422499] = d3;
   HEAPF32[422394] = d3 + +HEAPF32[422394];
   if (HEAP8[1868781] | 0) {
    if (d3 > d2) {
     i1 = HEAP16[934361] | 0;
     HEAP16[934360] = i1;
    } else i1 = HEAP16[934360] | 0;
    HEAP16[934361] = i1;
    HEAP16[844810] = i1;
   }
  }
  d4 = +HEAPF32[422498] + d4;
  HEAPF32[422498] = d4;
  if (d4 > +HEAPF32[3777]) _HeldBlockRenderer_ResetAnim(1, .25);
 }
 return;
}

function _Model_DrawArmPart(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = HEAP32[428691] | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAPF32[i1 + 4 >> 2] = +(HEAPU8[i4 + 40 >> 0] | 0) * .0625;
 i2 = HEAPU8[i4 + 41 >> 0] | 0;
 HEAPF32[i1 + 8 >> 2] = +((1 ? i2 >>> 1 : i2) + i2 | 0) * .0625;
 if (!(HEAP8[1714762] | 0)) _Model_DrawRotate(-.3490658402442932, -1.2217304706573486, 2.356194496154785, i1, 0); else _Model_DrawRotate(0.0, -1.5707963705062866, 2.094395160675049, i1, 0);
 STACKTOP = i3;
 return;
}

function _IntersectsBlock(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 i7 = i1 + 28 | 0;
 i8 = i1 + 32 | 0;
 d2 = +HEAPF32[i8 >> 2];
 i1 = _GetBlock(~~+HEAPF32[i7 >> 2], ~~d2, ~~+HEAPF32[i1 + 36 >> 2]) | 0;
 i5 = _Math_Floor(d2) | 0;
 i9 = i1 & 65535;
 d2 = +HEAPF32[1010980 + (i9 * 12 | 0) + 4 >> 2];
 i4 = _Math_Floor(+HEAPF32[i8 >> 2]) | 0;
 d3 = +HEAPF32[1020196 + (i9 * 12 | 0) + 4 >> 2];
 if (!((FUNCTION_TABLE_ii[i6 & 63](i1) | 0) << 24 >> 24)) {
  d10 = +HEAPF32[i8 >> 2];
  if (d10 >= d2 + +(i5 | 0) & d10 < d3 + +(i4 | 0)) i1 = (_CollidesHor(i7, i1) | 0) << 24 >> 24 != 0 & 1; else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _Deflate_Lit(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = i6 + 4 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = HEAP32[i6 >> 2] | (HEAPU16[i6 + 24 + (i1 << 1) >> 1] | 0) << i3;
 HEAP32[i6 >> 2] = i4;
 i3 = i3 + (HEAPU8[i6 + 600 + i1 >> 0] | 0) | 0;
 HEAP32[i5 >> 2] = i3;
 if (i3 >>> 0 > 7) {
  i3 = i6 + 12 | 0;
  i2 = i6 + 16 | 0;
  i1 = i4;
  do {
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i1;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
   i4 = HEAP32[i6 >> 2] | 0;
   i1 = 8 ? i4 >>> 8 : i4;
   HEAP32[i6 >> 2] = i1;
   i4 = (HEAP32[i5 >> 2] | 0) + -8 | 0;
   HEAP32[i5 >> 2] = i4;
  } while (i4 >>> 0 > 7);
 }
 return;
}

function _Options_Reload() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i7 + 8 | 0;
 i4 = i7 + 24 | 0;
 i6 = i7 + 16 | 0;
 i5 = i7;
 i1 = HEAP32[429147] | 0;
 if ((i1 | 0) > 0) do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  _StringsBuffer_UNSAFE_Get(i5, 1716580, i1);
  i10 = i5;
  i9 = HEAP32[i10 + 4 >> 2] | 0;
  i8 = i3;
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i8 + 4 >> 2] = i9;
  _String_UNSAFE_Separate(i3, 61, i4, i6) | 0;
  if (!((_HasChanged(i4) | 0) << 24 >> 24)) _StringsBuffer_Remove(1716580, i1);
 } while ((i2 | 0) > 1);
 _EntryList_Load(1716580, 46506, 61, 27) | 0;
 STACKTOP = i7;
 return;
}

function _InventoryScreen_GetTitleText(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i2 = i6 + 8 | 0;
 i3 = i1 & 65535;
 HEAP32[i2 >> 2] = i3;
 if ((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0) {
  if (i1 << 16 >> 16) {
   _Block_UNSAFE_GetName(i5, i1);
   _String_AppendString(i4, i5);
   if (!(HEAP8[1868754] | 0)) {
    _String_Format1(i4, 48200, i2);
    if (!(HEAP8[1057060 + i3 >> 0] | 0)) _String_AppendConst(i4, 48210);
    if (!(HEAP8[1057828 + i3 >> 0] | 0)) _String_AppendConst(i4, 48225);
    _String_Append(i4, 41);
   }
  }
 } else _String_AppendConst(i4, 48187);
 STACKTOP = i6;
 return;
}

function _ChatScreen_UpdateTexpackStatus(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5 + 72 | 0;
 i3 = i5 + 64 | 0;
 i2 = _Http_CheckProgress(HEAP32[460929] | 0) | 0;
 HEAP32[i4 >> 2] = i2;
 i1 = i1 + 56 | 0;
 if ((i2 | 0) != (HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i3 >> 2] = i5;
  HEAP16[i3 + 4 >> 1] = 0;
  HEAP16[i3 + 6 >> 1] = 64;
  switch (i2 | 0) {
  case -2:
   {
    _String_AppendConst(i3, 48274);
    break;
   }
  case -1:
   {
    _String_AppendConst(i3, 48302);
    break;
   }
  default:
   if (i2 >>> 0 < 101) _String_Format1(i3, 48329, i4);
  }
  _Chat_AddOf(i3, 360);
 }
 STACKTOP = i5;
 return;
}

function _SetBaseOffset() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i2 = HEAPU16[934361] | 0;
 i1 = 1006372 + i2 | 0;
 if ((HEAP8[i1 >> 0] | 0) == 5) {
  HEAP32[i3 >> 2] = HEAP32[3778];
  HEAP32[i3 + 4 >> 2] = HEAP32[3779];
  HEAP32[i3 + 8 >> 2] = HEAP32[3780];
  _Vec3_Add_902(i3);
 } else {
  HEAP32[i3 >> 2] = HEAP32[3781];
  HEAP32[i3 + 4 >> 2] = HEAP32[3782];
  HEAP32[i3 + 8 >> 2] = HEAP32[3783];
  _Vec3_Add_902(i3);
  if ((HEAP8[i1 >> 0] | 0) != 4) HEAPF32[422394] = +HEAPF32[422394] + (1.0 - (+HEAPF32[1020196 + (i2 * 12 | 0) + 4 >> 2] - +HEAPF32[1010980 + (i2 * 12 | 0) + 4 >> 2])) * .20000000298023224;
 }
 STACKTOP = i4;
 return;
}

function _OpenCachedData(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i1 = i6 + 544 | 0;
 i2 = i6 + 536 | 0;
 HEAP32[i1 >> 2] = i6 + 272;
 HEAP16[i1 + 4 >> 1] = 0;
 HEAP16[i1 + 6 >> 1] = 260;
 HEAP32[i2 >> 2] = i6;
 i7 = i2 + 4 | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 260;
 _MakeCachePath(i1, i2, i5);
 i1 = _Stream_OpenFile(i3, i1) | 0;
 i4 = HEAP32[5931] | 0;
 if (!((i1 | 0) != (i4 | 0) | (HEAP16[i7 >> 1] | 0) == 0)) i1 = _Stream_OpenFile(i3, i2) | 0;
 if ((i1 | 0) == (i4 | 0)) i1 = 0; else if (!i1) i1 = 1; else {
  _Logger_SysWarn2(i1, 50219, i5);
  i1 = 0;
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _Block_SetDrawType(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = i2 & 65535;
 if (!(i1 << 24 >> 24)) i1 = (HEAP8[1000996 + i3 >> 0] | 0) != 2 & 1;
 HEAP8[1006372 + i3 >> 0] = i1;
 _Block_RecalcIsLiquid(i2);
 if (!(i1 << 24 >> 24)) if (+HEAPF32[1010980 + (i3 * 12 | 0) >> 2] == 0.0) if (+HEAPF32[1010980 + (i3 * 12 | 0) + 4 >> 2] == 0.0) if (+HEAPF32[1010980 + (i3 * 12 | 0) + 8 >> 2] == 0.0) if (+HEAPF32[1020196 + (i3 * 12 | 0) >> 2] == 1.0) if (+HEAPF32[1020196 + (i3 * 12 | 0) + 4 >> 2] == 1.0) i1 = +HEAPF32[1020196 + (i3 * 12 | 0) + 8 >> 2] == 1.0 & 1; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0;
 HEAP8[1009444 + i3 >> 0] = i1;
 return;
}

function _Inventory_SetSelectedBlock(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((_Inventory_CheckChangeSelected() | 0) << 24 >> 24) {
  i2 = HEAP32[424236] | 0;
  i1 = 0;
  while (1) {
   i3 = 1695240 + (i2 + i1 << 1) | 0;
   i1 = i1 + 1 | 0;
   if ((HEAP16[i3 >> 1] | 0) == i5 << 16 >> 16) {
    i4 = 5;
    break;
   }
   if (i1 >>> 0 >= 9) {
    i4 = 6;
    break;
   }
  }
  if ((i4 | 0) == 5) {
   i1 = 1695240 + ((HEAP32[424235] | 0) + i2 << 1) | 0;
   HEAP16[i3 >> 1] = HEAP16[i1 >> 1] | 0;
  } else if ((i4 | 0) == 6) i1 = 1695240 + ((HEAP32[424235] | 0) + i2 << 1) | 0;
  HEAP16[i1 >> 1] = i5;
  _Event_RaiseVoid(1679364);
  _CPE_SendNotifyAction(0, i5);
 }
 return;
}

function _TextGroupWidget_MightHaveUrls(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 8 | 0;
 i4 = i6;
 i3 = i5 + 40 | 0;
 L1 : do if ((HEAP32[i3 >> 2] | 0) > 0) {
  i1 = 0;
  while (1) {
   _TextGroupWidget_UNSAFE_Get(i4, i5, i1);
   i9 = i4;
   i8 = HEAP32[i9 + 4 >> 2] | 0;
   i7 = i2;
   HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i7 + 4 >> 2] = i8;
   i1 = i1 + 1 | 0;
   if ((_String_IndexOfAt(i2, 0, 47) | 0) > -1) {
    i1 = 1;
    break L1;
   }
   if ((i1 | 0) >= (HEAP32[i3 >> 2] | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _ListScreen_Select(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8 + 8 | 0;
 i7 = i8;
 i2 = i5 + 916 | 0;
 L1 : do if ((HEAP32[i2 >> 2] | 0) > 0) {
  i3 = i5 + 908 | 0;
  i1 = 0;
  while (1) {
   _StringsBuffer_UNSAFE_Get(i7, i3, i1);
   i11 = i7;
   i10 = HEAP32[i11 + 4 >> 2] | 0;
   i9 = i4;
   HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i9 + 4 >> 2] = i10;
   if (_String_CaselessEquals(i4, i6) | 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (HEAP32[i2 >> 2] | 0)) break L1;
  }
  HEAP32[i5 + 804 >> 2] = i1;
 } while (0);
 STACKTOP = i8;
 return;
}

function _GetSpriteBB_MaxY(i9, i3, i2) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 L1 : do if ((i9 | 0) > 0) {
  i8 = HEAP32[460924] | 0;
  i7 = Math_imul(i2, i9) | 0;
  i6 = HEAP32[460925] | 0;
  i5 = Math_imul(i3, i9) | 0;
  i2 = 0;
  L3 : while (1) {
   i3 = i8 + ((Math_imul(i6, i2 + i7 | 0) | 0) << 2) + (i5 << 2) | 0;
   i4 = 0;
   do {
    if ((HEAP32[i3 + (i4 << 2) >> 2] | 0) >>> 0 > 16777215) break L3;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i9 | 0));
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i9 | 0)) {
    d1 = 0.0;
    break L1;
   }
  }
  d1 = 1.0 - +(i2 | 0) / +(i9 | 0);
 } else d1 = 0.0; while (0);
 return +d1;
}

function _MenuInputOverlay_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 + 16 >> 2] = 1712900;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 3;
 _ButtonWidget_Add(i2, i2 + 52 | 0, (HEAP8[1868784] | 0) == 0 ? 40 : 200, 179);
 _ButtonWidget_Add(i2, i2 + 136 | 0, 200, 180);
 i1 = i2 + 520 | 0;
 _TextInputWidget_Add(i2, i2 + 220 | 0, 400, i2 + 528 | 0, HEAP32[i1 >> 2] | 0);
 _Menu_SelectWidget(i2, 2);
 i1 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
 if ((i1 | 0) == 22816) {
  i1 = 3;
  i3 = 3;
 } else if ((i1 | 0) == 22864) {
  i1 = 1;
  i3 = 3;
 }
 if ((i3 | 0) == 3) HEAP32[i2 + 516 >> 2] = i1;
 i3 = _Screen_CalcDefaultMaxVertices(i2) | 0;
 HEAP32[i2 + 8 >> 2] = i3;
 return;
}

function _WordWrap_GetBackLength(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((i5 | 0) < 1) i1 = 0; else {
  if ((HEAPU16[i4 + 4 >> 1] | 0) <= (i5 | 0)) _Process_Abort2(0, 49432);
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = i5;
  while (1) {
   if ((HEAP8[i2 + i3 >> 0] | 0) != 32) {
    i1 = i3;
    break;
   }
   i1 = i3 + -1 | 0;
   if ((i3 | 0) > 1) i3 = i1; else break;
  }
  L10 : do if ((i1 | 0) > 0) {
   i3 = HEAP32[i4 >> 2] | 0;
   i2 = i1;
   while (1) {
    if ((HEAP8[i3 + i2 >> 0] | 0) == 32) {
     i1 = i2;
     break L10;
    }
    i1 = i2 + -1 | 0;
    if ((i2 | 0) > 1) i2 = i1; else break;
   }
  } while (0);
  i1 = i5 - i1 | 0;
 }
 return i1 | 0;
}

function _TouchOnscreen_RemakeWidgets(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = i4 + 636 | 0;
 i2 = HEAP32[i3 >> 2] << 2;
 HEAP32[i4 + 16 >> 2] = 977216;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 7;
 i1 = 0;
 do {
  _ButtonWidget_Add(i4, i4 + 288 + (i1 * 84 | 0) | 0, 300, 199);
  HEAP32[i4 + 288 + (i1 * 84 | 0) + 36 >> 2] = i1 + i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 _ButtonWidget_Add(i4, i4 + 36 | 0, 400, 200);
 i1 = i4 + 120 | 0;
 _ButtonWidget_Add(i4, i1, 40, 201);
 i2 = i4 + 204 | 0;
 _ButtonWidget_Add(i4, i2, 40, 202);
 _Widget_SetDisabled(i1, (HEAP32[i3 >> 2] | 0) == 0 & 1);
 _Widget_SetDisabled(i2, (HEAP32[i3 >> 2] | 0) == 3 & 1);
 return;
}

function _CalcDists(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 d7 = +HEAPF32[i1 >> 2];
 d8 = d7 - +HEAPF32[i2 >> 2];
 d8 = d8 * d8;
 d7 = d7 - +HEAPF32[i2 + 12 >> 2];
 d7 = d7 * d7;
 d5 = +HEAPF32[i1 + 4 >> 2];
 d6 = d5 - +HEAPF32[i2 + 4 >> 2];
 d6 = d6 * d6;
 d5 = d5 - +HEAPF32[i2 + 16 >> 2];
 d5 = d5 * d5;
 d3 = +HEAPF32[i1 + 8 >> 2];
 d4 = d3 - +HEAPF32[i2 + 8 >> 2];
 d4 = d4 * d4;
 d3 = d3 - +HEAPF32[i2 + 20 >> 2];
 d3 = d3 * d3;
 HEAPF32[i2 + 28 >> 2] = (d8 < d7 ? d8 : d7) + (d6 < d5 ? d6 : d5) + (d4 < d3 ? d4 : d3);
 HEAPF32[i2 + 32 >> 2] = (d8 > d7 ? d8 : d7) + (d6 > d5 ? d6 : d5) + (d4 > d3 ? d4 : d3);
 return;
}

function _Terrain_Update1DCounts() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 _memset(944032, 0, 1024) | 0;
 _memset(943008, 0, 1024) | 0;
 i1 = HEAP32[431722] | 0;
 if ((i1 | 0) > 0) {
  i2 = HEAP32[460410] | 0;
  i3 = 0;
  do {
   i4 = HEAPU16[847008 + (i3 << 6) + 60 >> 1] | 0;
   i4 = 944032 + ((i2 ? i4 >>> i2 : i4) << 1) | 0;
   HEAP16[i4 >> 1] = (HEAPU16[i4 >> 1] | 0) + 4;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 i1 = HEAP32[460407] | 0;
 if ((i1 | 0) > 1) {
  i2 = 0;
  i3 = 1;
  do {
   i2 = (i2 & 65535) + (HEAPU16[944032 + (i3 + -1 << 1) >> 1] | 0) | 0;
   HEAP16[943008 + (i3 << 1) >> 1] = i2;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 return;
}

function _ListScreen_RedrawEntries(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7;
 i2 = i4 + 804 | 0;
 i1 = i4 + 828 | 0;
 i3 = 0;
 do {
  _ListScreen_UNSAFE_Get(i6, i4, (HEAP32[i2 >> 2] | 0) + i3 | 0);
  i10 = i6;
  i9 = HEAP32[i10 + 4 >> 2] | 0;
  i8 = i5;
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i8 + 4 >> 2] = i9;
  i8 = i4 + 36 + (i3 * 84 | 0) | 0;
  _Widget_SetDisabled(i8, _String_CaselessEqualsConst(i5, 43363) | 0);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](i4, i8, i5);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 5);
 STACKTOP = i7;
 return;
}

function _GetSpriteBB_MinX(i8, i3, i2) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 L1 : do if ((i8 | 0) > 0) {
  i7 = HEAP32[460924] | 0;
  i6 = Math_imul(i2, i8) | 0;
  i5 = HEAP32[460925] | 0;
  i4 = Math_imul(i3, i8) | 0;
  i2 = 0;
  L3 : while (1) {
   i3 = 0;
   do {
    i9 = i7 + ((Math_imul(i5, i3 + i6 | 0) | 0) << 2) + (i4 << 2) + (i2 << 2) | 0;
    i3 = i3 + 1 | 0;
    if ((HEAP32[i9 >> 2] | 0) >>> 0 > 16777215) break L3;
   } while ((i3 | 0) < (i8 | 0));
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i8 | 0)) {
    d1 = 1.0;
    break L1;
   }
  }
  d1 = +(i2 | 0) / +(i8 | 0);
 } else d1 = 1.0; while (0);
 return +d1;
}

function _Classic_AddEntity(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i6 = i2 + 136 | 0;
 i4 = i2 + 144 | 0;
 i5 = i2 + 128 | 0;
 HEAP32[i4 >> 2] = i2 + 64;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 HEAP32[i5 >> 2] = i2;
 HEAP16[i5 + 4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 64;
 HEAP32[i6 >> 2] = i1 + 1;
 i3 = HEAP8[i1 >> 0] | 0;
 _ReadString(i6, i4);
 _CheckName(i3, i4, i5);
 _AddEntity(HEAP32[i6 >> 2] | 0, i3, i4, i5, 1);
 _TabList_Set(i3, i4, i4, 21632, 0);
 i3 = i3 & 255;
 i1 = 1675312 + (3 ? i3 >>> 3 : i3) | 0;
 HEAP8[i1 >> 0] = 1 << (i3 & 7) | (HEAPU8[i1 >> 0] | 0);
 STACKTOP = i2;
 return;
}

function _TexIdsOverlay_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = ((HEAP32[466969] | 0) / 128 | 0) << 3;
 i2 = (i2 | 0) > 8 ? i2 : 8;
 i2 = (i2 | 0) < 40 ? i2 : 40;
 i4 = Math_imul(i2, HEAP32[460928] | 0) | 0;
 i4 = _Gui_CalcPos(1, 0, i4, HEAP32[466968] | 0) | 0;
 HEAP32[i1 + 36 >> 2] = i4;
 i4 = _Gui_CalcPos(1, 0, i2 << 4, HEAP32[466969] | 0) | 0;
 i3 = i1 + 40 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i1 + 44 >> 2] = i2;
 i2 = i1 + 156 | 0;
 _Widget_SetLocation(i2, 1, 0, 0, 0);
 i3 = HEAP32[i3 >> 2] | 0;
 i3 = i3 - (_Display_ScaleY_1478(30) | 0) | 0;
 HEAP32[i1 + 184 >> 2] = i3;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _Game_DrawFrame(d4, d1) {
 d4 = +d4;
 d1 = +d1;
 var i2 = 0, i3 = 0;
 do if (!(_Gui_GetBlocksWorld() | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 36 >> 2] & 511](1688844);
  _Camera_KeyLookUpdate(d4);
  _InputHandler_Tick(d4);
  if (!(HEAP8[1868758] | 0)) {
   _Render3DFrame(d4, d1);
   break;
  } else {
   _Render3D_Anaglyph(d4, d1);
   break;
  }
 } else _RayTracer_SetInvalid(1688844); while (0);
 _Gfx_Begin2D(HEAP32[244558] | 0, HEAP32[244559] | 0);
 _Gui_RenderGui(d4);
 i3 = 0;
 do {
  i2 = HEAP32[978256 + (i3 << 2) >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vd[i2 & 0](d4);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 4);
 _Gfx_End2D();
 return;
}

function _EntityShadows_MakeTexture() {
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 65552 | 0;
 i4 = i7;
 i2 = i7 + 65536 | 0;
 HEAP32[i2 + 4 >> 2] = 128;
 HEAP32[i2 + 8 >> 2] = 128;
 HEAP32[i2 >> 2] = i4;
 i6 = 0;
 do {
  i1 = i4 + (i6 << 7 << 2) | 0;
  d3 = 64.0 - (+(i6 >>> 0) + .5);
  d3 = d3 * d3;
  i5 = 0;
  do {
   d8 = 64.0 - (+(i5 >>> 0) + .5);
   HEAP32[i1 + (i5 << 2) >> 2] = d3 + d8 * d8 < 4096.0 ? -939524096 : 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 128);
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 128);
 i6 = _Gfx_CreateTexture(i2, 0, 0) | 0;
 HEAP32[418838] = i6;
 STACKTOP = i7;
 return;
}

function _SheepModel_Draw(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 288);
 _SheepModel_DrawBody(i1);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1716144, 1);
 _Model_DrawPart(1716160);
 i2 = i1 + 164 | 0;
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716176, 0);
 i1 = i1 + 172 | 0;
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716192, 0);
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716208, 0);
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716224, 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(144);
 _Gfx_BindTexture(HEAP32[4235] | 0);
 _Gfx_DrawVb_IndexedTris_Range(144, 144, 0);
 return;
}

function _LocalInterpComp_AdvanceState(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = i1 + 352 | 0;
 i4 = i1 + 384 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 28 >> 2] = HEAP32[i4 + 28 >> 2];
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 _InterpComp_AdvanceRotY(i2, i1);
 return;
}

function _PerformScheduledTasks(d6) {
 d6 = +d6;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d7 = 0.0, d8 = 0.0;
 i1 = HEAP32[422254] | 0;
 if ((i1 | 0) > 0) {
  i5 = 0;
  do {
   i2 = HEAP32[3688] | 0;
   i3 = i2 + (i5 * 24 | 0) | 0;
   d7 = +HEAPF64[i3 >> 3] + d6;
   HEAPF64[i3 >> 3] = d7;
   i4 = i2 + (i5 * 24 | 0) + 8 | 0;
   if (d7 >= +HEAPF64[i4 >> 3]) {
    i1 = i2 + (i5 * 24 | 0) + 16 | 0;
    do {
     FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 511](i3);
     d7 = +HEAPF64[i4 >> 3];
     d8 = +HEAPF64[i3 >> 3] - d7;
     HEAPF64[i3 >> 3] = d8;
    } while (d8 >= d7);
    i1 = HEAP32[422254] | 0;
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i1 | 0));
 }
 return;
}

function _InputWidget_UpdateText(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i2 + 44 >> 2] & 63]() | 0;
 if ((i1 | 0) > 1) {
  i3 = i2 + 64 | 0;
  _WordWrap_Do(i3, i2 + 72 | 0, i1, 64);
  i1 = i3;
 } else {
  i1 = i2 + 64 | 0;
  i5 = i1;
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  i3 = i2 + 72 | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i3 + 4 >> 2] = i4;
 }
 _Gfx_DeleteTexture(i2 + 112 | 0);
 _InputWidget_CalculateLineSizes(i2);
 FUNCTION_TABLE_vi[HEAP32[i2 + 48 >> 2] & 511](i2);
 _InputWidget_UpdateCaret(i2);
 _OnscreenKeyboard_SetText(i1);
 i1 = HEAP32[i2 + 60 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i2);
 return;
}

function _MenuInputOverlay_Layout(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 do if (!(HEAP8[1868784] | 0)) {
  _Widget_SetLocation(i2 + 220 | 0, 1, 1, 0, 110);
  _Widget_SetLocation(i2 + 52 | 0, 1, 1, 240, 110);
  _Widget_SetLocation(i2 + 136 | 0, 1, 1, 0, 150);
 } else {
  i1 = i2 + 220 | 0;
  if ((HEAP8[1867882] | 0) == 2) {
   _Widget_SetLocation(i1, 1, 2, 0, 65);
   _Widget_SetLocation(i2 + 52 | 0, 1, 2, 120, 25);
   _Widget_SetLocation(i2 + 136 | 0, 1, 2, -120, 25);
   break;
  } else {
   _Widget_SetLocation(i1, 1, 1, 0, 110);
   _Widget_SetLocation(i2 + 52 | 0, 1, 1, 120, 150);
   _Widget_SetLocation(i2 + 136 | 0, 1, 1, -120, 150);
   break;
  }
 } while (0);
 return;
}

function _Utils_UNSAFE_TrimFirstDirectory(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = HEAP16[i4 + 4 >> 1] | 0;
 L1 : do if (i1 << 16 >> 16) {
  i3 = HEAP32[i4 >> 2] | 0;
  i2 = i1 & 65535;
  i1 = 0;
  L3 : while (1) {
   switch (HEAP8[i3 + i1 >> 0] | 0) {
   case 92:
   case 47:
    break L3;
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) break L1;
  }
  _String_UNSAFE_SubstringAt(i5, i4, i1 + 1 | 0);
  i2 = i5;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i5 = i4;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = i3;
 } while (0);
 STACKTOP = i6;
 return;
}

function _Utils_CalcSkinType(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i2 | 0) == (i1 << 1 | 0)) i1 = 0; else if ((i2 | 0) == (i1 | 0)) {
  i3 = (i2 | 0) / 64 | 0;
  i5 = i3 * 20 | 0;
  i4 = i3 * 54 | 0;
  i2 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(i5, i2) | 0) << 2) + (i4 << 2) | 0;
  if ((HEAP32[i2 >> 2] | 0) > -1) i1 = 2; else {
   i1 = i3 << 1;
   if (!((_IsAllBlack(i6, i4, i5, i1, i3 * 12 | 0) | 0) << 24 >> 24)) i1 = 1; else {
    i1 = (_IsAllBlack(i6, i3 * 50 | 0, i3 << 4, i1, i3 << 2) | 0) << 24 >> 24 == 0;
    i1 = i1 ? 1 : 2;
   }
  }
 } else i1 = -16;
 return i1 | 0;
}

function _Hotkeys_Add(i7, i5, i6, i2) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i8 = 0;
 i1 = HEAP32[422522] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i3 = 355216;
  i4 = 0;
  while (1) {
   if ((HEAPU8[i3 + 4 >> 0] | 0) == (i7 | 0)) if ((HEAP8[i3 + 5 >> 0] | 0) == i5 << 24 >> 24) break;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i1 | 0)) {
    i8 = 7;
    break L1;
   } else i3 = i3 + 8 | 0;
  }
  _Hotkeys_RemoveText(HEAP32[i3 >> 2] | 0);
  HEAP8[i3 + 6 >> 0] = i2;
  HEAP32[i3 >> 2] = HEAP32[422522];
  _StringsBuffer_Add(1690080, i6);
 } else i8 = 7; while (0);
 if ((i8 | 0) == 7) _Hotkeys_AddNewHotkey(i7, i5, i6, i2);
 return;
}

function _Physics_HandleFlower(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[244733] | 0;
 i5 = (i4 | 0) / (i1 | 0) | 0;
 i1 = i4 - (Math_imul(i5, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i5 | 0) / (i2 | 0) | 0;
 i2 = i5 - (Math_imul(i3, i2) | 0) | 0;
 if (!((FUNCTION_TABLE_iiii[HEAP32[467170] & 63](i1, i3, i2) | 0) << 24 >> 24)) {
  _Game_UpdateBlock(i1, i3, i2, 0);
  _Physics_ActivateNeighbours(i1, i3, i2, i4);
 } else if ((i3 | 0) > 0) if ((HEAP8[(HEAP32[244730] | 0) + (i4 - (HEAP32[244739] | 0)) >> 0] & -2) << 24 >> 24 != 2) {
  _Game_UpdateBlock(i1, i3, i2, 0);
  _Physics_ActivateNeighbours(i1, i3, i2, i4);
 }
 return;
}

function _Menu_InputSelected(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 L1 : do if ((i1 | 0) < 0) i1 = 0; else {
  i1 = HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0;
  if (!((_Menu_IsSelectable(i1) | 0) << 24 >> 24)) i1 = 0; else {
   i2 = HEAP32[i1 + 32 >> 2] | 0;
   do if (i2 | 0) {
    if ((HEAP32[i3 + 32 >> 2] | 0) != (i4 | 0)) if ((HEAP32[i3 + 36 >> 2] | 0) != (i4 | 0)) break;
    FUNCTION_TABLE_vii[i2 & 255](i5, i1);
    i1 = 1;
    break L1;
   } while (0);
   i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 63](i1, i4, i3) | 0;
  }
 } while (0);
 return i1 | 0;
}

function _MPConnection_SendChat(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4 + 8 | 0;
 i3 = i4;
 if ((HEAP16[i2 + 4 >> 1] | 0) != 0 & (HEAP8[1868803] | 0) == 0) {
  i6 = i2;
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  i5 = i1;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = i2;
  if ((i2 & 65535) > 64) do {
   _Classic_SendChat(i1, 1);
   _String_UNSAFE_SubstringAt(i3, i1, 64);
   i2 = i3;
   i6 = HEAP32[i2 + 4 >> 2] | 0;
   i5 = i1;
   HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i5 + 4 >> 2] = i6;
  } while ((i6 & 65535) > 64);
  _Classic_SendChat(i1, 0);
 }
 STACKTOP = i4;
 return;
}

function _SpecialInputWidget_MeasureTitles(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5;
 _DrawTextArgs_MakeEmpty(i1, HEAP32[i3 + 88 >> 2] | 0, 0);
 i2 = 0;
 i4 = 0;
 do {
  i8 = i3 + 96 + (i2 * 28 | 0) + 12 | 0;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = i1;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 + 4 >> 2] = i7;
  i6 = (_Drawer2D_TextWidth(i1) | 0) + 10 | 0;
  HEAP32[i3 + 96 + (i2 * 28 | 0) + 8 >> 2] = i6;
  i4 = i6 + i4 | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 5);
 i8 = _Drawer2D_TextHeight(i1) | 0;
 HEAP32[i3 + 92 >> 2] = i8;
 STACKTOP = i5;
 return i4 | 0;
}

function _GenVertexShader(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 _String_AppendConst(i3, 34256);
 _String_AppendConst(i3, 34280);
 i2 = (i1 & 1 | 0) != 0;
 if (i2) {
  _String_AppendConst(i3, 34304);
  _String_AppendConst(i3, 33632);
  _String_AppendConst(i3, 33655);
 } else _String_AppendConst(i3, 33632);
 _String_AppendConst(i3, 34327);
 i1 = (i1 & 4 | 0) != 0;
 if (i1) _String_AppendConst(i3, 34346);
 _String_AppendConst(i3, 33778);
 _String_AppendConst(i3, 34371);
 _String_AppendConst(i3, 34413);
 if (i2) _String_AppendConst(i3, 34434);
 if (i1) _String_AppendConst(i3, 34454);
 _String_AppendConst(i3, 34105);
 return;
}

function _IsometricDrawer_Render(i2, i3, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i6 = (i2 | 0) / 4 | 0;
 L1 : do if ((i2 | 0) > 3) {
  i5 = i1;
  i2 = 0;
  i4 = 0;
  while (1) {
   if ((i5 | 0) == (i1 | 0)) i1 = i5; else {
    _Atlas1D_Bind(i1);
    _Gfx_DrawVb_IndexedTris_Range(i2, i3, 0);
    i3 = i2 + i3 | 0;
    i2 = 0;
    i1 = HEAP32[i7 + (i4 << 2) >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   if ((i4 | 0) == (i6 | 0)) break L1;
   i5 = HEAP32[i7 + (i4 << 2) >> 2] | 0;
  }
 } else i2 = 0; while (0);
 _Atlas1D_Bind(i1);
 _Gfx_DrawVb_IndexedTris_Range(i2, i3, 0);
 return;
}

function _GLBackend_Init() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i6 = i1;
 i3 = i1 + 17 | 0;
 i2 = i1 + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 _String_FromReadonly(i6, _glGetString(7939) | 0);
 i7 = (_String_CaselessContains(i6, 14948) | 0) & 255;
 HEAP8[i3 >> 0] = i7;
 i6 = (_String_CaselessContains(i6, 14956) | 0) & 255;
 HEAP8[i2 >> 0] = i6;
 _glGetIntegerv(33307, i5 | 0);
 _glGetIntegerv(33308, i4 | 0);
 HEAP8[1868763] = (HEAP32[i5 >> 2] | 0) > 2 & (HEAP32[i4 >> 2] | 0) > 1 & 1;
 _Platform_Log2(34624, i3, i2);
 STACKTOP = i1;
 return;
}

function _AutoRotate_BlocksShareGroup(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i7 + 8 | 0;
 i5 = i7;
 i2 = i7 + 24 | 0;
 i4 = i7 + 16 | 0;
 _Block_UNSAFE_GetName(i3, i1);
 _GetAutoRotateTypes(i3, i2);
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) i1 = 0; else {
  _Block_UNSAFE_GetName(i5, i6);
  _GetAutoRotateTypes(i5, i4);
  i6 = HEAP32[i4 >> 2] | 0;
  if ((i6 | 0) != -1 & (i1 | 0) == (i6 | 0)) if ((HEAP32[i2 + 4 >> 2] | 0) == (HEAP32[i4 + 4 >> 2] | 0)) i1 = (_String_CaselessEquals(i3, i5) | 0) != 0 & 1; else i1 = 0; else i1 = 0;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _TabListOverlay_DrawText(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i6 + 64 | 0;
 i1 = i6 + 72 | 0;
 if ((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0) {
  i8 = i2;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = i5;
  HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 + 4 >> 2] = i7;
 } else {
  HEAP32[i5 >> 2] = i6;
  HEAP16[i5 + 4 >> 1] = 0;
  HEAP16[i5 + 6 >> 1] = 64;
  _String_AppendColorless(i5, i2);
 }
 _DrawTextArgs_Make(i1, i5, i3 + 136 | 0, (HEAP8[i3 + 52 >> 0] | 0) == 0 & 1);
 _Drawer2D_MakeTextTexture(i4, i1);
 STACKTOP = i6;
 return;
}

function _Normal_CanStretch(i4, i2, i5, i6, i7, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i8 = 0;
 i1 = HEAP32[414115] | 0;
 if ((HEAP16[i1 + (i2 << 1) >> 1] | 0) == i4 << 16 >> 16) {
  i8 = i3 & 255;
  if (!(1 << i8 & HEAPU8[1058596 + (((i4 & 65535) * 768 | 0) + (HEAPU16[i1 + ((HEAP32[1392 + (i8 << 2) >> 2] | 0) + i2 << 1) >> 1] | 0)) >> 0])) if (!(HEAP8[1868731] | 0)) {
   i1 = _Normal_LightColor(HEAP32[414116] | 0, HEAP32[414117] | 0, HEAP32[414118] | 0, i3, i4) | 0;
   i1 = (i1 | 0) == (_Normal_LightColor(i5, i6, i7, i3, i4) | 0) & 1;
  } else i1 = 1; else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _CPE_HackControl(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0;
 i2 = HEAP32[417347] | 0;
 HEAP8[i2 + 474 >> 0] = (HEAP8[i1 >> 0] | 0) != 0 & 1;
 HEAP8[i2 + 476 >> 0] = (HEAP8[i1 + 1 >> 0] | 0) != 0 & 1;
 HEAP8[i2 + 473 >> 0] = (HEAP8[i1 + 2 >> 0] | 0) != 0 & 1;
 HEAP8[i2 + 475 >> 0] = (HEAP8[i1 + 3 >> 0] | 0) != 0 & 1;
 HEAP8[i2 + 472 >> 0] = (HEAP8[i1 + 4 >> 0] | 0) != 0 & 1;
 _HacksComp_Update(i2 + 460 | 0);
 i1 = _Stream_GetU16_BE(i1 + 5 | 0) | 0;
 if (i1 << 16 >> 16 == -1) _LocalPlayer_ResetJumpVelocity(i2); else {
  d3 = +_PhysicsComp_CalcJumpVelocity(+(i1 & 65535) * .03125);
  HEAPF32[i2 + 740 >> 2] = d3;
  HEAPF32[i2 + 748 >> 2] = d3;
 }
 return;
}

function _Adv_PrePrepareChunk() {
 var i1 = 0, i2 = 0, d3 = 0.0;
 _DefaultPrePrepateChunk();
 HEAP32[414122] = HEAP32[414121];
 i1 = 0;
 do {
  d3 = +(i1 | 0) * .25;
  i2 = _PackedCol_Lerp(HEAP32[466946] | 0, HEAP32[466942] | 0, d3) | 0;
  HEAP32[143712 + (i1 << 2) >> 2] = i2;
  i2 = _PackedCol_Lerp(HEAP32[466947] | 0, HEAP32[466943] | 0, d3) | 0;
  HEAP32[143744 + (i1 << 2) >> 2] = i2;
  i2 = _PackedCol_Lerp(HEAP32[466948] | 0, HEAP32[466944] | 0, d3) | 0;
  HEAP32[143776 + (i1 << 2) >> 2] = i2;
  i2 = _PackedCol_Lerp(HEAP32[466949] | 0, HEAP32[466945] | 0, d3) | 0;
  HEAP32[143808 + (i1 << 2) >> 2] = i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 5);
 return;
}

function _WordWrap_GetForwardLength(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = HEAPU16[i3 + 4 >> 1] | 0;
 if ((i5 | 0) == -1) i1 = 0; else {
  L3 : do if ((i4 | 0) > (i5 | 0)) {
   i2 = HEAP32[i3 >> 2] | 0;
   i1 = i5;
   do {
    if ((HEAP8[i2 + i1 >> 0] | 0) == 32) break L3;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i4 | 0));
  } else {
   _Process_Abort2(0, 49482);
   i1 = i5;
  } while (0);
  L10 : do if ((i1 | 0) < (i4 | 0)) {
   i2 = HEAP32[i3 >> 2] | 0;
   do {
    if ((HEAP8[i2 + i1 >> 0] | 0) != 32) break L10;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i4 | 0));
  } while (0);
  i1 = i1 - i5 | 0;
 }
 return i1 | 0;
}

function _Block_CalcLightOffset(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0;
 i2 = i1 & 65535;
 d3 = +HEAPF32[1020196 + (i2 * 12 | 0) + 4 >> 2];
 i1 = +HEAPF32[1010980 + (i2 * 12 | 0) >> 2] != 0.0 ? 254 : 255;
 i1 = +HEAPF32[1020196 + (i2 * 12 | 0) >> 2] != 1.0 ? i1 & 253 : i1;
 i1 = +HEAPF32[1010980 + (i2 * 12 | 0) + 8 >> 2] != 0.0 ? i1 & 251 : i1;
 i1 = +HEAPF32[1020196 + (i2 * 12 | 0) + 8 >> 2] != 1.0 ? i1 & 247 : i1;
 i4 = +HEAPF32[1010980 + (i2 * 12 | 0) + 4 >> 2] != 0.0;
 i1 = i4 ? i1 & 239 : i1;
 i1 = d3 != 1.0 ? i1 & 223 : i1;
 if (i4 & d3 == 1.0) i1 = (HEAP8[1006372 + i2 >> 0] | 0) == 4 ? i1 : i1 & -65;
 HEAP8[1005604 + i2 >> 0] = i1;
 return;
}

function _OnInit_357() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _Options_UNSAFE_Get(30966, i2) | 0;
 i2 = _EnvRenderer_CalcFlags(i2) | 0;
 i2 = (i2 | 0) == -1 ? 0 : i2;
 HEAP8[1868744] = i2 & 2;
 HEAP8[1868743] = i2 & 1;
 _TextureEntry_Register(14568);
 _TextureEntry_Register(14580);
 _TextureEntry_Register(14592);
 _TextureEntry_Register(14604);
 _Event_Register(1677024, 0, 199);
 _Event_Register(1676764, 0, 200);
 _Event_Register(1677544, 0, 201);
 _Event_Register(1681184, 0, 104);
 _Event_Register(1678324, 0, 202);
 _Event_Register(1678584, 0, 203);
 _Game_SetViewDistance(HEAP32[3681] | 0);
 STACKTOP = i1;
 return;
}

function _HUDScreen_BuildMesh(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = _Screen_LockVb(i2) | 0;
 HEAP32[i1 >> 2] = i4;
 _HUDScreen_BuildCrosshairsMesh(i1);
 i4 = i2 + 48 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4, i1);
 i4 = i2 + 120 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4, i1);
 i4 = i2 + 332 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4, i1);
 if (!(HEAP8[1868754] | 0)) _HUDScreen_BuildPosition(i2, HEAP32[i1 >> 2] | 0);
 _Gfx_UnlockDynamicVb(HEAP32[i2 + 12 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _InputWidget_RightKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) {
  i1 = HEAP16[i4 + 68 >> 1] | 0;
  if (i1 << 16 >> 16) {
   i2 = i4 + 160 | 0;
   i5 = HEAP32[i2 >> 2] | 0;
   i3 = i5 + 1 | 0;
   if ((i5 | 0) != -1) {
    HEAP32[i2 >> 2] = (i3 | 0) < (i1 & 65535 | 0) ? i3 : -1;
    _InputWidget_UpdateCaret(i4);
   }
  }
 } else {
  i5 = i4 + 160 | 0;
  i3 = _WordWrap_GetForwardLength(i4 + 64 | 0, HEAP32[i5 >> 2] | 0) | 0;
  i3 = (HEAP32[i5 >> 2] | 0) + i3 | 0;
  HEAP32[i5 >> 2] = (i3 | 0) < (HEAPU16[i4 + 68 >> 1] | 0 | 0) ? i3 : -1;
  _InputWidget_UpdateCaret(i4);
 }
 return;
}

function _BlockModel_Draw(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP16[i2 + 52 >> 1] | 0;
 HEAP16[934362] = i3;
 HEAP32[428718] = 0;
 i3 = i3 & 65535;
 i1 = HEAP8[1006372 + i3 >> 0] | 0;
 do if (i1 << 24 >> 24 != 4) {
  if (HEAP8[994084 + i3 >> 0] | 0) {
   HEAP32[428680] = -1;
   HEAP32[428681] = -1;
   HEAP32[428682] = -1;
   HEAP32[428683] = -1;
   HEAP32[428684] = -1;
   HEAP32[428685] = -1;
  }
  i3 = i1 << 24 >> 24 == 5;
  _BlockModel_BuildParts(i2, i3 & 1);
  if (i3) {
   _Gfx_SetFaceCulling(1);
   _BlockModel_DrawParts();
   _Gfx_SetFaceCulling(0);
   break;
  } else {
   _BlockModel_DrawParts();
   break;
  }
 } while (0);
 return;
}

function _BuildSky() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((HEAP8[978980] | 0) != 0 & (HEAP8[1868743] | 0) == 0) {
  i1 = ~~(+(HEAP32[3680] | 0) * 1.4142135381698608);
  i6 = 0 - i1 | 0;
  i5 = (HEAP32[244733] | 0) + i1 | 0;
  i4 = (HEAP32[244735] | 0) + i1 | 0;
  i1 = _CalcNumVertices(i5 + i1 | 0, i4 + i1 | 0) | 0;
  HEAP32[418862] = i1;
  i1 = _Gfx_CreateVb(0, i1) | 0;
  HEAP32[418853] = i1;
  i1 = _Gfx_LockVb(i1, 0, HEAP32[418862] | 0) | 0;
  i3 = (HEAP32[244734] | 0) + 2 | 0;
  i2 = HEAP32[466930] | 0;
  _DrawSkyY(i6, i6, i5, i4, ((i3 | 0) > (i2 | 0) ? i3 : i2) + 6 | 0, i1);
  _Gfx_UnlockVb(HEAP32[418853] | 0);
 }
 return;
}

function _AppendVRAMStats(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i7 + 20 | 0;
 i3 = i7 + 16 | 0;
 i6 = i7 + 12 | 0;
 i4 = i7 + 8 | 0;
 i2 = i7;
 _String_FromReadonly(i2, _glGetString(7939) | 0);
 if (_String_CaselessContains(i2, 14980) | 0) {
  _glGetIntegerv(36936, i1 | 0);
  _glGetIntegerv(36937, i3 | 0);
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!((i2 | 0) < 1 | (i1 | 0) < 1)) {
   HEAPF32[i6 >> 2] = +(i2 | 0) * .0009765625;
   HEAPF32[i4 >> 2] = +(i1 | 0) * .0009765625;
   _String_Format2(i5, 35092, i6, i4);
  }
 }
 STACKTOP = i7;
 return;
}

function _NormalBuilder_StretchZ(i4, i5, i6, i1, i2, i7, i8) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0;
 i3 = i1 + 1 | 0;
 L1 : do if ((i3 | 0) >= (HEAP32[414114] | 0) ? 1 : (1 << (i8 & 255) & (HEAPU8[1648420 + (i7 & 65535) >> 0] | 0) | 0) == 0) i1 = 1; else {
  i1 = 1;
  do {
   i4 = i4 + 96 | 0;
   i2 = i2 + 18 | 0;
   if (!((_Normal_CanStretch(i7, i2, i5, i6, i3, i8) | 0) << 24 >> 24)) break L1;
   HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
   i1 = i1 + 1 | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[414114] | 0));
 } while (0);
 _AddVertices(i7, i8);
 return i1 | 0;
}

function _Hotkeys_FindPartial(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = (HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24 != 0 & 1;
 i4 = (HEAP8[1868513] | HEAP8[1868512]) << 24 >> 24 == 0 ? i4 : i4 | 2;
 i4 = (HEAP8[1868517] | HEAP8[1868516]) << 24 >> 24 == 0 ? i4 : i4 | 4;
 i2 = HEAP32[422522] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i1 = 0;
  while (1) {
   i5 = HEAPU8[355216 + (i1 << 3) + 5 >> 0] | 0;
   if ((i4 & i5 | 0) == (i5 | 0)) if ((HEAPU8[355216 + (i1 << 3) + 4 >> 0] | 0 | 0) == (i3 | 0)) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _Utils_UNSAFE_GetFilename(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = HEAP16[i4 + 4 >> 1] | 0;
 L1 : do if (i1 << 16 >> 16) {
  i3 = HEAP32[i4 >> 2] | 0;
  i2 = i1 & 65535;
  L3 : while (1) {
   i1 = i2 + -1 | 0;
   switch (HEAP8[i3 + i1 >> 0] | 0) {
   case 92:
   case 47:
    break L3;
   default:
    {}
   }
   if ((i2 | 0) > 1) i2 = i1; else break L1;
  }
  _String_UNSAFE_SubstringAt(i5, i4, i2);
  i2 = i5;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i5 = i4;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = i3;
 } while (0);
 STACKTOP = i6;
 return;
}

function _NormalBuilder_StretchX(i4, i1, i5, i6, i2, i7, i8) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0;
 i3 = i1 + 1 | 0;
 L1 : do if ((i3 | 0) >= (HEAP32[414119] | 0) ? 1 : (1 << (i8 & 255) & (HEAPU8[1648420 + (i7 & 65535) >> 0] | 0) | 0) == 0) i1 = 1; else {
  i1 = 1;
  do {
   i4 = i4 + 6 | 0;
   i2 = i2 + 1 | 0;
   if (!((_Normal_CanStretch(i7, i2, i3, i5, i6, i8) | 0) << 24 >> 24)) break L1;
   HEAP8[(HEAP32[414112] | 0) + i4 >> 0] = 0;
   i1 = i1 + 1 | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[414119] | 0));
 } while (0);
 _AddVertices(i7, i8);
 return i1 | 0;
}

function _MenuOptionsScreen_AddButton(i5, i3, i4, i2, i6, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i8 = i5 + 104 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i9 = i5 + 364 + (i7 * 84 | 0) | 0;
 _ButtonWidget_Add(i5, i9, 300, i4);
 HEAP32[i5 + 364 + (i7 * 84 | 0) + 80 >> 2] = i3;
 i4 = 363888 + (i7 << 5) | 0;
 HEAP32[i5 + 364 + (i7 * 84 | 0) + 36 >> 2] = i4;
 HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (i7 << 2) >> 2] = i9;
 HEAP32[i5 + 36 + (i7 << 2) >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[363888 + (i7 << 5) + 4 >> 2] = i6;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 return i7 | 0;
}

function _MCLevel_Callback_3(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 L1 : do if (_String_CaselessEqualsConst((HEAP32[i1 >> 2] | 0) + 8 | 0, 31597) | 0) if (_String_CaselessEqualsConst(i1 + 8 | 0, 31601) | 0) {
  i2 = _NbtTag_I16(i3) | 0;
  i1 = HEAP32[422204] | 0;
  HEAP8[i1 + 28 >> 0] = 1;
  switch (HEAP32[i3 + 224 >> 2] | 0) {
  case 0:
   {
    HEAPF32[i1 >> 2] = +(i2 << 16 >> 16);
    break L1;
   }
  case 1:
   {
    HEAPF32[i1 + 4 >> 2] = +(i2 << 16 >> 16) + -1.0;
    break L1;
   }
  case 2:
   {
    HEAPF32[i1 + 8 >> 2] = +(i2 << 16 >> 16);
    break L1;
   }
  default:
   break L1;
  }
 } while (0);
 return;
}

function _LoadingScreen_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 _Widget_SetLocation(i1 + 72 | 0, 1, 1, 0, -31);
 _Widget_SetLocation(i1 + 144 | 0, 1, 1, 0, 17);
 i3 = _Display_ScaleY_1898(34) | 0;
 i2 = _Display_ScaleX_1897(200) | 0;
 HEAP32[i1 + 64 >> 2] = i2;
 i2 = _Gui_CalcPos(1, 0, i2, HEAP32[466968] | 0) | 0;
 HEAP32[i1 + 56 >> 2] = i2;
 i2 = _Display_ScaleY_1898(4) | 0;
 HEAP32[i1 + 68 >> 2] = i2;
 i2 = _Gui_CalcPos(1, i3, i2, HEAP32[466969] | 0) | 0;
 HEAP32[i1 + 60 >> 2] = i2;
 i2 = i1 + 52 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 _LoadingScreen_CalcMaxVertices(i1);
 if ((i3 | 0) != (HEAP32[i2 >> 2] | 0)) _Screen_UpdateVb(i1);
 return;
}

function _Event_Register(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + 256 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = 0;
  do {
   if ((HEAP32[i5 + (i2 << 2) >> 2] | 0) == (i4 | 0)) if ((HEAP32[i5 + 128 + (i2 << 2) >> 2] | 0) == (i6 | 0)) {
    _Process_Abort2(0, 31065);
    i1 = HEAP32[i3 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
  if ((i1 | 0) == 32) _Process_Abort2(0, 31127); else i7 = 9;
 } else i7 = 9;
 if ((i7 | 0) == 9) {
  HEAP32[i5 + (i1 << 2) >> 2] = i4;
  HEAP32[i5 + 128 + (i1 << 2) >> 2] = i6;
  HEAP32[i3 >> 2] = i1 + 1;
 }
 return;
}

function _MenuOptionsScreen_EndButtons(i7, i1, i5) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i6 = i7 + 104 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 0) i1 = (i2 + 1 | 0) / 2 | 0;
 i4 = i2 << 31;
 i4 = (31 ? i4 >> 31 : i4) + (2 - i1) | 0;
 i4 = (i4 | 0) > -3 ? i4 : -3;
 if ((i2 | 0) > 0) {
  i2 = 0 - i1 | 0;
  i3 = 0;
  do {
   i8 = (i3 | 0) < (i1 | 0);
   _Widget_SetLocation(i7 + 364 + (i3 * 84 | 0) | 0, 1, 1, i8 ? -160 : 160, (i3 + i4 + (i8 ? 0 : i2) | 0) * 50 | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i6 >> 2] | 0));
 }
 _ButtonWidget_Add(i7, i7 + 1288 | 0, 400, i5);
 return;
}

function _Render3D_Anaglyph(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i2 = i6 + 64 | 0;
 i4 = i6;
 i5 = i2;
 i7 = 1689148;
 i8 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  i5 = i5 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i5 | 0) < (i8 | 0));
 i5 = i4;
 i7 = 1689084;
 i8 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  i5 = i5 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i5 | 0) < (i8 | 0));
 _Gfx_Set3DLeft(i2, i4);
 _Render3DFrame(d1, d3);
 _Gfx_Set3DRight(i2, i4);
 _Render3DFrame(d1, d3);
 _Gfx_End3D(i2, i4);
 STACKTOP = i6;
 return;
}

function _Context2D_MakeTexture(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP8[1689213] & 1;
 _Gfx_RecreateTexture(i2, i1, 12, 0);
 i7 = i7 << 24 >> 24 != 0;
 i5 = i1 + 4 | 0;
 i6 = i1 + 12 | 0;
 HEAP16[i2 + 8 >> 1] = HEAP32[(i7 ? i5 : i6) >> 2];
 i4 = i1 + 8 | 0;
 i1 = i1 + 16 | 0;
 HEAP16[i2 + 10 >> 1] = HEAP32[(i7 ? i4 : i1) >> 2];
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i2 + 16 >> 2] = 0.0;
 d3 = +_Context2D_CalcUV(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 HEAPF32[i2 + 20 >> 2] = d3;
 d3 = +_Context2D_CalcUV(HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 HEAPF32[i2 + 24 >> 2] = d3;
 return;
}

function _PhysicsComp_OnIce(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i3;
 i5 = _Math_Floor(+HEAPF32[i2 + 4 >> 2]) | 0;
 i4 = _Math_Floor(+HEAPF32[i2 + 8 >> 2] + -.009999999776482582) | 0;
 i4 = 1001764 + ((_World_GetPhysicsBlock(i5, i4, _Math_Floor(+HEAPF32[i2 + 12 >> 2]) | 0) | 0) & 65535) | 0;
 if ((HEAP8[i4 >> 0] | 0) == 3) i1 = 1; else {
  _Entity_GetBounds(i2, i1);
  i5 = i1 + 4 | 0;
  d6 = +HEAPF32[i5 >> 2] + -.009999999776482582;
  HEAPF32[i5 >> 2] = d6;
  HEAPF32[i1 + 16 >> 2] = d6;
  i1 = _Entity_TouchesAny(i1, 23) | 0;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _MCLevel_ParseMap(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 8 | 0;
 do if (!(_String_CaselessEqualsConst(i1, 31750) | 0)) {
  if (_String_CaselessEqualsConst(i1, 31756) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[244734] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31763) | 0) {
   i2 = (_NbtTag_U16(i2) | 0) & 65535;
   HEAP32[244735] = i2;
   break;
  }
  if (_String_CaselessEqualsConst(i1, 31770) | 0) {
   HEAP32[244732] = HEAP32[i2 + 16 >> 2];
   i2 = _Nbt_TakeArray(i2, 31777) | 0;
   HEAP32[244730] = i2;
  }
 } else {
  i2 = (_NbtTag_U16(i2) | 0) & 65535;
  HEAP32[244733] = i2;
 } while (0);
 return;
}

function _Event_RaiseBlock(i5, i3, i7, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 i1 = i5 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i6 = 0;
  do {
   i10 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
   i9 = HEAP32[i5 + 128 + (i6 << 2) >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   FUNCTION_TABLE_viiii[i10 & 31](i9, i4, i7, i2);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 STACKTOP = i8;
 return;
}

function _String_DeleteAt(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = i4 + 4 | 0;
 if ((i3 | 0) < 0) i2 = 3; else {
  i1 = HEAPU16[i5 >> 1] | 0;
  if ((i1 | 0) <= (i3 | 0)) i2 = 3;
 }
 if ((i2 | 0) == 3) {
  _Process_Abort2(0, 49187);
  i1 = HEAPU16[i5 >> 1] | 0;
 }
 i1 = i1 + -1 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) > (i3 | 0)) do {
  i1 = i3;
  i3 = i3 + 1 | 0;
  HEAP8[i2 + i1 >> 0] = HEAP8[i2 + i3 >> 0] | 0;
  i1 = (HEAPU16[i5 >> 1] | 0) + -1 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
 } while ((i3 | 0) < (i1 | 0));
 HEAP8[i2 + i1 >> 0] = 0;
 HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + -1 << 16 >> 16;
 return;
}

function _ClassicLighting_LightHint(i2, i1, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 1296 | 0;
 i7 = i6;
 i5 = (i2 | 0) > 0 ? i2 : 0;
 i9 = HEAP32[244733] | 0;
 i1 = i2 + 18 | 0;
 i3 = (i4 | 0) > 0 ? i4 : 0;
 i8 = HEAP32[244735] | 0;
 i2 = i4 + 18 | 0;
 i1 = ((i9 | 0) < (i1 | 0) ? i9 : i1) - i5 | 0;
 i2 = ((i8 | 0) < (i2 | 0) ? i8 : i2) - i3 | 0;
 if (!((_Heightmap_CalculateCoverage(i5, i3, i1, i2, _Heightmap_InitialCoverage(i5, i3, i1, i2, i7) | 0, i7) | 0) << 24 >> 24)) _Heightmap_FinishCoverage(i5, i3, i1, i2);
 STACKTOP = i6;
 return;
}

function _Block_CalcStretch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 & 65535;
 if (+HEAPF32[1010980 + (i2 * 12 | 0) >> 2] == 0.0) if (+HEAPF32[1020196 + (i2 * 12 | 0) >> 2] == 1.0) {
  i4 = 1648420 + i2 | 0;
  i1 = HEAP8[i4 >> 0] | 60;
  HEAP8[i4 >> 0] = i1;
 } else i3 = 4; else i3 = 4;
 if ((i3 | 0) == 4) {
  i4 = 1648420 + i2 | 0;
  i1 = HEAP8[i4 >> 0] & -61;
  HEAP8[i4 >> 0] = i1;
 }
 if (+HEAPF32[1010980 + (i2 * 12 | 0) + 8 >> 2] == 0.0) if (+HEAPF32[1020196 + (i2 * 12 | 0) + 8 >> 2] == 1.0) HEAP8[1648420 + i2 >> 0] = i1 | 3; else i3 = 8; else i3 = 8;
 if ((i3 | 0) == 8) HEAP8[1648420 + i2 >> 0] = i1 & -4;
 return;
}

function _HasChanged(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 8 | 0;
 i4 = i5;
 L1 : do if ((HEAP32[430435] | 0) > 0) {
  i2 = 0;
  while (1) {
   _StringsBuffer_UNSAFE_Get(i4, 1721732, i2);
   i8 = i4;
   i7 = HEAP32[i8 + 4 >> 2] | 0;
   i6 = i1;
   HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i6 + 4 >> 2] = i7;
   i2 = i2 + 1 | 0;
   if (_String_CaselessEquals(i1, i3) | 0) {
    i1 = 1;
    break L1;
   }
   if ((i2 | 0) >= (HEAP32[430435] | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _CustomModel_Draw(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[428691] | 0;
 _Model_ApplyTexture(i2);
 HEAPF32[428686] = +HEAPF32[i2 + 120 >> 2] / +(HEAPU16[i1 + 184 >> 1] | 0);
 HEAPF32[428687] = +HEAPF32[i2 + 124 >> 2] / +(HEAPU16[i1 + 186 >> 1] | 0);
 i4 = i1 + 188 | 0;
 _Model_LockVB(0, (HEAPU8[i4 >> 0] | 0) * 24 | 0);
 if (HEAP8[i4 >> 0] | 0) {
  i3 = 0;
  do {
   _CustomModel_DrawPart(i1 + 192 + (i3 * 104 | 0) | 0, i1, i2);
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < (HEAPU8[i4 >> 0] | 0) >>> 0);
 }
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris((HEAPU8[i4 >> 0] | 0) * 24 | 0);
 HEAP8[1714760] = 0;
 return;
}

function _IsCached(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 1760 | 0;
 i7 = i4 + 544 | 0;
 i6 = i4 + 536 | 0;
 i5 = i4 + 1152 | 0;
 i1 = i4 + 552 | 0;
 HEAP32[i7 >> 2] = i4 + 272;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 260;
 HEAP32[i6 >> 2] = i4;
 i2 = i6 + 4 | 0;
 HEAP16[i2 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 260;
 _MakeCachePath(i7, i6, i3);
 _Platform_EncodePath(i5, i7);
 _Platform_EncodePath(i1, i6);
 if (!(_File_Exists(i5) | 0)) if (!(HEAP16[i2 >> 1] | 0)) i1 = 0; else i1 = (_File_Exists(i1) | 0) != 0 & 1; else i1 = 1;
 STACKTOP = i4;
 return i1 | 0;
}

function _ListScreen_UpdateTitle(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5 + 72 | 0;
 i1 = i5 + 68 | 0;
 i2 = i5 + 64 | 0;
 HEAP32[i4 >> 2] = i5;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 _String_AppendConst(i4, HEAP32[i3 + 832 >> 2] | 0);
 if (!(HEAP8[1868754] | 0)) {
  HEAP32[i1 >> 2] = ((HEAP32[i3 + 804 >> 2] | 0) / 5 | 0) + 1;
  i6 = _Math_CeilDiv(HEAP32[i3 + 916 >> 2] | 0, 5) | 0;
  HEAP32[i2 >> 2] = (i6 | 0) == 0 ? 1 : i6;
  _String_Format2(i4, 43347, i1, i2);
 }
 _TextWidget_Set(i3 + 836 | 0, i4, i3 + 792 | 0);
 STACKTOP = i5;
 return;
}

function _ListScreen_Layout(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 36 | 0;
 i2 = 0;
 do {
  _Widget_SetLocation(i1 + (i2 * 84 | 0) | 0, 1, 1, 0, (i2 * 50 | 0) + -100 | 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 5);
 i1 = i3 + 624 | 0;
 if (!(HEAP8[1868784] | 0)) {
  _Widget_SetLocation(i1, 1, 2, 0, 25);
  _Widget_SetLocation(i3 + 708 | 0, 1, 2, 0, 70);
 } else {
  _Widget_SetLocation(i1, 3, 2, -150, 25);
  _Widget_SetLocation(i3 + 708 | 0, 4, 2, -150, 25);
 }
 _Widget_SetLocation(i3 + 456 | 0, 1, 1, -220, 0);
 _Widget_SetLocation(i3 + 540 | 0, 1, 1, 220, 0);
 _Widget_SetLocation(i3 + 836 | 0, 1, 1, 0, -155);
 return;
}

function _Dat_LoadFormat1(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i4 + 96 | 0;
 _Dat_Format0And1();
 i1 = _Java_ReadString(i3, i4 + 48 | 0) | 0;
 if (!i1) {
  i1 = _Java_ReadString(i3, i4) | 0;
  if (!i1) {
   i1 = _Stream_Read(i3, i2, 14) | 0;
   if (!i1) {
    i1 = (_Stream_GetU16_BE(i2 + 8 | 0) | 0) & 65535;
    HEAP32[244733] = i1;
    i1 = (_Stream_GetU16_BE(i2 + 10 | 0) | 0) & 65535;
    HEAP32[244735] = i1;
    i1 = (_Stream_GetU16_BE(i2 + 12 | 0) | 0) & 65535;
    HEAP32[244734] = i1;
    i1 = _Map_ReadBlocks(i3) | 0;
   }
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Heightmap_FinishCoverage(i7, i10, i8, i11) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 if ((i11 | 0) > 0) {
  i1 = HEAP32[244733] | 0;
  i4 = (i8 | 0) > 0;
  i2 = HEAP32[424246] | 0;
  i9 = 0;
  do {
   if (i4) {
    i5 = (Math_imul(i1, i9 + i10 | 0) | 0) + i7 | 0;
    i6 = 0;
    while (1) {
     i3 = i2 + (i5 << 1) | 0;
     if ((HEAP16[i3 >> 1] | 0) == 32767) HEAP16[i3 >> 1] = -10;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i8 | 0)) break; else i5 = i5 + 1 | 0;
    }
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i11 | 0));
 }
 return;
}

function _EntityNames_Render() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[417347] | 0;
 if ((HEAP8[1669384] | 0) != 0 & (HEAP8[1841572] | 0) == 0) {
  i3 = _Entities_GetClosest(i1) | 0;
  HEAP32[418843] = i3;
  if ((HEAP8[i1 + 478 >> 0] | 0) != 0 & (HEAP8[1669384] | 0) == 2) {
   _Gfx_SetAlphaTest(1);
   i3 = (_Gfx_GetFog() | 0) << 24 >> 24 != 0;
   if (i3) _Gfx_SetFog(0);
   i2 = 0;
   do {
    i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
    if (!((i1 | 0) == 0 | (i2 | 0) == (HEAP32[418843] | 0))) _DrawName(i1);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 256);
   _Gfx_SetAlphaTest(0);
   if (i3) _Gfx_SetFog(1);
  }
 }
 return;
}

function _StoredHotkeys_Add(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i9 = i5 + 209 | 0;
 i8 = i5 + 208 | 0;
 i7 = i5 + 200 | 0;
 i6 = i5 + 192 | 0;
 HEAP8[i9 >> 0] = i1;
 HEAP8[i8 >> 0] = i2;
 HEAP32[i7 >> 2] = i5 + 128;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 64;
 HEAP32[i6 >> 2] = i5;
 HEAP16[i6 + 4 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 128;
 _String_Format2(i7, 37996, HEAP32[4320 + (i4 << 2) >> 2] | 0, i9);
 _String_Format2(i6, 38009, i8, i3);
 _Options_SetString(i7, i6);
 STACKTOP = i5;
 return;
}

function _LocalPlayer_HandleFly(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 do if (!(HEAP32[422387] | 0)) {
  i2 = 146288 + (i1 * 796 | 0) + 460 | 0;
  if (HEAP8[146288 + (i1 * 796 | 0) + 474 >> 0] | 0) if (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) {
   _HacksComp_SetFlying(i2, (HEAP8[146288 + (i1 * 796 | 0) + 495 >> 0] | 0) == 0 & 1);
   i1 = 1;
   break;
  }
  i1 = 146288 + (i1 * 796 | 0) + 789 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   HEAP8[i1 >> 0] = 1;
   if (!(HEAP8[1868739] | 0)) i1 = 0; else {
    _Chat_AddRaw(30508);
    i1 = 0;
   }
  } else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _OnPointerUp(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 _CheckBlockTap(i5);
 if (!(HEAP8[1868784] | 0)) i2 = 3; else if (HEAP8[352464 + (i5 * 24 | 0) + 4 >> 0] & 1) i2 = 3;
 if ((i2 | 0) == 3) {
  i3 = HEAP32[353344 + (i5 << 3) >> 2] | 0;
  i4 = HEAP32[353344 + (i5 << 3) + 4 >> 2] | 0;
  if ((HEAP32[422372] | 0) > 0) {
   i2 = 1 << i5;
   i1 = 0;
   do {
    i5 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
    HEAP8[i5 + 7 >> 0] = 1;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i2, i3, i4);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[422372] | 0));
  }
 }
 return;
}

function _OnMouseMove(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1 + 4 | 0;
 i2 = i1;
 i5 = HEAPU16[i3 + 42 >> 1] | 0;
 _Input_SetNonRepeatable(119, i5 & 1);
 _Input_SetNonRepeatable(120, i5 & 2);
 _Input_SetNonRepeatable(121, i5 & 4);
 HEAP32[i4 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i3 + 56 >> 2];
 _RescaleXY(i4, i2);
 _Pointer_SetPosition(0, HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 if (HEAP8[1868648] | 0) _Event_RaiseRawMove(1687424, +(HEAP32[i3 + 44 >> 2] | 0), +(HEAP32[i3 + 48 >> 2] | 0));
 STACKTOP = i1;
 return 1;
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 if (!i3) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 48;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i1 | 0) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i3 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
 _free(i3);
 i3 = i1;
 return i3 | 0;
}

function _ChatScreen_ScrollChatBy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = i2 + 44 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 L1 : do if ((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0) {
  i1 = (_ChatScreen_ClampChatIndex(i3 + i1 | 0) | 0) - i3 | 0;
  if (i1 | 0) {
   i2 = i2 + 1108 | 0;
   while (1) {
    if ((i1 | 0) < 0) {
     HEAP32[i4 >> 2] = i3 + -1;
     _TextGroupWidget_ShiftDown(i2);
     i1 = i1 + 1 | 0;
    } else {
     HEAP32[i4 >> 2] = i3 + 1;
     _TextGroupWidget_ShiftUp(i2);
     i1 = i1 + -1 | 0;
    }
    if (!i1) break L1;
    i3 = HEAP32[i4 >> 2] | 0;
   }
  }
 } while (0);
 return;
}

function _CPE_EnvSetMapAppearance(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _UNSAFE_GetString(i3, i1);
 _CPE_ApplyTexturePack(i3);
 _Env_SetSidesBlock(HEAPU8[i1 + 64 >> 0] | 0);
 _Env_SetEdgeBlock(HEAPU8[i1 + 65 >> 0] | 0);
 _Env_SetEdgeHeight((_Stream_GetU16_BE(i1 + 66 | 0) | 0) << 16 >> 16);
 if ((HEAP8[21333] | 0) != 1) {
  _Env_SetCloudsHeight((_Stream_GetU16_BE(i1 + 68 | 0) | 0) << 16 >> 16);
  i3 = _Stream_GetU16_BE(i1 + 70 | 0) | 0;
  HEAP32[3682] = i3 << 16 >> 16 < 1 ? 32768 : i3 << 16 >> 16;
  _Game_SetViewDistance(HEAP32[3681] | 0);
 }
 STACKTOP = i2;
 return;
}

function _SittingModel_GetTransform(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = i1 + 80 | 0;
 i8 = i3 + 4 | 0;
 HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] - +HEAPF32[i1 + 84 >> 2] * .625;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _Entity_GetTransform(i1, i6, i5, i2);
 STACKTOP = i4;
 return;
}

function _Screen_BuildMesh(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i8;
 i4 = HEAP32[i7 + 16 >> 2] | 0;
 i6 = _Screen_LockVb(i7) | 0;
 HEAP32[i5 >> 2] = i6;
 i6 = i7 + 20 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i3 = 0;
  do {
   i2 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
   if (i2) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2, i5);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 _Gfx_UnlockDynamicVb(HEAP32[i7 + 12 >> 2] | 0);
 STACKTOP = i8;
 return;
}

function _SaveLevelScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i1 + 16 >> 2] = 364384;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 5;
 HEAP32[i3 >> 2] = 22888;
 _ButtonWidget_Add(i1, i1 + 60 | 0, 400, 145);
 _ButtonWidget_Add(i1, i1 + 144 | 0, 400, 146);
 _AddPrimaryButton(i1, i1 + 228 | 0, 147);
 _TextInputWidget_Add(i1, i1 + 312 | 0, 400, 978992, i3);
 _Menu_SelectWidget(i1, 3);
 _TextWidget_Add(i1, i1 + 612 | 0);
 HEAP32[i1 + 604 >> 2] = 43611;
 i3 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 STACKTOP = i2;
 return;
}

function _Gui_ShowCinematicBars() {
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[466968] | 0;
 i3 = HEAP32[466969] | 0;
 d1 = +HEAPF32[422390];
 do if (d1 < 0.0) {
  HEAPF32[422390] = 0.0;
  d1 = 0.0;
  i4 = 7;
 } else {
  if (d1 > 1.0) HEAPF32[422390] = 1.0; else if (!(d1 == 1.0)) {
   i4 = 7;
   break;
  }
  i5 = HEAP32[422391] | 0;
  _Gfx_Draw2DGradient(0, 0, i2, i3, i5, i5);
 } while (0);
 if ((i4 | 0) == 7) {
  i4 = ~~(d1 * +(i3 | 0) * .5);
  i5 = HEAP32[422391] | 0;
  _Gfx_Draw2DGradient(0, 0, i2, i4, i5, i5);
  i5 = HEAP32[422391] | 0;
  _Gfx_Draw2DGradient(0, i3 - i4 | 0, i2, i4, i5, i5);
 }
 return;
}

function _CuboidCommand_Execute(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 i6 = i3;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = i5;
 _DrawOpCommand_ResetState();
 HEAP32[416804] = 26069;
 HEAP32[416805] = 97;
 _DrawOpCommand_ExtractPersistArg(i1);
 HEAP32[416814] = -1;
 if (!(HEAP16[i1 + 4 >> 1] | 0)) i4 = 3; else {
  i6 = _DrawOpCommand_ParseBlock(i1) | 0;
  HEAP32[416814] = i6;
  if ((i6 | 0) != -1) i4 = 3;
 }
 if ((i4 | 0) == 3) _DrawOpCommand_Begin();
 STACKTOP = i2;
 return;
}

function _World_SetDimensions(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 HEAP32[244733] = i3;
 HEAP32[244734] = i1;
 HEAP32[244735] = i2;
 i4 = Math_imul(i2, i3) | 0;
 i5 = Math_imul(i4, i1) | 0;
 HEAP32[244732] = i5;
 HEAP32[244739] = i4;
 HEAP32[244736] = i3 + -1;
 HEAP32[244737] = i1 + -1;
 HEAP32[244738] = i2 + -1;
 i4 = i3 + 15 | 0;
 i4 = 4 ? i4 >> 4 : i4;
 HEAP32[244750] = i4;
 i1 = i1 + 15 | 0;
 i1 = 4 ? i1 >> 4 : i1;
 HEAP32[244751] = i1;
 i3 = i2 + 15 | 0;
 i3 = 4 ? i3 >> 4 : i3;
 HEAP32[244752] = i3;
 i3 = Math_imul(Math_imul(i1, i4) | 0, i3) | 0;
 HEAP32[244753] = i3;
 return;
}

function _SoundComp_ShouldPlay(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 _Vec3_Sub(i1, 14508, i4);
 if (+HEAPF32[i5 + 136 >> 2] < .9990000128746033) i1 = +_Vec3_LengthSquared(i1) > 3.0625; else {
  d2 = +HEAPF32[i5 + 140 >> 2];
  if (!(HEAP8[HEAP32[414161] >> 0] | 0)) {
   d3 = +_Math_SinF(d2);
   d2 = +_Math_SinF(+HEAPF32[i5 + 144 >> 2]);
  } else {
   d3 = +_Math_CosF(d2);
   d2 = +_Math_CosF(+HEAPF32[i5 + 144 >> 2]);
  }
  i1 = _Math_Sign(d3) | 0;
  i1 = (i1 | 0) != (_Math_Sign(d2) | 0);
 }
 STACKTOP = i6;
 return i1 & 1 | 0;
}

function _Options_GetColor(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5 + 24 | 0;
 i2 = i5;
 if (!((_Options_UNSAFE_Get(i1, i4) | 0) << 24 >> 24)) i1 = 0; else if (!((_PackedCol_TryParseHex(i4, i3) | 0) << 24 >> 24)) if (!(_String_UNSAFE_Split(i4, 44, i2, 3) | 0)) i1 = 0; else if (!((_Convert_ParseUInt8(i2, i3) | 0) << 24 >> 24)) i1 = 0; else if (!((_Convert_ParseUInt8(i2 + 8 | 0, i3 + 1 | 0) | 0) << 24 >> 24)) i1 = 0; else i1 = (_Convert_ParseUInt8(i2 + 16 | 0, i3 + 2 | 0) | 0) << 24 >> 24 != 0 & 1; else i1 = 1;
 STACKTOP = i5;
 return i1 | 0;
}

function _HeadModel_GetTransform(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = i1 + 80 | 0;
 i8 = i3 + 4 | 0;
 HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] - +HEAPF32[i1 + 84 >> 2] * 1.5;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _Entity_GetTransform(i1, i6, i5, i2);
 STACKTOP = i4;
 return;
}

function _Menu_CycleSelected(i6, i4) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i3 = (HEAP32[i6 + 24 >> 2] | 0) + i4 | 0;
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i2 = HEAP32[i6 + 16 >> 2] | 0;
  i5 = 0;
  while (1) {
   i7 = (i3 + (Math_imul(i5, i4) | 0) | 0) % (i1 | 0) | 0;
   i7 = ((i7 | 0) < 0 ? i1 : 0) + i7 | 0;
   i5 = i5 + 1 | 0;
   if ((_Menu_IsSelectable(HEAP32[i2 + (i7 << 2) >> 2] | 0) | 0) << 24 >> 24) break;
   if ((i5 | 0) >= (i1 | 0)) {
    i1 = 0;
    break L1;
   }
  }
  _Menu_SelectWidget(i6, i7);
  i1 = 1;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _MapRenderer_RenderNormal(d4) {
 d4 = +d4;
 var i1 = 0, i2 = 0, i3 = 0;
 if (HEAP32[424252] | 0) {
  _Gfx_SetVertexFormat(1);
  _Gfx_SetAlphaTest(1);
  i1 = HEAP32[424247] | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    do if ((HEAP32[357744 + (i3 << 2) >> 2] | 0) >= 1) {
     i2 = 361840 + i3 | 0;
     if (!(HEAP8[362352 + i3 >> 0] | 0)) if (!(HEAP8[i2 >> 0] | 0)) break;
     _Atlas1D_Bind(i3);
     _RenderNormalBatch(i3);
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[424247] | 0;
    } while (0);
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  _CheckWeather(d4);
  _Gfx_SetAlphaTest(0);
 }
 return;
}

function _Input_SetPressed(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = 1868476 + i2 | 0;
 i1 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = 1;
 if ((i2 | 0) < 122) _Event_RaiseInput(1685084, i2, i1, 15140);
 _Event_RaiseInput(1686124, i2, i1, 15140);
 switch (i2 | 0) {
 case 67:
  {
   if ((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24) _Event_RaiseInput(1686124, 1001, 0, 15140);
   break;
  }
 case 86:
  {
   if ((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24) _Event_RaiseInput(1686124, 1002, 0, 15140);
   break;
  }
 case 119:
  {
   if (!(i1 << 24 >> 24)) _Pointer_SetPressed(0, 1);
   break;
  }
 default:
  {}
 }
 return;
}

function _ThumbstickWidget_BuildMesh(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 HEAP16[i4 + 4 >> 1] = HEAP32[i2 + 4 >> 2];
 HEAP16[i4 + 8 >> 1] = HEAP32[i2 + 12 >> 2];
 HEAP16[i4 + 10 >> 1] = (HEAP32[i2 + 16 >> 2] | 0) / 2 | 0;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 i6 = i4 + 16 | 0;
 HEAPF32[i6 >> 2] = 0.0;
 i5 = i4 + 24 | 0;
 HEAPF32[i5 >> 2] = .5;
 _ThumbstickWidget_BuildGroup(i2, i4, i1);
 HEAPF32[i6 >> 2] = .5;
 HEAPF32[i5 >> 2] = 1.0;
 _ThumbstickWidget_BuildGroup(i2, i4, i1);
 STACKTOP = i3;
 return;
}

function _OnInit_1219() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _Event_Register(1676764, 0, 227);
 _Event_Register(1681184, 0, 119);
 _Event_Register(1680144, 0, 228);
 _Event_Register(1677544, 0, 229);
 _Event_Register(1678064, 0, 229);
 _Event_Register(1678324, 0, 230);
 _Event_Register(1678584, 0, 231);
 HEAP32[424247] = 87;
 _IVec3_MaxValue_1233(i2);
 HEAP32[424258] = HEAP32[i2 >> 2];
 HEAP32[424259] = HEAP32[i2 + 4 >> 2];
 HEAP32[424260] = HEAP32[i2 + 8 >> 2];
 i2 = _Options_GetInt(39417, 4, 1024, 30) | 0;
 HEAP32[424261] = i2;
 _CalcViewDists();
 STACKTOP = i1;
 return;
}

function _Drawer2D_IsEmptyText(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5;
 i4 = i5 + 8 | 0;
 i2 = i5 + 16 | 0;
 i7 = i1;
 i6 = HEAP32[i7 + 4 >> 2] | 0;
 i1 = i3;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 + 4 >> 2] = i6;
 i1 = i4 + 4 | 0;
 L1 : do if (!((_Drawer2D_UNSAFE_NextPart(i3, i4, i2) | 0) << 24 >> 24)) i1 = 1; else while (1) {
  if (HEAP16[i1 >> 1] | 0) {
   i1 = 0;
   break L1;
  }
  if (!((_Drawer2D_UNSAFE_NextPart(i3, i4, i2) | 0) << 24 >> 24)) {
   i1 = 1;
   break;
  }
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _InventoryScreen_MoveToSelected(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 48 | 0;
 HEAP8[i1 + 2837 >> 0] = 0;
 do if (!(HEAP8[1868754] | 0)) {
  _TableWidget_SetToBlock(i2, HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0);
  if ((HEAP32[i1 + 108 >> 2] | 0) == -1) {
   _InventoryScreen_OnUpdateTitle(HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0);
   break;
  } else {
   _TableWidget_RecreateTitle(i2, 1);
   break;
  }
 } else {
  _TableWidget_SetToIndex(i2, HEAP32[i1 + 108 >> 2] | 0);
  _TableWidget_RecreateTitle(i2, 1);
 } while (0);
 return;
}

function _Entity_LerpAngles(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var d3 = 0.0;
 d3 = +_Math_LerpAngle(+HEAPF32[i1 + 364 >> 2], +HEAPF32[i1 + 396 >> 2], d2);
 HEAPF32[i1 + 16 >> 2] = d3;
 d3 = +_Math_LerpAngle(+HEAPF32[i1 + 368 >> 2], +HEAPF32[i1 + 400 >> 2], d2);
 HEAPF32[i1 + 20 >> 2] = d3;
 d3 = +_Math_LerpAngle(+HEAPF32[i1 + 372 >> 2], +HEAPF32[i1 + 404 >> 2], d2);
 HEAPF32[i1 + 24 >> 2] = d3;
 d3 = +_Math_LerpAngle(+HEAPF32[i1 + 376 >> 2], +HEAPF32[i1 + 408 >> 2], d2);
 HEAPF32[i1 + 28 >> 2] = d3;
 d2 = +_Math_LerpAngle(+HEAPF32[i1 + 380 >> 2], +HEAPF32[i1 + 412 >> 2], d2);
 HEAPF32[i1 + 32 >> 2] = d2;
 return;
}

function _Http_GetUrl(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 + 8 | 0;
 i4 = i6;
 _String_FromRaw(i5, i1, 128);
 i1 = 0;
 while (1) {
  if (_String_CaselessStarts(i5, 11296 + (i1 << 3) | 0) | 0) {
   i2 = 3;
   break;
  }
  i1 = i1 + 2 | 0;
  if (i1 >>> 0 >= 8) {
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 3) {
  _String_UNSAFE_SubstringAt(i4, i5, HEAPU16[11296 + (i1 << 3) + 4 >> 1] | 0);
  _String_Format2(i3, 52844, 11296 + ((i1 | 1) << 3) | 0, i4);
 } else if ((i2 | 0) == 5) _String_Copy(i3, i5);
 STACKTOP = i6;
 return;
}

function _Classic_SendSetBlock(i1, i2, i3, i5, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i7;
 HEAP8[i6 >> 0] = 5;
 _Stream_SetU16_BE(i6 + 1 | 0, i1 & 65535);
 _Stream_SetU16_BE(i6 + 3 | 0, i2 & 65535);
 _Stream_SetU16_BE(i6 + 5 | 0, i3 & 65535);
 i1 = i6 + 8 | 0;
 HEAP8[i6 + 7 >> 0] = i5;
 if (!(HEAP8[21301] | 0)) {
  HEAP8[i1 >> 0] = i4;
  i1 = i6 + 9 | 0;
 } else {
  _Stream_SetU16_BE(i1, i4);
  i1 = i6 + 10 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i6, i1 - i6 | 0);
 STACKTOP = i7;
 return;
}

function _CalcFog(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 _IVec3_Floor(i3, 1656632);
 i2 = _World_SafeGetBlock(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 i5 = i2 & 65535;
 i1 = 997924 + (i5 << 2) | 0;
 if (+HEAPF32[i1 >> 2] != 0.0) if (!((_CameraInsideBlock(i2, i3) | 0) << 24 >> 24)) i6 = 4; else {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i1 = 994852 + (i5 << 2) | 0;
 } else i6 = 4;
 if ((i6 | 0) == 4) {
  HEAPF32[i4 >> 2] = 0.0;
  i1 = 1675392;
 }
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function _GuiOptionsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 39493, 32, 274, 0);
 _MenuOptionsScreen_AddNum(i1, 41303, .25, 4.0, 1.0, 275, 276, 0);
 _MenuOptionsScreen_AddNum(i1, 41316, .25, 4.0, 1.0, 277, 278, 0);
 _MenuOptionsScreen_AddNum(i1, 41332, .25, 4.0, 1.0, 279, 280, 0);
 _MenuOptionsScreen_AddBool(i1, 41348, 33, 281, 0);
 _MenuOptionsScreen_AddBool(i1, 41367, 34, 282, 0);
 _MenuOptionsScreen_AddBool(i1, 41385, 35, 283, 0);
 _MenuOptionsScreen_AddButton(i1, 41401, 136, 0, 0, 0) | 0;
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 return;
}

function _Gfx_RestoreState() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = -1;
 _InitDefaultResources();
 _glEnableVertexAttribArray(0);
 _glEnableVertexAttribArray(1);
 HEAP32[3731] = -1;
 HEAP32[422309] = 0;
 HEAP32[422310] = 0;
 HEAPF32[3732] = -1.0;
 HEAPF32[3733] = -1.0;
 HEAP32[3734] = -1;
 _DirtyUniform(31);
 _GL_ClearColor(HEAP32[422309] | 0);
 _glBlendFunc(770, 771);
 _glDepthFunc(515);
 HEAP32[i2 + 4 >> 2] = 1;
 HEAP32[i2 + 8 >> 2] = 1;
 HEAP32[i2 >> 2] = i3;
 _Gfx_RecreateTexture(1689244, i2, 0, 0);
 STACKTOP = i1;
 return;
}

function _GenLevelScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364416;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 12;
 HEAP32[i1 + 24 >> 2] = -1;
 _GenLevelScreen_Make(i1, 0, HEAP32[244733] | 0);
 _GenLevelScreen_Make(i1, 1, HEAP32[244734] | 0);
 _GenLevelScreen_Make(i1, 2, HEAP32[244735] | 0);
 _GenLevelScreen_Make(i1, 3, 0);
 _TextWidget_Add(i1, i1 + 1788 | 0);
 _ButtonWidget_Add(i1, i1 + 48 | 0, 200, 150);
 _ButtonWidget_Add(i1, i1 + 132 | 0, 200, 151);
 _AddPrimaryButton(i1, i1 + 216 | 0, 147);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _SetPartInfo(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _Builder1DPart_VerticesCount(i4) | 0;
 HEAP32[i2 >> 2] = -1;
 if (!i1) i1 = 0; else {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i1;
  HEAP16[i2 + 8 >> 1] = HEAP32[i4 >> 2];
  HEAP16[i2 + 10 >> 1] = HEAP32[i4 + 4 >> 2];
  HEAP16[i2 + 12 >> 1] = HEAP32[i4 + 8 >> 2];
  HEAP16[i2 + 14 >> 1] = HEAP32[i4 + 12 >> 2];
  HEAP16[i2 + 16 >> 1] = HEAP32[i4 + 16 >> 2];
  HEAP16[i2 + 18 >> 1] = HEAP32[i4 + 20 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 24 >> 2];
  i1 = 1;
 }
 return i1 | 0;
}

function _Input_RemoveTouch(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = HEAP32[422517] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP32[352464 + (i1 * 24 | 0) >> 2] | 0) == (i4 | 0)) {
    i2 = 352464 + (i1 * 24 | 0) + 4 | 0;
    if (HEAP8[i2 >> 0] | 0) break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i3 | 0)) break L1;
  }
  _Pointer_SetPosition(i1, i5, i6);
  _Pointer_SetPressed(i1, 0);
  _Pointer_SetPosition(i1, -1e5, -1e5);
  HEAP8[i2 >> 0] = 0;
  if ((i1 + 1 | 0) == (HEAP32[422517] | 0)) HEAP32[422517] = i1;
 } while (0);
 return;
}

function _EntryList_Find(i7, i6, i8) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i9 + 16 | 0;
 i4 = i9 + 8 | 0;
 i5 = i9;
 i2 = i7 + 8 | 0;
 L1 : do if ((HEAP32[i2 >> 2] | 0) > 0) {
  i1 = 0;
  while (1) {
   _StringsBuffer_UNSAFE_GetRaw(i7, i1, i3);
   _String_UNSAFE_Separate(i3, i8, i4, i5) | 0;
   if (_String_CaselessEquals(i6, i4) | 0) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (HEAP32[i2 >> 2] | 0)) {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _Gui_ContainsPointers(i5, i6, i1, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i4 = HEAP32[422517] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i3 = i1 + i5 | 0;
  i1 = i2 + i6 | 0;
  i2 = 0;
  while (1) {
   i8 = HEAP32[353344 + (i2 << 3) >> 2] | 0;
   i7 = HEAP32[353344 + (i2 << 3) + 4 >> 2] | 0;
   i2 = i2 + 1 | 0;
   if ((i7 | 0) < (i1 | 0) & ((i8 | 0) < (i3 | 0) & ((i8 | 0) >= (i5 | 0) & (i7 | 0) >= (i6 | 0)))) {
    i1 = 1;
    break L1;
   }
   if ((i2 | 0) >= (i4 | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _CalcVelocity(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0, i5 = 0, d6 = 0.0;
 d1 = +(_Stream_GetU32_BE(i2) | 0);
 d6 = +Math_abs(+(d1 / 1.0e4));
 d1 = +(_Math_Sign(d1) | 0);
 d1 = +_PhysicsComp_CalcJumpVelocity(d6) * d1;
 switch (i3 << 24 >> 24) {
 case 0:
  {
   d1 = d1 + +HEAPF32[i4 >> 2];
   HEAPF32[i4 >> 2] = d1;
   break;
  }
 case 1:
  {
   HEAPF32[i4 >> 2] = d1;
   break;
  }
 default:
  d1 = +HEAPF32[i4 >> 2];
 }
 if (d1 < -1024.0) {
  d1 = -1024.0;
  i5 = 7;
 } else if (d1 > 1024.0) {
  d1 = 1024.0;
  i5 = 7;
 }
 if ((i5 | 0) == 7) HEAPF32[i4 >> 2] = d1;
 return;
}

function _InventoryScreen_PointerDown(i2, i1, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 i3 = i2 + 48 | 0;
 do if ((HEAP32[i2 + 1736 >> 2] | 0) != (i1 | 0)) if (!(_HUDscreen_PointerDown(HEAP32[454706] | 0, i1, i4, i5) | 0)) {
  if (((FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 63](i3, i1, i4, i5) | 0) & 255) << 24 >> 24) if (!(HEAP8[i2 + 132 >> 0] | 0)) break;
  if (!((HEAP8[1868515] | HEAP8[1868514]) << 24 >> 24)) if (!((HEAP8[1868513] | HEAP8[1868512]) << 24 >> 24)) {
   _Gui_Remove(i2);
   _CPE_SendNotifyAction(1, 0);
  }
 } while (0);
 return 1;
}

function _InventoryScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 1841116;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 2;
 _TextWidget_Add(i1, i1 + 2764 | 0);
 i2 = i1 + 48 | 0;
 _TableWidget_Add(i1, i2, ~~(+_Options_GetFloat(48241, 0.0, 10.0, 1.0) * 22.0));
 HEAP32[i1 + 92 >> 2] = HEAPU8[1696949];
 HEAP32[i1 + 1796 >> 2] = 405;
 _TableWidget_RecreateBlocks(i2);
 HEAP8[i1 + 2837 >> 0] = 1;
 _Event_Register(1676764, i1, 406);
 _Event_Register(1679884, i1, 407);
 _Event_Register(1680144, i1, 407);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _HotbarWidget_KeyDown(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _HotbarWidget_MapKey(i3, i2) | 0;
 do if ((i1 | 0) == -1) {
  if ((_InputBind_Claims(48, i3, i2) | 0) << 24 >> 24) {
   _HotbarWidget_CycleIndex(-1);
   i1 = 1;
   break;
  }
  if (!((_InputBind_Claims(49, i3, i2) | 0) << 24 >> 24)) i1 = 0; else {
   _HotbarWidget_CycleIndex(1);
   i1 = 1;
  }
 } else if (!(HEAP8[357294] | 0)) {
  _Inventory_SetSelectedIndex(i1);
  i1 = 1;
  break;
 } else {
  _Inventory_SetHotbarIndex(i1);
  HEAP8[i4 + 120 >> 0] = 1;
  i1 = 1;
  break;
 } while (0);
 return i1 | 0;
}

function _Atlas2D_LoadTile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = HEAP32[460927] | 0;
 i2 = i1 & 65535;
 i1 = 4 ? i2 >>> 4 : i2;
 if ((i1 | 0) < (HEAP32[460928] | 0)) {
  i6 = Math_imul(i3, i1) | 0;
  i1 = HEAP32[460925] | 0;
  i2 = (HEAP32[460924] | 0) + ((Math_imul(i6, i1) | 0) << 2) + ((Math_imul(i3, i2 & 15) | 0) << 2) | 0;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i4 + 4 >> 2] = i3;
  HEAP32[i4 + 8 >> 2] = i3;
  i1 = _Gfx_CreateTexture2(i4, i1, 0, HEAP8[1689081] | 0) | 0;
 } else i1 = 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _Model_ShouldRender(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i2;
 d8 = +HEAPF32[i1 + 4 >> 2];
 d7 = +HEAPF32[i1 + 8 >> 2];
 d5 = +HEAPF32[i1 + 12 >> 2];
 _Entity_GetPickingBounds(i1, i9);
 d4 = +HEAPF32[i9 + 12 >> 2] - +HEAPF32[i9 >> 2];
 d6 = +HEAPF32[i9 + 16 >> 2] - +HEAPF32[i9 + 4 >> 2];
 d3 = +HEAPF32[i9 + 20 >> 2] - +HEAPF32[i9 + 8 >> 2];
 d3 = d6 > d3 ? d6 : d3;
 i1 = _FrustumCulling_SphereInFrustum(d8, d7 + d6 * .5, d5, d4 > d3 ? d4 : d3) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _Env_Reset() {
 HEAP32[466928] = -1;
 HEAP32[466929] = -2;
 HEAP32[466930] = -1;
 HEAP16[933854] = 9;
 HEAP16[933855] = 7;
 HEAPF32[466931] = 1.0;
 HEAPF32[466932] = 1.0;
 HEAPF32[466933] = 1.0;
 HEAPF32[466936] = 0.0;
 HEAPF32[466937] = 0.0;
 HEAP32[466946] = -6579301;
 _PackedCol_GetShaded(-6579301, 1867788, 1867792, 1867796);
 HEAP32[466942] = -1;
 _PackedCol_GetShaded(-1, 1867772, 1867776, 1867780);
 HEAP32[466938] = -13159;
 HEAP32[466939] = -1;
 HEAP32[466940] = -1;
 HEAP32[466941] = -1;
 HEAP32[466950] = -3740673;
 HEAP32[466951] = -1;
 HEAP32[466934] = 0;
 HEAP32[466935] = 0;
 return;
}

function _Window_SaveFileDialog(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i2 = i4 + 264 | 0;
 i3 = i4;
 if (!(HEAP16[i1 + 12 >> 1] | 0)) i1 = -857812980; else {
  HEAP32[466976] = HEAP32[i1 + 16 >> 2];
  HEAP32[i2 >> 2] = i3;
  i5 = i2 + 4 | 0;
  HEAP16[i5 >> 1] = 0;
  HEAP16[i2 + 6 >> 1] = 260;
  _String_Format2(i2, 53401, i1 + 8 | 0, HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
  HEAP8[i3 + (HEAPU16[i5 >> 1] | 0) >> 0] = 0;
  i1 = _interop_DownloadFile(i3 | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _TextWidget_Set(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5;
 i6 = i4 + 40 | 0;
 _Gfx_DeleteTexture(i6);
 _DrawTextArgs_Make(i2, i1, i3, 1);
 _Drawer2D_MakeTextTexture(i6, i2);
 i2 = i4 + 50 | 0;
 i1 = HEAP16[i2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i1 = (_Font_CalcHeight(i3, 1) | 0) & 65535;
  HEAP16[i2 >> 1] = i1;
 }
 HEAP32[i4 + 12 >> 2] = HEAPU16[i4 + 48 >> 1];
 HEAP32[i4 + 16 >> 2] = i1 & 65535;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 511](i4);
 STACKTOP = i5;
 return;
}

function _NetPlayer_Tick(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3;
 _NetInterpComp_AdvanceState(i2 + 424 | 0, i2);
 _Entity_CheckSkin(i2);
 i7 = i2 + 352 | 0;
 i6 = i2 + 384 | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 _AnimatedComp_Update(i2, i5, i4, d1);
 STACKTOP = i3;
 return;
}

function _String_UNSAFE_Substring(i3, i6, i5, i4) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 if ((i5 | 0) < 0) i7 = 3; else if ((HEAPU16[i6 + 4 >> 1] | 0 | 0) < (i5 | 0)) i7 = 3;
 if ((i7 | 0) == 3) _Process_Abort2(0, 48977);
 i2 = i6 + 4 | 0;
 if ((i4 | 0) < 0) i7 = 6; else {
  i1 = HEAPU16[i2 >> 1] | 0;
  if ((i1 | 0) < (i4 | 0)) i7 = 6;
 }
 if ((i7 | 0) == 6) {
  _Process_Abort2(0, 49011);
  i1 = HEAPU16[i2 >> 1] | 0;
 }
 if ((i4 + i5 | 0) > (i1 | 0)) _Process_Abort2(0, 49045);
 _String_Init_2044(i3, (HEAP32[i6 >> 2] | 0) + i5 | 0, i4, i4);
 return;
}

function _TextInputWidget_AllowedChar(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 if (i1 << 24 >> 24 == 38) i1 = 0; else {
  i2 = i3 + 212 | 0;
  if (!((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 127](i2, i1) | 0) << 24 >> 24)) i1 = 0; else {
   i4 = (FUNCTION_TABLE_i[HEAP32[i3 + 44 >> 2] & 63]() | 0) << 6;
   if ((i4 | 0) == (HEAPU16[i3 + 68 >> 1] | 0 | 0)) i1 = 0; else {
    _InputWidget_AppendChar(i3, i1);
    i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2, i3 + 64 | 0) | 0;
    _InputWidget_DeleteChar(i3);
   }
  }
 }
 return i1 | 0;
}

function _CPE_ExtAddPlayerName(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i3 = i2;
 i6 = HEAP8[i1 + 1 >> 0] | 0;
 _UNSAFE_GetString(i5, i1 + 2 | 0);
 _UNSAFE_GetString(i4, i1 + 66 | 0);
 _UNSAFE_GetString(i3, i1 + 130 | 0);
 i1 = HEAP8[i1 + 194 >> 0] | 0;
 _RemoveEndPlus(i5);
 _RemoveEndPlus(i4);
 i8 = i6 & 255;
 i7 = 1675312 + (3 ? i8 >>> 3 : i8) | 0;
 HEAP8[i7 >> 0] = (1 << (i8 & 7) ^ 255) & (HEAPU8[i7 >> 0] | 0);
 _TabList_Set(i6, i5, i4, i3, i1);
 STACKTOP = i2;
 return;
}

function _Java_ReadClassData(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 48 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 L1 : do if (!(i1 & 2)) i1 = -857812917; else {
  i3 = i5 + 52 | 0;
  if ((HEAP32[i3 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    i1 = _Java_ReadValue(i6, HEAP8[i5 + 56 + (i2 * 60 | 0) >> 0] | 0, i5 + 56 + (i2 * 60 | 0) + 52 | 0) | 0;
    i2 = i2 + 1 | 0;
    if (i1 | 0) break L1;
   } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
   i1 = HEAP8[i4 >> 0] | 0;
  }
  if (!(i1 & 1)) i1 = 0; else i1 = _Java_SkipAnnotation(i6) | 0;
 } while (0);
 return i1 | 0;
}

function _GetRainHeight(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0;
 if (!((_World_ContainsXZ_374(i4, i5) | 0) << 24 >> 24)) d1 = +(HEAP32[466928] | 0); else {
  i3 = (Math_imul(HEAP32[244735] | 0, i4) | 0) + i5 | 0;
  i2 = HEAP16[(HEAP32[418844] | 0) + (i3 << 1) >> 1] | 0;
  if (i2 << 16 >> 16 == 32767) i2 = _CalcRainHeightAt(i4, HEAP32[244737] | 0, i5, i3) | 0; else i2 = i2 << 16 >> 16;
  if ((i2 | 0) == -1) d1 = 0.0; else {
   i5 = 1020196 + (((_World_GetBlock_375(i4, i2, i5) | 0) & 65535) * 12 | 0) + 4 | 0;
   d1 = +HEAPF32[i5 >> 2] + +(i2 | 0);
  }
 }
 return +d1;
}

function _HotbarWidget_Render2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _HotbarWidget_RenderOutline(i1);
 _HotbarWidget_RenderEntries(i2, i1 + 8 | 0);
 if (HEAP8[1689553] | 0) {
  i1 = HEAP16[i2 + 132 >> 1] | 0;
  HEAP16[i2 + 128 >> 1] = ~~(+HEAPF32[i2 + 104 >> 2] + +(HEAP32[i2 + 4 >> 2] | 0) + +HEAPF32[i2 + 96 >> 2] * 8.0) - ((1 ? (i1 & 65535) >>> 1 : i1 & 65535) & 65535);
  i1 = HEAP16[i2 + 134 >> 1] | 0;
  HEAP16[i2 + 130 >> 1] = ((HEAP32[i2 + 16 >> 2] | 0) / 2 | 0) + (HEAP32[i2 + 8 >> 2] | 0) - ((1 ? (i1 & 65535) >>> 1 : i1 & 65535) & 65535);
  _Texture_Render(i2 + 124 | 0);
 }
 return 116;
}

function _Gui_RemoveCore(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = _IndexOfScreen(i2) | 0;
 if ((i1 | 0) == -1) i1 = 0; else {
  i3 = (HEAP32[422372] | 0) + -1 | 0;
  if ((i1 | 0) < (i3 | 0)) do {
   i4 = i1;
   i1 = i1 + 1 | 0;
   HEAP32[352416 + (i4 << 2) >> 2] = HEAP32[352416 + (i1 << 2) >> 2];
   HEAP8[1868770 + i4 >> 0] = HEAP8[1868770 + i1 >> 0] | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP32[422372] = i3;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 56 >> 2] & 511](i2);
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
  i1 = 1;
 }
 return i1 | 0;
}

function _RainParticle_Render(i1, d2, i3) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4;
 _Vec3_Lerp(i7, i1 + 16 | 0, i1 + 28 | 0, d2);
 d2 = +HEAPF32[i1 + 40 >> 2] * .015625;
 HEAPF32[i8 >> 2] = d2;
 HEAPF32[i8 + 4 >> 2] = d2;
 i6 = _Math_Floor(+HEAPF32[i7 >> 2]) | 0;
 i5 = _Math_Floor(+HEAPF32[i7 + 4 >> 2]) | 0;
 i1 = _Math_Floor(+HEAPF32[i7 + 8 >> 2]) | 0;
 _Particle_DoRender(i8, i7, 21208, FUNCTION_TABLE_iiii[HEAP32[467171] & 63](i6, i5, i1) | 0, i3);
 STACKTOP = i4;
 return;
}

function _GenLevelScreen_GetInt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 i4 = i5 + 8 | 0;
 i8 = i2 + 300 + (i1 * 300 | 0) + 64 | 0;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = i3;
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = i7;
 i2 = i2 + 300 + (i1 * 300 | 0) + 212 | 0;
 if (!((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i3) | 0) << 24 >> 24)) i1 = 0; else {
  _Convert_ParseInt(i3, i4) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _Entity_ParseScale(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i3 = 0, i5 = 0, d6 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 if ((_Convert_ParseFloat(i2, i3) | 0) << 24 >> 24) {
  d1 = +HEAPF32[i3 >> 2];
  d1 = d1 > 1.0000000474974513e-03 ? d1 : 1.0000000474974513e-03;
  HEAPF32[i3 >> 2] = d1;
  if (HEAP8[i4 + 54 >> 0] & 1) {
   d6 = +HEAPF32[(HEAP32[i4 + 48 >> 2] | 0) + 56 >> 2];
   d1 = d1 < d6 ? d1 : d6;
   HEAPF32[i3 >> 2] = d1;
  }
  HEAPF32[i4 + 80 >> 2] = d1;
  HEAPF32[i4 + 84 >> 2] = d1;
  HEAPF32[i4 + 88 >> 2] = d1;
 }
 STACKTOP = i5;
 return;
}

function _World_SetNewMap(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = (i1 | 0) == 0;
 i2 = i5 ? 0 : i2;
 _World_SetDimensions(i5 ? 0 : i4, i2, i5 ? 0 : i3);
 HEAP32[244730] = i1;
 HEAP16[489498] = 0;
 if (!(HEAP32[244732] | 0)) {
  HEAP32[244730] = 0;
  i1 = 0;
 }
 if (!(HEAP32[244731] | 0)) {
  HEAP32[244731] = i1;
  HEAP32[244744] = 255;
 }
 if ((HEAP32[466928] | 0) == -1) HEAP32[466928] = (i2 | 0) / 2 | 0;
 if ((HEAP32[466930] | 0) == -1) HEAP32[466930] = i2 + 2;
 _GenerateNewUuid();
 HEAP8[978980] = 1;
 _Event_RaiseVoid(1680924);
 return;
}

function _Platform_GetCommandLineArgs(i2, i1, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i3 = i2 + -1 | 0;
 i4 = i1 + 4 | 0;
 i3 = (i3 | 0) < 5 ? i3 : 5;
 if ((i2 | 0) > 1) {
  i1 = 0;
  do {
   _String_FromReadonly(i6, HEAP32[i4 + (i1 << 2) >> 2] | 0);
   i9 = i6;
   i8 = HEAP32[i9 + 4 >> 2] | 0;
   i2 = i5 + (i1 << 3) | 0;
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i2 + 4 >> 2] = i8;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i3 | 0));
 }
 STACKTOP = i7;
 return i3 | 0;
}

function _CustomModel_Register(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 _CheckMaxVertices();
 HEAP32[i2 >> 2] = i2 + 72;
 HEAP32[i2 + 8 >> 2] = 1716564;
 HEAP32[i2 + 64 >> 2] = (HEAPU8[i2 + 188 >> 0] | 0) * 24;
 HEAP32[i2 + 12 >> 2] = 59;
 HEAP32[i2 + 16 >> 2] = 340;
 HEAP32[i2 + 20 >> 2] = 22;
 HEAP32[i2 + 24 >> 2] = 23;
 HEAP32[i2 + 28 >> 2] = 341;
 HEAP32[i2 + 32 >> 2] = 342;
 HEAP32[i2 + 52 >> 2] = 343;
 i1 = HEAP32[428697] | 0;
 if (!i1) {
  HEAP32[428697] = i2;
  i1 = 1714792;
 } else {
  HEAP32[i2 + 68 >> 2] = i1;
  i1 = 1714788;
 }
 HEAP32[i1 >> 2] = i2;
 HEAP8[i2 + 137 >> 0] = 1;
 return;
}

function _Screen_Render2Widgets(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i2 + 16 >> 2] | 0;
 _Gfx_SetVertexFormat(1);
 _Gfx_BindDynamicVb(HEAP32[i2 + 12 >> 2] | 0);
 i6 = i2 + 20 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i5 = 0;
  i4 = 0;
  while (1) {
   i3 = HEAP32[i7 + (i5 << 2) >> 2] | 0;
   if (!i3) i3 = i4; else {
    i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3, i4) | 0;
    i2 = HEAP32[i6 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i2 | 0)) break; else i4 = i3;
  }
 }
 return;
}

function _RequestList_RemoveAt(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0;
 if ((i2 | 0) < 0) i3 = 3; else {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) <= (i2 | 0)) i3 = 3;
 }
 if ((i3 | 0) == 3) {
  _Process_Abort2(0, 52737);
  i1 = HEAP32[i4 >> 2] | 0;
 }
 i1 = i1 + -1 | 0;
 if ((i1 | 0) > (i2 | 0)) {
  i3 = i4 + 8 | 0;
  do {
   i1 = HEAP32[i3 >> 2] | 0;
   i5 = i2;
   i2 = i2 + 1 | 0;
   _Mem_Copy(i1 + (i5 * 312 | 0) | 0, i1 + (i2 * 312 | 0) | 0, 312) | 0;
   i1 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 HEAP32[i4 >> 2] = i1;
 return;
}

function _Gfx_CalcPerspectiveMatrix(i6, d1, d5, d7) {
 i6 = i6 | 0;
 d1 = +d1;
 d5 = +d5;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0;
 d1 = +_Cotangent(d1 * .5);
 i2 = i6;
 i3 = 22728;
 i4 = i2 + 56 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAPF32[i6 >> 2] = d1 / d5;
 HEAPF32[i6 + 20 >> 2] = d1;
 d5 = d7 + -.10000000149011612;
 HEAPF32[i6 + 40 >> 2] = -(d7 + .10000000149011612) / d5;
 HEAPF32[i6 + 44 >> 2] = -1.0;
 HEAPF32[i6 + 56 >> 2] = -(d7 * 2.0 * .10000000149011612) / d5;
 HEAPF32[i6 + 60 >> 2] = 0.0;
 return;
}

function _GenerateNewUuid() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _Random_SeedFromCurrentTime(i2);
 if (HEAP16[7368] | 0) {
  i1 = 0;
  do {
   _Random_Next(i2, (HEAP8[(HEAP32[3683] | 0) + i1 >> 0] | 0) + 3 | 0) | 0;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAPU16[7368] | 0) >>> 0);
 }
 i1 = 0;
 do {
  i4 = (_Random_Next(i2, 256) | 0) & 255;
  HEAP8[978960 + i1 >> 0] = i4;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 16);
 HEAP8[978966] = HEAP8[978966] & 15 | 64;
 HEAP8[978968] = HEAP8[978968] & 63 | -128;
 STACKTOP = i3;
 return;
}

function _ResetHeldState() {
 var i1 = 0, d2 = 0.0, d3 = 0.0;
 i1 = HEAP32[417347] | 0;
 d3 = +_Entity_GetEyeHeight(i1);
 d2 = 0.0 - +HEAPF32[414157];
 HEAPF32[422393] = d2;
 HEAPF32[422394] = d3 - +HEAPF32[414156];
 HEAPF32[422395] = d2;
 HEAPF32[422397] = -45.0;
 HEAPF32[422399] = -45.0;
 HEAPF32[422396] = 0.0;
 HEAPF32[422398] = 0.0;
 HEAP16[844810] = HEAP16[934361] | 0;
 HEAP8[1689676] = HEAP8[i1 + 108 >> 0] | 0;
 HEAP32[422420] = HEAP32[i1 + 112 >> 2];
 HEAP32[422421] = HEAP32[i1 + 116 >> 2];
 HEAP32[422422] = HEAP32[i1 + 120 >> 2];
 HEAP32[422423] = HEAP32[i1 + 124 >> 2];
 return;
}

function _UrlWarningOverlay_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 12 | 0;
 i3 = i2;
 _Screen_UpdateVb(i1);
 _Gui_MakeTitleFont(i4);
 _Gui_MakeBodyFont(i3);
 _TextWidget_SetConst(i1 + 212 | 0, 45666, i4);
 _TextWidget_Set(i1 + 284 | 0, i1 + 36 | 0, i3);
 _TextWidget_SetConst(i1 + 356 | 0, 45709, i3);
 _TextWidget_SetConst(i1 + 428 | 0, 45764, i3);
 _ButtonWidget_SetConst(i1 + 44 | 0, 45819, i4);
 _ButtonWidget_SetConst(i1 + 128 | 0, 45823, i4);
 _Font_Free(i4);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _GLContext_Create() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = i2;
 _emscripten_webgl_init_context_attributes(i1 | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 1;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i1 = _emscripten_webgl_create_context(53305, i1 | 0) | 0;
 HEAP32[466977] = i1;
 if (!i1) {
  _Window_ShowDialog(53418, 53436);
  _Process_Exit(1464290336);
 } else {
  _emscripten_webgl_make_context_current(i1 | 0) | 0;
  _emscripten_set_webglcontextlost_callback_on_thread(53305, 0, 0, 50, 2) | 0;
  STACKTOP = i2;
  return;
 }
}

function _ChatScreen_DrawChatBackground(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i4 = _TextGroupWidget_UsedHeight(i5 + 1108 | 0) | 0;
 i1 = HEAP32[i5 + 1212 >> 2] | 0;
 i2 = HEAP32[i5 + 1120 >> 2] | 0;
 i3 = (HEAP32[i5 + 1216 >> 2] | 0) + i4 | 0;
 if ((i3 | 0) > 0) {
  i7 = HEAP32[i5 + 48 >> 2] | 0;
  i6 = HEAP32[i5 + 52 >> 2] | 0;
  _Gfx_Draw2DFlat((HEAP32[i5 + 1112 >> 2] | 0) - i7 | 0, (HEAP32[i5 + 1116 >> 2] | 0) - i4 + (HEAP32[i5 + 1124 >> 2] | 0) - i6 | 0, (i7 << 1) + ((i1 | 0) > (i2 | 0) ? i1 : i2) | 0, (i6 << 1) + i3 | 0, 2130706432);
 }
 return;
}

function _TextGroupWidget_FormatUrl(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 _String_AppendString(i4, i1);
 i3 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP16[i4 + 4 >> 1] | 0;
 if ((i1 & 65535) > 1) {
  i2 = (i1 & 65535) + -2 | 0;
  while (1) {
   if ((HEAP8[i3 + i2 >> 0] | 0) == 62) {
    i1 = i2 + 1 | 0;
    if ((HEAP8[i3 + i1 >> 0] | 0) == 32) {
     _String_DeleteAt(i4, i1);
     _String_DeleteAt(i4, i2);
     _TextGroupWidget_RemoveColorPrefix(i4, i2);
    }
   }
   if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break;
  }
 }
 _TextGroupWidget_RemoveColorPrefix(i4, 0);
 return;
}

function _TableWidget_GetCoords(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = HEAP32[i4 + 44 >> 2] | 0;
 i6 = (i1 | 0) / (i5 | 0) | 0;
 i5 = i1 - (Math_imul(i6, i5) | 0) | 0;
 i1 = i6 - (HEAP32[i4 + 1668 >> 2] | 0) | 0;
 i5 = (Math_imul(HEAP32[i4 + 64 >> 2] | 0, i5) | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i5;
 i2 = (HEAP32[i4 + 8 >> 2] | 0) + 3 + (Math_imul(HEAP32[i4 + 68 >> 2] | 0, i1) | 0) | 0;
 HEAP32[i3 >> 2] = i2;
 if ((i1 | 0) > -1) i1 = (i1 | 0) < (HEAP32[i4 + 52 >> 2] | 0) & 1; else i1 = 0;
 return i1 | 0;
}

function _TextInputWidget_KeyDown(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0;
 i1 = i4 + 212 | 0;
 do if ((HEAP8[1867882] | 0) == 0 | (HEAP8[1867857] | 0) != 0) i5 = 5; else {
  if ((HEAP32[i2 + 32 >> 2] | 0) != (i3 | 0)) if ((HEAP32[i2 + 36 >> 2] | 0) != (i3 | 0)) {
   i5 = 5;
   break;
  }
  _TextInputWidget_OpenKeyboard(i4, i2);
  i1 = 1;
 } while (0);
 if ((i5 | 0) == 5) if (!(_InputWidget_KeyDown(i4, i3, i2) | 0)) i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, i4 + 64 | 0, i3) | 0) & 255; else i1 = 1;
 return i1 | 0;
}

function _Gui_RenderGui(d5) {
 d5 = +d5;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (+HEAPF32[422390] > 0.0) _Gui_ShowCinematicBars();
 i1 = HEAP32[422372] | 0;
 if ((i1 | 0) > 0) do {
  i4 = i1;
  i1 = i1 + -1 | 0;
  i2 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 63](i2, d5);
  i3 = i2 + 7 | 0;
  if (HEAP8[i3 >> 0] | 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i2);
   HEAP8[i3 >> 0] = 0;
  }
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2, d5);
 } while ((i4 | 0) > 1);
 return;
}

function _EditHotkeyScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = (HEAP8[i1 + 48 >> 0] | 0) != 0;
 i2 = i1 + 76 | 0;
 _Gui_MakeTitleFont(i2);
 i3 = i1 + 88 | 0;
 _Gui_MakeBodyFont(i3);
 _Screen_UpdateVb(i1);
 _EditHotkeyScreen_UpdateBaseKey(i1);
 _EditHotkeyScreen_UpdateModifiers(i1);
 _EditHotkeyScreen_UpdateLeaveOpen(i1);
 _ButtonWidget_SetConst(i1 + 652 | 0, i4 ? 44047 : 44060, i2);
 _ButtonWidget_SetConst(i1 + 736 | 0, i4 ? 44071 : 48180, i2);
 _TextInputWidget_SetFont(i1 + 100 | 0, i3);
 _ButtonWidget_SetConst(i1 + 820 | 0, 48180, i2);
 return;
}

function _UseDedicatedCache(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i1 = i4;
 if ((HEAP16[i3 + 4 >> 1] | 0) != 0 & (HEAP8[1868808] | 0) == 0) {
  _String_AppendConst(i3, 50253);
  _Platform_EncodePath(i1, i3);
  i1 = _Directory_Create(i1) | 0;
  i1 = (i1 | 0) == 0;
  if (i1 & (HEAP8[1868809] | 0) != 0) {
   _Chat_AddRaw(50267);
   _Chat_AddRaw(50319);
   HEAP8[1868808] = 1;
  }
  if (i1) HEAP8[1868809] = 1;
  _String_Format1(i3, 50372, i2);
  i1 = HEAP8[1868808] ^ 1;
 } else i1 = 0;
 STACKTOP = i4;
 return i1 | 0;
}

function _MapImporter_Find(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5 + 8 | 0;
 i4 = i5;
 i1 = HEAP32[422198] | 0;
 L1 : do if (!i1) i1 = 0; else while (1) {
  _String_FromReadonly(i4, HEAP32[i1 >> 2] | 0);
  i8 = i4;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = i2;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 + 4 >> 2] = i7;
  if (_String_CaselessEnds(i3, i2) | 0) break L1;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   break;
  }
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _KeyBindsScreen_TriggerBinding(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[427513] | 0;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i2 >> 2] | 0)) {
  HEAP32[467164] = 0;
  i1 = HEAP32[427523] | 0;
  if ((i1 | 0) == -1) i1 = 0; else {
   i1 = HEAPU8[(HEAP32[427526] | 0) + i1 >> 0] | 0;
   if ((HEAP32[i3 + 48 >> 2] | 0) == (i4 | 0)) _InputBind_Reset(i1, i2); else _InputBind_Set(i1, i4, i2);
   i1 = HEAP32[427523] | 0;
   HEAP32[427523] = -1;
   HEAP8[1710062] = 1;
   _KeyBindsScreen_Update(1710056, i1);
   i1 = 1;
  }
 } else i1 = 0;
 return i1 | 0;
}

function _TextGroupWidget_UsedHeight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 84 >> 2] | 0;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = 0;
  while (1) {
   if (HEAP32[i4 + (i1 * 28 | 0) >> 2] | 0) {
    i2 = i1;
    break L1;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i3 | 0)) {
    i2 = i1;
    break;
   }
  }
 } else i2 = 0; while (0);
 if ((i2 | 0) < (i3 | 0)) {
  i1 = 0;
  do {
   i1 = i1 + (HEAPU16[i4 + (i2 * 28 | 0) + 10 >> 1] | 0) | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _Context2D_Alloc(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 HEAP32[i3 + 12 >> 2] = i2;
 HEAP32[i3 + 16 >> 2] = i1;
 HEAP32[i3 + 20 >> 2] = 0;
 if (!(HEAP8[1689212] | 0)) {
  i2 = _Math_NextPowOf2(i2) | 0;
  i1 = _Math_NextPowOf2(i1) | 0;
 }
 i4 = HEAP32[422305] | 0;
 i2 = (i4 | 0) == 0 | (i2 | 0) > (i4 | 0) ? i2 : i4;
 i4 = HEAP32[422306] | 0;
 i1 = (i4 | 0) == 0 | (i1 | 0) > (i4 | 0) ? i1 : i4;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 + 8 >> 2] = i1;
 i2 = _Mem_AllocCleared(Math_imul(i1, i2) | 0, 4, 30401) | 0;
 HEAP32[i3 >> 2] = i2;
 return;
}

function _PhysicsComp_Init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Mem_Set(i1, 0, 60) | 0;
 HEAP8[i1 + 1 >> 0] = 1;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAPF32[i1 + 12 >> 2] = .41999998688697815;
 HEAPF32[i1 + 16 >> 2] = .41999998688697815;
 HEAPF32[i1 + 20 >> 2] = .41999998688697815;
 HEAPF32[i1 + 32 >> 2] = .07999999821186066;
 HEAPF32[i1 + 36 >> 2] = .9100000262260437;
 HEAPF32[i1 + 40 >> 2] = .9800000190734863;
 HEAPF32[i1 + 44 >> 2] = .9100000262260437;
 HEAPF32[i1 + 48 >> 2] = .6000000238418579;
 HEAPF32[i1 + 52 >> 2] = 1.0;
 HEAPF32[i1 + 56 >> 2] = .6000000238418579;
 return;
}

function _LogInvalidSkin(i3, i5, i1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i2 = i6 + 256 | 0;
 HEAP32[i2 >> 2] = i6;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 256;
 _Logger_FormatWarn2(i2, i3, 30640, i5, 50);
 if ((i3 | 0) == -857812961) {
  _String_AppendConst(i2, 30654);
  _String_AppendAll(i2, i1, (i4 | 0) < 8 ? i4 : 8);
  _String_AppendConst(i2, 30661);
  FUNCTION_TABLE_vi[HEAP32[3881] & 511](i2);
 } else FUNCTION_TABLE_vi[HEAP32[3881] & 511](i2);
 STACKTOP = i6;
 return;
}

function _MPConnection_TickConnect(i2) {
 i2 = i2 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = _Socket_CheckWritable(HEAP32[5574] | 0, i4) | 0;
 d1 = +HEAPF64[i2 + 8 >> 3] + +HEAPF32[460403];
 HEAPF32[460403] = d1;
 do if (!i3) {
  if (HEAP8[i4 >> 0] | 0) {
   _MPConnection_FinishConnect();
   break;
  }
  if (d1 > 15.0) {
   _MPConnection_FailConnect(0);
   break;
  } else {
   _Event_RaiseFloat(1680664, (15.0 - d1) / 15.0);
   break;
  }
 } else _MPConnection_FailConnect(i3); while (0);
 STACKTOP = i5;
 return;
}

function _Gfx_LoadMatrix(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 switch (i1 | 0) {
 case 1:
  {
   i3 = 1689356;
   i1 = i3 + 64 | 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while ((i3 | 0) < (i1 | 0));
   break;
  }
 case 0:
  {
   i3 = 1689420;
   i1 = i3 + 64 | 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while ((i3 | 0) < (i1 | 0));
   break;
  }
 default:
  {}
 }
 _Matrix_Mul(1689264, 1689356, 1689420);
 _DirtyUniform(1);
 _ReloadUniforms();
 return;
}

function _GenLevelScreen_Gen(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _GenLevelScreen_GetInt(i6, 0) | 0;
 i2 = _GenLevelScreen_GetInt(i6, 1) | 0;
 i3 = _GenLevelScreen_GetInt(i6, 2) | 0;
 i4 = _GenLevelScreen_GetSeedInt(i6) | 0;
 do if (!((_World_CheckVolume(i1, i2, i3) | 0) << 24 >> 24)) _Chat_AddRaw(43922); else if ((i1 | 0) != 0 & (i2 | 0) != 0 & (i3 | 0) != 0) {
  HEAP32[422256] = i5;
  HEAP32[422266] = i4;
  _Gui_Remove(i6);
  _Menu_BeginGen(i1, i2, i3);
  break;
 } else {
  _Chat_AddRaw(43963);
  break;
 } while (0);
 return;
}

function _Classic_RelPosAndOrientationUpdate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = HEAP8[i1 >> 0] | 0;
 HEAP8[i3 + 28 >> 0] = -57;
 HEAPF32[i3 >> 2] = +(HEAP8[i1 + 1 >> 0] | 0) * .03125;
 HEAPF32[i3 + 4 >> 2] = +(HEAP8[i1 + 2 >> 0] | 0) * .03125;
 HEAPF32[i3 + 8 >> 2] = +(HEAP8[i1 + 3 >> 0] | 0) * .03125;
 HEAPF32[i3 + 16 >> 2] = +(HEAPU8[i1 + 4 >> 0] | 0) * 360.0 * .00390625;
 HEAPF32[i3 + 12 >> 2] = +(HEAPU8[i1 + 5 >> 0] | 0) * 360.0 * .00390625;
 _UpdateLocation(i4, i3);
 STACKTOP = i2;
 return;
}

function _DisconnectScreen_Update(i6, d1) {
 i6 = i6 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 do if (HEAP8[i6 + 48 >> 0] | 0) {
  i5 = 5 - ~~(+HEAPF64[122280] - +HEAPF64[i6 + 40 >> 3]) | 0;
  i5 = (i5 | 0) > 0 ? i5 : 0;
  i4 = i6 + 52 | 0;
  i3 = i6 + 76 | 0;
  if ((HEAP32[i4 >> 2] | 0) == (i5 | 0)) {
   i2 = i6 + 49 | 0;
   if ((HEAP8[i3 >> 0] | 0) == (HEAP8[i2 >> 0] | 0)) break;
  } else i2 = i6 + 49 | 0;
  _DisconnectScreen_UpdateReconnect(i6);
  HEAP32[i4 >> 2] = i5;
  HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i6 + 7 >> 0] = 1;
 } while (0);
 return;
}

function _Deflate_MoveBlock(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 _Mem_Copy(i2 + 888 | 0, i2 + 17272 | 0, 16384) | 0;
 HEAP32[i2 + 8 >> 2] = 16384;
 i1 = 0;
 do {
  i3 = i2 + 41848 + (i1 << 1) | 0;
  i4 = HEAP16[i3 >> 1] | 0;
  HEAP16[i3 >> 1] = (i4 & 65535) < 16384 ? 0 : (i4 & 65535) + 49152 & 65535;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4096);
 i1 = 0;
 do {
  i4 = i2 + 50040 + (i1 << 1) | 0;
  i3 = HEAP16[i4 >> 1] | 0;
  HEAP16[i4 >> 1] = (i3 & 65535) < 16384 ? 0 : (i3 & 65535) + 49152 & 65535;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 32768);
 return;
}

function _Model_RenderDistance(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 d2 = +HEAPF32[i1 + 12 >> 2];
 d7 = +HEAPF32[414159];
 d5 = +HEAPF32[414160];
 d3 = (+HEAPF32[i1 + 72 >> 2] - +HEAPF32[i1 + 60 >> 2]) * .5;
 d6 = +HEAPF32[i1 + 8 >> 2] + d3;
 d4 = +_Model_MinDist(+HEAPF32[414158] - +HEAPF32[i1 + 4 >> 2], (+HEAPF32[i1 + 68 >> 2] - +HEAPF32[i1 + 56 >> 2]) * .5);
 d3 = +_Model_MinDist(d7 - d6, d3);
 d2 = +_Model_MinDist(d5 - d2, (+HEAPF32[i1 + 76 >> 2] - +HEAPF32[i1 + 64 >> 2]) * .5);
 return +(d4 * d4 + d3 * d3 + d2 * d2);
}

function _Menu_DoInputDown(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 4 | 0;
 i1 = i6;
 _Input_CalcDelta(i4, i3, i2, i1);
 i1 = HEAP32[i1 >> 2] | 0;
 do if (!i1) {
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 | 0) {
   i2 = HEAP32[i5 + 32 >> 2] | 0;
   if (i2 | 0) {
    i1 = _Menu_CycleSelected(i5, Math_imul(i2, i1) | 0) | 0;
    break;
   }
  }
  i1 = _Menu_InputSelected(i5, i4, i3) | 0;
 } else i1 = _Menu_CycleSelected(i5, i1) | 0; while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _CPE_CinematicGui(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i3 = HEAP8[i5 + 1 >> 0] | 0;
 i2 = HEAP8[i5 + 2 >> 0] | 0;
 i4 = _Stream_GetU16_BE(i5 + 7 | 0) | 0;
 if (!(i3 << 24 >> 24)) i3 = (_Options_GetBool(46759, 1) | 0) << 24 >> 24 != 0 & 1; else i3 = 0;
 HEAP8[1868780] = i3;
 HEAP8[1689554] = i1;
 HEAP8[1689556] = i2;
 HEAP32[422391] = (HEAPU8[i5 + 4 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0) | (HEAPU8[i5 + 5 >> 0] | 0) << 16 | (HEAPU8[i5 + 6 >> 0] | 0) << 24;
 HEAPF32[422390] = +(i4 & 65535) / 65535.0;
 return;
}

function _Atlas_Convert2DTo1D() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i2 = i4 + 12 | 0;
 i1 = i4;
 i3 = HEAP32[460927] | 0;
 HEAP32[i5 >> 2] = HEAP32[460408];
 HEAP32[i2 >> 2] = HEAP32[460407];
 _Platform_Log2(50145, i2, i5);
 _Bitmap_Allocate(i1, i3, Math_imul(HEAP32[i5 >> 2] | 0, i3) | 0);
 if ((HEAP32[i2 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   _Atlas1D_Load(i3, i1);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i2 >> 2] | 0));
 }
 _Mem_Free(HEAP32[i1 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _InputBind_Set(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i4 + 72 | 0;
 i5 = i4 + 64 | 0;
 HEAP32[i6 >> 2] = i4;
 HEAP16[i6 + 4 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 64;
 _String_Format1(i6, HEAP32[i3 + 64 >> 2] | 0, HEAP32[5920 + (i1 << 2) >> 2] | 0);
 _String_FromReadonly(i5, HEAP32[4320 + (i2 << 2) >> 2] | 0);
 _Options_SetString(i6, i5);
 i3 = HEAP32[i3 + 72 >> 2] | 0;
 HEAP8[i3 + (i1 << 1) >> 0] = i2;
 HEAP8[i3 + (i1 << 1) + 1 >> 0] = 0;
 STACKTOP = i4;
 return;
}

function _InputBind_Reset(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 64 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 _String_Format1(i4, HEAP32[i2 + 64 >> 2] | 0, HEAP32[5920 + (i1 << 2) >> 2] | 0);
 _Options_SetString(i4, 1841616);
 i4 = (HEAP32[i2 + 72 >> 2] | 0) + (i1 << 1) | 0;
 i2 = (HEAP32[i2 + 68 >> 2] | 0) + (i1 << 1) | 0;
 i2 = HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8;
 HEAP8[i4 >> 0] = i2;
 HEAP8[i4 + 1 >> 0] = i2 >> 8;
 STACKTOP = i3;
 return;
}

function _SwitchProgram() {
 var i1 = 0, i2 = 0, i3 = 0;
 if (!(HEAP8[1868764] | 0)) i1 = 0; else i1 = (HEAP32[3734] | 0) > 0 ? 12 : 6;
 i1 = (HEAP32[3731] | 0) == 1 ? i1 + 2 | 0 : i1;
 i1 = ((HEAP8[1868766] | 0) == 0 ? i1 : i1 + 2 | 0) | (HEAP8[1868765] | 0) != 0;
 i3 = 3744 + (i1 << 5) | 0;
 if ((i3 | 0) == (HEAP32[422314] | 0)) _ReloadUniforms(); else {
  i2 = 3744 + (i1 << 5) + 8 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _CompileProgram(i3);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[422314] = i3;
  _glUseProgram(i1 | 0);
  _ReloadUniforms();
 }
 return;
}

function _Socket_Read(i5, i2, i1, i4) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 HEAP32[i4 >> 2] = 0;
 L1 : do if (!i1) i1 = 0; else {
  i3 = i2;
  while (1) {
   i2 = _interop_SocketRecv(i5 | 0, i3 | 0, i1 | 0) | 0;
   if ((i2 | 0) <= -1) break;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i2;
   i1 = i1 - i2 | 0;
   if (!i1) {
    i1 = 0;
    break L1;
   } else i3 = i3 + i2 | 0;
  }
  if ((i2 | 0) == -6) {
   i1 = (HEAP32[i4 >> 2] | 0) == 0 ? 6 : 0;
   break;
  } else {
   i1 = 0 - i2 | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _SkeletonModel_Draw(i1) {
 i1 = i1 | 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 144);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1715968, 1);
 _Model_DrawPart(1715984);
 _Model_DrawRotate(+HEAPF32[i1 + 164 >> 2], 0.0, 0.0, 1716e3, 0);
 _Model_DrawRotate(+HEAPF32[i1 + 172 >> 2], 0.0, 0.0, 1716016, 0);
 _Model_DrawRotate(1.5707963705062866, 0.0, +HEAPF32[i1 + 184 >> 2], 1716032, 0);
 _Model_DrawRotate(1.5707963705062866, 0.0, +HEAPF32[i1 + 192 >> 2], 1715952, 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(144);
 return;
}

function _Selections_Add(i5, i2, i3, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6;
 _IVec3_ToVec3(i4, i2);
 _IVec3_ToVec3(i4 + 12 | 0, i3);
 HEAP32[i4 + 24 >> 2] = i1;
 _Selections_Remove(i5);
 i1 = HEAP32[460377] | 0;
 i2 = 946096 + (i1 * 36 | 0) | 0;
 i3 = i4;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP8[955312 + i1 >> 0] = i5;
 HEAP32[460377] = i1 + 1;
 STACKTOP = i6;
 return;
}

function _ChatScreen_Update(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0;
 d1 = +HEAPF64[122280];
 i2 = i3 + 108 | 0;
 if (HEAP32[i3 + 148 >> 2] | 0) if (d1 > +HEAPF64[122275] + 5.0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i3 + 180 | 0;
 if (HEAP32[i3 + 220 >> 2] | 0) if (d1 > +HEAPF64[122276] + 5.0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i3 + 252 | 0;
 if (HEAP32[i3 + 292 >> 2] | 0) if (d1 > +HEAPF64[122277] + 5.0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 return;
}

function _CreeperModel_Draw(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 144);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1716336, 1);
 _Model_DrawPart(1716352);
 i2 = i1 + 164 | 0;
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716368, 0);
 i1 = i1 + 172 | 0;
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716384, 0);
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716400, 0);
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716416, 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(144);
 return;
}

function _TableWidget_ScrollRelative(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i2 + 60 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i4 + i1 | 0;
 i5 = (i5 | 0) < 0 ? i4 : i5;
 i5 = i5 - ((i5 | 0) < (HEAP32[i2 + 40 >> 2] | 0) ? 0 : i1) | 0;
 HEAP32[i3 >> 2] = i5;
 i3 = HEAP32[i2 + 44 >> 2] | 0;
 i1 = i2 + 1668 | 0;
 HEAP32[i1 >> 2] = ((i5 | 0) / (i3 | 0) | 0) - ((i4 | 0) / (i3 | 0) | 0) + (HEAP32[i1 >> 2] | 0);
 _ScrollbarWidget_ClampTopRow(i2 + 1628 | 0);
 _TableWidget_RecreateTitle(i2, 0);
 _TableWidget_MoveCursorToSelected(i2);
 return;
}

function _Picking_ClipCameraPos(i3, i2, d4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d4 = +d4;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 i1 = HEAP32[417347] | 0;
 if (!(HEAP8[1656557] | 0)) i6 = 3; else if (!(HEAP8[i1 + 494 >> 0] | 0)) i1 = 1; else i6 = 3;
 if ((i6 | 0) == 3) i1 = (HEAP8[i1 + 476 >> 0] | 0) == 0;
 if (i1 & (HEAP8[978980] | 0) != 0) {
  if (!((_RayTrace(i5, i3, i2, d4, 32) | 0) << 24 >> 24)) i6 = 6;
 } else i6 = 6;
 if ((i6 | 0) == 6) {
  _RayTracer_SetInvalid(i5);
  i6 = i5 + 100 | 0;
  _Vec3_Mul1_1768(i6, i2, d4);
  _Vec3_Add_1765(i6, i3, i6);
 }
 return;
}

function _ChatScreen_EnterChatInput(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 + 4 >> 0] = 0;
 _Gui_UpdateInputGrab();
 _OnscreenKeyboard_Close();
 i1 = i3 + 324 | 0;
 if (i2 << 24 >> 24) _InputWidget_Clear(i1);
 FUNCTION_TABLE_vi[HEAP32[i3 + 376 >> 2] & 511](i1);
 _SpecialInputWidget_SetActive(i3 + 1292 | 0, 0);
 _ChatScreen_UpdateChatYOffsets(i3);
 i2 = (HEAP32[414212] | 0) - (HEAP32[422374] | 0) | 0;
 i1 = i3 + 44 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i1 >> 2] = i2;
  _TextGroupWidget_RedrawAll(i3 + 1108 | 0);
 }
 return;
}

function _PigModel_Draw(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 144);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1716240, 1);
 _Model_DrawPart(1716256);
 i2 = i1 + 164 | 0;
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716272, 0);
 i1 = i1 + 172 | 0;
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716288, 0);
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716304, 0);
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716320, 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(144);
 return;
}

function _PhysicsComp_DoNormalJump(i5) {
 i5 = i5 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, d4 = 0.0;
 i1 = HEAP32[i5 + 8 >> 2] | 0;
 i3 = HEAP32[i5 + 24 >> 2] | 0;
 d4 = +HEAPF32[i5 + 12 >> 2];
 if (!(d4 == 0.0)) if ((HEAP32[i3 + 28 >> 2] | 0) >= 1) {
  i1 = i1 + 40 | 0;
  HEAPF32[i1 >> 2] = d4;
  if (!(HEAP8[i3 + 38 >> 0] | 0)) d2 = d4; else if (!(HEAP8[i3 + 13 >> 0] | 0)) d2 = d4; else {
   d2 = d4 + d4;
   HEAPF32[i1 >> 2] = d2;
  }
  if (HEAP8[i3 + 39 >> 0] | 0) if (HEAP8[i3 + 13 >> 0] | 0) HEAPF32[i1 >> 2] = d4 * .5 + d2;
  HEAP8[i5 + 1 >> 0] = 0;
 }
 return;
}

function _Atlas_Update1D() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[422268] | 0;
 i2 = HEAP32[422269] | 0;
 i3 = HEAP32[460927] | 0;
 if (i2) {
  i2 = (i2 | 0) / (i3 | 0) | 0;
  i1 = (i1 | 0) < (i2 | 0) ? i1 : i2;
 }
 i3 = (((i1 | 0) < 4096 ? i1 : 4096) | 0) / (i3 | 0) | 0;
 i2 = HEAP32[460928] << 4;
 i3 = (i3 | 0) < (i2 | 0) ? i3 : i2;
 HEAP32[460408] = i3;
 i3 = _Math_CeilDiv(i2, i3) | 0;
 HEAP32[460407] = i3;
 i3 = HEAP32[460408] | 0;
 HEAPF32[460411] = 1.0 / +(i3 | 0);
 HEAP32[460409] = i3 + -1;
 i3 = _Math_ilog2(i3) | 0;
 HEAP32[460410] = i3;
 return;
}

function _Stream_Write(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i4 = i5 + 8 | 0;
 L1 : do if (!i2) i1 = 0; else {
  i3 = i1;
  while (1) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 63](i5, i3, i2, i6) | 0;
   if (i1 | 0) break L1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (!i1) {
    i1 = -857812991;
    break L1;
   }
   i2 = i2 - i1 | 0;
   if (!i2) {
    i1 = 0;
    break;
   } else i3 = i3 + i1 | 0;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _RotateCorner(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0;
 d2 = +HEAPF32[422236] - +(HEAP32[422239] | 0);
 d4 = +HEAPF32[422238] - +(HEAP32[422241] | 0);
 i5 = d2 < .5;
 i1 = d4 < .5;
 do if (i5 & i1) _AutoRotate_Insert(i6, i7, 25240); else {
  i3 = d2 >= .5;
  if (i3 & i1) {
   _AutoRotate_Insert(i6, i7, 25244);
   break;
  }
  i1 = d4 >= .5;
  if (i5 & i1) {
   _AutoRotate_Insert(i6, i7, 25248);
   break;
  }
  if (i3 & i1) _AutoRotate_Insert(i6, i7, 25252);
 } while (0);
 return _GetRotated(i6, i7) | 0;
}

function _InputWidget_Reposition(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = i1 + 4 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = i1 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 _Widget_CalcPosition(i1);
 i4 = (HEAP32[i5 >> 2] | 0) - i4 | 0;
 i5 = i1 + 176 | 0;
 HEAP16[i5 >> 1] = i4 + (HEAPU16[i5 >> 1] | 0);
 i2 = (HEAP32[i3 >> 2] | 0) - i2 | 0;
 i3 = i1 + 178 | 0;
 HEAP16[i3 >> 1] = i2 + (HEAPU16[i3 >> 1] | 0);
 i3 = i1 + 116 | 0;
 HEAP16[i3 >> 1] = i4 + (HEAPU16[i3 >> 1] | 0);
 i1 = i1 + 118 | 0;
 HEAP16[i1 >> 1] = i2 + (HEAPU16[i1 >> 1] | 0);
 return;
}

function _BuildClouds() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((HEAP8[978980] | 0) != 0 & (HEAP8[1868743] | 0) == 0) {
  i1 = ~~(+(HEAP32[3680] | 0) * 1.4142135381698608);
  i4 = 0 - i1 | 0;
  i3 = (HEAP32[244733] | 0) + i1 | 0;
  i2 = (HEAP32[244735] | 0) + i1 | 0;
  i1 = _CalcNumVertices(i3 + i1 | 0, i2 + i1 | 0) | 0;
  HEAP32[418861] = i1;
  i1 = _Gfx_CreateVb(1, i1) | 0;
  HEAP32[418852] = i1;
  i1 = _Gfx_LockVb(i1, 1, HEAP32[418861] | 0) | 0;
  _DrawCloudsY(i4, i4, i3, i2, HEAP32[466930] | 0, i1);
  _Gfx_UnlockVb(HEAP32[418852] | 0);
 }
 return;
}

function _Stream_DefaultSkip(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 3600 | 0;
 i5 = i6;
 i3 = i6 + 3584 | 0;
 L1 : do if (!i1) i1 = 0; else {
  i2 = i1;
  while (1) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 63](i4, i5, i2 >>> 0 < 3584 ? i2 : 3584, i3) | 0;
   if (i1 | 0) break L1;
   i1 = HEAP32[i3 >> 2] | 0;
   i2 = i2 - i1 | 0;
   if (!i1) {
    i1 = -857812991;
    break L1;
   }
   if (!i2) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _ChatInputWidget_Create(i1) {
 i1 = i1 | 0;
 _InputWidget_Reset(i1);
 HEAP32[i1 + 204 >> 2] = HEAP32[415517];
 HEAP32[i1 >> 2] = 23348;
 HEAP8[i1 + 144 >> 0] = (HEAP8[1868754] | 0) == 0 & 1;
 HEAP8[i1 + 146 >> 0] = 1;
 HEAP8[i1 + 145 >> 0] = 5;
 HEAP32[i1 + 44 >> 2] = 62;
 HEAP32[i1 + 48 >> 2] = 421;
 HEAP32[i1 + 52 >> 2] = 422;
 HEAP32[i1 + 56 >> 2] = 93;
 HEAP32[i1 + 64 >> 2] = i1 + 216;
 HEAP16[i1 + 68 >> 1] = 0;
 HEAP16[i1 + 70 >> 1] = 192;
 HEAP32[i1 + 208 >> 2] = i1 + 408;
 HEAP16[i1 + 212 >> 1] = 0;
 HEAP16[i1 + 214 >> 1] = 192;
 return;
}

function _StoredHotkeys_Load(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i3 + 80 | 0;
 i5 = i3 + 72 | 0;
 i4 = i3 + 64 | 0;
 HEAP8[i6 >> 0] = i1;
 HEAP32[i5 >> 2] = i3;
 i1 = i5 + 4 | 0;
 HEAP16[i1 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 64;
 _String_Format2(i5, 37996, HEAP32[4320 + (i2 << 2) >> 2] | 0, i6);
 HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAPU16[i1 >> 1] | 0) >> 0] = 0;
 _Options_UNSAFE_Get(HEAP32[i5 >> 2] | 0, i4) | 0;
 _StoredHotkey_Parse(i5, i4);
 STACKTOP = i3;
 return;
}

function _Http_CleanCacheTask(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = _Stopwatch_Measure() | 0;
 i5 = getTempRet0() | 0;
 i1 = HEAP32[246326] | 0;
 if ((i1 | 0) > 0) do {
  i3 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAP32[246328] | 0;
  i2 = i6 + (i1 * 312 | 0) | 0;
  i6 = i6 + (i1 * 312 | 0) + 136 | 0;
  if ((_Stopwatch_ElapsedMS(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, i4, i5) | 0) >= 1e4) {
   _Platform_Log1(52699, i2);
   _HttpRequest_Free(i2);
   _RequestList_RemoveAt(985304, i1);
  }
 } while ((i3 | 0) > 1);
 return;
}

function _EnvRenderer_OnBlockChanged(i4, i5, i6, i2, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = (HEAP8[1006372 + (i1 & 65535) >> 0] | 1) << 24 >> 24 != 5;
 do if ((HEAP8[1006372 + (i2 & 65535) >> 0] | 1) << 24 >> 24 != 5 ^ i3) {
  i1 = (Math_imul(HEAP32[244735] | 0, i4) | 0) + i6 | 0;
  i2 = (HEAP32[418844] | 0) + (i1 << 1) | 0;
  if ((HEAP16[i2 >> 1] | 0) <= (i5 | 0)) if (i3) {
   HEAP16[i2 >> 1] = i5;
   break;
  } else {
   _CalcRainHeightAt(i4, i5, i6, i1) | 0;
   break;
  }
 } while (0);
 return;
}

function _DisconnectScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 946080;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 4;
 _TextWidget_Add(i1, i1 + 248 | 0);
 _TextWidget_Add(i1, i1 + 320 | 0);
 _ButtonWidget_Add(i1, i1 + 56 | 0, 300, 195);
 _ButtonWidget_Add(i1, i1 + 140 | 0, 300, 196);
 if (!(HEAP8[i1 + 48 >> 0] | 0)) HEAP8[i1 + 77 >> 0] = 1;
 _Game_SetMinFrameTime(200.0);
 HEAPF64[i1 + 40 >> 3] = +HEAPF64[122280];
 HEAP32[i1 + 52 >> 2] = 5;
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function ___strerror_l(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = 0;
 while (1) {
  if ((HEAPU8[11360 + i1 >> 0] | 0) == (i2 | 0)) {
   i2 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == 87) {
   i1 = 87;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 4) if (!i1) i1 = 11456; else i2 = 5;
 if ((i2 | 0) == 5) {
  i2 = 11456;
  do {
   do {
    i4 = i2;
    i2 = i2 + 1 | 0;
   } while ((HEAP8[i4 >> 0] | 0) != 0);
   i1 = i1 + -1 | 0;
  } while ((i1 | 0) != 0);
  i1 = i2;
 }
 return ___lctrans(i1, HEAP32[i3 + 20 >> 2] | 0) | 0;
}

function _String_AppendUtf8(i6, i1, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i4 = i7 + 4 | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = i2;
  while (1) {
   i2 = _Convert_Utf8ToCodepoint(i5, i1, i3) | 0;
   if (!i2) break L1;
   if ((_Convert_TryCodepointToCP437(HEAP32[i5 >> 2] | 0, i4) | 0) << 24 >> 24) _String_Append(i6, HEAP8[i4 >> 0] | 0);
   i3 = i3 - i2 | 0;
   if ((i3 | 0) <= 0) break; else i1 = i1 + i2 | 0;
  }
 } while (0);
 STACKTOP = i7;
 return;
}

function _Model_ApplyTexture(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[428691] | 0;
 i2 = HEAP32[((HEAP8[i1 + 46 >> 0] | 0) == 0 ? i4 + 116 | 0 : i4 + 112 | 0) >> 2] | 0;
 if (!i2) {
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  i3 = i1 + 4 | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
 } else {
  i3 = i4 + 108 | 0;
  i1 = i2;
 }
 HEAP8[1714761] = HEAP8[i3 >> 0] | 0;
 _Gfx_BindTexture(i1);
 i3 = (HEAP8[1714761] | 0) == 0;
 HEAPF32[428686] = +HEAPF32[i4 + 120 >> 2] * .015625;
 HEAPF32[428687] = (i3 ? .03125 : .015625) * +HEAPF32[i4 + 124 >> 2];
 return;
}

function _String_EncodeUtf8(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = i6 + 4 | 0;
 i1 = HEAP16[i5 >> 1] | 0;
 if ((i1 & 65535) > 260) {
  _Process_Abort2(0, 49251);
  i1 = HEAP16[i5 >> 1] | 0;
 }
 if (!(i1 << 16 >> 16)) {
  i2 = i4;
  i1 = 0;
 } else {
  i2 = i4;
  i3 = 0;
  i1 = 0;
  do {
   i1 = (_Convert_CP437ToUtf8(HEAP8[(HEAP32[i6 >> 2] | 0) + i3 >> 0] | 0, i2) | 0) + i1 | 0;
   i3 = i3 + 1 | 0;
   i2 = i4 + i1 | 0;
  } while (i3 >>> 0 < (HEAPU16[i5 >> 1] | 0) >>> 0);
 }
 HEAP8[i2 >> 0] = 0;
 return i1 | 0;
}

function _Builder_OccludedLiquid(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[414115] | 0;
 if (!(HEAP8[1009444 + (HEAPU16[i1 + (i2 + 324 << 1) >> 1] | 0) >> 0] | 0)) i1 = 0; else if ((HEAP8[1006372 + (HEAPU16[i1 + (i2 + 306 << 1) >> 1] | 0) >> 0] | 0) == 4) i1 = 0; else if ((HEAP8[1006372 + (HEAPU16[i1 + (i2 + 323 << 1) >> 1] | 0) >> 0] | 0) == 4) i1 = 0; else if ((HEAP8[1006372 + (HEAPU16[i1 + (i2 + 325 << 1) >> 1] | 0) >> 0] | 0) == 4) i1 = 0; else i1 = (HEAP8[1006372 + (HEAPU16[i1 + (i2 + 342 << 1) >> 1] | 0) >> 0] | 0) != 4 & 1;
 return i1 | 0;
}

function _PhysicsComp_MoveNormal(i1, i5, d3, i2, d4, d6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 d4 = +d4;
 d6 = +d6;
 var i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7;
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 _PhysicsComp_MoveHor(i1, i8, d3);
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 _PhysicsComp_Move(i1, i8, d4, d6);
 STACKTOP = i7;
 return;
}

function _MapRenderer_OnBlockChanged(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = HEAP32[424252] | 0;
 i4 = (Math_imul(HEAP32[244751] | 0, 4 ? i4 >> 4 : i4) | 0) + (4 ? i3 >> 4 : i3) | 0;
 i4 = (Math_imul(i4, HEAP32[244750] | 0) | 0) + (4 ? i2 >> 4 : i2) | 0;
 i3 = i5 + (i4 * 20 | 0) + 6 | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = ((3 ? (i2 & 255) >>> 3 : i2 & 255) & 255 & (HEAP8[1006372 + (i1 & 65535) >> 0] | 0) == 4 & 255) << 3 & 8 | i2 & -9;
 _ChunkInfo_Refresh(i5 + (i4 * 20 | 0) | 0);
 return;
}

function _Window_Init() {
 var i1 = 0, i2 = 0, d3 = 0.0;
 i2 = _GetScreenWidth() | 0;
 HEAP32[466962] = i2;
 i2 = _GetScreenHeight() | 0;
 HEAP32[466963] = i2;
 HEAP32[466957] = 24;
 d3 = +_emscripten_get_device_pixel_ratio();
 HEAPF32[466958] = d3;
 HEAPF32[466959] = d3;
 _interop_AddClipboardListeners();
 i2 = _interop_IsAndroid() | 0;
 i1 = _interop_IsIOS() | 0;
 i2 = (i1 | i2 | 0) != 0 & 1;
 _Input_SetTouchMode(i2);
 _Gui_SetTouchUI(i2);
 HEAP8[1867882] = (i1 | 0) == 0 ? 1 : 2;
 if (HEAP8[1868784] | 0) _interop_ForceTouchPageLayout();
 return;
}

function _Physics_ActivateNeighbours(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) > 0) _Physics_Activate(i1 + -1 | 0);
 if ((HEAP32[244736] | 0) > (i2 | 0)) _Physics_Activate(i1 + 1 | 0);
 if ((i4 | 0) > 0) _Physics_Activate(i1 - (HEAP32[244733] | 0) | 0);
 if ((HEAP32[244738] | 0) > (i4 | 0)) _Physics_Activate((HEAP32[244733] | 0) + i1 | 0);
 if ((i3 | 0) > 0) _Physics_Activate(i1 - (HEAP32[244739] | 0) | 0);
 if ((HEAP32[244737] | 0) > (i3 | 0)) _Physics_Activate((HEAP32[244739] | 0) + i1 | 0);
 return;
}

function _OnInit_1967() {
 HEAP32[460386] = 956080;
 HEAP16[920774] = 0;
 HEAP16[920775] = 64;
 HEAP32[460388] = 956144;
 HEAP16[920778] = 0;
 HEAP16[920779] = 64;
 HEAP32[460390] = 956208;
 HEAP16[920782] = 0;
 HEAP16[920783] = 64;
 if (!(HEAP16[920792] | 0)) _SPConnection_Init(); else _MPConnection_Init();
 _ScheduledTask_Add(.016666666666666666, HEAP32[460381] | 0) | 0;
 _String_AppendConst(1841560, 48568);
 _String_AppendConst(1841560, 1868813);
 if (HEAP8[1868784] | 0) {
  HEAP16[920782] = 0;
  _String_AppendConst(1841560, 48589);
 }
 return;
}

function _Math_Atan2f(d4, d5) {
 d4 = +d4;
 d5 = +d5;
 var d1 = 0.0, d2 = 0.0, i3 = 0;
 if (d4 == 0.0) if (d5 > 0.0) d1 = 1.5707963705062866; else d1 = d5 < 0.0 ? -1.5707963705062866 : 0.0; else {
  d1 = +Math_abs(+d4);
  d2 = +Math_abs(+d5);
  i3 = d1 < d2;
  if (i3) d1 = d1 / d2; else d1 = d2 / d1;
  d2 = d1 * d1;
  d1 = d1 + d1 * (d2 * (d2 * (.15931421518325806 - d2 * .046496473252773285) + -.32762277126312256));
  d1 = i3 ? 1.5707963705062866 - d1 : d1;
  d1 = d4 < 0.0 ? 3.1415927410125732 - d1 : d1;
  d1 = d5 < 0.0 ? -d1 : d1;
 }
 return +d1;
}

function _EnvRenderer_RenderClouds() {
 do if ((HEAP32[466930] | 0) > -2001 & (HEAP32[418857] | 0) != 0) {
  if (!(HEAP32[418852] | 0)) {
   _BuildClouds();
   if (!(HEAP32[418852] | 0)) break;
  }
  _Gfx_EnableTextureOffset(+HEAPF64[122280] * .00048828125 * .6000000238418579 * +HEAPF32[466931], 0.0);
  _Gfx_SetAlphaTest(1);
  _Gfx_BindTexture(HEAP32[418857] | 0);
  _Gfx_SetVertexFormat(1);
  _Gfx_BindVb(HEAP32[418852] | 0);
  _Gfx_DrawVb_IndexedTris(HEAP32[418861] | 0);
  _Gfx_SetAlphaTest(0);
  _Gfx_DisableTextureOffset();
 } while (0);
 return;
}

function _ThumbstickWidget_Rotate(i2, i1, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i3 = 0, d4 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0;
 i6 = (HEAP32[i1 >> 2] | 0) + -96 | 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 d7 = +(i1 | 0);
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 d4 = +(i3 | 0);
 i1 = i1 + i5 | 0;
 i2 = 0;
 do {
  i9 = i6 + (i2 * 24 | 0) | 0;
  i8 = ~~(+HEAPF32[i9 >> 2] - d7);
  i5 = i9 + 4 | 0;
  HEAPF32[i9 >> 2] = +(i1 - ~~(+HEAPF32[i5 >> 2] - d4) | 0);
  HEAPF32[i5 >> 2] = +(i3 + i8 | 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 4);
 return;
}

function _Screen_CalcDefaultMaxVertices(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = i1 + 20 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  i4 = 0;
  while (1) {
   i2 = HEAP32[i6 + (i4 << 2) >> 2] | 0;
   if (!i2) i2 = i3; else {
    i1 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i2) | 0) + i1 | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i2 | 0)) break; else i3 = i2;
  }
 } else i1 = 0;
 return i1 | 0;
}

function _BlockEditCommand_GetInt(i6, i5, i7, i3, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8 + 4 | 0;
 i2 = i8;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 if (!((_Convert_ParseInt(i6, i7) | 0) << 24 >> 24)) {
  _Chat_Add1(27705, i5);
  i1 = 0;
 } else {
  i7 = HEAP32[i7 >> 2] | 0;
  if ((i7 | 0) < (i3 | 0) | (i7 | 0) > (i1 | 0)) {
   _Chat_Add3(27742, i5, i4, i2);
   i1 = 0;
  } else i1 = 1;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _MapRenderer_Refresh() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _IVec3_MaxValue_1233(i2);
 HEAP32[424258] = HEAP32[i2 >> 2];
 HEAP32[424259] = HEAP32[i2 + 4 >> 2];
 HEAP32[424260] = HEAP32[i2 + 8 >> 2];
 if ((HEAP32[424252] | 0) != 0 & (HEAP32[244730] | 0) != 0) {
  _DeleteChunks();
  i2 = HEAP32[424247] | 0;
  i3 = _MapRenderer_UsedAtlases() | 0;
  HEAP32[424247] = i3;
  if ((i3 | 0) != (i2 | 0)) {
   _FreeParts();
   _AllocateParts();
  }
 }
 _ResetPartCounts();
 STACKTOP = i1;
 return;
}

function _GetAutoRotateTypes(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 i5 = i6 + 4 | 0;
 i4 = 0;
 while (1) {
  i1 = _String_LastIndexOfAt(i6, 0, 45) | 0;
  if ((i1 | 0) == -1) break;
  _String_UNSAFE_SubstringAt(i2, i6, i1);
  i8 = _AR_CalcGroup(i2) | 0;
  HEAP32[i3 + (i4 << 2) >> 2] = i8;
  HEAP16[i5 >> 1] = i1;
  if ((i4 + 1 | 0) >>> 0 < 2) i4 = 1; else break;
 }
 STACKTOP = i7;
 return;
}

function _CheckBlockTap(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if (!(+HEAPF64[122280] > +HEAPF64[352464 + (i1 * 24 | 0) + 16 >> 3] + .25)) if ((HEAP8[352464 + (i1 * 24 | 0) + 4 >> 0] | 0) == 7) {
  switch (HEAP32[422516] | 0) {
  case 0:
   {
    i2 = 1;
    break;
   }
  case 1:
   {
    i2 = 0;
    break;
   }
  default:
   break L1;
  }
  i1 = HEAP8[1868786 + i2 >> 0] | 0;
  _MouseStatePress(i2);
  if (!i2) _InputHandler_DeleteBlock(); else _InputHandler_PlaceBlock();
  if (!(i1 << 24 >> 24)) _MouseStateRelease(i2);
 } while (0);
 return;
}

function _Atlas1D_Load(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[460927] | 0;
 i2 = HEAP32[460408] | 0;
 if ((i2 | 0) > 0) {
  i5 = Math_imul(i2, i4) | 0;
  i6 = 0;
  while (1) {
   i7 = Math_imul(i5 & 15, i1) | 0;
   _Bitmap_UNSAFE_CopyBlock(i7, Math_imul(4 ? i5 >> 4 : i5, i1) | 0, 0, Math_imul(i6, i1) | 0, 1843696, i3, i1);
   i6 = i6 + 1 | 0;
   if ((i6 | 0) == (i2 | 0)) break; else i5 = i5 + 1 | 0;
  }
 }
 _Gfx_RecreateTexture(1841648 + (i4 << 2) | 0, i3, 3, HEAP8[1689081] | 0);
 return;
}

function _RescaleXY(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, d2 = 0.0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i5 + 8 | 0;
 i6 = i5;
 _emscripten_get_element_css_size(53305, i7 | 0, i6 | 0) | 0;
 d1 = +HEAPF64[i7 >> 3];
 d2 = +HEAPF64[i6 >> 3];
 if (d1 != 0.0 & d2 != 0.0) {
  i7 = ~~(+(Math_imul(HEAP32[466968] | 0, HEAP32[i3 >> 2] | 0) | 0) / d1);
  HEAP32[i3 >> 2] = i7;
  i7 = ~~(+(Math_imul(HEAP32[466969] | 0, HEAP32[i4 >> 2] | 0) | 0) / d2);
  HEAP32[i4 >> 2] = i7;
 }
 STACKTOP = i5;
 return;
}

function _Gfx_CreateTexture2(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 do if ((i2 & 4) == 0 | (HEAP8[1689212] | 0) == 0) {
  if ((_Math_IsPowOf2(HEAP32[i1 + 4 >> 2] | 0) | 0) << 24 >> 24) if ((_Math_IsPowOf2(HEAP32[i1 + 8 >> 2] | 0) | 0) << 24 >> 24) break;
  _Process_Abort2(0, 33289);
 } while (0);
 if (!(HEAP8[1689080] | 0)) if (!((_Gfx_CheckTextureSize(HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, i2) | 0) << 24 >> 24)) i1 = 0; else i1 = _Gfx_AllocTexture(i1, i4, i2, i3) | 0; else i1 = 0;
 return i1 | 0;
}

function _Gfx_CheckTextureSize(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if ((HEAP32[422267] | 0) < (i3 | 0) | (HEAP32[422268] | 0) < (i2 | 0)) i1 = 0; else {
  i4 = HEAP32[422305] | 0;
  if ((i4 | 0) != 0 & (i4 | 0) > (i3 | 0)) i1 = 0; else {
   i4 = HEAP32[422306] | 0;
   if ((i4 | 0) != 0 & (i4 | 0) > (i2 | 0)) i1 = 0; else {
    i4 = HEAP32[422304] | 0;
    i1 = (i1 & 8) != 0 & (i4 | 0) != 0 ? i4 : HEAP32[422269] | 0;
    i1 = ((i1 | 0) == 0 | (Math_imul(i2, i3) | 0) <= (i1 | 0)) & 1;
   }
  }
 }
 return i1 | 0;
}

function _Entity_SetSkin(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i4 + 64 | 0;
 _DeleteSkin(i1);
 if (!((_Utils_IsUrlPrefix(i2) | 0) << 24 >> 24)) {
  HEAP32[i3 >> 2] = i4;
  HEAP16[i3 + 4 >> 1] = 0;
  HEAP16[i3 + 6 >> 1] = 64;
  _String_AppendColorless(i3, i2);
 } else {
  i6 = i2;
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  i2 = i3;
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i2 + 4 >> 2] = i5;
 }
 _String_CopyToRaw(i1 + 196 | 0, 64, i3);
 STACKTOP = i4;
 return;
}

function _AutoRotate_Insert(i6, i3, i2) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = i6 + 4 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L1 : do if (i1 << 24 >> 24) {
  i7 = HEAP16[i5 >> 1] | 0;
  i4 = i7;
  i3 = (i7 & 65535) - i3 | 0;
  while (1) {
   if ((i3 | 0) < (i4 & 65535 | 0)) HEAP8[(HEAP32[i6 >> 2] | 0) + i3 >> 0] = i1; else _String_Append(i6, i1);
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break L1;
   i4 = HEAP16[i5 >> 1] | 0;
   i3 = i3 + 1 | 0;
  }
 } while (0);
 return;
}

function _SPConnection_BeginConnect() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 _Chat_SetLogName(22340);
 HEAP8[1868752] = HEAP8[1688988] | 0;
 if (!(HEAP16[11134] | 0)) {
  _Random_SeedFromCurrentTime(i1);
  _World_NewMap();
  i3 = (HEAP8[1868754] | 0) == 0 ? 128 : 256;
  _World_SetDimensions(i3, 64, i3);
  HEAP32[422256] = 14884;
  i1 = _Random_Next(i1, 2147483647) | 0;
  HEAP32[422266] = i1;
  _Gen_Start();
  _GeneratingScreen_Show();
 } else _Map_LoadFrom(22264) | 0;
 STACKTOP = i2;
 return;
}

function _RequestList_Append(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 _RequestList_EnsureSpace(i4);
 i1 = HEAP32[i4 >> 2] | 0;
 if (i2 & 1) if ((i1 | 0) > 0) {
  i2 = i4 + 8 | 0;
  do {
   i6 = HEAP32[i2 >> 2] | 0;
   i5 = i1;
   i1 = i1 + -1 | 0;
   _Mem_Copy(i6 + (i5 * 312 | 0) | 0, i6 + (i1 * 312 | 0) | 0, 312) | 0;
  } while ((i5 | 0) > 1);
  i1 = 0;
 } else i1 = 0;
 _Mem_Copy((HEAP32[i4 + 8 >> 2] | 0) + (i1 * 312 | 0) | 0, i3, 312) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 return;
}

function _CanLightPass(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = i1 & 65535;
 i1 = HEAP8[1006372 + i2 >> 0] | 0;
 if (!(i1 << 24 >> 24)) i4 = 3; else if ((i1 & -2) << 24 >> 24 == 2 | (HEAP8[993316 + i2 >> 0] | 0) == 0) i1 = 1; else i4 = 3;
 do if ((i4 | 0) == 3) if (!(HEAP8[994084 + i2 >> 0] | 0)) {
  if (HEAP8[993316 + i2 >> 0] | 0) if ((HEAP8[1005604 + i2 >> 0] | 0) == -1) {
   i1 = 0;
   break;
  }
  i1 = (1 << (i3 & 255) & HEAPU8[1058596 + (i2 + 768) >> 0] | 0) == 0 & 1;
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _AABB_Make(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i3 >> 2] * .5;
 i6 = i1 + 4 | 0;
 HEAP32[i2 + 4 >> 2] = HEAP32[i6 >> 2];
 i5 = i1 + 8 | 0;
 i4 = i3 + 8 | 0;
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i5 >> 2] - +HEAPF32[i4 >> 2] * .5;
 HEAPF32[i2 + 12 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i3 >> 2] * .5;
 HEAPF32[i2 + 16 >> 2] = +HEAPF32[i6 >> 2] + +HEAPF32[i3 + 4 >> 2];
 HEAPF32[i2 + 20 >> 2] = +HEAPF32[i5 >> 2] + +HEAPF32[i4 >> 2] * .5;
 return;
}

function _ScrollbarWidget_GetScrollbarCoords(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 d6 = +_ScrollbarWidget_GetScale(i2);
 i4 = _Math_Ceil(d6 * +(HEAP32[i2 + 40 >> 2] | 0)) | 0;
 i5 = i2 + 72 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
 i4 = _Math_Ceil(d6 * +(HEAP32[i2 + 48 >> 2] | 0)) | 0;
 HEAP32[i1 >> 2] = i4;
 i3 = HEAP32[i3 >> 2] | 0;
 i4 = i3 + i4 | 0;
 i2 = (HEAP32[i2 + 16 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = ((i4 | 0) < (i2 | 0) ? i4 : i2) - i3;
 return;
}

function _AnimatedComp_PerpendicularAnim(i1, d2, d3, d7, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d7 = +d7;
 i6 = i6 | 0;
 var d4 = 0.0, d5 = 0.0, i8 = 0;
 i8 = i1 + 4 | 0;
 d5 = +_Math_SinF(+HEAPF32[i8 >> 2] * d2) * .5 + .5;
 d2 = +_Math_CosF(+HEAPF32[i8 >> 2]);
 d4 = +HEAPF32[i1 + 8 >> 2];
 d2 = d2 * d4 * 1.0471975803375244 * 1.5 + d3;
 if (!(i6 << 24 >> 24)) {
  HEAPF32[i1 + 60 >> 2] = d2;
  i1 = i1 + 64 | 0;
 } else {
  HEAPF32[i1 + 52 >> 2] = d2;
  i1 = i1 + 56 | 0;
 }
 HEAPF32[i1 >> 2] = -d7 - d5 * d4 * 1.919862151145935;
 return;
}

function _OnInit_860() {
 HEAP32[422371] = 352416;
 _TextureEntry_Register(15012);
 _TextureEntry_Register(15024);
 _TextureEntry_Register(15036);
 _TextureEntry_Register(15048);
 _Event_Register(1685604, 0, 38);
 _Event_Register(1686644, 0, 106);
 _Event_Register(1687684, 0, 107);
 _Event_Register(1681704, 0, 218);
 _Event_Register(1678324, 0, 219);
 _Event_Register(1678584, 0, 220);
 _Event_Register(1684824, 0, 108);
 _Event_Register(1683004, 0, 221);
 _Event_Register(1685864, 0, 109);
 _LoadOptions_866();
 _Gui_ShowDefault();
 return;
}

function _GenLevelScreen_Layout(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i2 = i4 + 300 | 0;
 i3 = i4 + 1500 | 0;
 i1 = 0;
 do {
  i5 = (i1 * 40 | 0) + -80 | 0;
  _Widget_SetLocation(i2 + (i1 * 300 | 0) | 0, 1, 1, 0, i5);
  _Widget_SetLocation(i3 + (i1 * 72 | 0) | 0, 4, 1, 110, i5);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 _Widget_SetLocation(i4 + 1788 | 0, 1, 1, 0, -130);
 _Widget_SetLocation(i4 + 48 | 0, 1, 1, -120, 100);
 _Widget_SetLocation(i4 + 132 | 0, 1, 1, 120, 100);
 _Menu_LayoutBack(i4 + 216 | 0);
 return;
}

function _ClassicPauseScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364640;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 7;
 HEAP32[i1 + 40 >> 2] = 6912;
 HEAP32[i1 + 36 >> 2] = (HEAP8[1868754] | 0) == 0 ? 5 : 4;
 _PauseScreenBase_AddWidgets(i1, 400);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 if (!(HEAP8[1841572] | 0)) {
  HEAP8[i1 + 149 >> 0] = 1;
  HEAP8[i1 + 317 >> 0] = 1;
  if (!((HEAP8[1868754] | 0) == 0 | (HEAP8[1868755] | 0) != 0)) HEAP8[i1 + 233 >> 0] = 1;
 }
 return;
}

function _Java_ReadObjectData(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 switch (HEAP8[i1 >> 0] | 0) {
 case 116:
  {
   i1 = _Java_ReadNewString(i2, i1) | 0;
   break;
  }
 case 112:
  {
   i1 = 0;
   break;
  }
 case 113:
  {
   i1 = _Stream_ReadU32_BE(i2, i3) | 0;
   break;
  }
 case 115:
  {
   i1 = _Java_ReadNewObject(i2, i1) | 0;
   break;
  }
 case 117:
  {
   i1 = _Java_ReadNewArray(i2, i1) | 0;
   break;
  }
 default:
  i1 = -857812925;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _CPE_SetInventoryOrder(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (!(HEAP8[21301] | 0)) {
  i1 = HEAPU8[i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i4 = 5;
 } else {
  i1 = ((_Stream_GetU16_BE(i2) | 0) & 65535) % 768 | 0;
  i2 = i2 + 2 | 0;
  if (!(HEAP8[21301] | 0)) i4 = 5; else {
   i3 = i1;
   i1 = ((_Stream_GetU16_BE(i2) | 0) & 65535) % 768 | 0;
  }
 }
 if ((i4 | 0) == 5) {
  i3 = i1;
  i1 = HEAPU8[i2 >> 0] | 0;
 }
 _Inventory_Remove(i3);
 if (i1 << 16 >> 16) HEAP16[1695402 + ((i1 & 65535) + -1 << 1) >> 1] = i3;
 return;
}

function _CycleViewDistanceBackwards(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i4 = i1 + -1 | 0;
 L1 : do if ((i1 | 0) > 0) {
  i1 = HEAP32[3681] | 0;
  i3 = i4;
  while (1) {
   i2 = HEAP16[i5 + (i3 << 1) >> 1] | 0;
   if ((i1 | 0) > (i2 << 16 >> 16 | 0)) break;
   if ((i3 | 0) > 0) i3 = i3 + -1 | 0; else {
    i6 = 6;
    break L1;
   }
  }
  _Game_UserSetViewDistance(i2 << 16 >> 16);
 } else i6 = 6; while (0);
 if ((i6 | 0) == 6) _Game_UserSetViewDistance(HEAP16[i5 + (i4 << 1) >> 1] | 0);
 return;
}

function _Stream_Read(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 L1 : do if (!i2) i1 = 0; else {
  i3 = i1;
  while (1) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 63](i5, i3, i2, i4) | 0;
   if (i1 | 0) break L1;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) {
    i1 = -857812991;
    break L1;
   }
   i2 = i2 - i1 | 0;
   if (!i2) {
    i1 = 0;
    break;
   } else i3 = i3 + i1 | 0;
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _NetInterpComp_RemoveOldestAngles(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = i3 + 96 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = i2 + -1 | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i2 | 0) > 1) {
  i2 = 0;
  do {
   i4 = i3 + 220 + (i2 << 4) | 0;
   i2 = i2 + 1 | 0;
   i5 = i3 + 220 + (i2 << 4) | 0;
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  } while ((i2 | 0) != (i1 | 0));
 }
 return;
}

function _GZip_StreamWrite(i7, i5, i4, i6) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i7 + 32 >> 2] | 0;
 i3 = i2 + 115580 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = i2 + 115584 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
 if (i4) {
  i2 = 0;
  do {
   i1 = HEAP32[9792 + ((i1 & 255 ^ (HEAPU8[i5 + i2 >> 0] | 0)) << 2) >> 2] ^ (8 ? i1 >>> 8 : i1);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 HEAP32[i3 >> 2] = i1;
 return _Deflate_StreamWrite(i7, i5, i4, i6) | 0;
}

function _Custom_Render(d3) {
 d3 = +d3;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[431723] | 0;
 if (i1 | 0) {
  i1 = _Gfx_LockDynamicVb(HEAP32[431724] | 0, 1, i1 << 2) | 0;
  if ((HEAP32[431723] | 0) > 0) {
   i2 = 0;
   while (1) {
    _CustomParticle_Render(885408 + (i2 * 52 | 0) | 0, d3, i1);
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (HEAP32[431723] | 0)) break; else i1 = i1 + 96 | 0;
   }
  }
  _Gfx_BindTexture(HEAP32[431725] | 0);
  _Gfx_UnlockDynamicVb(HEAP32[431724] | 0);
  _Gfx_DrawVb_IndexedTris(HEAP32[431723] << 2);
 }
 return;
}

function _BlockDefs_DefineBlockCommonEnd(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = i2 & 65535;
 if (!(i3 << 24 >> 24)) {
  HEAP8[1010212 + i2 >> 0] = i1;
  i1 = 5;
 }
 HEAP8[1006372 + i2 >> 0] = i1;
 i3 = HEAP8[i4 + 1 >> 0] | 0;
 HEAPF32[997924 + (i2 << 2) >> 2] = i3 << 24 >> 24 == 0 ? 0.0 : +((i3 & 255) + 1 | 0) * .0078125;
 HEAP32[994852 + (i2 << 2) >> 2] = (HEAPU8[i4 + 3 >> 0] | 0) << 8 | (HEAPU8[i4 + 2 >> 0] | 0) | (HEAPU8[i4 + 4 >> 0] | 0) << 16 | -16777216;
 return;
}

function _NostalgiaFunctionalityScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 43025, 58, 319, 0);
 _MenuOptionsScreen_AddBool(i1, 43045, 59, 320, 0);
 _MenuOptionsScreen_AddBool(i1, 43065, 60, 321, 0);
 _MenuOptionsScreen_AddButton(i1, 43086, 138, 139, 140, 43099) | 0;
 _MenuOptionsScreen_EndButtons(i1, -1, 137);
 HEAP32[i1 + 92 >> 2] = 322;
 _TextWidget_Add(i1, 1698448);
 _Widget_SetLocation(1698448, 1, 1, 0, 100);
 _NostalgiaScreen_UpdateVersionDisabled();
 return;
}

function _ImprovedNoise_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = 0;
 do {
  HEAP8[i2 + i1 >> 0] = i1;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 i1 = 0;
 do {
  i3 = _Random_Range_650(i1, 256) | 0;
  i5 = i2 + i1 | 0;
  i4 = HEAP8[i5 >> 0] | 0;
  i3 = i2 + i3 | 0;
  HEAP8[i5 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i3 >> 0] = i4;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 i1 = 0;
 do {
  HEAP8[i2 + (i1 + 256) >> 0] = HEAP8[i2 + i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 return;
}

function _DrawBitmappedText(i2, i1, i5, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP16[(HEAP32[i1 + 8 >> 2] | 0) + 4 >> 1] | 0;
 i3 = (3 ? (i3 & 65535) >>> 3 : i3 & 65535) & 65535;
 i4 = (HEAP8[i1 + 12 >> 0] | 0) != 0;
 if (!(HEAP32[417087] | 0)) {
  if (i4) _FallbackFont_DrawText(i1, i2, i5, i6, 1);
  _FallbackFont_DrawText(i1, i2, i5, i6, 0);
 } else {
  if (i4) _DrawBitmappedTextCore(i2, i1, i3 + i5 | 0, i3 + i6 | 0, 1);
  _DrawBitmappedTextCore(i2, i1, i5, i6, 0);
 }
 return;
}

function _TexPackOverlay_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364736;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 8;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 HEAP8[i1 + 36 >> 0] = 0;
 _Overlay_AddLabels(i1, i1 + 404 | 0);
 _ButtonWidget_Add(i1, i1 + 68 | 0, 160, 0);
 _ButtonWidget_Add(i1, i1 + 152 | 0, 160, 0);
 _ButtonWidget_Add(i1, i1 + 236 | 0, 160, 0);
 _ButtonWidget_Add(i1, i1 + 320 | 0, 160, 0);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Rain_Render(d3) {
 d3 = +d3;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[431721] | 0;
 if (i1 | 0) {
  i1 = _Gfx_LockDynamicVb(HEAP32[431724] | 0, 1, i1 << 2) | 0;
  if ((HEAP32[431721] | 0) > 0) {
   i2 = 0;
   while (1) {
    _RainParticle_Render(916608 + (i2 * 44 | 0) | 0, d3, i1);
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (HEAP32[431721] | 0)) break; else i1 = i1 + 96 | 0;
   }
  }
  _Gfx_BindTexture(HEAP32[431725] | 0);
  _Gfx_UnlockDynamicVb(HEAP32[431724] | 0);
  _Gfx_DrawVb_IndexedTris(HEAP32[431721] << 2);
 }
 return;
}

function _ChatScreen_ColCodeChanged(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!(HEAP8[1689080] | 0)) {
  _SpecialInputWidget_UpdateCols(i2 + 1292 | 0);
  i1 = i1 & 255;
  _TextGroupWidget_RedrawAllWithCol(i2 + 1108 | 0, i1);
  _TextGroupWidget_RedrawAllWithCol(i2 + 924 | 0, i1);
  _TextGroupWidget_RedrawAllWithCol(i2 + 1016 | 0, i1);
  _TextGroupWidget_RedrawAllWithCol(i2 + 1200 | 0, i1);
  i1 = i2 + 524 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  _InputWidget_UpdateText(i2 + 324 | 0);
  HEAP32[i1 >> 2] = i3;
 }
 return;
}

function _Drawer2D_LastColor(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAPU16[i4 + 4 >> 1] | 0;
 i1 = (i3 | 0) > (i1 | 0) ? i1 : i3 + -1 | 0;
 L1 : do if ((i1 | 0) > -1) {
  i3 = HEAP32[i4 >> 2] | 0;
  while (1) {
   if ((HEAP8[i3 + i1 >> 0] | 0) == 38) {
    i2 = i1 + 1 | 0;
    if ((_Drawer2D_ValidColorCodeAt(i4, i2) | 0) << 24 >> 24) break;
   }
   if ((i1 | 0) > 0) i1 = i1 + -1 | 0; else {
    i1 = 0;
    break L1;
   }
  }
  i1 = HEAP8[i3 + i2 >> 0] | 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _HotbarWidget_Update(i5, d3) {
 i5 = i5 | 0;
 d3 = +d3;
 var i1 = 0, i2 = 0, i4 = 0, d6 = 0.0;
 if (HEAP8[1689553] | 0) {
  i4 = 0;
  do {
   i1 = i5 + 264 + (i4 << 2) | 0;
   if ((HEAP32[i1 >> 2] | 0) >= 0) {
    i2 = i5 + 296 + (i4 << 2) | 0;
    d6 = +HEAPF32[i2 >> 2] + d3;
    HEAPF32[i2 >> 2] = d6;
    if (!(d6 <= 1.0)) {
     HEAP32[i1 >> 2] = -1;
     HEAPF32[i2 >> 2] = 0.0;
     HEAP16[1695240 + ((HEAP32[424236] | 0) + i4 << 1) >> 1] = 0;
    }
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 8);
 }
 return;
}

function _Camera_KeyLookUpdate(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0;
 if (!(HEAP32[422387] | 0)) {
  d1 = d1 * 1.0e3 * (+(HEAP32[414138] | 0) / 25.0);
  i2 = HEAP32[244563] | 0;
  i3 = 1656676 + (i2 << 3) + 4 | 0;
  if (HEAP8[357299] | 0) HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] - d1;
  if (HEAP8[357300] | 0) HEAPF32[i3 >> 2] = d1 + +HEAPF32[i3 >> 2];
  i2 = 1656676 + (i2 << 3) | 0;
  if (HEAP8[357302] | 0) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] - d1;
  if (HEAP8[357301] | 0) HEAPF32[i2 >> 2] = d1 + +HEAPF32[i2 >> 2];
 }
 return;
}

function _Model_GetTransform(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = i1 + 80 | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _Entity_GetTransform(i1, i6, i5, i2);
 STACKTOP = i4;
 return;
}

function _ClassicLighting_OnBlockChanged(i5, i6, i7, i4, i3) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i8 = 0;
 i1 = (Math_imul(HEAP32[244733] | 0, i7) | 0) + i5 | 0;
 i8 = HEAP16[(HEAP32[424246] | 0) + (i1 << 1) >> 1] | 0;
 i2 = i8 << 16 >> 16;
 if (i8 << 16 >> 16 != 32767) {
  _ClassicLighting_UpdateLighting(i5, i6, i7, i4, i3, i1, i2);
  _ClassicLighting_RefreshAffected(i5, i6, i7, i3, i2 + 1 | 0, (HEAP16[(HEAP32[424246] | 0) + (i1 << 1) >> 1] | 0) + 1 | 0);
 }
 return;
}

function _Deflate_MakeStream(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _Stream_Init(i2);
 HEAP32[i2 + 32 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = 29;
 HEAP32[i2 + 28 >> 2] = 16;
 HEAP32[i1 + 8 >> 2] = 16384;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = i1 + 33656;
 HEAP32[i1 + 16 >> 2] = 8192;
 HEAP32[i1 + 20 >> 2] = i3;
 HEAP8[i1 + 115576 >> 0] = 0;
 _Mem_Set(i1 + 41848 | 0, 0, 8192) | 0;
 _Mem_Set(i1 + 50040 | 0, 0, 65536) | 0;
 _Deflate_BuildTable(i1 + 24 | 0, i1 + 600 | 0);
 return;
}

function _WriteString(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i3 = HEAP16[i4 + 4 >> 1] | 0;
 i2 = (i3 & 65535) < 64;
 i3 = i2 ? i3 : 64;
 i1 = i3 & 65535;
 if (!(i3 << 16 >> 16)) {
  i1 = 0;
  i6 = 5;
 } else {
  i3 = 0;
  do {
   i7 = HEAP8[(HEAP32[i4 >> 2] | 0) + i3 >> 0] | 0;
   HEAP8[i5 + i3 >> 0] = i7 << 24 >> 24 == 38 ? 37 : i7;
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i1 >>> 0);
  if (i2) i6 = 5;
 }
 if ((i6 | 0) == 5) _memset(i5 + i1 | 0, 32, 64 - i1 | 0) | 0;
 return;
}

function _LocalPlayer_HandleRespawn(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = 146288 + (i1 * 796 | 0) | 0;
 do if (!(HEAP32[422387] | 0)) {
  if (HEAP8[146288 + (i1 * 796 | 0) + 475 >> 0] | 0) {
   _LocalPlayer_DoRespawn(i2);
   i1 = 1;
   break;
  }
  i1 = 146288 + (i1 * 796 | 0) + 788 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   HEAP8[i1 >> 0] = 1;
   if (!(HEAP8[1868739] | 0)) i1 = 0; else {
    _Chat_AddRaw(30589);
    i1 = 0;
   }
  } else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _MakeIndices(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((i5 | 0) > 0) {
  i2 = 0;
  i3 = 0;
  i1 = i4;
  while (1) {
   i4 = i2 & 65535;
   HEAP16[i1 >> 1] = i4;
   HEAP16[i1 + 2 >> 1] = i2 | 1;
   i6 = (i2 | 2) & 65535;
   HEAP16[i1 + 4 >> 1] = i6;
   HEAP16[i1 + 6 >> 1] = i6;
   HEAP16[i1 + 8 >> 1] = i2 | 3;
   HEAP16[i1 + 10 >> 1] = i4;
   i3 = i3 + 6 | 0;
   if ((i3 | 0) >= (i5 | 0)) break; else {
    i2 = i2 + 4 | 0;
    i1 = i1 + 12 | 0;
   }
  }
 }
 return;
}

function _Classic_Handshake(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2;
 HEAP16[920774] = 0;
 HEAP16[920778] = 0;
 HEAP32[i4 >> 2] = i1 + 1;
 _ReadString(i4, 1841544);
 _ReadString(i4, 1841552);
 _Chat_SetLogName(1841544);
 i3 = HEAP32[417347] | 0;
 i1 = i3 + 460 | 0;
 _UpdateUserType(i1, HEAP8[HEAP32[i4 >> 2] >> 0] | 0);
 i3 = i3 + 504 | 0;
 _String_Copy(i3, 1841544);
 _String_AppendString(i3, 1841552);
 _HacksComp_RecheckFlags(i1);
 STACKTOP = i2;
 return;
}

function _TabList_Delete(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP16[1669392 + ((i1 & 255) << 1) >> 1] | 0;
 i1 = i4 & 65535;
 if (i4 << 16 >> 16) {
  _StringsBuffer_Remove(1670160, i1 + -1 | 0);
  _StringsBuffer_Remove(1670160, i1 + -2 | 0);
  _StringsBuffer_Remove(1670160, i1 + -3 | 0);
  i3 = 0;
  do {
   i2 = 1669392 + (i3 << 1) | 0;
   i1 = HEAP16[i2 >> 1] | 0;
   if ((i1 & 65535) > (i4 & 65535)) HEAP16[i2 >> 1] = (i1 & 65535) + 65533;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 256);
 }
 return;
}

function _PauseScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364336;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 9;
 HEAP32[i1 + 32 >> 2] = 3;
 _Event_Register(1679104, i1, 323);
 HEAP32[i1 + 40 >> 2] = 6432;
 HEAP32[i1 + 36 >> 2] = 6;
 _PauseScreenBase_AddWidgets(i1, 300);
 _ButtonWidget_Add(i1, i1 + 548 | 0, 120, 143);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 if (!(HEAP8[1841572] | 0)) {
  HEAP8[i1 + 317 >> 0] = 1;
  HEAP8[i1 + 401 >> 0] = 1;
 }
 return;
}

function _NostalgiaAppearanceScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 42759, 51, 311, 0);
 _MenuOptionsScreen_AddBool(i1, 42778, 52, 312, 0);
 _MenuOptionsScreen_AddBool(i1, 42796, 53, 313, 0);
 _MenuOptionsScreen_AddBool(i1, 42809, 54, 314, 0);
 _MenuOptionsScreen_AddBool(i1, 42827, 55, 315, 0);
 _MenuOptionsScreen_AddBool(i1, 42848, 56, 316, 0);
 _MenuOptionsScreen_AddBool(i1, 42868, 57, 317, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 137);
 return;
}

function _HoldModel_Draw(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0;
 _RecalcProperties(i1);
 d2 = +_Math_SinF(+HEAPF32[i1 + 132 >> 2] * 2.0);
 d3 = +HEAPF32[i1 + 136 >> 2];
 d2 = d2 * d3 * 3.1415927410125732 * .0625;
 i4 = i1 + 188 | 0;
 d3 = +HEAPF32[i4 >> 2] * (1.0 - d3);
 HEAPF32[i4 >> 2] = d3 + (d2 + .5);
 HEAPF32[i1 + 192 >> 2] = 0.0;
 _Model_SetupState(HEAP32[428695] | 0, i1);
 _HumanModel_Draw(i1);
 _DrawBlockTransform(i1, (d3 + (d2 + 1.0471975803375244)) * 10.0 * .0625 + .12700000405311584);
 return;
}

function _EntryList_Set(i3, i2, i6, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 3088 | 0;
 i5 = i7 + 3080 | 0;
 i1 = i7 + 3072 | 0;
 HEAP8[i5 >> 0] = i4;
 HEAP32[i1 >> 2] = i7;
 HEAP16[i1 + 4 >> 1] = 0;
 HEAP16[i1 + 6 >> 1] = 3072;
 if (!(HEAP16[i6 + 4 >> 1] | 0)) _String_Copy(i1, i2); else _String_Format3(i1, 51440, i2, i5, i6);
 _EntryList_Remove(i3, i2, HEAP8[i5 >> 0] | 0) | 0;
 _StringsBuffer_Add(i3, i1);
 STACKTOP = i7;
 return;
}

function _OnInit_1077() {
 _LocalPlayerInput_Add(15432);
 _LocalPlayerInput_Add(15440);
 _HookInputBinds();
 _Event_Register(1686904, 0, 110);
 _Event_Register(1687164, 0, 111);
 _Event_Register(1685084, 0, 26);
 _Event_Register(1686124, 0, 27);
 _Event_Register(1686384, 0, 28);
 _Event_Register(1679104, 0, 226);
 _StoredHotkeys_LoadAll();
 HEAP32[89332] = 51;
 HEAP32[89333] = 52;
 HEAP32[89334] = 53;
 HEAP32[89335] = 54;
 HEAP32[89384] = 112;
 HEAP32[89385] = 113;
 HEAP32[89386] = 114;
 HEAP32[89387] = 115;
 return;
}

function _MenuOptionsScreen_AddInt(i7, i6, i5, i4, i1, i3, i8, i2) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i7 = _MenuOptionsScreen_AddButton(i7, i6, 124, 128, 129, i2) | 0;
 HEAP32[363888 + (i7 << 5) + 8 >> 2] = i3;
 HEAP32[363888 + (i7 << 5) + 12 >> 2] = i8;
 HEAP32[363888 + (i7 << 5) + 16 >> 2] = 22816;
 HEAP32[363888 + (i7 << 5) + 20 >> 2] = i5;
 HEAP32[363888 + (i7 << 5) + 24 >> 2] = i4;
 HEAP32[363888 + (i7 << 5) + 28 >> 2] = i1;
 return;
}

function _Math_Exp2(d1) {
 d1 = +d1;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0;
 if (d1 == inf) d1 = inf; else {
  i2 = ~~d1;
  if ((i2 | 0) < -1021) d1 = 0.0; else if ((i2 | 0) > 1023) d1 = inf; else {
   i2 = ((d1 < 0.0) << 31 >> 31) + i2 | 0;
   i5 = _bitshift64Shl(i2 + 1023 | 0, 0, 52) | 0;
   i4 = getTempRet0() | 0;
   HEAP32[tempDoublePtr >> 2] = i5;
   HEAP32[tempDoublePtr + 4 >> 2] = i4;
   d3 = +HEAPF64[tempDoublePtr >> 3] * 1.4142135623730951;
   d1 = d3 * +_Exp2Stage1(d1 - +(i2 | 0) + -.5);
  }
 }
 return +d1;
}

function _Gfx_CalcOrthoMatrix(i2, d3, d1, d5, d4) {
 i2 = i2 | 0;
 d3 = +d3;
 d1 = +d1;
 d5 = +d5;
 d4 = +d4;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = i2;
 i7 = 22728;
 i8 = i6 + 64 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  i6 = i6 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i6 | 0) < (i8 | 0));
 HEAPF32[i2 >> 2] = 2.0 / d3;
 HEAPF32[i2 + 20 >> 2] = -2.0 / d1;
 d3 = d4 - d5;
 HEAPF32[i2 + 40 >> 2] = -2.0 / d3;
 HEAPF32[i2 + 48 >> 2] = -1.0;
 HEAPF32[i2 + 52 >> 2] = 1.0;
 HEAPF32[i2 + 56 >> 2] = -(d5 + d4) / d3;
 return;
}

function _PhysicsComp_Move(i3, i4, d5, d7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 d7 = +d7;
 var i1 = 0, i2 = 0, i6 = 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] * d7;
 if (!(HEAP8[(HEAP32[i3 + 24 >> 2] | 0) + 34 >> 0] | 0)) _Collisions_MoveAndWallSlide(HEAP32[i3 + 28 >> 2] | 0);
 i3 = i1 + 4 | 0;
 _Vec3_Add_328(i3, i3, i2);
 HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] / d7;
 _Vec3_Mul3_344(i2, i2, i4);
 HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] - d5;
 return;
}

function _Drawer2D_WithoutColors(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i6;
 i3 = i6 + 8 | 0;
 i1 = i6 + 16 | 0;
 i8 = i4;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i4 + 4 >> 2] = i7;
 if ((_Drawer2D_UNSAFE_NextPart(i2, i3, i1) | 0) << 24 >> 24) do _String_AppendString(i5, i3); while ((_Drawer2D_UNSAFE_NextPart(i2, i3, i1) | 0) << 24 >> 24 != 0);
 STACKTOP = i6;
 return;
}

function _LoadLevelScreen_FilterFiles(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _MapImporter_Find(i4) | 0;
 i9 = i4;
 i8 = HEAP32[i9 + 4 >> 2] | 0;
 i7 = i5;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = i8;
 if (!i2) {
  if (i1 | 0) {
   _Utils_UNSAFE_TrimFirstDirectory(i5);
   _StringsBuffer_Add(i3, i5);
  }
 } else _Directory_Enum(i4, i3, 17) | 0;
 STACKTOP = i6;
 return;
}

function _Menu_DoPointerMove(i2, i1, i5, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 _Menu_UnselectAll(i2);
 i4 = HEAP32[i2 + 16 >> 2] | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 L1 : do if ((i1 | 0) > 0) {
  while (1) {
   i3 = i1;
   i1 = i1 + -1 | 0;
   i2 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
   if (i2 | 0) if (_Widget_Contains(i2, i5, i6) | 0) break;
   if ((i3 | 0) <= 1) {
    i1 = -1;
    break L1;
   }
  }
  HEAP8[i2 + 20 >> 0] = 1;
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _ChatInputWidget_OnPressedEnter(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i6 = i2 + 64 | 0;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = i5;
 _String_UNSAFE_TrimEnd(i1);
 if (HEAP16[i1 + 4 >> 1] | 0) _Chat_Send(i1, 1);
 HEAP16[i2 + 212 >> 1] = 0;
 HEAP32[i2 + 204 >> 2] = HEAP32[415517];
 _Chat_AddOf(1841616, 257);
 _InputWidget_OnPressedEnter(i2);
 STACKTOP = i3;
 return;
}

function _Convert_CompareDigits(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) i1 = 0; else {
  i3 = 0;
  while (1) {
   i2 = HEAP8[i4 + i3 >> 0] | 0;
   if (i2 << 24 >> 24 > i1 << 24 >> 24) {
    i1 = 1;
    break L1;
   }
   i3 = i3 + 1 | 0;
   if (i2 << 24 >> 24 < i1 << 24 >> 24) {
    i1 = -1;
    break L1;
   }
   i1 = HEAP8[i5 + i3 >> 0] | 0;
   if (!(i1 << 24 >> 24)) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _BlockModel_GetSize(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0;
 i3 = i1 + 92 | 0;
 i4 = HEAPU16[i1 + 52 >> 1] | 0;
 _Vec3_Sub_1639(i3, 1020196 + (i4 * 12 | 0) | 0, 1010980 + (i4 * 12 | 0) | 0);
 _Vec3_Sub_1639(i3, i3, 17156);
 d2 = +HEAPF32[i3 >> 2];
 HEAPF32[i3 >> 2] = d2 > .0078125 ? d2 : .0078125;
 i3 = i1 + 96 | 0;
 d2 = +HEAPF32[i3 >> 2];
 HEAPF32[i3 >> 2] = d2 > .0078125 ? d2 : .0078125;
 i1 = i1 + 100 | 0;
 d2 = +HEAPF32[i1 >> 2];
 HEAPF32[i1 >> 2] = d2 > .0078125 ? d2 : .0078125;
 return;
}

function _HacksComp_UNSAFE_FlagValue(i5, i2, i3) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i4 = i3 + 44 | 0;
 i1 = _String_IndexOfConst(i4, i2) | 0;
 if ((i1 | 0) < 0) {
  i3 = 1841616;
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
 } else {
  i2 = (_String_Length(i2) | 0) + i1 | 0;
  i1 = _String_IndexOfAt(i4, i2, 32) | 0;
  if ((i1 | 0) < 0) i1 = HEAPU16[i3 + 48 >> 1] | 0;
  _String_UNSAFE_Substring(i5, i4, i2, i1 - i2 | 0);
 }
 return;
}

function _Game_TakeScreenshot() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 704 | 0;
 i3 = i1 + 96 | 0;
 i4 = i1 + 64 | 0;
 i2 = i1 + 104 | 0;
 HEAP8[1868750] = 0;
 _DateTime_CurrentLocal(i4);
 HEAP32[i3 >> 2] = i1;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_Format3(i3, 32470, i4, i4 + 4 | 0, i4 + 8 | 0);
 _String_Format3(i3, 32493, i4 + 12 | 0, i4 + 16 | 0, i4 + 20 | 0);
 _Platform_EncodePath(i2, i3);
 _interop_TakeScreenshot(i2 | 0);
 STACKTOP = i1;
 return;
}

function _TouchOnscreen_Any(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = _GetOnscreenButtons() | 0;
 i1 = _GetOnscreenHAligns() | 0;
 i4 = 1 << HEAP32[i6 + 36 >> 2];
 i2 = i4 & i3;
 do if (!(i2 & i1)) if (!i2) {
  i2 = i4 | i3;
  break;
 } else {
  i2 = i3;
  i1 = i4 | i1;
  break;
 } else {
  i4 = ~i4;
  i2 = i3 & i4;
  i1 = i1 & i4;
 } while (0);
 _Options_SetInt(51050, i2);
 _Options_SetInt(51033, i1);
 _TouchOnscreen_UpdateButton(i5, i6);
 _TouchScreen_Refresh();
 return;
}

function _MenuOptionsScreen_AddNum(i7, i6, d5, d4, d1, i3, i8, i2) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 d5 = +d5;
 d4 = +d4;
 d1 = +d1;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i7 = _MenuOptionsScreen_AddButton(i7, i6, 124, 130, 131, i2) | 0;
 HEAP32[363888 + (i7 << 5) + 8 >> 2] = i3;
 HEAP32[363888 + (i7 << 5) + 12 >> 2] = i8;
 HEAP32[363888 + (i7 << 5) + 16 >> 2] = 22864;
 HEAPF32[363888 + (i7 << 5) + 20 >> 2] = d5;
 HEAPF32[363888 + (i7 << 5) + 24 >> 2] = d4;
 HEAPF32[363888 + (i7 << 5) + 28 >> 2] = d1;
 return;
}

function _Gamepads_Process(d2) {
 d2 = +d2;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 i3 = i5;
 HEAP8[1868652] = 1;
 if (!(_emscripten_sample_gamepad_data() | 0)) {
  i1 = _emscripten_get_num_gamepads() | 0;
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    if (!(_emscripten_get_gamepad_status(i4 | 0, i3 | 0) | 0)) _ProcessGamepadInput(_Gamepad_Connect(i4 + 235 | 0, 5808) | 0, i3, d2);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i1 | 0));
  }
 }
 STACKTOP = i5;
 return;
}

function _BlockDefs_DefineBlock(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 i2 = _BlockDefs_DefineBlockCommonStart(i5, 0) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = i1 + 1 | 0;
 HEAP32[i5 >> 2] = i3;
 i1 = HEAP8[i1 >> 0] | 0;
 if ((i1 + -1 & 255) < 16) HEAPF32[1020196 + ((i2 & 65535) * 12 | 0) + 4 >> 2] = +(i1 & 255) * .0625;
 _BlockDefs_DefineBlockCommonEnd(i3, i1, i2);
 _Block_DefineCustom(i2, 1);
 STACKTOP = i4;
 return;
}

function _Collisions_ClipZMin(i2, i1, i3, i7, i5, i4, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 if (!(i7 << 24 >> 24)) i8 = 3; else if (!((_Collisions_DidSlide(i2, i1, i6, i5, i3, i4) | 0) << 24 >> 24)) i8 = 3;
 if ((i8 | 0) == 3) {
  i8 = HEAP32[i2 >> 2] | 0;
  HEAPF32[i8 + 12 >> 2] = +HEAPF32[i1 + 8 >> 2] - +HEAPF32[i6 + 8 >> 2] * .5 + -1.0000000474974513e-03;
  _Collisions_ClipZ(i8, i6, i3, i4);
  HEAP8[i2 + 6 >> 0] = 1;
 }
 return;
}

function _Collisions_ClipZMax(i2, i1, i3, i7, i5, i4, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 if (!(i7 << 24 >> 24)) i8 = 3; else if (!((_Collisions_DidSlide(i2, i1, i6, i5, i3, i4) | 0) << 24 >> 24)) i8 = 3;
 if ((i8 | 0) == 3) {
  i8 = HEAP32[i2 >> 2] | 0;
  HEAPF32[i8 + 12 >> 2] = +HEAPF32[i1 + 20 >> 2] + +HEAPF32[i6 + 8 >> 2] * .5 + 1.0000000474974513e-03;
  _Collisions_ClipZ(i8, i6, i3, i4);
  HEAP8[i2 + 9 >> 0] = 1;
 }
 return;
}

function _WarnMissingArgs(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i4 = i5 + 256 | 0;
 HEAP32[i4 >> 2] = i5;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 256;
 _String_AppendConst(i4, 53097);
 if ((i2 | 0) > 0) {
  i3 = 0;
  do {
   _String_AppendString(i4, i1 + (i3 << 3) | 0);
   _String_Append(i4, 32);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i2 | 0));
 }
 HEAP32[3880] = 53123;
 _Logger_DialogWarn(i4);
 STACKTOP = i5;
 return;
}

function _Block_FindID(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5 + 8 | 0;
 i4 = i5;
 i1 = 0;
 while (1) {
  _Block_UNSAFE_GetName(i4, i1 & 65535);
  i8 = i4;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = i2;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 + 4 >> 2] = i7;
  if (_String_CaselessEquals(i2, i3) | 0) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 768) {
   i1 = -1;
   break;
  }
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _TabListOverlay_AddName(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 if ((i1 | 0) == -1) {
  i6 = i4 + 56 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1 + 1;
 }
 _StringsBuffer_UNSAFE_Get(i3, 1670160, (HEAPU16[1669392 + ((i2 & 255) << 1) >> 1] | 0) + -2 | 0);
 HEAP16[i4 + 152 + (i1 << 1) >> 1] = i2 & 255;
 _TabListOverlay_DrawText(i4 + 1176 + (i1 * 28 | 0) | 0, i4, i3);
 STACKTOP = i5;
 return;
}

function _Ping_NextPingId() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[460400] | 0;
 i1 = (HEAPU16[955840 + (i2 * 24 | 0) + 16 >> 1] | 0) + 1 | 0;
 i2 = ((i2 + 1 | 0) >>> 0) % 10 | 0;
 HEAP16[955840 + (i2 * 24 | 0) + 16 >> 1] = i1;
 i5 = _Stopwatch_Measure() | 0;
 i4 = getTempRet0() | 0;
 i3 = 955840 + (i2 * 24 | 0) | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i3 + 4 >> 2] = i4;
 i3 = 955840 + (i2 * 24 | 0) + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[460400] = i2;
 return i1 | 0;
}

function _FlatgrassGen_MapSet(i1, i2, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var d3 = 0.0, i4 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[244739] | 0;
 i6 = HEAP32[422257] | 0;
 i4 = (i1 | 0) > 0 ? i1 : 0;
 i1 = (i2 | 0) > 0 ? i2 : 0;
 HEAPF32[422259] = 0.0;
 if ((i4 | 0) <= (i1 | 0)) {
  d3 = +(1 - i4 + i1 | 0);
  i2 = i4;
  while (1) {
   _Mem_Set(i6 + (Math_imul(i2, i5) | 0) | 0, i7, i5) | 0;
   HEAPF32[422259] = +(i2 - i4 | 0) / d3;
   if (i2 >>> 0 < i1 >>> 0) i2 = i2 + 1 | 0; else break;
  }
 }
 return;
}

function _BlockEditCommand_GetBool(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 do if (!(_String_CaselessEqualsConst(i2, 27556) | 0)) if (!(_String_CaselessEqualsConst(i2, 26065) | 0)) {
  if (!(_String_CaselessEqualsConst(i2, 27561) | 0)) if (!(_String_CaselessEqualsConst(i2, 27567) | 0)) {
   _Chat_Add1(27570, i1);
   i1 = 0;
   break;
  }
  HEAP8[i3 >> 0] = 0;
  i1 = 1;
 } else i4 = 3; else i4 = 3; while (0);
 if ((i4 | 0) == 3) {
  HEAP8[i3 >> 0] = 1;
  i1 = 1;
 }
 return i1 | 0;
}

function _SpecialInputWidget_IntersectsTitle(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i3 = i5 + 92 | 0;
 i1 = 0;
 i4 = 0;
 while (1) {
  i2 = HEAP32[i5 + 96 + (i1 * 28 | 0) + 8 >> 2] | 0;
  if (_Gui_Contains(i4, 0, i2, HEAP32[i3 >> 2] | 0, i6, i7) | 0) {
   i8 = 3;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 < 5) i4 = i2 + i4 | 0; else {
   i1 = 0;
   break;
  }
 }
 if ((i8 | 0) == 3) {
  HEAP32[i5 + 48 >> 2] = i1;
  i1 = 1;
 }
 return i1 | 0;
}

function _OnInit_2220() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 _Event_Register(1677284, 0, 26);
 _Event_Register(1678324, 0, 416);
 _Event_Register(1678584, 0, 417);
 HEAP16[11200] = 0;
 if ((_Options_UNSAFE_Get(50400, i1) | 0) << 24 >> 24) _String_Format1(22396, 50415, i1);
 HEAP32[460930] = 0;
 _TextureEntry_Register(22436);
 _Utils_EnsureDirectory(50427) | 0;
 _Utils_EnsureDirectory(50436) | 0;
 _TextureCache_Init();
 _TextureUrls_Init();
 STACKTOP = i2;
 return;
}

function _MenuOptionsScreen_Update(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5 + 64 | 0;
 i1 = HEAP32[i2 + 36 >> 2] | 0;
 HEAP32[i4 >> 2] = i5;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 _String_AppendConst(i4, HEAP32[i2 + 80 >> 2] | 0);
 if (HEAP32[i1 >> 2] | 0) {
  _String_AppendConst(i4, 39437);
  FUNCTION_TABLE_vii[HEAP32[i1 >> 2] & 255](i2, i4);
 }
 _ButtonWidget_Set(i2, i4, i3 + 108 | 0);
 STACKTOP = i5;
 return;
}

function _HotbarWidget_PointerMove(i5, i3, i6, i7) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i4 = i5 + 264 | 0;
 i1 = 0;
 while (1) {
  i2 = i4 + (i1 << 2) | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) if (!(_Widget_Contains(i5, i6, i7) | 0)) {
   i8 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 8) {
   i1 = 0;
   break;
  }
 }
 if ((i8 | 0) == 4) {
  HEAP32[i2 >> 2] = -1;
  HEAPF32[i5 + 296 + (i1 << 2) >> 2] = 0.0;
  i1 = 1;
 }
 return i1 | 0;
}

function _GpuInfoCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 i4 = i5 + 456 | 0;
 i3 = i5 + 448 | 0;
 HEAP32[i4 >> 2] = i5;
 i1 = i4 + 4 | 0;
 HEAP16[i1 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 448;
 _Gfx_GetApiInfo(i4);
 if (HEAP16[i1 >> 1] | 0) {
  i2 = i3 + 4 | 0;
  do {
   _String_UNSAFE_SplitBy(i4, 10, i3);
   if (HEAP16[i2 >> 1] | 0) _Chat_Add1(30121, i3);
  } while ((HEAP16[i1 >> 1] | 0) != 0);
 }
 STACKTOP = i5;
 return;
}

function _OnKeyPress(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i3 = (_Convert_TryCodepointToCP437(i3, i2) | 0) << 24 >> 24 != 0;
 if (i3 & (HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i3 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   i3 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3, HEAP8[i2 >> 0] | 0) | 0) == 0;
   i1 = i1 + 1 | 0;
  } while (i3 & (i1 | 0) < (HEAP32[422372] | 0));
 }
 STACKTOP = i4;
 return;
}

function _NetPlayer_RenderModel(i5, d3, d4) {
 i5 = i5 | 0;
 d3 = +d3;
 d4 = +d4;
 var i1 = 0, i2 = 0;
 _Vec3_Lerp(i5 + 4 | 0, i5 + 352 | 0, i5 + 384 | 0, d4);
 _Entity_LerpAngles(i5, d4);
 _AnimatedComp_GetCurrent(i5, d4);
 i1 = _Model_ShouldRender(i5) | 0;
 i2 = i5 + 55 | 0;
 HEAP8[i2 >> 0] = i1;
 if (HEAP8[1868754] | 0) {
  i1 = +_Model_RenderDistance(i5) <= 4096.0 & 1;
  i1 = HEAPU8[i2 >> 0] & i1 & 255;
  HEAP8[i2 >> 0] = i1;
 }
 if (i1 << 24 >> 24) _Model_Render(HEAP32[i5 + 48 >> 2] | 0, i5);
 return;
}

function _CycleViewDistanceForwards(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = HEAP32[3681] | 0;
  i4 = 0;
  while (1) {
   i2 = HEAP16[i5 + (i4 << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   if ((i1 | 0) < (i2 << 16 >> 16 | 0)) break;
   if ((i4 | 0) >= (i3 | 0)) {
    i6 = 6;
    break L1;
   }
  }
  _Game_UserSetViewDistance(i2 << 16 >> 16);
 } else i6 = 6; while (0);
 if ((i6 | 0) == 6) _Game_UserSetViewDistance(HEAP16[i5 >> 1] | 0);
 return;
}

function _CPE_SpawnEffect(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 d7 = +(_Stream_GetU32_BE(i1 + 1 | 0) | 0) * .03125;
 d6 = +(_Stream_GetU32_BE(i1 + 5 | 0) | 0) * .03125;
 d5 = +(_Stream_GetU32_BE(i1 + 9 | 0) | 0) * .03125;
 d4 = +(_Stream_GetU32_BE(i1 + 13 | 0) | 0) * .03125;
 d3 = +(_Stream_GetU32_BE(i1 + 17 | 0) | 0) * .03125;
 d2 = +(_Stream_GetU32_BE(i1 + 21 | 0) | 0) * .03125;
 _Particles_CustomEffect(HEAPU8[i1 >> 0] | 0, d7, d6, d5, d4, d3, d2);
 return;
}

function _Window_EnterFullscreen() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i2;
 HEAP32[i1 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 2;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 49;
 HEAP32[i1 + 16 >> 2] = 0;
 i3 = (_interop_GetContainerID() | 0) == 0;
 i1 = _emscripten_request_fullscreen_strategy((i3 ? 53305 : 53386) | 0, 1, i1 | 0) | 0;
 i1 = (i1 | 0) == -1 ? -857812990 : i1;
 if (!i1) {
  _interop_EnterFullscreen();
  i1 = 0;
 }
 STACKTOP = i2;
 return i1 | 0;
}

function _TexturePackScreen_FilterFiles(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i8 = i3;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = i7;
 if (!i1) {
  if (_String_CaselessEnds(i3, 16048) | 0) {
   _Utils_UNSAFE_TrimFirstDirectory(i4);
   _StringsBuffer_Add(i2, i4);
  }
 } else _Directory_Enum(i3, i2, 19) | 0;
 STACKTOP = i5;
 return;
}

function _TableWidget_KeyDown(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i4 = i6;
 if ((HEAP32[i5 + 60 >> 2] | 0) == -1) i1 = 0; else {
  _Input_CalcDelta(i3, i2, i1, i4);
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!(i1 | i2)) i1 = 0; else {
   _TableWidget_ScrollRelative(i5, (Math_imul(HEAP32[i5 + 44 >> 2] | 0, i1) | 0) + i2 | 0);
   i1 = 1;
  }
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _Physics_HandleCobblestoneSlab(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[244733] | 0;
 i3 = (i5 | 0) / (i1 | 0) | 0;
 i1 = i5 - (Math_imul(i3, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i4 = (i3 | 0) / (i2 | 0) | 0;
 i2 = i3 - (Math_imul(i4, i2) | 0) | 0;
 i3 = HEAP32[244739] | 0;
 if ((i3 | 0) <= (i5 | 0)) if ((HEAP8[(HEAP32[244730] | 0) + (i5 - i3) >> 0] | 0) == 50) {
  _Game_UpdateBlock(i1, i4, i2, 0);
  _Game_UpdateBlock(i1, i4 + -1 | 0, i2, 4);
 }
 return;
}

function _Collisions_ClipXMax(i2, i1, i3, i7, i5, i4, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 if (!(i7 << 24 >> 24)) i8 = 3; else if (!((_Collisions_DidSlide(i2, i1, i6, i5, i3, i4) | 0) << 24 >> 24)) i8 = 3;
 if ((i8 | 0) == 3) {
  i8 = HEAP32[i2 >> 2] | 0;
  HEAPF32[i8 + 4 >> 2] = +HEAPF32[i1 + 12 >> 2] + +HEAPF32[i6 >> 2] * .5 + 1.0000000474974513e-03;
  _Collisions_ClipX(i8, i6, i3, i4);
  HEAP8[i2 + 7 >> 0] = 1;
 }
 return;
}

function _CustomParticle_CanPass(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 & 65535;
 if ((HEAP8[1006372 + i1 >> 0] | 0) == 2) if (!(HEAP8[1868796] & 8)) i1 = 1; else i2 = 3; else i2 = 3;
 L3 : do if ((i2 | 0) == 3) {
  switch (HEAP8[1000996 + i1 >> 0] | 0) {
  case 2:
   {
    if (HEAP8[1868796] & 2) {
     i1 = 0;
     break L3;
    }
    break;
   }
  case 1:
   {
    if (HEAP8[1868796] & 4) {
     i1 = 0;
     break L3;
    }
    break;
   }
  default:
   {}
  }
  i1 = 1;
 } while (0);
 return i1 | 0;
}

function _SmoothLighting_Color(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 do if (!((_World_Contains_1148(i1, i2, i3) | 0) << 24 >> 24)) i1 = HEAP32[466942] | 0; else {
  i4 = 994084 + ((_World_GetBlock_1151(i1, i2, i3) | 0) & 65535) | 0;
  if (!(HEAP8[i4 >> 0] | 0)) {
   i1 = (_ClassicLighting_GetLightHeight(i1, i3) | 0) < (i2 | 0);
   i1 = i1 ? HEAP32[466942] | 0 : HEAP32[466946] | 0;
   break;
  } else {
   i1 = HEAP32[466942] | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _Physics_TickWater() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = HEAP32[414099] | 0;
 if ((i1 | 0) > 0) {
  i4 = 0;
  do {
   if ((_Physics_CheckItem(1656384, i5) | 0) << 24 >> 24) {
    i2 = HEAP32[i5 >> 2] | 0;
    i3 = HEAP8[(HEAP32[244730] | 0) + i2 >> 0] | 0;
    if ((i3 & -2) << 24 >> 24 == 8) _Physics_ActivateWater(i2, i3 & 255);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i1 | 0));
 }
 STACKTOP = i6;
 return;
}

function _Java_ReadFieldDesc(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i5;
 i1 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 127](i4, i3) | 0;
 L1 : do if (!i1) {
  i1 = _Java_ReadString(i4, i3 + 1 | 0) | 0;
  if (!i1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 76:
   case 91:
    break;
   default:
    {
     i1 = 0;
     break L1;
    }
   }
   i1 = _Java_ReadObject(i4, i2) | 0;
  }
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _GetBrightness(i3, i4, i5, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = (Math_imul(HEAP32[244752] | 0, 4 ? i4 >> 4 : i4) | 0) + (4 ? i5 >> 4 : i5) | 0;
 i1 = (Math_imul(i1, HEAP32[244750] | 0) | 0) + (4 ? i3 >> 4 : i3) | 0;
 i1 = HEAP32[(HEAP32[422189] | 0) + (i1 << 2) >> 2] | 0;
 if (!i1) i1 = 0; else {
  i1 = HEAPU8[i1 + (i4 << 8 & 3840 | i3 & 15 | i5 << 4 & 240) >> 0] | 0;
  i1 = (i2 << 24 >> 24 == 0 ? i1 & 15 : 4 ? i1 >>> 4 : i1) & 255;
 }
 return i1 | 0;
}

function _Physics_TickLava() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = HEAP32[414093] | 0;
 if ((i1 | 0) > 0) {
  i4 = 0;
  do {
   if ((_Physics_CheckItem(1656360, i5) | 0) << 24 >> 24) {
    i2 = HEAP32[i5 >> 2] | 0;
    i3 = HEAP8[(HEAP32[244730] | 0) + i2 >> 0] | 0;
    if ((i3 & -2) << 24 >> 24 == 10) _Physics_ActivateLava(i2, i3 & 255);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i1 | 0));
 }
 STACKTOP = i6;
 return;
}

function _Math_Log2(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0;
 if (d1 == inf) d1 = inf; else if (!(d1 <= 0.0)) {
  HEAPF64[tempDoublePtr >> 3] = d1;
  i4 = HEAP32[tempDoublePtr >> 2] | 0;
  i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  i2 = _bitshift64Lshr(i4 | 0, i3 | 0, 52) | 0;
  getTempRet0() | 0;
  HEAP32[tempDoublePtr >> 2] = i4;
  HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1072693248;
  d1 = +_Log2Stage1(+HEAPF64[tempDoublePtr >> 3]) + +(i2 + -1023 | 0);
 } else d1 = nan;
 return +d1;
}

function _Input_CalcDelta(i3, i1, i2, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 if ((i3 | 0) == 105 ? 1 : (HEAP32[i1 + 24 >> 2] | 0) == (i3 | 0)) HEAP32[i2 >> 2] = -1;
 if ((i3 | 0) == 107 ? 1 : (HEAP32[i1 + 28 >> 2] | 0) == (i3 | 0)) HEAP32[i2 >> 2] = 1;
 if ((i3 | 0) == 109 ? 1 : (HEAP32[i1 + 16 >> 2] | 0) == (i3 | 0)) HEAP32[i4 >> 2] = -1;
 if ((i3 | 0) == 103 ? 1 : (HEAP32[i1 + 20 >> 2] | 0) == (i3 | 0)) HEAP32[i4 >> 2] = 1;
 return;
}

function _Convert_UnicodeToUtf8(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i3 & 65535;
 do if ((i3 & 65535) < 128) {
  HEAP8[i2 >> 0] = i3;
  i1 = 1;
 } else if ((i3 & 65535) < 2048) {
  HEAP8[i2 >> 0] = (6 ? i1 >>> 6 : i1) & 31 | 192;
  HEAP8[i2 + 1 >> 0] = i1 & 63 | 128;
  i1 = 2;
  break;
 } else {
  HEAP8[i2 >> 0] = (12 ? i1 >>> 12 : i1) | 224;
  HEAP8[i2 + 1 >> 0] = (6 ? i1 >>> 6 : i1) & 63 | 128;
  HEAP8[i2 + 2 >> 0] = i1 & 63 | 128;
  i1 = 3;
  break;
 } while (0);
 return i1 | 0;
}

function _Collisions_ClipXMin(i2, i1, i3, i7, i5, i4, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 if (!(i7 << 24 >> 24)) i8 = 3; else if (!((_Collisions_DidSlide(i2, i1, i6, i5, i3, i4) | 0) << 24 >> 24)) i8 = 3;
 if ((i8 | 0) == 3) {
  i8 = HEAP32[i2 >> 2] | 0;
  HEAPF32[i8 + 4 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i6 >> 2] * .5 + -1.0000000474974513e-03;
  _Collisions_ClipX(i8, i6, i3, i4);
  HEAP8[i2 + 4 >> 0] = 1;
 }
 return;
}

function _Classic_Tick(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i2 = HEAP32[417347] | 0;
 if (HEAP8[1868800] | 0) {
  i7 = i2 + 384 | 0;
  d6 = +HEAPF32[i2 + 20 >> 2];
  d5 = +HEAPF32[i2 + 16 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  i1 = _Classic_WritePosition(i1, i3, d6, d5) | 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _CPE_SendNotifyPositionAction(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6;
 if (HEAP8[1841592] | 0) {
  HEAP8[i2 >> 0] = 58;
  _Stream_SetU16_BE(i2 + 1 | 0, i1 & 65535);
  _Stream_SetU16_BE(i2 + 3 | 0, i3 & 65535);
  _Stream_SetU16_BE(i2 + 5 | 0, i4 & 65535);
  _Stream_SetU16_BE(i2 + 7 | 0, i5 & 65535);
  FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, 9);
 }
 STACKTOP = i6;
 return;
}

function _CPE_LightingMode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = (HEAP8[i1 + 1 >> 0] | 0) != 0 & 1;
 if (!(i2 << 24 >> 24)) {
  if (HEAP8[1868792] | 0) {
   HEAP8[1868791] = 0;
   HEAP8[1868792] = 0;
   _Lighting_SetMode(HEAP8[1868793] | 0, 1);
  }
 } else {
  i1 = i2 + -1 << 24 >> 24;
  if ((i1 & 255) <= 1) {
   if (!(HEAP8[1868792] | 0)) HEAP8[1868793] = HEAP8[1868790] | 0;
   HEAP8[1868791] = i3;
   HEAP8[1868792] = 1;
   _Lighting_SetMode(i1, 1);
  }
 }
 return;
}

function _OnInit_1942() {
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _Event_Register(1678324, 0, 410);
 d4 = +_Options_GetFloat(48479, 1.0, 16.0, 1.0);
 HEAPF32[460375] = d4;
 i1 = _Options_GetInt(48508, 0, 255, 102) | 0;
 if (!((_Options_GetColor(48539, i2) | 0) << 24 >> 24)) i1 = i1 << 24; else i1 = i1 << 24 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
 HEAP32[460376] = i1;
 STACKTOP = i3;
 return;
}

function _Entities_Remove(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = 1668360 + (i3 << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  _Event_RaiseInt(1675724, i3);
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
  HEAP32[i2 >> 2] = 0;
  if ((i3 | 0) < 256) {
   i1 = 1675312 + (3 ? i3 >> 3 : i3) | 0;
   i2 = 1 << (i3 & 7);
   if (i2 & (HEAPU8[i1 >> 0] | 0) | 0) {
    _TabList_Remove(i3 & 255);
    HEAP8[i1 >> 0] = (i2 ^ 255) & (HEAPU8[i1 >> 0] | 0);
   }
  }
 }
 return;
}

function _Chat_SetLogName(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP16[6860] | 0)) {
  i4 = i5 + 4 | 0;
  i1 = HEAP16[i4 >> 1] | 0;
  if (i1 << 16 >> 16) {
   i2 = 0;
   do {
    i3 = HEAP8[(HEAP32[i5 >> 2] | 0) + i2 >> 0] | 0;
    if (!((_AllowedLogNameChar(i3) | 0) << 24 >> 24)) i2 = i2 + (i3 << 24 >> 24 == 38 & 1) | 0; else {
     _String_Append(13716, i3);
     i1 = HEAP16[i4 >> 1] | 0;
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i1 & 65535 | 0));
  }
 }
 return;
}

function _OnPointerMove(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[353344 + (i2 << 3) >> 2] | 0;
 i4 = HEAP32[353344 + (i2 << 3) + 4 >> 2] | 0;
 if ((HEAP32[422372] | 0) > 0) {
  i2 = 1 << i2;
  i1 = 0;
  do {
   i5 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   HEAP8[i5 + 7 >> 0] = 1;
   i5 = (FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 63](i5, i2, i3, i4) | 0) == 0;
   i1 = i1 + 1 | 0;
  } while (i5 & (i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _ButtonWidget_Set(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 i6 = i3 + 40 | 0;
 _Gfx_DeleteTexture(i6);
 _DrawTextArgs_Make(i5, i1, i2, 1);
 _Drawer2D_MakeTextTexture(i6, i5);
 i1 = i3 + 50 | 0;
 if (!(HEAP16[i1 >> 1] | 0)) {
  i6 = (_Font_CalcHeight(i2, 1) | 0) & 65535;
  HEAP16[i1 >> 1] = i6;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 511](i3);
 STACKTOP = i4;
 return;
}

function _AABB_ContainsPoint(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d3 = +HEAPF32[i1 >> 2];
 if (!(d3 >= +HEAPF32[i5 >> 2])) i1 = 0; else {
  d4 = +HEAPF32[i1 + 4 >> 2];
  if (!(d4 >= +HEAPF32[i5 + 4 >> 2])) i1 = 0; else {
   d2 = +HEAPF32[i1 + 8 >> 2];
   if (!(d2 >= +HEAPF32[i5 + 8 >> 2])) i1 = 0; else if (!(d3 <= +HEAPF32[i5 + 12 >> 2])) i1 = 0; else if (!(d4 <= +HEAPF32[i5 + 16 >> 2])) i1 = 0; else i1 = d2 <= +HEAPF32[i5 + 20 >> 2] & 1;
  }
 }
 return i1 | 0;
}

function _FontListScreen_UpdateEntry(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6;
 if (!(_String_CaselessEqualsConst(i5, 43363) | 0)) {
  i2 = _SysFont_Make(i3, i5, 16, 0) | 0;
  if (!i2) _ButtonWidget_Set(i1, i5, i3); else {
   _Logger_SimpleWarn2(i2, 45488, i5);
   _ButtonWidget_Set(i1, i5, i4 + 792 | 0);
  }
  _Font_Free(i3);
 } else _ButtonWidget_Set(i1, i5, i4 + 792 | 0);
 STACKTOP = i6;
 return;
}

function _Physics_HandleSlab(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[244733] | 0;
 i3 = (i5 | 0) / (i1 | 0) | 0;
 i1 = i5 - (Math_imul(i3, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i4 = (i3 | 0) / (i2 | 0) | 0;
 i2 = i3 - (Math_imul(i4, i2) | 0) | 0;
 i3 = HEAP32[244739] | 0;
 if ((i3 | 0) <= (i5 | 0)) if ((HEAP8[(HEAP32[244730] | 0) + (i5 - i3) >> 0] | 0) == 44) {
  _Game_UpdateBlock(i1, i4, i2, 0);
  _Game_UpdateBlock(i1, i4 + -1 | 0, i2, 43);
 }
 return;
}

function _NetInterpComp_RemoveOldestPosition(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = i3 + 92 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = i2 + -1 | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i2 | 0) > 1) {
  i2 = 0;
  do {
   i4 = i3 + 100 + (i2 * 12 | 0) | 0;
   i2 = i2 + 1 | 0;
   i5 = i3 + 100 + (i2 * 12 | 0) | 0;
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  } while ((i2 | 0) != (i1 | 0));
 }
 return;
}

function _Collisions_MoveAndWallSlide(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i6 + 24 | 0;
 i4 = i6;
 i1 = HEAP32[i2 >> 2] | 0;
 if (+HEAPF32[i1 + 36 >> 2] == 0.0) if (+HEAPF32[i1 + 40 >> 2] == 0.0) {
  if (!(+HEAPF32[i1 + 44 >> 2] == 0.0)) i5 = 4;
 } else i5 = 4; else i5 = 4;
 if ((i5 | 0) == 4) _Collisions_CollideWithReachableBlocks(i2, _Searcher_FindReachableBlocks(i1, i3, i4) | 0, i3, i4);
 STACKTOP = i6;
 return;
}

function _ChatScreen_Redraw(i1) {
 i1 = i1 | 0;
 _TextGroupWidget_RedrawAll(i1 + 1108 | 0);
 _TextWidget_Set(i1 + 108 | 0, 13668, i1 + 72 | 0);
 _TextWidget_Set(i1 + 180 | 0, 13676, i1 + 84 | 0);
 _TextWidget_Set(i1 + 252 | 0, 13684, i1 + 96 | 0);
 _TextGroupWidget_RedrawAll(i1 + 924 | 0);
 _TextGroupWidget_RedrawAll(i1 + 1016 | 0);
 _TextGroupWidget_RedrawAll(i1 + 1200 | 0);
 if (HEAP8[i1 + 4 >> 0] | 0) _InputWidget_UpdateText(i1 + 324 | 0);
 _SpecialInputWidget_Redraw(i1 + 1292 | 0);
 return;
}

function _RotateDirection(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0;
 d1 = +_Math_ClampAngle(+HEAPF32[(HEAP32[417347] | 0) + 20 >> 2]);
 do if (d1 >= 45.0 & d1 < 135.0) _AutoRotate_Insert(i2, i3, 25222); else {
  if (d1 >= 135.0 & d1 < 225.0) {
   _AutoRotate_Insert(i2, i3, 25225);
   break;
  }
  if (d1 >= 225.0 & d1 < 315.0) {
   _AutoRotate_Insert(i2, i3, 25228);
   break;
  } else {
   _AutoRotate_Insert(i2, i3, 25231);
   break;
  }
 } while (0);
 return _GetRotated(i2, i3) | 0;
}

function _TableWidget_OnInventoryChanged(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 _TableWidget_RecreateBlocks(i4);
 i3 = i4 + 60 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 if ((i1 | 0) >= (i2 | 0)) {
  i1 = i2 + -1 | 0;
  HEAP32[i3 >> 2] = i1;
 }
 HEAP32[i4 + 1720 >> 2] = -1;
 HEAP32[i4 + 1724 >> 2] = -1;
 HEAP32[i4 + 1668 >> 2] = (i1 | 0) / (HEAP32[i4 + 44 >> 2] | 0) | 0;
 _ScrollbarWidget_ClampTopRow(i4 + 1628 | 0);
 _TableWidget_RecreateTitle(i4, 1);
 return;
}

function _ProcessGamepadInput(i4, i3, d2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0;
 HEAP8[1868652] = HEAP8[1868652] | 2;
 _ProcessGamepadButtons(i4, i3);
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if ((i1 | 0) > 3) {
  _ProcessGamepadAxis(i4, 0, +HEAPF64[i3 + 16 >> 3], +HEAPF64[i3 + 24 >> 3], d2);
  _ProcessGamepadAxis(i4, 1, +HEAPF64[i3 + 32 >> 3], +HEAPF64[i3 + 40 >> 3], d2);
 } else if ((i1 | 0) > 1) _ProcessGamepadAxis(i4, 1, +HEAPF64[i3 + 16 >> 3], +HEAPF64[i3 + 24 >> 3], d2);
 return;
}

function _Pointer_SetPosition(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i3 = 353344 + (i1 << 3) | 0;
 i5 = 353344 + (i1 << 3) + 4 | 0;
 if ((HEAP32[i3 >> 2] | 0) == (i2 | 0)) {
  if ((HEAP32[i5 >> 2] | 0) != (i4 | 0)) i6 = 3;
 } else i6 = 3;
 do if ((i6 | 0) == 3) {
  HEAP32[i3 >> 2] = i2;
  HEAP32[i5 >> 2] = i4;
  if (HEAP8[1868784] | 0) if (!(HEAP8[352464 + (i1 * 24 | 0) + 4 >> 0] & 1)) break;
  _Event_RaiseInt(1686644, i1);
 } while (0);
 return;
}

function _Camera_CycleActive() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[1868754] | 0)) {
  i1 = HEAP32[(HEAP32[414161] | 0) + 44 >> 2] | 0;
  HEAP32[414161] = i1;
  if ((HEAP8[146760] | 0) == 0 | (HEAP8[146758] | 0) == 0) {
   HEAP32[414161] = 13516;
   i1 = 13516;
  }
  i2 = (i1 | 0) == 13612;
  HEAP8[1868733] = i2 & 1;
  _CPE_SendNotifyAction(7, (i1 | 0) == 13516 ? 0 : (i1 | 0) == 13564 ? 1 : i2 ? 2 : 0);
  HEAPF32[414167] = 0.0;
  HEAPF32[414168] = 0.0;
  _Camera_UpdateProjection();
 }
 return;
}

function _HttpBackend_Add(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 + 8 | 0;
 i3 = i6 + 4 | 0;
 i2 = i6;
 if (i1 & 2) {
  _String_FromRaw(i5, i4, 128);
  i8 = 985296;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = i7;
  _String_Format2(i5, 53038, i2, i3);
 }
 _RequestList_Append(979024, i4, i1);
 _Http_StartNextDownload();
 STACKTOP = i6;
 return;
}

function _Gamepad_Update(i4, d3) {
 i4 = i4 | 0;
 d3 = +d3;
 var i1 = 0, i2 = 0, d5 = 0.0;
 if (HEAP32[353600 + (i4 * 220 | 0) + 76 >> 2] | 0) {
  i2 = 0;
  do {
   if (HEAP8[353600 + (i4 * 220 | 0) + 96 + i2 >> 0] | 0) {
    i1 = 353600 + (i4 * 220 | 0) + 120 + (i2 << 2) | 0;
    d5 = +HEAPF32[i1 >> 2] + d3;
    HEAPF32[i1 >> 2] = d5;
    if (!(d5 < 1.0)) {
     HEAPF32[i1 >> 2] = 0.0;
     _Gamepad_Apply(i4, i2, 1, 1);
    }
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 23);
 }
 return;
}

function _EditHotkeyScreen_UpdateBaseKey(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i3 + 64 | 0;
 HEAP32[i2 >> 2] = i3;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 64;
 if (!(HEAP32[i1 + 24 >> 2] | 0)) _String_AppendConst(i2, 44171); else {
  _String_AppendConst(i2, 44190);
  _String_AppendConst(i2, HEAP32[5008 + ((HEAPU8[i1 + 40 >> 0] | 0) << 2) >> 2] | 0);
 }
 _ButtonWidget_Set(i1 + 400 | 0, i2, i1 + 76 | 0);
 STACKTOP = i3;
 return;
}

function _CheckName(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i1 = i5 + 64 | 0;
 _RemoveEndPlus(i3);
 if (i2 << 24 >> 24 == -1) {
  HEAP32[i1 >> 2] = i5;
  HEAP16[i1 + 4 >> 1] = 0;
  HEAP16[i1 + 6 >> 1] = 64;
  _String_AppendColorless(i1, i3);
  if (!(_String_Equals(i1, 14732) | 0)) _String_Copy(i3, 14732);
 }
 if (!(HEAP16[i4 + 4 >> 1] | 0)) _String_Copy(i4, i3);
 _RemoveEndPlus(i4);
 STACKTOP = i5;
 return;
}

function _ClassicLighting_SetActive() {
 var i1 = 0;
 if (!(HEAP8[1868754] | 0)) {
  i1 = (_Options_GetBool(41140, 0) | 0) << 24 >> 24 == 0;
  i1 = i1 ? 24 : 25;
 } else i1 = 24;
 HEAP32[467168] = 2;
 HEAP32[467169] = 97;
 HEAP32[467170] = 26;
 HEAP32[467171] = i1;
 HEAP32[467172] = 27;
 HEAP32[467173] = 28;
 HEAP32[467174] = 29;
 HEAP32[467175] = 30;
 HEAP32[467176] = 31;
 HEAP32[467177] = 32;
 HEAP32[467178] = 33;
 HEAP32[467165] = 98;
 HEAP32[467166] = 99;
 HEAP32[467167] = 14;
 return;
}

function _TabListOverlay_Update(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i2 = HEAP32[i5 + 56 >> 2] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i4 = i5 + 152 | 0;
  i1 = 0;
  while (1) {
   if ((HEAPU16[i4 + (i1 << 1) >> 1] | 0 | 0) == (i3 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L1;
  }
  _Gfx_DeleteTexture(i5 + 1176 + (i1 * 28 | 0) | 0);
  _TabListOverlay_AddName(i5, i3 & 255, i1);
  _TabListOverlay_SortAndLayout(i5);
 } while (0);
 return;
}

function _StoredHotkeys_LoadAll() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i5 + 16 | 0;
 i3 = i5 + 8 | 0;
 i4 = i5;
 if ((HEAP32[429147] | 0) > 0) {
  i2 = 0;
  do {
   _StringsBuffer_UNSAFE_GetRaw(1716580, i2, i1);
   _String_UNSAFE_Separate(i1, 61, i3, i4) | 0;
   if (_String_CaselessStarts(i3, 15448) | 0) _StoredHotkey_Parse(i3, i4);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[429147] | 0));
 }
 STACKTOP = i5;
 return;
}

function _SpecialInputWidget_UpdateColString(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 236 | 0;
 HEAP32[i2 >> 2] = i1 + 244;
 HEAP16[i1 + 240 >> 1] = 0;
 HEAP16[i1 + 242 >> 1] = 1024;
 i1 = 0;
 do {
  if ((i1 + -65 | 0) >>> 0 >= 6) if ((HEAP32[1667324 + (i1 << 2) >> 2] | 0) >>> 0 > 16777215) {
   _String_Append(i2, 38);
   i3 = i1 & 255;
   _String_Append(i2, i3);
   _String_Append(i2, 37);
   _String_Append(i2, i3);
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 return;
}

function _SheepModel_MakeParts() {
 _BoxDesc_BuildBox(1716048, 18624);
 _BoxDesc_BuildRotatedBox(1716064, 18668);
 _BoxDesc_BuildBox(1716080, 18712);
 _BoxDesc_BuildBox(1716096, 18756);
 _BoxDesc_BuildBox(1716112, 18800);
 _BoxDesc_BuildBox(1716128, 18844);
 _BoxDesc_BuildBox(1716144, 18888);
 _BoxDesc_BuildRotatedBox(1716160, 18932);
 _BoxDesc_BuildBox(1716176, 18976);
 _BoxDesc_BuildBox(1716192, 19020);
 _BoxDesc_BuildBox(1716208, 19064);
 _BoxDesc_BuildBox(1716224, 19108);
 return;
}

function _MenuOptionsScreen_InputClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 64 | 0;
 i5 = HEAP32[i2 + 36 >> 2] | 0;
 _MenuOptionsScreen_FreeExtHelp(i1);
 HEAP32[i1 + 84 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 FUNCTION_TABLE_vii[HEAP32[i5 >> 2] & 255](i2, i4);
 _MenuInputOverlay_Show(i5 + 16 | 0, i4, 127, HEAP8[1689553] | 0);
 STACKTOP = i3;
 return;
}

function _LoadLevelScreen_EntryClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i4 = i3 + 272 | 0;
 i5 = i3 + 264 | 0;
 _ListScreen_UNSAFE_GetCur(i5, i1, i2);
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 260;
 _String_Format1(i4, 43724, i5);
 i2 = _Map_LoadFrom(i4) | 0;
 if ((i2 | 0) == (HEAP32[5931] | 0)) {
  _Chat_AddRaw(43732);
  _ListScreen_Reload(i1);
 }
 STACKTOP = i3;
 return;
}

function _ChatScreen_OpenInput(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 HEAP8[1837224] = 1;
 HEAP8[1837188] = 1;
 _Gui_UpdateInputGrab();
 _String_Copy(1837572, i1);
 _OpenKeyboardArgs_Init(i3, i1);
 HEAP32[i3 + 12 >> 2] = 48263;
 HEAP8[i3 + 17 >> 0] = 1;
 HEAP32[i3 + 8 >> 2] = 30;
 _OnscreenKeyboard_Open(i3);
 _Widget_SetDisabled(1837508, HEAPU8[i3 + 16 >> 0] | 0);
 _InputWidget_UpdateText(1837508);
 STACKTOP = i2;
 return;
}

function _TabListOverlay_GetColumnWidth(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = i1 << 4;
 i2 = HEAP32[i4 + 56 >> 2] | 0;
 i3 = i1 + 16 | 0;
 i3 = (i2 | 0) < (i3 | 0) ? i2 : i3;
 if ((i1 | 0) < (i3 | 0)) {
  i2 = 0;
  do {
   i5 = HEAPU16[i4 + 1176 + (i1 * 28 | 0) + 8 >> 1] | 0;
   i2 = (i2 | 0) > (i5 | 0) ? i2 : i5;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i1 = i2 + 5 | 0;
 } else i1 = 5;
 return i1 + (HEAP32[i4 + 60 >> 2] | 0) | 0;
}

function _LightHint(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 _ClassicLighting_LightHint(i1, i2, i4);
 i5 = i1 + 9 | 0;
 i5 = 4 ? i5 >> 4 : i5;
 i3 = i2 + 9 | 0;
 i3 = 4 ? i3 >> 4 : i3;
 i2 = i4 + 9 | 0;
 i2 = 4 ? i2 >> 4 : i2;
 i1 = (Math_imul(HEAP32[244752] | 0, i3) | 0) + i2 | 0;
 i1 = (Math_imul(i1, HEAP32[244750] | 0) | 0) + i5 | 0;
 if ((HEAPU8[(HEAP32[422181] | 0) + i1 >> 0] | 0) < 2) _CalculateChunkLightingAll(i1, i5, i3, i2);
 return;
}

function _Drawer2D_ReducePadding_Tex(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, i6 = 0;
 if (HEAP8[1667320] | 0) {
  i4 = i3 + 10 | 0;
  i6 = HEAPU16[i4 >> 1] | 0;
  i2 = (i6 - i1 | 0) / (i2 | 0) | 0;
  d5 = +(i2 | 0) / +(_Math_NextPowOf2(i6) | 0);
  i1 = i3 + 16 | 0;
  HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] + d5;
  i3 = i3 + 24 | 0;
  HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] - d5;
  HEAP16[i4 >> 1] = (HEAPU16[i4 >> 1] | 0) - (i2 << 1);
 }
 return;
}

function _Nbt_WriteString(i1, i2, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0;
 HEAP8[i1 >> 0] = 8;
 i4 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 i1 = i4 + 2 | 0;
 i3 = i5 + 4 | 0;
 if (HEAP16[i3 >> 1] | 0) {
  i2 = 0;
  do {
   i1 = i1 + (_Convert_CP437ToUtf8(HEAP8[(HEAP32[i5 >> 2] | 0) + i2 >> 0] | 0, i1) | 0) | 0;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < (HEAPU16[i3 >> 1] | 0) >>> 0);
 }
 _Stream_SetU16_BE(i4, 65534 - i4 + i1 & 65535);
 return i1 | 0;
}

function _TextGroupWidget_Render2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i2 + 84 >> 2] | 0;
 i5 = i2 + 40 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i6 + (i4 * 28 | 0) >> 2] | 0;
   if (i3) {
    _Gfx_BindTexture(i3);
    _Gfx_DrawVb_IndexedTris_Range(4, i1, 4);
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
   i1 = i1 + 4 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 return i1 | 0;
}

function _OptionsGroupScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _Screen_UpdateVb(i1);
 _Gui_MakeTitleFont(i2);
 _Gui_MakeBodyFont(i1 + 36 | 0);
 _Menu_SetButtons(i1 + 48 | 0, i2, 6576, 8);
 _ButtonWidget_SetConst(i1 + 792 | 0, 50883, i2);
 if ((HEAP32[i1 + 24 >> 2] | 0) > -1) _OptionsGroupScreen_UpdateDesc(i1);
 _OptionsGroupScreen_CheckHacksAllowed(i1);
 _Font_Free(i2);
 STACKTOP = i3;
 return;
}

function _ExpandRGB(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 switch (i3 << 24 >> 24) {
 case 1:
  {
   i2 = i2 * 255 | 0;
   i3 = i4 * 255 | 0;
   i1 = i1 * 255 | 0;
   break;
  }
 case 2:
  {
   i2 = i2 * 85 | 0;
   i3 = i4 * 85 | 0;
   i1 = i1 * 85 | 0;
   break;
  }
 case 4:
  {
   i2 = i2 * 17 | 0;
   i3 = i4 * 17 | 0;
   i1 = i1 * 17 | 0;
   break;
  }
 default:
  i3 = i4;
 }
 return i3 << 8 & 65280 | i1 & 255 | i2 << 16 & 16711680 | 0;
}

function _SelOutlineRenderer_Render(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!(HEAP8[1689080] | 0)) {
  if (!(HEAP32[460374] | 0)) {
   i3 = _Gfx_CreateDynamicVb(0, 96) | 0;
   HEAP32[460374] = i3;
  }
  _Gfx_SetAlphaBlending(1);
  _Gfx_SetDepthWrite(0);
  _Gfx_SetVertexFormat(0);
  if (!(i1 << 24 >> 24)) _Gfx_BindDynamicVb(HEAP32[460374] | 0); else _BuildMesh(i2);
  _Gfx_DrawVb_IndexedTris(96);
  _Gfx_SetDepthWrite(1);
  _Gfx_SetAlphaBlending(0);
 }
 return;
}

function _ClassicGenScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Screen_UpdateVb(i1);
 _Gui_MakeTitleFont(i3);
 _TextWidget_SetConst(i1 + 372 | 0, 43885, i3);
 _ButtonWidget_SetConst(i1 + 36 | 0, 45443, i3);
 _ButtonWidget_SetConst(i1 + 120 | 0, 45449, i3);
 _ButtonWidget_SetConst(i1 + 204 | 0, 45456, i3);
 _ButtonWidget_SetConst(i1 + 288 | 0, 48180, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _CPE_SetMapEnvUrl(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i3 = i4 + 144 | 0;
 i5 = i4 + 136 | 0;
 i2 = i4 + 128 | 0;
 _UNSAFE_GetString(i5, i1);
 HEAP32[i3 >> 2] = i4;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 _String_Copy(i3, i5);
 if ((HEAPU8[21325] | 0) > 1) {
  _UNSAFE_GetString(i2, i1 + 64 | 0);
  _String_AppendString(i3, i2);
 }
 _CPE_ApplyTexturePack(i3);
 STACKTOP = i4;
 return;
}
function _PlayerInputPad(i3, i2, i5, i6) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, d4 = 0.0;
 if (!(HEAP32[15292 + (i2 << 2) >> 2] | 0)) {
  d4 = +HEAPF32[353600 + (i3 * 220 | 0) + 80 + (i2 << 2) >> 2];
  d1 = +HEAPF32[353600 + (i3 * 220 | 0) + 88 + (i2 << 2) >> 2];
  if (d4 != 0.0 | d1 != 0.0) {
   d4 = +_Math_Atan2f(d4, d1);
   d1 = +_Math_CosF(d4);
   HEAPF32[i5 >> 2] = d1;
   d4 = +_Math_SinF(d4);
   HEAPF32[i6 >> 2] = d4;
  }
 }
 return;
}

function _PhysicsComp_GetBaseSpeed(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 _Entity_GetBounds(HEAP32[i1 + 8 >> 2] | 0, i5);
 HEAP8[i1 >> 0] = 0;
 d2 = +_PhysicsComp_LowestModifier(i1, i5, 0);
 i6 = i5 + 4 | 0;
 HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] + -.03125;
 d3 = +_PhysicsComp_LowestModifier(i1, i5, 1);
 i1 = d2 == 1.0e9;
 STACKTOP = i4;
 return +(i1 & d3 == 1.0e9 ? 1.0 : i1 ? d3 : d2);
}

function _EditHotkeyScreen_UpdateModifiers(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i3 + 64 | 0;
 HEAP32[i2 >> 2] = i3;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 64;
 if ((HEAP32[i1 + 24 >> 2] | 0) == 1) _String_AppendConst(i2, 44111); else {
  _String_AppendConst(i2, 44136);
  _EditHotkeyScreen_MakeFlags(HEAPU8[i1 + 41 >> 0] | 0, i2);
 }
 _ButtonWidget_Set(i1 + 484 | 0, i2, i1 + 76 | 0);
 STACKTOP = i3;
 return;
}

function _Animations_Tick(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[247113] | 0;
 do if (i1 | 0) {
  if (!(HEAP32[247110] | 0)) {
   _Chat_AddRaw(24348);
   _Chat_AddRaw(24401);
   HEAP32[247113] = 0;
   break;
  }
  if (!(HEAP8[1868726] | 0)) {
   _Animations_Validate();
   i1 = HEAP32[247113] | 0;
  }
  if ((i1 | 0) > 0) {
   i1 = 0;
   do {
    _Animations_Apply(53504 + (i1 << 4) | 0);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[247113] | 0));
  }
 } while (0);
 return;
}

function _ChatScreen_ContextRecreated(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 _ChatScreen_ChatUpdateFont(i2) | 0;
 _ChatScreen_Redraw(i2);
 _Screen_UpdateVb(i2);
 if (HEAP8[1689553] | 0) {
  _Gui_MakeTitleFont(i1);
  _ButtonWidget_SetConst(i2 + 2728 | 0, 48170, i1);
  _ButtonWidget_SetConst(i2 + 2560 | 0, 48175, i1);
  _ButtonWidget_SetConst(i2 + 2644 | 0, 48180, i1);
  _Font_Free(i1);
 }
 STACKTOP = i3;
 return;
}

function _AABB_Intersects(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(+HEAPF32[i1 + 12 >> 2] >= +HEAPF32[i2 >> 2])) i1 = 0; else if (!(+HEAPF32[i1 >> 2] <= +HEAPF32[i2 + 12 >> 2])) i1 = 0; else if (!(+HEAPF32[i1 + 16 >> 2] >= +HEAPF32[i2 + 4 >> 2])) i1 = 0; else if (!(+HEAPF32[i1 + 4 >> 2] <= +HEAPF32[i2 + 16 >> 2])) i1 = 0; else if (!(+HEAPF32[i1 + 20 >> 2] >= +HEAPF32[i2 + 8 >> 2])) i1 = 0; else i1 = +HEAPF32[i1 + 8 >> 2] <= +HEAPF32[i2 + 20 >> 2] & 1;
 return i1 | 0;
}

function _SpecialInputTab_Init(i4, i5, i3, i1, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i7 = i5;
 i5 = HEAP32[i7 + 4 >> 2] | 0;
 i6 = i4 + 12 | 0;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 4 >> 2] = i5;
 HEAP32[i4 + 8 >> 2] = 0;
 i6 = i2;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i5 = i4 + 20 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i1;
 return;
}

function _Picking_GetInside(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if (!((_World_ContainsXZ_1764(i1, i2) | 0) << 24 >> 24)) {
  i1 = (HEAP32[466929] | 0) + (HEAP32[466928] | 0) | 0;
  i4 = 6;
 } else if ((HEAP32[244734] | 0) > (i3 | 0)) if ((i3 | 0) > -1) i1 = _World_GetBlock_1769(i1, i3, i2) | 0; else {
  i1 = 0;
  i4 = 6;
 } else i1 = 0;
 if ((i4 | 0) == 6) i1 = (HEAP16[933855] | 0) == 0 ? 0 : (i1 | 0) > (i3 | 0) ? 7 : 0;
 return i1 | 0;
}

function _OnAxisUpdate_864(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[422372] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i4 = 0;
  do {
   i2 = HEAP32[352416 + (i4 << 2) >> 2] | 0;
   i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] | 0;
   if (i3) {
    HEAP8[i2 + 7 >> 0] = 1;
    if (FUNCTION_TABLE_iii[i3 & 127](i2, i5) | 0) break L1;
    i1 = HEAP32[422372] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i1 | 0));
 } while (0);
 return;
}
function _FreeState() {
 var i1 = 0;
 _ClassicLighting_FreeState();
 if (HEAP32[422181] | 0) {
  _FreePalettes();
  if ((HEAP32[422190] | 0) > 0) {
   i1 = 0;
   do {
    _Mem_Free(HEAP32[(HEAP32[422189] | 0) + (i1 << 2) >> 2] | 0);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[422190] | 0));
  }
  _Mem_Free(HEAP32[422181] | 0);
  _Mem_Free(HEAP32[422189] | 0);
  HEAP32[422181] = 0;
  HEAP32[422189] = 0;
  _Queue_Clear(1688728);
  _Queue_Clear(1688764);
 }
 return;
}

function _ChatInputWidget_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((i2 | 0) == 95) {
  _ChatInputWidget_TabKey(i3);
  i1 = 1;
 } else {
  if ((HEAP32[i1 + 16 >> 2] | 0) == (i2 | 0)) {
   _ChatInputWidget_UpKey(i3);
   i1 = 1;
   break;
  }
  if ((HEAP32[i1 + 20 >> 2] | 0) == (i2 | 0)) {
   _ChatInputWidget_DownKey(i3);
   i1 = 1;
   break;
  } else {
   i1 = _InputWidget_KeyDown(i3, i2, i1) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _Atlas1D_TexRec(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0;
 i7 = i3 & 65535;
 i3 = HEAP32[460409] & i7;
 i8 = HEAP32[460410] | 0;
 HEAP32[i2 >> 2] = i8 ? i7 >>> i8 : i7;
 d5 = +HEAPF32[460411];
 d6 = d5 * +(i3 | 0);
 HEAPF32[i1 >> 2] = 0.0;
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = +(i4 + -1 | 0) + .9993749856948853;
 HEAPF32[i1 + 12 >> 2] = d6 + d5 * .9993749856948853;
 return;
}

function _NetInterpComp_AddAngles(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = i4 + 96 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == 10) {
  _NetInterpComp_RemoveOldestAngles(i4);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i2 >> 2] = i1 + 1;
 i4 = i4 + 220 + (i1 << 4) | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 return;
}

function _Nbt_Read(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 44816 | 0;
 i3 = i5 + 44744 | 0;
 i4 = i5 + 44800 | 0;
 _Inflate_MakeStream2(i3, i5, i1);
 i1 = _Map_SkipGZipHeader(i1) | 0;
 if (!i1) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 127](i3, i4) | 0;
  if (!i1) if ((HEAP8[i4 >> 0] | 0) == 10) i1 = _Nbt_ReadTag(10, 1, i3, 0, i2, 0) | 0; else i1 = -857812911;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _SheepModel_DrawBody(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1716048, 1);
 _Model_DrawPart(1716064);
 i2 = i1 + 164 | 0;
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716080, 0);
 i1 = i1 + 172 | 0;
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716096, 0);
 _Model_DrawRotate(+HEAPF32[i1 >> 2], 0.0, 0.0, 1716112, 0);
 _Model_DrawRotate(+HEAPF32[i2 >> 2], 0.0, 0.0, 1716128, 0);
 return;
}

function _DefaultSet_MapOldCollide(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 L1 : do if (i2 << 16 >> 16 == 51 & i1 << 24 >> 24 == 0) i1 = 7; else if (i2 << 16 >> 16 == 60 & i1 << 24 >> 24 == 2) i1 = 3; else switch (i2 << 16 >> 16) {
 case 9:
 case 8:
  {
   if (i1 << 24 >> 24 == 1) {
    i1 = 5;
    break L1;
   }
   break;
  }
 case 11:
 case 10:
  {
   if (i1 << 24 >> 24 == 1) {
    i1 = 6;
    break L1;
   }
   break;
  }
 default:
  {}
 } while (0);
 return i1 | 0;
}

function _OnMouseButton(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = (i2 | 0) == 5;
 switch (HEAP16[i3 + 40 >> 1] | 0) {
 case 0:
  {
   _Input_Set(119, i1 & 1);
   break;
  }
 case 1:
  {
   _Input_Set(121, i1 & 1);
   break;
  }
 case 2:
  {
   _Input_Set(120, i1 & 1);
   break;
  }
 case 3:
  {
   _Input_Set(117, i1 & 1);
   break;
  }
 case 4:
  {
   _Input_Set(118, i1 & 1);
   break;
  }
 default:
  {}
 }
 _DeferredEnableRawMouse();
 return 1;
}

function _Matrix_LookRot(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i6 = i4 + 128 | 0;
 i7 = i4 + 64 | 0;
 i5 = i4;
 _Matrix_RotateX(i6, +HEAPF32[i3 + 4 >> 2]);
 _Matrix_RotateY(i7, +HEAPF32[i3 >> 2]);
 _Matrix_Translate(i5, -+HEAPF32[i1 >> 2], -+HEAPF32[i1 + 4 >> 2], -+HEAPF32[i1 + 8 >> 2]);
 _Matrix_Mul(i2, i7, i6);
 _Matrix_Mul(i2, i5, i2);
 STACKTOP = i4;
 return;
}

function _TabListOverlay_ContextRecreated(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 136 | 0;
 _Font_Make(i1, (HEAP8[1667320] | 0) == 0 ? 11 : 16, 4);
 HEAP32[i2 + 56 >> 2] = 0;
 _TextWidget_SetConst(i2 + 64 | 0, 48147, i1);
 _Font_SetPadding(i1, 1);
 _Screen_UpdateVb(i2);
 i1 = 0;
 do {
  if (HEAP16[1669392 + (i1 << 1) >> 1] | 0) _TabListOverlay_AddName(i2, i1 & 255, -1);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 _TabListOverlay_SortAndLayout(i2);
 return;
}

function _Options_GetInt(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7;
 if ((_Options_UNSAFE_Get(i2, i5) | 0) << 24 >> 24) if ((_Convert_ParseInt(i5, i6) | 0) << 24 >> 24) {
  i1 = HEAP32[i6 >> 2] | 0;
  i1 = (i1 | 0) < (i4 | 0) ? i4 : i1;
  i1 = (i1 | 0) > (i3 | 0) ? i3 : i1;
  HEAP32[i6 >> 2] = i1;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _LoadFallbackAtlas() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 12 | 0;
 i4 = i5;
 HEAP32[i4 + 4 >> 2] = 16;
 HEAP32[i4 + 8 >> 2] = 8;
 HEAP32[i4 >> 2] = 8736;
 i1 = HEAP32[422305] | 0;
 i2 = HEAP32[422306] | 0;
 if (!(i2 | i1)) _Atlas_TryChange(i4) | 0; else {
  _Bitmap_Allocate(i3, i1 << 4, i2 << 3);
  _Bitmap_Scale(i3, i4, 0, 0, 16, 8);
  _Atlas_TryChange(i3) | 0;
 }
 STACKTOP = i5;
 return;
}

function _GetGLApiInfo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = 0;
 _glGetIntegerv(3414, i3 | 0);
 _String_Format1(i1, 34957, _glGetString(7936) | 0);
 _String_Format1(i1, 34969, _glGetString(7937) | 0);
 _String_Format1(i1, 34983, _glGetString(7938) | 0);
 _AppendVRAMStats(i1);
 _PrintMaxTextureInfo(i1);
 _String_Format1(i1, 34999, i3);
 _GLContext_GetApiInfo(i1);
 STACKTOP = i2;
 return;
}

function _ChatScreen_Render(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = i3 + 4 | 0;
 if (!(HEAP8[1868760] | 0)) i4 = 4; else if (HEAP8[i1 >> 0] | 0) {
  i5 = i3 + 324 | 0;
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i5 >> 2] >> 2] & 63](i5, d2);
  if (!(HEAP8[1868760] | 0)) i4 = 4;
 }
 if ((i4 | 0) == 4) {
  if (!((HEAP8[i1 >> 0] | 0) == 0 | (HEAP8[1689495] | 0) != 0)) _ChatScreen_DrawChatBackground(i3);
  _ChatScreen_DrawChat(i3, d2);
 }
 return;
}

function _AudioBackend_LoadSounds() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 990496;
 i3 = 0;
 do {
  i2 = HEAP32[10816 + (i3 << 3) >> 2] | 0;
  if ((i3 | 0) == 28) i1 = 988456; else {
   i5 = HEAP32[10816 + (i3 << 3) + 4 >> 2] | 0;
   i6 = i1 + (i2 * 204 | 0) | 0;
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i4 + 1;
   HEAP32[i1 + (i2 * 204 | 0) + 4 + (i4 * 20 | 0) + 8 >> 2] = i5;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 60);
 return;
}

function _TableWidget_MoveCursorToSelected(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5 + 4 | 0;
 i4 = i5;
 i1 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i1 | 0) != -1) {
  _TableWidget_GetCoords(i2, i1, i3, i4) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + ((HEAP32[i2 + 64 >> 2] | 0) / 2 | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[i2 + 68 >> 2] | 0) / 2 | 0);
 }
 STACKTOP = i5;
 return;
}

function _Game_WarnFunc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i2 = i4 + 8 | 0;
 i6 = i1;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i3;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = i5;
 i1 = i3 + 4 | 0;
 if (!(0 == 0 & (i5 & 65535 | 0) == 0)) do {
  _String_UNSAFE_SplitBy(i3, 10, i2);
  _Chat_Add1(32746, i2);
 } while ((HEAP16[i1 >> 1] | 0) != 0);
 STACKTOP = i4;
 return;
}

function _Hotkeys_AddNewHotkey(i5, i3, i4, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[422522] | 0;
 if ((i1 | 0) == 256) _Chat_AddRaw(37617); else {
  HEAP32[355216 + (i1 << 3) >> 2] = i1;
  HEAP8[355216 + (i1 << 3) + 4 >> 0] = i5;
  HEAP8[355216 + (i1 << 3) + 5 >> 0] = i3;
  HEAP8[355216 + (i1 << 3) + 6 >> 0] = i2;
  _StringsBuffer_Add(1690080, i4);
  _Hotkeys_QuickSort(0, (HEAP32[422522] | 0) + -1 | 0);
 }
 return;
}

function _StringsBuffer_UNSAFE_Get(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i3 | 0) < 0) i4 = 3; else if ((HEAP32[i2 + 8 >> 2] | 0) <= (i3 | 0)) i4 = 3;
 if ((i4 | 0) == 3) _Process_Abort2(0, 49299);
 i3 = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + (i3 << 2) >> 2] | 0;
 i5 = HEAP32[i2 + 5144 >> 2] | 0;
 i4 = HEAP32[i2 + 5148 >> 2] & i3;
 _String_Init_2044(i1, (HEAP32[i2 >> 2] | 0) + (i5 ? i3 >>> i5 : i3) | 0, i4, i4);
 return;
}

function _Screen_ContextLost(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 _Gfx_DeleteDynamicVb(i1 + 12 | 0);
 i4 = i1 + 20 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i3 = 0;
  do {
   i2 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
   if (i2) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
    i1 = HEAP32[i4 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 return;
}

function _InputWidget_OtherKey(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 switch (i1 | 0) {
 case 1002:
  {
   if (((FUNCTION_TABLE_i[HEAP32[i2 + 44 >> 2] & 63]() | 0) << 6 | 0) > (HEAPU16[i2 + 68 >> 1] | 0)) {
    _InputWidget_CopyFromClipboard(i2);
    i1 = 1;
   } else i1 = 0;
   break;
  }
 case 1001:
  {
   if (!(HEAP16[i2 + 68 >> 1] | 0)) i1 = 1; else {
    _Clipboard_SetText(i2 + 64 | 0);
    i1 = 1;
   }
   break;
  }
 default:
  i1 = 0;
 }
 return i1 | 0;
}

function _HacksComp_Init(i1) {
 i1 = i1 | 0;
 _Mem_Set(i1, 0, 180) | 0;
 _HacksComp_SetAll(i1, 1);
 HEAPF32[i1 + 4 >> 2] = 10.0;
 HEAP8[i1 + 10 >> 0] = 1;
 HEAP8[i1 >> 0] = 1;
 HEAP8[i1 + 18 >> 0] = 1;
 HEAP8[i1 + 19 >> 0] = 1;
 HEAPF32[i1 + 24 >> 2] = 1.0;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 HEAP32[i1 + 28 >> 2] = 1;
 HEAP8[i1 + 32 >> 0] = 1;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 44 >> 2] = i1 + 52;
 HEAP16[i1 + 48 >> 1] = 0;
 HEAP16[i1 + 50 >> 1] = 128;
 return;
}

function _ChibiModel_ScaleLimbs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ChibiModel_ScalePart(i1, i2);
 _ChibiModel_ScalePart(i1 + 16 | 0, i2 + 16 | 0);
 _ChibiModel_ScalePart(i1 + 32 | 0, i2 + 32 | 0);
 _ChibiModel_ScalePart(i1 + 48 | 0, i2 + 48 | 0);
 _ChibiModel_ScalePart(i1 + 64 | 0, i2 + 64 | 0);
 _ChibiModel_ScalePart(i1 + 80 | 0, i2 + 80 | 0);
 _ChibiModel_ScalePart(i1 + 96 | 0, i2 + 96 | 0);
 _ChibiModel_ScalePart(i1 + 112 | 0, i2 + 112 | 0);
 return;
}

function _TouchCtrls_Scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 HEAP32[466382] = 22864;
 HEAPF32[466383] = .25;
 HEAPF32[466384] = 5.0;
 HEAPF32[466385] = 1.0;
 _String_AppendFloat(i3, +HEAPF32[422386], 1);
 _MenuInputOverlay_Show(1865528, i3, 205, 1);
 HEAP8[i1 + 392 >> 0] = 0;
 STACKTOP = i2;
 return;
}

function _OctaveNoise_Calc(i6, d7, d8) {
 i6 = i6 | 0;
 d7 = +d7;
 d8 = +d8;
 var d1 = 0.0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0;
 i2 = HEAP32[i6 + 4096 >> 2] | 0;
 if ((i2 | 0) > 0) {
  d3 = 1.0;
  d4 = 1.0;
  i5 = 0;
  d1 = 0.0;
  while (1) {
   d1 = d1 + d3 * +_ImprovedNoise_Calc(i6 + (i5 << 9) | 0, d4 * d7, d4 * d8);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i2 | 0)) break; else {
    d3 = d3 * 2.0;
    d4 = d4 * .5;
   }
  }
 } else d1 = 0.0;
 return +d1;
}

function _TableWidget_RecreateTitle(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (!(i1 << 24 >> 24)) {
  if ((HEAP32[i3 + 60 >> 2] | 0) != (HEAP32[i3 + 56 >> 2] | 0)) i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) if (HEAP32[i3 + 40 >> 2] | 0) {
  i1 = HEAP32[i3 + 60 >> 2] | 0;
  HEAP32[i3 + 56 >> 2] = i1;
  if ((i1 | 0) == -1) i1 = 0; else i1 = HEAP16[i3 + 92 + (i1 << 1) >> 1] | 0;
  FUNCTION_TABLE_vi[HEAP32[i3 + 1748 >> 2] & 511](i1);
 }
 return;
}

function _TouchCtrls_Sensitivity(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 HEAP32[466386] = 22816;
 HEAP32[466387] = 1;
 HEAP32[466388] = 200;
 HEAP32[466389] = 30;
 _String_AppendInt(i3, HEAP32[414138] | 0);
 _MenuInputOverlay_Show(1865544, i3, 204, 1);
 HEAP8[i1 + 308 >> 0] = 0;
 STACKTOP = i2;
 return;
}

function _Http_LogError(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 i3 = i4 + 512 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 512;
 _Logger_FormatWarn(i3, HEAP32[i2 + 152 >> 2] | 0, i1, 95);
 i1 = HEAP32[i2 + 172 >> 2] | 0;
 if (i1 | 0) if (HEAP8[i1 >> 0] | 0) _String_Format1(i3, 53063, i1);
 FUNCTION_TABLE_vi[HEAP32[3881] & 511](i3);
 STACKTOP = i4;
 return;
}

function _PerspectiveCamera_GetPickedBlock(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2;
 i3 = HEAP32[417347] | 0;
 _Vec3_GetDirVector(i4, +HEAPF32[i3 + 20 >> 2] * .01745329238474369, +HEAPF32[i3 + 16 >> 2] * .01745329238474369 + +HEAPF32[414166]);
 _Entity_GetEyePosition(i5, i3);
 _Picking_CalcPickedBlock(i5, i4, +HEAPF32[i3 + 456 >> 2], i1);
 STACKTOP = i2;
 return;
}

function _AppendErrorDesc(i4, i5, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i6 + 128 | 0;
 HEAP32[i3 >> 2] = i6;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 i1 = _GetCCErrorDesc(i5) | 0;
 if (!i1) {
  if ((FUNCTION_TABLE_iii[i2 & 127](i5, i3) | 0) << 24 >> 24) _String_Format1(i4, 38135, i3);
 } else _String_Format1(i4, 38114, i1);
 STACKTOP = i6;
 return;
}

function _String_UNSAFE_SubstringAt(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i2 = i5 + 4 | 0;
 if ((i4 | 0) < 0) i6 = 3; else {
  i1 = HEAPU16[i2 >> 1] | 0;
  if ((i1 | 0) < (i4 | 0)) i6 = 3;
 }
 if ((i6 | 0) == 3) {
  _Process_Abort2(0, 49078);
  i1 = HEAPU16[i2 >> 1] | 0;
 }
 i6 = i1 - i4 & 65535;
 HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
 HEAP16[i3 + 4 >> 1] = i6;
 HEAP16[i3 + 6 >> 1] = i6;
 return;
}

function _String_AppendFloat(i4, d1, i3) {
 i4 = i4 | 0;
 d1 = +d1;
 i3 = i3 | 0;
 var i2 = 0;
 if (d1 < 0.0) {
  _String_Append(i4, 45);
  d1 = -d1;
 }
 i2 = ~~d1;
 _String_AppendUInt32(i4, i2);
 d1 = d1 - +(i2 | 0);
 if (!(d1 == 0.0)) {
  _String_Append(i4, 46);
  if ((i3 | 0) > 0) {
   i2 = 0;
   do {
    d1 = d1 * 10.0;
    _String_Append(i4, ((~~d1 | 0) % 10 | 0) + 48 & 255);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i3 | 0));
  }
 }
 return;
}

function _OptionsGroupScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Event_Register(1679104, i1, 328);
 HEAP32[i1 + 16 >> 2] = 364592;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 10;
 HEAP32[i1 + 24 >> 2] = -1;
 HEAP32[i1 + 32 >> 2] = 4;
 _Menu_AddButtons(i1, i1 + 48 | 0, 300, 6576, 8);
 _TextWidget_Add(i1, i1 + 720 | 0);
 _AddPrimaryButton(i1, i1 + 792 | 0, 147);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _CopyPixels(i2, i5, i3, i7, i1, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i4 = 0;
 if ((i7 | 0) == (i5 | 0)) _Mem_Copy(i2, i3, Math_imul(i1 << 2, i6) | 0) | 0; else if ((i6 | 0) > 0) {
  i4 = i1 << 2;
  i1 = i3;
  i3 = 0;
  while (1) {
   _Mem_Copy(i2, i1, i4) | 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i6 | 0)) break; else {
    i2 = i2 + i5 | 0;
    i1 = i1 + i7 | 0;
   }
  }
 }
 return;
}

function _InputHandler_PickBlock() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[422211] | 0;
 i2 = HEAP32[422212] | 0;
 i3 = HEAP32[422213] | 0;
 do if ((_World_Contains_1085(i1, i2, i3) | 0) << 24 >> 24) {
  i1 = _World_GetBlock_1086(i1, i2, i3) | 0;
  i2 = i1 & 65535;
  if ((HEAP8[1006372 + i2 >> 0] | 0) != 4) {
   if (!(HEAP8[1057060 + i2 >> 0] | 0)) if (!(HEAP8[1057828 + i2 >> 0] | 0)) break;
   _Inventory_PickBlock(i1);
  }
 } while (0);
 return;
}

function _ClassicGenScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364672;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 5;
 _TextWidget_Add(i1, i1 + 372 | 0);
 _ButtonWidget_Add(i1, i1 + 36 | 0, 400, 172);
 _ButtonWidget_Add(i1, i1 + 120 | 0, 400, 173);
 _ButtonWidget_Add(i1, i1 + 204 | 0, 400, 174);
 _AddPrimaryButton(i1, i1 + 288 | 0, 147);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _ThirdPersonCamera_GetOrientation(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0;
 i4 = HEAP32[417347] | 0;
 d3 = +HEAPF32[i4 + 20 >> 2] * .01745329238474369;
 d2 = +HEAPF32[i4 + 16 >> 2] * .01745329238474369;
 i4 = (HEAP8[1868733] | 0) == 0;
 d2 = (i4 ? d2 : -d2) + +HEAPF32[414168] * .01745329238474369;
 HEAPF32[i1 >> 2] = (i4 ? d3 : d3 + 3.1415927410125732) + +HEAPF32[414167] * .01745329238474369;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}

function _Queue_Enqueue(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = i3 + 16 | 0;
 if ((HEAP32[i1 >> 2] | 0) == (HEAP32[i3 + 8 >> 2] | 0)) _Queue_Resize(i3);
 i4 = i3 + 24 | 0;
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 _Mem_Copy((HEAP32[i3 >> 2] | 0) + (Math_imul(i5, HEAP32[i4 >> 2] | 0) | 0) | 0, i2, i5) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1 & HEAP32[i3 + 12 >> 2];
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function _HotbarWidget_Create(i1) {
 i1 = i1 | 0;
 _Widget_Reset(i1);
 HEAP32[i1 >> 2] = 23176;
 HEAP8[i1 + 22 >> 0] = 1;
 HEAP8[i1 + 23 >> 0] = 2;
 HEAPF32[i1 + 116 >> 2] = 1.0;
 HEAP32[i1 + 260 >> 2] = 0;
 i1 = i1 + 264 | 0;
 HEAP32[i1 >> 2] = -1;
 HEAP32[i1 + 4 >> 2] = -1;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAP32[i1 + 16 >> 2] = -1;
 HEAP32[i1 + 20 >> 2] = -1;
 HEAP32[i1 + 24 >> 2] = -1;
 HEAP32[i1 + 28 >> 2] = -1;
 return;
}

function _GeneratingScreen_EndGeneration() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i2;
 _World_SetNewMap(HEAP32[422257] | 0, HEAP32[244733] | 0, HEAP32[244734] | 0, HEAP32[244735] | 0);
 if (!(HEAP32[422257] | 0)) _Chat_AddRaw(48397); else {
  HEAP32[422257] = 0;
  HEAP32[244754] = HEAP32[422266];
  _LocalPlayer_CalcDefaultSpawn(HEAP32[417347] | 0, i1);
  _LocalPlayers_MoveToSpawn(i1);
 }
 STACKTOP = i2;
 return;
}

function _ChatOptionsScreen_InitWidgets(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_BeginButtons(i1);
 _MenuOptionsScreen_AddBool(i1, 41159, 28, 267, 0);
 _MenuOptionsScreen_AddNum(i1, 41177, .25, 4.0, 1.0, 268, 269, 0);
 _MenuOptionsScreen_AddInt(i1, 41188, 0, 30, HEAP32[422384] | 0, 29, 270, 0);
 _MenuOptionsScreen_AddBool(i1, 41199, 30, 271, 0);
 _MenuOptionsScreen_AddBool(i1, 41211, 31, 272, 0);
 _MenuOptionsScreen_EndButtons(i1, -1, 135);
 return;
}

function _Nbt_ReadString(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i4 = i6;
 i1 = _Stream_Read(i3, i4, 2) | 0;
 if (!i1) {
  i1 = _Stream_GetU16_BE(i4) | 0;
  i2 = i1 & 65535;
  if ((i1 & 65535) > 256) i1 = -857812910; else {
   i1 = _Stream_Read(i3, i4, i2) | 0;
   if (!i1) {
    _String_AppendUtf8(i5, i4, i2);
    i1 = 0;
   }
  }
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _MapRenderer_RefreshChunk(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 if ((i4 | i3 | i5 | 0) >= 0) {
  i1 = HEAP32[244750] | 0;
  if ((i1 | 0) > (i3 | 0)) {
   i2 = HEAP32[244751] | 0;
   if ((i2 | 0) > (i4 | 0) & (HEAP32[244752] | 0) > (i5 | 0)) {
    i5 = (Math_imul((Math_imul(i2, i5) | 0) + i4 | 0, i1) | 0) + i3 | 0;
    _ChunkInfo_Refresh((HEAP32[424252] | 0) + (i5 * 20 | 0) | 0);
   }
  }
 }
 return;
}

function _ShaderFailed(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 i1 = i4;
 i3 = i4 + 2048 | 0;
 if (!i2) _Process_Abort2(0, 34207);
 HEAP32[i3 >> 2] = 0;
 _glGetShaderiv(i2 | 0, 35716, i3 | 0);
 if ((HEAP32[i3 >> 2] | 0) > 1) {
  _glGetShaderInfoLog(i2 | 0, 2047, 0, i1 | 0);
  HEAP8[i1 + 2047 >> 0] = 0;
  _Window_ShowDialog(34231, i1);
 }
 _Process_Abort2(0, 34231);
 STACKTOP = i4;
 return;
}

function _Classic_SetBlock(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (_Stream_GetU16_BE(i1) | 0) & 65535;
 i3 = (_Stream_GetU16_BE(i1 + 2 | 0) | 0) & 65535;
 i4 = (_Stream_GetU16_BE(i1 + 4 | 0) | 0) & 65535;
 i1 = i1 + 6 | 0;
 if (!(HEAP8[21301] | 0)) i1 = HEAPU8[i1 >> 0] | 0; else i1 = ((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0;
 if ((_World_Contains_1831(i2, i3, i4) | 0) << 24 >> 24) _Game_UpdateBlock(i2, i3, i4, i1);
 return;
}

function _World_SetBlock(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i2 = (Math_imul(i2, HEAP32[244733] | 0) | 0) + i1 | 0;
 HEAP8[(HEAP32[244730] | 0) + i2 >> 0] = i4;
 i1 = HEAP32[244731] | 0;
 if ((HEAP32[244730] | 0) == (i1 | 0)) {
  if ((i4 & 65535) >= 256) _LazyInitUpper(i2, i4);
 } else HEAP8[i1 + i2 >> 0] = 8 ? (i4 & 65535) >>> 8 : i4 & 65535;
 return;
}

function _DefaultPngProcess(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Png_Decode(i2, i1) | 0;
 do if (!i1) if (!((_Font_SetBitmapAtlas(i2) | 0) << 24 >> 24)) {
  _Mem_Free(HEAP32[i2 >> 2] | 0);
  break;
 } else {
  _Event_RaiseVoid(1681704);
  break;
 } else {
  _Logger_SysWarn2(i1, 50210, i3);
  _Mem_Free(HEAP32[i2 >> 2] | 0);
 } while (0);
 STACKTOP = i4;
 return;
}

function _World_Reset() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[244730] | 0;
 i2 = HEAP32[244731] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  _Mem_Free(i2);
  i1 = HEAP32[244730] | 0;
 }
 HEAP32[244731] = 0;
 HEAP32[244744] = 255;
 _Mem_Free(i1);
 HEAP32[244730] = 0;
 HEAP32[244748] = 977312;
 HEAP16[489498] = 0;
 HEAP16[489499] = 64;
 _World_SetDimensions(0, 0, 0);
 HEAP8[978980] = 0;
 HEAPF64[122373] = -200.0;
 HEAP32[244754] = 0;
 _Env_Reset();
 return;
}

function _UpdateFogNormal(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 do if (d2 != 0.0) {
  _Gfx_SetFogMode(1);
  _Gfx_SetFogDensity(d2);
 } else if (!(HEAP32[466935] | 0)) {
  _Gfx_SetFogMode(0);
  _Gfx_SetFogEnd(+(HEAP32[3680] | 0));
  break;
 } else {
  _Gfx_SetFogMode(1);
  _Gfx_SetFogDensity(4.605170249938965 / (+(HEAP32[3680] | 0) * .9900000095367432));
  break;
 } while (0);
 _Gfx_SetFogCol(i1);
 _Game_SetViewDistance(HEAP32[3681] | 0);
 return;
}

function _CorpseModel_Draw(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 164 >> 2] = .02500000037252903;
 HEAPF32[i1 + 172 >> 2] = .02500000037252903;
 HEAPF32[i1 + 180 >> 2] = .02500000037252903;
 HEAPF32[i1 + 188 >> 2] = .02500000037252903;
 HEAPF32[i1 + 168 >> 2] = -.15000000596046448;
 HEAPF32[i1 + 176 >> 2] = .15000000596046448;
 HEAPF32[i1 + 184 >> 2] = -.20000000298023224;
 HEAPF32[i1 + 192 >> 2] = .20000000298023224;
 _HumanModel_Draw(i1);
 return;
}

function _TextAtlas_AddInt(i2, i1, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5;
 if ((i1 | 0) < 0) {
  _TextAtlas_Add(i2, 10, i4);
  i1 = 0 - i1 | 0;
 }
 i1 = _String_MakeUInt32(i1, i3) | 0;
 if ((i1 | 0) > 0) do {
  i6 = i1;
  i1 = i1 + -1 | 0;
  _TextAtlas_Add(i2, (HEAP8[i3 + i1 >> 0] | 0) + -48 | 0, i4);
 } while ((i6 | 0) > 1);
 STACKTOP = i5;
 return;
}

function _SpecialInputWidget_UpdateCols(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 _SpecialInputWidget_UpdateColString(i1);
 i4 = i1 + 236 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1 + 116 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 do if (!(HEAP32[i1 + 48 >> 2] | 0)) if (!(HEAP8[i1 + 20 >> 0] | 0)) {
  HEAP8[i1 + 52 >> 0] = 1;
  break;
 } else {
  _SpecialInputWidget_Redraw(i1);
  break;
 } while (0);
 return;
}

function _HandleHotkeyDown(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = _Hotkeys_FindPartial(i1) | 0;
 do if ((i1 | 0) != -1) {
  _StringsBuffer_UNSAFE_Get(i2, 1690080, HEAP32[355216 + (i1 << 3) >> 2] | 0);
  if (!(HEAP8[355216 + (i1 << 3) + 6 >> 0] & 1)) {
   _Chat_Send(i2, 0);
   break;
  }
  if (!(HEAP32[422387] | 0)) _ChatScreen_OpenInput(i2);
 } while (0);
 STACKTOP = i3;
 return;
}

function _HS_SetJump(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 i5 = HEAP32[417347] | 0;
 d4 = +_PhysicsComp_CalcJumpVelocity(+_Menu_Float(i1));
 HEAPF32[i5 + 740 >> 2] = d4;
 HEAPF32[i5 + 744 >> 2] = d4;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_AppendFloat(i3, d4, 8);
 _Options_Set(42520, i3);
 STACKTOP = i2;
 return;
}

function _ChibiModel_MakeParts() {
 _ChibiModel_ScalePart(1715440, 1714904);
 _ChibiModel_ScalePart(1715472, 1714936);
 _ChibiModel_ScaleLimbs(1715488, 1714952);
 _ChibiModel_ScaleLimbs(1715616, 1715080);
 _ChibiModel_ScaleLimbs(1715744, 1715208);
 HEAP32[(HEAP32[428691] | 0) + 36 >> 2] = HEAPU16[857444];
 _BoxDesc_BuildBox(1715424, 17644);
 HEAP32[(HEAP32[428691] | 0) + 36 >> 2] = HEAPU16[857460];
 _BoxDesc_BuildBox(1715456, 17688);
 return;
}

function _String_AppendPaddedInt(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5;
 if ((i1 | 0) > 0) _memset(i3 | 0, 48, i1 | 0) | 0;
 i2 = _String_MakeUInt32(i2, i3) | 0;
 i1 = (i2 | 0) < (i1 | 0) ? i1 : i2;
 if ((i1 | 0) > 0) do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  _String_Append(i4, HEAP8[i3 + i1 >> 0] | 0);
 } while ((i2 | 0) > 1);
 STACKTOP = i5;
 return;
}

function _ChickenModel_MakeLeg(i3, i4, i5, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i6 = 0;
 i6 = HEAP32[428691] | 0;
 _BoxDesc_YQuad2(i6, +(i5 | 0) * .0625, +(i4 | 0) * .0625, -.125, .0625, .015625, 32, 0, 35, 3);
 _BoxDesc_ZQuad2(i6, +(i1 | 0) * .0625, +(i2 | 0) * .0625, .015625, .3125, .0625, 36, 3, 37, 8);
 _ModelPart_Init(i3, (HEAP32[i6 + 36 >> 2] | 0) + -8 | 0, 8, 0.0, .3125, .0625);
 return;
}

function _CanDeleteTexture(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = HEAP32[i3 + 112 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i4 = 0;
  while (1) {
   i2 = HEAP32[1668360 + (i4 << 2) >> 2] | 0;
   if (!((i2 | 0) == 0 | (i2 | 0) == (i3 | 0))) if ((HEAP32[i2 + 112 >> 2] | 0) == (i1 | 0)) {
    i1 = 0;
    break L1;
   }
   i4 = i4 + 1 | 0;
   if (i4 >>> 0 >= 256) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function _TabListOverlay_ContextLost(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = i2 + 56 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i3 = i2 + 1176 | 0;
  i1 = 0;
  do {
   _Gfx_DeleteTexture(i3 + (i1 * 28 | 0) | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 i4 = i2 + 64 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 511](i4);
 _Font_Free(i2 + 136 | 0);
 _Screen_ContextLost(i2);
 return;
}

function _Png_Expand_GRAYSCALE_4(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) > 0) do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAPU8[i4 + (1 ? i1 >> 1 : i1) >> 0] | 0;
  i5 = i1 << 2 & 4 ^ 4;
  i6 = (i5 ? i6 >>> i5 : i6) & 15;
  i5 = i6 * 17 & 255;
  i5 = Math_imul(i6, 1114112) | 0 | i5 | i5 << 8 | -16777216;
  HEAP32[i3 + (i1 << 2) >> 2] = i5;
 } while ((i2 | 0) > 1);
 return;
}

function _LocalPlayer_TriggerHalfSpeed(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (!(HEAP32[422387] | 0)) {
  i2 = 146288 + (i1 * 796 | 0) + 499 | 0;
  if ((HEAP32[i3 >> 2] | 0) == 2) if (!(HEAP8[i2 >> 0] | 0)) i4 = 4; else i1 = 0; else i4 = 4;
  if ((i4 | 0) == 4) i1 = (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) != 0 & 1;
  HEAP8[i2 >> 0] = i1;
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Png_Expand_GRAYSCALE_2(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) > 0) do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAPU8[i4 + (2 ? i1 >> 2 : i1) >> 0] | 0;
  i5 = i1 << 1 & 6 ^ 6;
  i6 = (i5 ? i6 >>> i5 : i6) & 3;
  i5 = i6 * 85 & 255;
  i5 = Math_imul(i6, 5570560) | 0 | i5 | i5 << 8 | -16777216;
  HEAP32[i3 + (i1 << 2) >> 2] = i5;
 } while ((i2 | 0) > 1);
 return;
}

function _MakeCachePath(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i5 + 24 | 0;
 HEAP32[i2 >> 2] = i5;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 24;
 _HashUrl(i2, i4);
 if (!((_UseDedicatedCache(i3, i2) | 0) << 24 >> 24)) {
  HEAP16[i3 + 4 >> 1] = 0;
  _String_Format1(i3, 50237, i2);
 } else _String_Format1(i1, 50237, i2);
 STACKTOP = i5;
 return;
}

function _LocalPlayerInput_Remove(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[418836] | 0;
 if ((i1 | 0) == (i5 | 0)) HEAP32[418836] = HEAP32[i5 + 4 >> 2];
 if (i1 | 0) {
  i4 = i5 + 4 | 0;
  while (1) {
   i3 = i1 + 4 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if ((i2 | 0) == (i5 | 0)) {
    i2 = HEAP32[i4 >> 2] | 0;
    HEAP32[i3 >> 2] = i2;
   }
   if (!i2) break; else i1 = i2;
  }
  HEAP32[418837] = i1;
 }
 return;
}

function _IsOnlyChatActive() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[422372] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i2 = HEAP32[455417] | 0;
  i3 = 0;
  while (1) {
   i4 = HEAP32[352416 + (i3 << 2) >> 2] | 0;
   i3 = i3 + 1 | 0;
   if (!((HEAP8[i4 + 4 >> 0] | 0) == 0 | (i4 | 0) == (i2 | 0))) {
    i1 = 0;
    break L1;
   }
   if ((i3 | 0) >= (i1 | 0)) {
    i1 = 1;
    break;
   }
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _IVec3_Min(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 HEAP32[i3 >> 2] = (i4 | 0) < (i5 | 0) ? i4 : i5;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 + 4 >> 2] = (i5 | 0) < (i4 | 0) ? i5 : i4;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i3 + 8 >> 2] = (i1 | 0) < (i2 | 0) ? i1 : i2;
 return;
}

function _IVec3_Max(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 HEAP32[i3 >> 2] = (i4 | 0) > (i5 | 0) ? i4 : i5;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 + 4 >> 2] = (i5 | 0) > (i4 | 0) ? i5 : i4;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i3 + 8 >> 2] = (i1 | 0) > (i2 | 0) ? i1 : i2;
 return;
}

function _Gamepad_SetButton(i6, i2, i1) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = (i1 | 0) != 0;
 i5 = i4 & 1;
 i3 = i2 + -149 | 0;
 i2 = 353600 + (i6 * 220 | 0) + 96 + i3 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if ((i5 | 0) != (i1 & 255 | 0)) {
  if (i4 & i1 << 24 >> 24 == 0) HEAPF32[353600 + (i6 * 220 | 0) + 120 + (i3 << 2) >> 2] = 0.0;
  HEAP8[i2 >> 0] = i4 & 1;
  _Gamepad_Apply(i6, i3, 0, i5);
 }
 return;
}

function _Gamepad_Connect(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i1 = 0;
 while (1) {
  i2 = HEAP32[353600 + (i1 * 220 | 0) + 76 >> 2] | 0;
  if ((i2 | 0) == (i4 | 0)) break;
  if (!i2) {
   i5 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 5) {
   i5 = 6;
   break;
  }
 }
 if ((i5 | 0) == 4) _Gamepad_Add(i1, i4, i3); else if ((i5 | 0) == 6) {
  _Process_Abort2(0, 37587);
  i1 = 0;
 }
 return i1 | 0;
}

function _LocalPlayer_TriggerSpeed(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (!(HEAP32[422387] | 0)) {
  i2 = 146288 + (i1 * 796 | 0) + 498 | 0;
  if ((HEAP32[i3 >> 2] | 0) == 2) if (!(HEAP8[i2 >> 0] | 0)) i4 = 4; else i1 = 0; else i4 = 4;
  if ((i4 | 0) == 4) i1 = (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) != 0 & 1;
  HEAP8[i2 >> 0] = i1;
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Custom_RemoveAt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAP32[431723] | 0) + -1 | 0;
 if ((i5 | 0) > (i1 | 0)) do {
  i2 = 885408 + (i1 * 52 | 0) | 0;
  i1 = i1 + 1 | 0;
  i3 = 885408 + (i1 * 52 | 0) | 0;
  i4 = i2 + 52 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 } while ((i1 | 0) < (i5 | 0));
 HEAP32[431723] = i5;
 return;
}

function _Rain_RemoveAt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAP32[431721] | 0) + -1 | 0;
 if ((i5 | 0) > (i1 | 0)) do {
  i2 = 916608 + (i1 * 44 | 0) | 0;
  i1 = i1 + 1 | 0;
  i3 = 916608 + (i1 * 44 | 0) | 0;
  i4 = i2 + 44 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 } while ((i1 | 0) < (i5 | 0));
 HEAP32[431721] = i5;
 return;
}

function _HookInputBinds() {
 HEAP32[89350] = 55;
 HEAP32[89352] = 56;
 HEAP32[89341] = 57;
 HEAP32[89358] = 58;
 HEAP32[89360] = 59;
 HEAP32[89359] = 60;
 HEAP32[89410] = 116;
 HEAP32[89412] = 117;
 HEAP32[89411] = 118;
 if (!(HEAP8[1868754] | 0)) {
  HEAP32[89354] = 61;
  HEAP32[89363] = 62;
  HEAP32[89355] = 63;
  HEAP32[89361] = 64;
  HEAP32[89353] = 65;
  HEAP32[89364] = 66;
  HEAP32[89365] = 67;
  HEAP32[89366] = 68;
 }
 return;
}

function _HacksComp_ParseFlagFloat(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6 + 8 | 0;
 i5 = i6;
 _HacksComp_UNSAFE_FlagValue(i4, i2, i3);
 if ((HEAP16[i4 + 4 >> 1] | 0) != 0 & (HEAP8[1868754] | 0) == 0) {
  i4 = (_Convert_ParseFloat(i4, i5) | 0) << 24 >> 24 == 0;
  d1 = i4 ? 1.0 : +HEAPF32[i5 >> 2];
 } else d1 = 1.0;
 STACKTOP = i6;
 return +d1;
}

function _SysFont_Make(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP16[i3 + 4 >> 1] = i2;
 HEAP16[i3 + 6 >> 1] = i1;
 i2 = _Drawer2D_AdjHeight(i2) | 0;
 HEAP32[i3 + 8 >> 2] = i2;
 i2 = i4 + 4 | 0;
 i1 = _Mem_TryAlloc((HEAPU16[i2 >> 1] | 0) + 1 | 0, 1) | 0;
 HEAP32[i3 >> 2] = i1;
 if (!i1) i1 = -857812988; else {
  _String_CopyToRaw(i1, (HEAPU16[i2 >> 1] | 0) + 1 | 0, i4);
  i1 = 0;
 }
 return i1 | 0;
}

function _Gfx_Begin2D(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3;
 _Gfx_CalcOrthoMatrix(i4, +(i2 | 0), +(i1 | 0), -100.0, 1.0e3);
 _Gfx_LoadMatrix(0, i4);
 _Gfx_LoadMatrix(1, 22728);
 _Gfx_SetDepthTest(0);
 _Gfx_SetDepthWrite(0);
 _Gfx_SetAlphaBlending(1);
 i2 = _Gfx_GetFog() | 0;
 HEAP8[1868768] = i2;
 if (i2 << 24 >> 24) _Gfx_SetFog(0);
 STACKTOP = i3;
 return;
}

function _LoadingScreen_ShowCommon(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[460339] = 0;
 HEAPF32[460293] = 0.0;
 HEAP32[460335] = 1841360;
 HEAP16[920672] = 0;
 HEAP16[920673] = 64;
 _String_AppendString(1841340, i2);
 HEAP32[460337] = 1841424;
 HEAP16[920676] = 0;
 HEAP16[920677] = 64;
 _String_AppendString(1841348, i1);
 HEAP8[1841128] = 1;
 HEAP8[1841129] = 1;
 _Gui_Add(1841124, (HEAP8[1868754] | 0) == 0 ? 5 : 55);
 return;
}

function _TexIdsOverlay_BuildMesh(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = _Screen_LockVb(i1) | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = i1 + 156 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4, i3);
 _TexIdsOverlay_BuildTerrain(i1, i3);
 _TexIdsOverlay_BuildText(i1, i3);
 _Gfx_UnlockDynamicVb(HEAP32[i1 + 12 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _Options_GetFloat(i2, d4, d3, d1) {
 i2 = i2 | 0;
 d4 = +d4;
 d3 = +d3;
 d1 = +d1;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7;
 if ((_Options_UNSAFE_Get(i2, i5) | 0) << 24 >> 24) if ((_Convert_ParseFloat(i5, i6) | 0) << 24 >> 24) {
  d1 = +HEAPF32[i6 >> 2];
  d1 = d1 < d4 ? d4 : d1;
  d1 = d1 > d3 ? d3 : d1;
  HEAPF32[i6 >> 2] = d1;
 }
 STACKTOP = i7;
 return +d1;
}

function _FrustumCulling_Normalise(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, d6 = 0.0, d7 = 0.0;
 d7 = +HEAPF32[i1 >> 2];
 i5 = i1 + 4 | 0;
 d6 = +HEAPF32[i5 >> 2];
 i3 = i1 + 8 | 0;
 d4 = +HEAPF32[i3 >> 2];
 d2 = +Math_sqrt(+(d7 * d7 + d6 * d6 + d4 * d4));
 HEAPF32[i1 >> 2] = d7 / d2;
 HEAPF32[i5 >> 2] = d6 / d2;
 HEAPF32[i3 >> 2] = d4 / d2;
 i1 = i1 + 12 | 0;
 HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] / d2;
 return;
}

function _Terrain_RemoveAt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAP32[431722] | 0) + -1 | 0;
 if ((i5 | 0) > (i1 | 0)) do {
  i2 = 847008 + (i1 << 6) | 0;
  i1 = i1 + 1 | 0;
  i3 = 847008 + (i1 << 6) | 0;
  i4 = i2 + 64 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 } while ((i1 | 0) < (i5 | 0));
 HEAP32[431722] = i5;
 return;
}

function _String_AppendColorless(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 4 | 0;
 i1 = HEAP16[i4 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i2 = 0;
  do {
   i3 = HEAP8[(HEAP32[i5 >> 2] | 0) + i2 >> 0] | 0;
   if (i3 << 24 >> 24 == 38) i2 = i2 + 1 | 0; else {
    _String_Append(i6, i3);
    i1 = HEAP16[i4 >> 1] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 & 65535 | 0));
 }
 return;
}

function _NetInterpComp_AddPosition(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 92 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == 10) {
  _NetInterpComp_RemoveOldestPosition(i3);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i2 >> 2] = i1 + 1;
 i3 = i3 + 100 + (i1 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 return;
}

function _TexturePackScreen_EntryClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _ListScreen_UNSAFE_GetCur(i4, i1, i2);
 _TexturePack_SetDefault(i4);
 HEAP16[11196] = 0;
 i2 = _TexturePack_ExtractCurrent(1) | 0;
 _CPE_SendNotifyAction(5, 0);
 if ((i2 | 0) == (HEAP32[5931] | 0)) {
  _Chat_AddRaw(44233);
  _ListScreen_Reload(i1);
 }
 STACKTOP = i3;
 return;
}

function _TableWidget_PadAxis(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if ((HEAP32[i3 + 60 >> 2] | 0) == -1) i1 = 0; else {
  i1 = HEAP32[i2 + 16 >> 2] | 0;
  if (i1 | 0) _TableWidget_ScrollRelative(i3, (i1 | 0) > 0 ? 1 : -1);
  i1 = HEAP32[i2 + 20 >> 2] | 0;
  if (!i1) i1 = 1; else {
   i2 = HEAP32[i3 + 44 >> 2] | 0;
   _TableWidget_ScrollRelative(i3, (i1 | 0) > 0 ? i2 : 0 - i2 | 0);
   i1 = 1;
  }
 }
 return i1 | 0;
}

function _TexIdsOverlay_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 _Menu_RenderBounds();
 _Gfx_SetVertexFormat(1);
 _Gfx_BindDynamicVb(HEAP32[i2 + 12 >> 2] | 0);
 i3 = i2 + 156 | 0;
 i3 = _TexIdsOverlay_RenderTerrain(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3, 0) | 0) | 0;
 _Gfx_BindTexture(HEAP32[i2 + 52 >> 2] | 0);
 _Gfx_DrawVb_IndexedTris_Range(HEAP32[i2 + 48 >> 2] | 0, i3, 4);
 return;
}

function _ReadString(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = 63;
 L1 : while (1) {
  switch (HEAP8[i2 + i1 >> 0] | 0) {
  case 32:
  case 0:
   break;
  default:
   {
    i5 = 3;
    break L1;
   }
  }
  if (!i1) {
   i1 = 0;
   break;
  } else i1 = i1 + -1 | 0;
 }
 if ((i5 | 0) == 3) i1 = i1 + 1 | 0;
 _String_AppendAll(i4, i2, i1);
 HEAP32[i3 >> 2] = i2 + 64;
 return;
}

function _NostalgiaMenuScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Screen_UpdateVb(i1);
 _Gui_MakeTitleFont(i3);
 _TextWidget_SetConst(i1 + 288 | 0, 44743, i3);
 _ButtonWidget_SetConst(i1 + 36 | 0, 44761, i3);
 _ButtonWidget_SetConst(i1 + 120 | 0, 44772, i3);
 _ButtonWidget_SetConst(i1 + 204 | 0, 50883, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _TabListOverlay_Remove(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i2 = HEAP32[i5 + 56 >> 2] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i4 = i5 + 152 | 0;
  i1 = 0;
  while (1) {
   if ((HEAPU16[i4 + (i1 << 1) >> 1] | 0 | 0) == (i3 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L1;
  }
  _TabListOverlay_DeleteAt(i5, i1);
  _TabListOverlay_SortAndLayout(i5);
 } while (0);
 return;
}

function _Platform_Log4(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 i8 = i6 + 512 | 0;
 HEAP32[i8 >> 2] = i6;
 i7 = i8 + 4 | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i8 + 6 >> 1] = 512;
 _String_Format4(i8, i5, i1, i2, i3, i4);
 _Platform_Log(HEAP32[i8 >> 2] | 0, HEAPU16[i7 >> 1] | 0);
 STACKTOP = i6;
 return;
}

function _PackedCol_Unhex(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0;
 L1 : do if ((i1 | 0) > 0) {
  i3 = 0;
  while (1) {
   i5 = _PackedCol_DeHex(HEAP8[i4 + i3 >> 0] | 0) | 0;
   HEAP32[i2 + (i3 << 2) >> 2] = i5;
   i3 = i3 + 1 | 0;
   if ((i5 | 0) == -1) {
    i1 = 0;
    break L1;
   }
   if ((i3 | 0) >= (i1 | 0)) {
    i1 = 1;
    break;
   }
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _NbtTag_U8_Array(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 do if ((HEAP8[i2 + 4 >> 0] | 0) == 7) {
  i3 = HEAP32[i2 + 16 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   HEAP32[i2 + 220 >> 2] = -857812890;
   i1 = 0;
   break;
  }
  i1 = i2 + 20 | 0;
  if (i3 >>> 0 < 65) break; else {
   i1 = HEAP32[i1 >> 2] | 0;
   break;
  }
 } else {
  HEAP32[i2 + 220 >> 2] = -857812891;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _TabListOverlay_GroupCompare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3 + 8 | 0;
 i4 = i3;
 _StringsBuffer_UNSAFE_Get(i5, 1670160, (HEAPU16[1669392 + (i1 << 1) >> 1] | 0) + -1 | 0);
 _StringsBuffer_UNSAFE_Get(i4, 1670160, (HEAPU16[1669392 + (i2 << 1) >> 1] | 0) + -1 | 0);
 i2 = _String_Compare(i5, i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _ListScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Screen_UpdateVb(i1);
 i2 = i1 + 792 | 0;
 _Gui_MakeTitleFont(i2);
 _ListScreen_RedrawEntries(i1);
 _ButtonWidget_SetConst(i1 + 456 | 0, 50888, i2);
 _ButtonWidget_SetConst(i1 + 540 | 0, 50890, i2);
 _ButtonWidget_SetConst(i1 + 624 | 0, 50883, i2);
 _ListScreen_UpdatePage(i1);
 _ButtonWidget_SetConst(i1 + 708 | 0, HEAP32[i1 + 820 >> 2] | 0, i2);
 return;
}

function _EditHotkeyScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0, i5 = 0;
 _MenuScreen_Render2(i2, d1);
 i5 = i2 + 56 | 0;
 i4 = i2 + 68 | 0;
 i3 = i2 + 72 | 0;
 _Gfx_Draw2DFlat(HEAP32[i5 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0, -6908266);
 _Gfx_Draw2DFlat(HEAP32[i5 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0, -6908266);
 return;
}

function _Utils_Resize(i6, i3, i5, i4, i1) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + i1 | 0;
 HEAP32[i3 >> 2] = i1;
 if ((i2 | 0) > (i4 | 0)) i1 = _Mem_Realloc(HEAP32[i6 >> 2] | 0, i1, i5, 51335) | 0; else {
  i1 = _Mem_Alloc(i1, i5, 51321) | 0;
  _Mem_Copy(i1, HEAP32[i6 >> 2] | 0, Math_imul(i2, i5) | 0) | 0;
 }
 HEAP32[i6 >> 2] = i1;
 return;
}

function _Modern_IsOccluded(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = (_World_SafeGetBlock(i1, i2, i3) | 0) & 65535;
 do if (!(HEAP8[994084 + i1 >> 0] | 0)) if (!(HEAP8[1009444 + i1 >> 0] | 0)) {
  if ((HEAP8[1006372 + i1 >> 0] | 0) == 1) if (HEAP8[993316 + i1 >> 0] | 0) if ((HEAP8[1005604 + i1 >> 0] | 0) == -1) {
   i1 = 1;
   break;
  }
  i1 = 0;
 } else i1 = 1; else i1 = 0; while (0);
 return i1 | 0;
}

function _MenuOptionsScreen_Render(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0;
 _MenuScreen_Render2(i3, d1);
 i2 = i3 + 132 | 0;
 if (HEAP32[i3 + 172 >> 2] | 0) {
  _Gfx_Draw2DFlat((HEAP32[i3 + 136 >> 2] | 0) + -5 | 0, (HEAP32[i3 + 140 >> 2] | 0) + -5 | 0, (HEAP32[i3 + 144 >> 2] | 0) + 10 | 0, (HEAP32[i3 + 148 >> 2] | 0) + 10 | 0, -938208236);
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i2 >> 2] >> 2] & 63](i2, d1);
 }
 return;
}

function _MenuInputOverlay_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Gui_MakeTitleFont(i3);
 i4 = i1 + 40 | 0;
 _Gui_MakeBodyFont(i4);
 _Screen_UpdateVb(i1);
 _TextInputWidget_SetFont(i1 + 220 | 0, i4);
 _ButtonWidget_SetConst(i1 + 52 | 0, 45609, i3);
 _ButtonWidget_SetConst(i1 + 136 | 0, 45612, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _HUDScreen_ContextLost(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Font_Free(i1 + 36 | 0);
 _Screen_ContextLost(i1);
 _TextAtlas_Free(i1 + 192 | 0);
 i2 = i1 + 332 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i2 = i1 + 48 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 i1 = i1 + 120 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 return;
}

function _Matrix_RotateX(i6, d1) {
 i6 = i6 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0;
 d5 = +_Math_CosF(d1);
 d1 = +_Math_SinF(d1);
 i2 = i6;
 i3 = 22728;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAPF32[i6 + 20 >> 2] = d5;
 HEAPF32[i6 + 24 >> 2] = d1;
 HEAPF32[i6 + 36 >> 2] = -d1;
 HEAPF32[i6 + 40 >> 2] = d5;
 return;
}

function _GetBlock(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (!((_World_Contains_1731(i1, i3, i2) | 0) << 24 >> 24)) {
  i1 = HEAP32[466928] | 0;
  if ((i1 | 0) > (i3 | 0)) if (((HEAP32[466929] | 0) + i1 | 0) > (i3 | 0)) {
   i1 = HEAP16[933855] | 0;
   break;
  } else {
   i1 = HEAP16[933854] | 0;
   break;
  } else i1 = 0;
 } else i1 = _World_GetBlock_1732(i1, i3, i2) | 0; while (0);
 return i1 | 0;
}

function _CompileShader(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 8 | 0;
 i5 = i4 + 4 | 0;
 i3 = i4;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i5 >> 2] = HEAPU16[i2 + 4 >> 1];
 _glShaderSource(i1 | 0, 1, i6 | 0, i5 | 0);
 _glCompileShader(i1 | 0);
 _glGetShaderiv(i1 | 0, 35713, i3 | 0);
 STACKTOP = i4;
 return HEAP32[i3 >> 2] | 0;
}

function _TexturePackScreen_UploadCallback(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i5 = i1;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 i1 = i3;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 _Utils_UNSAFE_GetFilename(i3);
 _ListScreen_Reload(1698520);
 _TexturePack_SetDefault(i3);
 _TexturePack_ExtractCurrent(1) | 0;
 STACKTOP = i2;
 return;
}

function _Nbt_WriteConst(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = _String_Length(i6) | 0;
 HEAP8[i5 >> 0] = 0;
 i1 = i5 + 2 | 0;
 HEAP8[i5 + 1 >> 0] = i4;
 if ((i4 | 0) > 0) {
  i3 = i4 + 2 | 0;
  i2 = 0;
  while (1) {
   HEAP8[i1 >> 0] = HEAP8[i6 + i2 >> 0] | 0;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 1 | 0;
  }
  i1 = i5 + i3 | 0;
 }
 return i1 | 0;
}

function _InputWidget_DeleteChar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = i1 + 64 | 0;
 i2 = HEAP16[i1 + 68 >> 1] | 0;
 do if (i2 << 16 >> 16) {
  i4 = i1 + 160 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i3 | 0) == -1) {
   _String_DeleteAt(i5, (i2 & 65535) + -1 | 0);
   break;
  }
  i1 = i3 + -1 | 0;
  if ((i3 | 0) > 0) {
   HEAP32[i4 >> 2] = i1;
   _String_DeleteAt(i5, i1);
  }
 } while (0);
 return;
}

function _Cw_Callback(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1;
 i3 = 0;
 while (1) {
  i2 = HEAP32[i2 >> 2] | 0;
  if (!i2) break; else i3 = i3 + 1 | 0;
 }
 switch (i3 & 2147483647 | 0) {
 case 1:
  {
   _Cw_Callback_1(i1);
   break;
  }
 case 2:
  {
   _Cw_Callback_2(i1);
   break;
  }
 case 4:
  {
   _Cw_Callback_4(i1);
   break;
  }
 case 5:
  {
   _Cw_Callback_5(i1);
   break;
  }
 default:
  {}
 }
 return;
}

function _Screen_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = i1 + 20 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i3 = 0;
  do {
   i2 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
   if (i2) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
    i1 = HEAP32[i4 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i1 | 0));
 }
 return;
}

function _Model_Render(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i3 + 64 | 0;
 i5 = i3;
 _Model_SetupState(i2, i1);
 _Gfx_SetVertexFormat(1);
 _Model_GetEntityTransform(i2, i1, i5);
 _Matrix_Mul(i4, i5, 1689084);
 _Gfx_LoadMatrix(1, i4);
 FUNCTION_TABLE_vi[HEAP32[i2 + 16 >> 2] & 511](i1);
 _Gfx_LoadMatrix(1, 1689084);
 STACKTOP = i3;
 return;
}

function _DoSwitchBlockAnim(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0;
 if (!(HEAP8[1868781] | 0)) {
  if ((HEAP16[934361] | 0) != (HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0)) {
   _HeldBlockRenderer_ResetAnim(0, .25);
   HEAP8[1868783] = 1;
   HEAP8[1868781] = 1;
  }
 } else {
  d2 = +HEAPF32[422498];
  d3 = +HEAPF32[3777];
  if (d2 > d3 * .5) HEAPF32[422498] = d3 - d2;
 }
 return;
}

function _CPE_SetTextColor(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP8[i2 + 4 >> 0] | 0;
 i1 = i3 & 255;
 switch (i3 << 24 >> 24) {
 case 38:
 case 37:
 case -1:
 case 32:
 case 0:
  break;
 default:
  {
   HEAP32[1667324 + (i1 << 2) >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 3 >> 0] | 0) << 24;
   _Event_RaiseInt(1682484, i1);
  }
 }
 return;
}

function _Physics_PropagateLava(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0;
 i1 = HEAP8[(HEAP32[244730] | 0) + i2 >> 0] | 0;
 if ((i1 & -4) << 24 >> 24 == 8) {
  if ((i1 & -2) << 24 >> 24 == 8) _Game_UpdateBlock(i3, i4, i5, 1);
 } else if (!(HEAP8[1000996 + (i1 & 255) >> 0] | 0)) {
  _TickQueue_Enqueue(1656360, i2 | -268435456);
  _Game_UpdateBlock(i3, i4, i5, 10);
 }
 return;
}

function _MenuOptionsScreen_GetDesc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3;
 _String_FromReadonly(i4, HEAP32[424611] | 0);
 _String_UNSAFE_Split(i4, 10, i5, 5) | 0;
 i5 = i5 + (i2 << 3) | 0;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = i4;
 STACKTOP = i3;
 return;
}

function _Dat_LoadFormat0(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 _Dat_Format0And1();
 HEAP16[933854] = 0;
 HEAP16[933855] = 0;
 HEAP32[244733] = 256;
 HEAP32[244734] = 64;
 HEAP32[244735] = 256;
 HEAP32[244732] = 4194304;
 i1 = _Mem_TryAlloc(4194304, 1) | 0;
 HEAP32[244730] = i1;
 if (!i1) i1 = -857812988; else {
  _Mem_Set(i1, 1, 5) | 0;
  i1 = _Stream_Read(i2, (HEAP32[244730] | 0) + 5 | 0, 4194299) | 0;
 }
 return i1 | 0;
}

function _Classic_RelPositionUpdate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = HEAP8[i1 >> 0] | 0;
 HEAP8[i3 + 28 >> 0] = -63;
 HEAPF32[i3 >> 2] = +(HEAP8[i1 + 1 >> 0] | 0) * .03125;
 HEAPF32[i3 + 4 >> 2] = +(HEAP8[i1 + 2 >> 0] | 0) * .03125;
 HEAPF32[i3 + 8 >> 2] = +(HEAP8[i1 + 3 >> 0] | 0) * .03125;
 _UpdateLocation(i4, i3);
 STACKTOP = i2;
 return;
}

function _Mouse_ScrollVWheel(d2) {
 d2 = +d2;
 var i1 = 0;
 i1 = _Utils_AccumulateWheelDelta(1690072, d2) | 0;
 _Event_RaiseFloat(1685604, d2);
 if ((i1 | 0) > 0) {
  do {
   _Input_SetPressed(122);
   i1 = i1 + -1 | 0;
  } while ((i1 | 0) != 0);
  _Input_SetReleased(122);
 } else if ((i1 | 0) < 0) {
  do {
   _Input_SetPressed(123);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 0);
  _Input_SetReleased(123);
 }
 return;
}

function _GZip_StreamClose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 i1 = _Deflate_StreamClose(i1) | 0;
 if (!i1) {
  _Stream_SetU32_LE(i3, ~HEAP32[i2 + 115580 >> 2]);
  _Stream_SetU32_LE(i3 + 4 | 0, HEAP32[i2 + 115584 >> 2] | 0);
  i1 = _Stream_Write(HEAP32[i2 + 20 >> 2] | 0, i3, 8) | 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Physics_IsEdgeWater(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((HEAP16[933854] & -2) << 16 >> 16 == 8) {
  i4 = HEAP32[466928] | 0;
  if ((i4 | 0) > (i2 | 0) ? ((HEAP32[466929] | 0) + i4 | 0) <= (i2 | 0) : 0) if ((i1 | 0) == 0 | (i3 | 0) == 0 | (HEAP32[244736] | 0) == (i1 | 0)) i1 = 1; else i1 = (HEAP32[244738] | 0) == (i3 | 0) & 1; else i1 = 0;
 } else i1 = 0;
 return i1 | 0;
}

function _InputWidget_AppendChar(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = i5 + 160 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = i5 + 64 | 0;
 if ((i1 | 0) == -1) {
  _String_InsertAt(i4, HEAPU16[i5 + 68 >> 1] | 0, i2);
  return;
 } else {
  _String_InsertAt(i4, i1, i2);
  i4 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
  HEAP32[i3 >> 2] = (i4 | 0) < (HEAPU16[i5 + 68 >> 1] | 0 | 0) ? i4 : -1;
  return;
 }
}

function _Gfx_Set3DRight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i3 + 64 | 0;
 i4 = i3;
 _Matrix_Translate(i5, -.07000000029802322, 0.0, 0.0);
 _Matrix_Mul(1689148, i1, i5);
 _Matrix_Translate(i4, .10000000149011612, 0.0, 0.0);
 _Matrix_Mul(1689084, i2, i4);
 _Gfx_ClearBuffers(2);
 _Gfx_SetColorWrite(1, 0, 0, 0);
 STACKTOP = i3;
 return;
}

function _OnEnvVariableChanged_1236(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if ((i1 + -15 | 0) >>> 0 < 2) _RefreshChunks(); else if ((i1 | 1 | 0) == 3) {
  i1 = HEAP32[414107] | 0;
  i2 = HEAP32[466928] | 0;
  i3 = (HEAP32[466929] | 0) + i2 | 0;
  HEAP32[414106] = (i3 | 0) > 0 ? i3 : 0;
  i2 = (i2 | 0) > 0 ? i2 : 0;
  HEAP32[414107] = i2;
  _RefreshBorderChunks((i1 | 0) > (i2 | 0) ? i1 : i2);
 }
 return;
}

function _Matrix_RotateZ(i6, d1) {
 i6 = i6 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0;
 d5 = +_Math_CosF(d1);
 d1 = +_Math_SinF(d1);
 i2 = i6;
 i3 = 22728;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAPF32[i6 >> 2] = d5;
 HEAPF32[i6 + 4 >> 2] = d1;
 HEAPF32[i6 + 16 >> 2] = -d1;
 HEAPF32[i6 + 20 >> 2] = d5;
 return;
}

function _Matrix_RotateY(i6, d1) {
 i6 = i6 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0;
 d5 = +_Math_CosF(d1);
 d1 = +_Math_SinF(d1);
 i2 = i6;
 i3 = 22728;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAPF32[i6 >> 2] = d5;
 HEAPF32[i6 + 8 >> 2] = -d1;
 HEAPF32[i6 + 32 >> 2] = d1;
 HEAPF32[i6 + 40 >> 2] = d5;
 return;
}

function _HUDScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 8 >> 2] = 280;
 _HotbarWidget_Create(i1 + 332 | 0);
 _TextWidget_Init(i1 + 48 | 0);
 _TextWidget_Init(i1 + 120 | 0);
 i2 = i1 + 69 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 i2 = i1 + 141 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 _Event_Register(1679624, i1, 402);
 _Event_Register(1676764, i1, 403);
 _Event_Register(1680144, i1, 403);
 return;
}

function _TexIdsOverlay_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 12 | 0;
 i3 = i2;
 _Screen_UpdateVb(i1);
 _Font_Make(i4, 8, 4);
 _Font_SetPadding(i4, 1);
 _TextAtlas_Make(i1 + 52 | 0, 16660, i4, 16668);
 _Font_Free(i4);
 _Gui_MakeTitleFont(i3);
 _TextWidget_SetConst(i1 + 156 | 0, 45626, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _Http_AsyncGetSkin(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i4 + 128 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 if (!((_Utils_IsUrlPrefix(i2) | 0) << 24 >> 24)) _String_Format2(i3, 52994, 23696, i2); else _String_Copy(i3, i2);
 i3 = _Http_AsyncGetData(i3, i1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _String_UNSAFE_TrimEnd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = i1 + 4 | 0;
 i2 = HEAP16[i5 >> 1] | 0;
 L1 : do if (i2 << 16 >> 16) {
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = i2;
  i1 = i2 & 65535;
  do {
   i2 = i1;
   i1 = i1 + -1 | 0;
   if ((HEAP8[i3 + i1 >> 0] | 0) != 32) break L1;
   i4 = i4 + -1 << 16 >> 16;
   HEAP16[i5 >> 1] = i4;
  } while ((i2 | 0) > 1);
 } while (0);
 return;
}

function _ScheduledTask_Add(d3, i2) {
 d3 = +d3;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[422254] | 0;
 if ((i1 | 0) == (HEAP32[3687] | 0)) {
  _Utils_Resize(14752, 14748, 24, 6, 6);
  i1 = HEAP32[422254] | 0;
 }
 i4 = HEAP32[3688] | 0;
 HEAP32[422254] = i1 + 1;
 HEAPF64[i4 + (i1 * 24 | 0) >> 3] = 0.0;
 HEAPF64[i4 + (i1 * 24 | 0) + 8 >> 3] = d3;
 HEAP32[i4 + (i1 * 24 | 0) + 16 >> 2] = i2;
 return i1 | 0;
}

function _NostalgiaMenuScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364496;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 4;
 _ButtonWidget_Add(i1, i1 + 36 | 0, 400, 161);
 _ButtonWidget_Add(i1, i1 + 120 | 0, 400, 162);
 _ButtonWidget_Add(i1, i1 + 204 | 0, 400, 163);
 _TextWidget_Add(i1, i1 + 288 | 0);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Game_SetFpsLimit(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 HEAP32[422209] = i1;
 switch (i1 | 0) {
 case 4:
  {
   d2 = 6.94444465637207;
   break;
  }
 case 3:
  {
   d2 = 8.333333015441895;
   break;
  }
 case 2:
  {
   d2 = 16.66666603088379;
   break;
  }
 case 1:
  {
   d2 = 33.33333206176758;
   break;
  }
 default:
  d2 = 0.0;
 }
 _Gfx_SetVSync((i1 | 0) == 0 & 1);
 _Game_SetMinFrameTime(d2);
 return;
}

function _Exp2Stage1(d5) {
 d5 = +d5;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = d5 * d5;
 d3 = .023093347753750233;
 i1 = 1;
 while (1) {
  d3 = d4 * d3 + +HEAPF64[2976 + (i1 << 3) >> 3];
  if (!i1) break; else i1 = i1 + -1 | 0;
 }
 d2 = 1.0;
 i1 = 1;
 while (1) {
  d2 = d4 * d2 + +HEAPF64[3008 + (i1 << 3) >> 3];
  if (!i1) break; else i1 = i1 + -1 | 0;
 }
 d5 = d3 * d5;
 return +((d5 + d2) / (d2 - d5));
}

function _EnvRenderer_RenderMapEdges() {
 var i1 = 0;
 i1 = (HEAP32[466929] | 0) + (HEAP32[466928] | 0) | 0;
 do if (!(HEAP32[418850] | 0 ? +HEAPF32[414159] < +(((i1 | 0) < 0 ? i1 : 0) | 0) : 0)) {
  i1 = HEAP32[418849] | 0;
  if (!i1) {
   _BuildMapEdges();
   i1 = HEAP32[418849] | 0;
   if (!i1) break;
  }
  _RenderBorders(HEAP16[933854] | 0, i1, HEAP32[418845] | 0, HEAP32[418865] | 0);
 } while (0);
 return;
}

function _MPConnection_FailConnect(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i4 + 128 | 0;
 i1 = i4 + 136 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 HEAP16[i1 + 4 >> 1] = 0;
 HEAP16[i1 + 6 >> 1] = 128;
 if (i2 | 0) {
  _String_Format3(i1, 48821, 1841580, 1841588, i3);
  _Logger_Log(i1);
 }
 _MPConnection_Fail(22324);
 STACKTOP = i4;
 return;
}

function _InventoryScreen_Layout(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0;
 d3 = +_Gui_GetInventoryScale();
 HEAPF32[i1 + 136 >> 2] = d3;
 _Widget_SetLocation(i1 + 48 | 0, 1, 1, 0, 0);
 i2 = i1 + 2764 | 0;
 _Widget_SetLocation(i2, 1, 0, 0, 0);
 HEAP32[i1 + 2792 >> 2] = (HEAP32[i1 + 56 >> 2] | 0) + -3 - (HEAP32[i1 + 2780 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _Classic_SendLogin() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i1;
 HEAP8[i2 >> 0] = 0;
 HEAP8[i2 + 1 >> 0] = HEAP8[1688990] | 0;
 _WriteString(i2 + 2 | 0, 14732);
 _WriteString(i2 + 66 | 0, 14740);
 HEAP8[i2 + 130 >> 0] = (HEAP8[1688988] | 0) == 0 ? (HEAPU8[1688990] | 0) < 6 & 1 : 66;
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, 131);
 STACKTOP = i1;
 return;
}

function _Ping_Update(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = 0;
 do {
  if ((HEAPU16[955840 + (i1 * 24 | 0) + 16 >> 1] | 0 | 0) == (i2 | 0)) {
   i3 = 3;
   break;
  }
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < 10);
 if ((i3 | 0) == 3) {
  i4 = _Stopwatch_Measure() | 0;
  i2 = getTempRet0() | 0;
  i3 = 955840 + (i1 * 24 | 0) + 8 | 0;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i3 + 4 >> 2] = i2;
 }
 return;
}

function _OnInit_896() {
 var i1 = 0;
 _Entity_Init(1689568);
 HEAP32[422392] = 15084;
 HEAP8[1689678] = 1;
 i1 = _Options_GetBool(46759, 1) | 0;
 HEAP8[1868780] = i1;
 HEAP16[934360] = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
 _Event_Register(1678064, 0, 222);
 _Event_Register(1679364, 0, 223);
 _Event_Register(1678844, 0, 25);
 _Event_Register(1678324, 0, 224);
 return;
}

function _MenuOptionsScreen_AddEnum(i6, i3, i4, i5, i2, i7, i1) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = _MenuOptionsScreen_AddButton(i6, i3, 122, 123, 0, i1) | 0;
 HEAP32[363888 + (i6 << 5) + 8 >> 2] = i2;
 HEAP32[363888 + (i6 << 5) + 12 >> 2] = i7;
 HEAP32[363888 + (i6 << 5) + 16 >> 2] = i4;
 HEAP32[363888 + (i6 << 5) + 20 >> 2] = i5;
 return;
}

function _Float_ValidValue(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var d2 = 0.0, d3 = 0.0, i5 = 0, d6 = 0.0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 d6 = +HEAPF32[i1 + 4 >> 2];
 d3 = +HEAPF32[i1 + 8 >> 2];
 if (!((_Convert_ParseFloat(i4, i5) | 0) << 24 >> 24)) i1 = 0; else {
  d2 = +HEAPF32[i5 >> 2];
  if (!(d6 <= d2)) i1 = 0; else i1 = d2 <= d3 & 1;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _Entities_Init() {
 var i1 = 0;
 _Event_Register(1678324, 0, 195);
 i1 = (_Options_GetEnum(41113, 1, 2304, 5) | 0) & 255;
 HEAP8[1669384] = (HEAP8[1868754] | 0) == 0 ? i1 : 1;
 i1 = (_Options_GetEnum(41100, 0, 2336, 4) | 0) & 255;
 HEAP8[1669385] = (HEAP8[1868754] | 0) == 0 ? i1 : 0;
 _LocalPlayer_Init(146288, 0);
 HEAP32[417345] = 146288;
 HEAP32[417347] = 146288;
 _LocalPlayer_HookBinds();
 return;
}

function _AutoRotate_RotateBlock(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i3 + 136 | 0;
 i4 = i3 + 128 | 0;
 _Block_UNSAFE_GetName(i4, i1);
 HEAP32[i2 >> 2] = i3;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 128;
 _String_AppendString(i2, i4);
 i2 = _FindRotated(i2, 0) | 0;
 STACKTOP = i3;
 return ((i2 | 0) == -1 ? i1 & 65535 : i2) & 65535 | 0;
}

function _Stream_AppendFile(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i5 = i4 + 8 | 0;
 i2 = i4;
 _Platform_EncodePath(i5, i1);
 i1 = _File_OpenOrCreate(i2, i5) | 0;
 if (!i1) {
  i1 = _File_Seek(HEAP32[i2 >> 2] | 0, 0, 2) | 0;
  if (!i1) {
   _Stream_FromFile(i3, HEAP32[i2 >> 2] | 0);
   i1 = 0;
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Options_SetString(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) i1 = 3; else if (!(HEAP16[i1 + 4 >> 1] | 0)) i1 = 3; else {
  _EntryList_Set(1716580, i2, i1, 61);
  i1 = 5;
 }
 if ((i1 | 0) == 3) if ((_EntryList_Remove(1716580, i2, 61) | 0) << 24 >> 24) i1 = 5;
 if ((i1 | 0) == 5) {
  if (!0) _SaveOptions();
  if (!((_HasChanged(i2) | 0) << 24 >> 24)) _StringsBuffer_Add(1721732, i2);
 }
 return;
}

function _MenuInputOverlay_Default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 i4 = HEAP32[i1 + 520 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 255](i4, i3);
 _InputWidget_SetText(i1 + 220 | 0, i3);
 STACKTOP = i2;
 return;
}

function _HacksComp_ParseFlagInt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4 + 8 | 0;
 i3 = i4;
 _HacksComp_UNSAFE_FlagValue(i2, 30884, i1);
 if ((HEAP16[i2 + 4 >> 1] | 0) != 0 & (HEAP8[1868754] | 0) == 0) {
  i1 = (_Convert_ParseInt(i2, i3) | 0) << 24 >> 24 == 0;
  i1 = i1 ? 1 : HEAP32[i3 >> 2] | 0;
 } else i1 = 1;
 STACKTOP = i4;
 return i1 | 0;
}

function _SpecialInputWidget_InitTabs(i1) {
 i1 = i1 | 0;
 _SpecialInputWidget_UpdateColString(i1);
 _SpecialInputTab_Init(i1 + 96 | 0, 23512, 10, 4, i1 + 236 | 0);
 _SpecialInputTab_Init(i1 + 124 | 0, 23520, 16, 1, 23528);
 _SpecialInputTab_Init(i1 + 152 | 0, 23536, 17, 1, 23544);
 _SpecialInputTab_Init(i1 + 180 | 0, 23552, 17, 1, 23560);
 _SpecialInputTab_Init(i1 + 208 | 0, 23568, 16, 1, 23576);
 return;
}

function _PlayerInputNormal(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = HEAP32[1695232 + ((HEAPU8[i1 + 792 >> 0] | 0) << 2) >> 2] | 0;
 if (i1 & 16 | 0) HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + -1.0;
 if (i1 & 32 | 0) HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + 1.0;
 if (i1 & 1 | 0) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + -1.0;
 if (i1 & 2 | 0) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + 1.0;
 return;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (setTempRet0((i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0), i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function _Zip_ReadEndOfCentralDirectory(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i4;
 i1 = _Stream_Read(HEAP32[i3 >> 2] | 0, i2, 18) | 0;
 if (!i1) {
  i1 = (_Stream_GetU16_LE(i2 + 6 | 0) | 0) & 65535;
  HEAP32[i3 + 24 >> 2] = i1;
  i1 = _Stream_GetU32_LE(i2 + 12 | 0) | 0;
  HEAP32[i3 + 28 >> 2] = i1;
  i1 = 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Logger_DialogWarn(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 i3 = i2 + 512 | 0;
 HEAP32[i3 >> 2] = i2;
 i4 = i3 + 4 | 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 511;
 _String_Copy(i3, i1);
 HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAPU16[i4 >> 1] | 0) >> 0] = 0;
 _Window_ShowDialog(HEAP32[3880] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _Gfx_SetVertexFormat(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[3731] | 0) != (i1 | 0)) {
  HEAP32[3731] = i1;
  HEAP32[422337] = HEAP32[14940 + (i1 << 2) >> 2];
  if ((i1 | 0) == 1) {
   _glEnableVertexAttribArray(2);
   i1 = 215;
   i2 = 95;
  } else {
   _glDisableVertexAttribArray(2);
   i1 = 216;
   i2 = 96;
  }
  HEAP32[422334] = i2;
  HEAP32[422338] = i1;
  _SwitchProgram();
 }
 return;
}

function _Game_Free() {
 var i1 = 0, i2 = 0;
 HEAP8[1689082] = 0;
 _Event_UnregisterAll();
 HEAP32[422254] = 0;
 i1 = HEAP32[422252] | 0;
 if (i1 | 0) do {
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_v[i2 & 127]();
  i1 = HEAP32[i1 + 20 >> 2] | 0;
 } while ((i1 | 0) != 0);
 HEAP8[1868751] = 0;
 HEAP32[3881] = 7;
 _Gfx_Free();
 _Options_SaveIfChanged();
 _Window_DisableRawMouse();
 return;
}

function _EditHotkeyScreen_UpdateLeaveOpen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_AppendConst(i3, 44085);
 _String_AppendConst(i3, (HEAP8[i1 + 42 >> 0] & 1) == 0 ? 44104 : 44108);
 _ButtonWidget_Set(i1 + 568 | 0, i3, i1 + 76 | 0);
 STACKTOP = i2;
 return;
}

function _TextGroupWidget_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i2 + 84 >> 2] | 0;
 i5 = i2 + 40 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = i6 + (i4 * 28 | 0) | 0;
   if (HEAP32[i3 >> 2] | 0) {
    _Texture_Render(i3);
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 return;
}

function _ScrollbarWidget_PointerMove(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d5 = 0.0;
 if ((HEAP32[i2 + 60 >> 2] | 0) == (i1 | 0)) {
  i1 = i4 - (HEAP32[i2 + 8 >> 2] | 0) | 0;
  d5 = +_ScrollbarWidget_GetScale(i2);
  HEAP32[i2 + 40 >> 2] = ~~(+(i1 - (HEAP32[i2 + 56 >> 2] | 0) | 0) / d5);
  _ScrollbarWidget_ClampTopRow(i2);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Random_Float(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1;
 i3 = ___muldi3(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, -554899859, 5) | 0;
 i3 = _i64Add(i3 | 0, getTempRet0() | 0, 11, 0) | 0;
 i2 = (getTempRet0() | 0) & 65535;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 i1 = _bitshift64Lshr(i3 | 0, i2 | 0, 24) | 0;
 getTempRet0() | 0;
 return +(+(i1 | 0) * 5.9604644775390625e-08);
}

function _EnvRenderer_CalcFlags(i1) {
 i1 = i1 | 0;
 if (!(_String_CaselessEqualsConst(i1, 30966) | 0)) if (!(_String_CaselessEqualsConst(i1, 31013) | 0)) if (!(_String_CaselessEqualsConst(i1, 31020) | 0)) if (!(_String_CaselessEqualsConst(i1, 31025) | 0)) {
  i1 = (_String_CaselessEqualsConst(i1, 31036) | 0) == 0;
  i1 = i1 ? -1 : 3;
 } else i1 = 1; else i1 = 1; else i1 = 2; else i1 = 0;
 return i1 | 0;
}

function _ApplyDownloaded(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i4 + 8 | 0;
 i3 = i4;
 _String_FromRaw(i3, i1, 128);
 if (!0) _UpdateCache(i1);
 if (_String_Equals(22388, i3) | 0) {
  _Stream_ReadonlyMemory(i2, HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 160 >> 2] | 0);
  _ExtractFrom(i2, i3) | 0;
  HEAP8[1868806] = 0;
 }
 STACKTOP = i4;
 return;
}

function _TexPackOverlay_Update(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i2 = i3;
 if ((_Http_GetResult(HEAP32[i4 + 52 >> 2] | 0, i2) | 0) << 24 >> 24) {
  HEAP8[i4 + 7 >> 0] = 1;
  HEAP8[i4 + 38 >> 0] = 1;
  HEAP32[i4 + 40 >> 2] = HEAP32[i2 + 148 >> 2];
  _TexPackOverlay_UpdateLine3(i4);
  _HttpRequest_Free(i2);
 }
 STACKTOP = i3;
 return;
}

function _Particles_Render(d1) {
 d1 = +d1;
 var i2 = 0;
 if (!(HEAP8[1689080] | 0 ? 1 : (HEAP32[431721] | HEAP32[431722] | HEAP32[431723] | 0) == 0)) {
  if (!(HEAP32[431724] | 0)) {
   i2 = _Gfx_CreateDynamicVb(1, 2400) | 0;
   HEAP32[431724] = i2;
  }
  _Gfx_SetAlphaTest(1);
  _Gfx_SetVertexFormat(1);
  _Terrain_Render(d1);
  _Rain_Render(d1);
  _Custom_Render(d1);
  _Gfx_SetAlphaTest(0);
 }
 return;
}

function _TabListOverlay_GetColumnHeight(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 << 4;
 i1 = HEAP32[i4 + 56 >> 2] | 0;
 i3 = i2 + 16 | 0;
 i3 = (i1 | 0) < (i3 | 0) ? i1 : i3;
 if ((i2 | 0) < (i3 | 0)) {
  i1 = 0;
  do {
   i1 = i1 + 1 + (HEAPU16[i4 + 1176 + (i2 * 28 | 0) + 10 >> 1] | 0) | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i3 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _Physics_HandleGrass(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i1 = HEAP32[244733] | 0;
 i4 = (i2 | 0) / (i1 | 0) | 0;
 i1 = i2 - (Math_imul(i4, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i4 | 0) / (i2 | 0) | 0;
 i2 = i4 - (Math_imul(i3, i2) | 0) | 0;
 if (!((FUNCTION_TABLE_iiii[HEAP32[467170] & 63](i1, i3, i2) | 0) << 24 >> 24)) _Game_UpdateBlock(i1, i3, i2, 3);
 return;
}

function _CustomParticle_Tick(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, i4 = 0;
 i4 = HEAP32[i3 + 44 >> 2] | 0;
 HEAP8[1868795] = 0;
 i1 = 833696 + (i4 * 52 | 0) + 22 | 0;
 HEAP8[1868796] = HEAP8[i1 >> 0] | 0;
 if (!((_PhysicsTick(i3, +HEAPF32[833696 + (i4 * 52 | 0) + 40 >> 2], 28, d2) | 0) << 24 >> 24)) if (!(HEAP8[1868795] | 0)) i1 = 0; else i1 = HEAP8[i1 >> 0] & 1; else i1 = 1;
 return i1 | 0;
}

function _CustomModel_GetPickingBounds(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 56 | 0;
 i1 = (HEAP32[i1 + 48 >> 2] | 0) + 160 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 return;
}

function _ChatInputWidget_SetFont(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _DrawTextArgs_Make(i4, 23400, i1, 1);
 HEAP32[i2 + 40 >> 2] = i1;
 i1 = _Drawer2D_TextWidth(i4) | 0;
 HEAP32[i2 + 140 >> 2] = i1;
 i1 = _Drawer2D_TextHeight(i4) | 0;
 HEAP32[i2 + 108 >> 2] = i1;
 _Gfx_DeleteTexture(i2 + 172 | 0);
 STACKTOP = i3;
 return;
}

function _CPE_ExtInfo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _UNSAFE_GetString(i3, i1);
 i4 = (_String_CaselessStarts(i3, 21600) | 0) & 255;
 HEAP8[1868799] = i4;
 _Chat_Add1(47317, i3);
 i1 = (_Stream_GetU16_BE(i1 + 64 | 0) | 0) & 65535;
 HEAP32[454524] = (HEAP32[454524] | 0) + i1;
 _CPE_SendCpeExtInfoReply();
 STACKTOP = i2;
 return;
}

function _Vec3_Normalise(i5) {
 i5 = i5 | 0;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, i6 = 0, i7 = 0;
 d1 = +HEAPF32[i5 >> 2];
 i6 = i5 + 4 | 0;
 d2 = +HEAPF32[i6 >> 2];
 i7 = i5 + 8 | 0;
 d3 = +HEAPF32[i7 >> 2];
 d4 = d1 * d1 + d2 * d2 + d3 * d3;
 if (!(d4 == 0.0)) {
  d4 = 1.0 / +Math_sqrt(+d4);
  HEAPF32[i5 >> 2] = d1 * d4;
  HEAPF32[i6 >> 2] = d2 * d4;
  HEAPF32[i7 >> 2] = d3 * d4;
 }
 return;
}

function _Map_SkipGZipHeader(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 _GZipHeader_Init(i3);
 i2 = i3 + 1 | 0;
 L1 : do if (!(HEAP8[i2 >> 0] | 0)) while (1) {
  i1 = _GZipHeader_Read(i4, i3) | 0;
  if (i1 | 0) break L1;
  if (HEAP8[i2 >> 0] | 0) {
   i1 = 0;
   break;
  }
 } else i1 = 0; while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _InputWidget_DoAppendText(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = i4 + 4 | 0;
 if (!(HEAP16[i3 >> 1] | 0)) i1 = 0; else {
  i1 = 0;
  i2 = 0;
  do {
   i1 = i1 + ((_InputWidget_TryAppendChar(i5, HEAP8[(HEAP32[i4 >> 2] | 0) + i2 >> 0] | 0) | 0) << 24 >> 24 != 0 & 1) | 0;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < (HEAPU16[i3 >> 1] | 0) >>> 0);
 }
 return i1 | 0;
}

function _strcmp(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i2 = HEAP8[i4 >> 0] | 0;
 if (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i2 << 24 >> 24)) do {
  i3 = i3 + 1 | 0;
  i4 = i4 + 1 | 0;
  i1 = HEAP8[i3 >> 0] | 0;
  i2 = HEAP8[i4 >> 0] | 0;
 } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i2 << 24 >> 24));
 return (i1 & 255) - (i2 & 255) | 0;
}

function _String_CopyToRaw(i4, i1, i6) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = HEAPU16[i6 + 4 >> 1] | 0;
 i2 = (i3 | 0) > (i1 | 0) ? i1 : i3;
 if ((i2 | 0) > 0) {
  i5 = 0;
  do {
   HEAP8[i4 + i5 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + i5 >> 0] | 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i2 | 0));
 }
 if ((i3 | 0) < (i1 | 0)) HEAP8[i4 + i2 >> 0] = 0;
 return;
}

function _SetCachedTag(i5, i4, i1, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i6 + 24 | 0;
 if (HEAP16[i1 + 4 >> 1] | 0) {
  HEAP32[i3 >> 2] = i6;
  HEAP16[i3 + 4 >> 1] = 0;
  HEAP16[i3 + 6 >> 1] = 24;
  _HashUrl(i3, i5);
  _EntryList_Set(i4, i3, i1, 32);
  _EntryList_Save(i4, i2);
 }
 STACKTOP = i6;
 return;
}

function _Gamepad_Add(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = 353600 + (i3 * 220 | 0) | 0;
 _Mem_Copy(i4, 15332, 76) | 0;
 HEAP32[353600 + (i3 * 220 | 0) + 4 >> 2] = i3;
 HEAP32[353600 + (i3 * 220 | 0) + 72 >> 2] = 354704 + (i3 * 100 | 0);
 HEAP32[353600 + (i3 * 220 | 0) + 68 >> 2] = i1;
 HEAP32[353600 + (i3 * 220 | 0) + 76 >> 2] = i2;
 _InputBind_Load(i4);
 return;
}

function _CameraInsideBlock(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 _IVec3_ToVec3(i5, i2);
 i2 = i1 & 65535;
 _Vec3_Add_361(i4, i5, 1010980 + (i2 * 12 | 0) | 0);
 _Vec3_Add_361(i4 + 12 | 0, i5, 1020196 + (i2 * 12 | 0) | 0);
 i2 = _AABB_ContainsPoint(i4, 1656632) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _Gfx_UpdateTexture(i4, i5, i6, i2, i3, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 _glBindTexture(3553, i4 | 0);
 if ((HEAP32[i2 + 4 >> 2] | 0) == (i3 | 0)) _CallTexSubImage2D(0, i5, i6, i3, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 >> 2] | 0); else _UpdateTextureSlow(i5, i6, i2, i3, 0);
 if (i1 << 24 >> 24) _Gfx_DoMipmaps(i5, i6, i2, i3, 1);
 return;
}

function _StoredHotkeys_Remove(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i3 + 72 | 0;
 i4 = i3 + 64 | 0;
 HEAP8[i5 >> 0] = i1;
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 64;
 _String_Format2(i4, 37996, HEAP32[4320 + (i2 << 2) >> 2] | 0, i5);
 _Options_SetString(i4, 0);
 STACKTOP = i3;
 return;
}

function _Physics_HandleDirt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i1 = HEAP32[244733] | 0;
 i4 = (i2 | 0) / (i1 | 0) | 0;
 i1 = i2 - (Math_imul(i4, i1) | 0) | 0;
 i2 = HEAP32[244735] | 0;
 i3 = (i4 | 0) / (i2 | 0) | 0;
 i2 = i4 - (Math_imul(i3, i2) | 0) | 0;
 if ((FUNCTION_TABLE_iiii[HEAP32[467170] & 63](i1, i3, i2) | 0) << 24 >> 24) _Game_UpdateBlock(i1, i3, i2, 2);
 return;
}

function _PackedCol_Lerp(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 var i4 = 0, i5 = 0;
 i5 = ~~+_Math_Lerp(+(i1 & 255), +(i2 & 255), d3) & 255;
 i4 = ~~+_Math_Lerp(+((8 ? i1 >>> 8 : i1) & 255), +((8 ? i2 >>> 8 : i2) & 255), d3) & 255;
 return i1 & -16777216 | i5 & 255 | (i4 & 255) << 8 | (~~+_Math_Lerp(+((16 ? i1 >>> 16 : i1) & 255), +((16 ? i2 >>> 16 : i2) & 255), d3) & 255) << 16 | 0;
}

function _InputWidget_Clear(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 HEAP16[i4 + 68 >> 1] = 0;
 i2 = 1841616;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = 0;
 do {
  i5 = i4 + 72 + (i3 << 3) | 0;
  HEAP32[i5 >> 2] = i1;
  HEAP32[i5 + 4 >> 2] = i2;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 3);
 HEAP32[i4 + 160 >> 2] = -1;
 _Gfx_DeleteTexture(i4 + 112 | 0);
 return;
}

function _AnyBlockTouches() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[422517] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i3 = 0;
  while (1) {
   i4 = 352464 + (i3 * 24 | 0) + 4 | 0;
   i2 = HEAP8[i4 >> 0] | 0;
   i3 = i3 + 1 | 0;
   if (i2 & 4) break;
   if ((i3 | 0) >= (i1 | 0)) {
    i1 = 0;
    break L1;
   }
  }
  HEAP8[i4 >> 0] = i2 & 6;
  i1 = 1;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _RequestList_Find(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = 0;
  while (1) {
   if ((HEAP32[i2 + (i1 * 312 | 0) + 128 >> 2] | 0) == (i4 | 0)) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i3 | 0)) {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _Gui_CalcPos(i2, i1, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 switch (i2 << 24 >> 24) {
 case 0:
  break;
 case 2:
  {
   i1 = i3 - (i4 + i1) | 0;
   break;
  }
 case 3:
  {
   i1 = ((i3 | 0) / 2 | 0) + i1 | 0;
   break;
  }
 case 4:
  {
   i1 = ((i3 | 0) / 2 | 0) - (i4 + i1) | 0;
   break;
  }
 default:
  i1 = ((i3 - i4 | 0) / 2 | 0) + i1 | 0;
 }
 return i1 | 0;
}

function _BindsSourceScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 1711844;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 3;
 HEAP32[i1 + 24 >> 2] = -1;
 _ButtonWidget_Add(i1, i1 + 36 | 0, 300, 170);
 _ButtonWidget_Add(i1, i1 + 120 | 0, 300, 171);
 _AddPrimaryButton(i1, i1 + 204 | 0, 147);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Utils_EnsureDirectory(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i4 = i3 + 8 | 0;
 i2 = i3;
 _String_FromReadonly(i2, i1);
 _Platform_EncodePath(i4, i2);
 i1 = _Directory_Create(i4) | 0;
 if ((i1 | 0) == 0 | (i1 | 0) == (HEAP32[5934] | 0)) i1 = 1; else {
  _Logger_SysWarn2(i1, 51302, i2);
  i1 = 0;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _Png_Expand_GRAYSCALE_1(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) > 0) do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  i5 = HEAPU8[i4 + (3 ? i1 >> 3 : i1) >> 0] | 0;
  i6 = i1 & 7 ^ 7;
  i5 = 0 - ((i6 ? i5 >>> i6 : i5) & 1) & 255;
  HEAP32[i3 + (i1 << 2) >> 2] = i5 | i5 << 8 | i5 << 16 | -16777216;
 } while ((i2 | 0) > 1);
 return;
}

function _MenuOptionsScreen_AddHex(i5, i4, i1, i3, i6, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = _MenuOptionsScreen_AddButton(i5, i4, 124, 125, 126, i2) | 0;
 HEAP32[363888 + (i5 << 5) + 8 >> 2] = i3;
 HEAP32[363888 + (i5 << 5) + 12 >> 2] = i6;
 HEAP32[363888 + (i5 << 5) + 16 >> 2] = 22792;
 HEAP32[363888 + (i5 << 5) + 20 >> 2] = i1;
 return;
}

function _Inventory_AddDefault(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 L1 : do if ((i2 & 65535) > 65) {
  i1 = (i2 & 65535) + -1 | 0;
  i3 = 6;
 } else {
  i1 = 0;
  do {
   if ((_DefaultMapping(i1) | 0) << 16 >> 16 == i2 << 16 >> 16) {
    i3 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < 65);
 } while (0);
 if ((i3 | 0) == 6) HEAP16[1695402 + (i1 << 1) >> 1] = i2;
 return;
}

function _EntityShadow_CalcAlpha(d1, i3) {
 d1 = +d1;
 i3 = i3 | 0;
 var d2 = 0.0;
 d2 = +HEAPF32[i3 >> 2];
 d1 = d1 - d2;
 if (!(d1 <= 6.0)) {
  HEAP8[i3 + 6 >> 0] = 0;
  if (!(d1 <= 16.0)) if (!(d1 <= 32.0)) d1 = !(d1 <= 96.0) ? .25 : .125; else d1 = .0625; else d1 = .015625;
 } else {
  HEAP8[i3 + 6 >> 0] = ~~(160.0 - d1 * 160.0 / 6.0);
  d1 = .015625;
 }
 HEAPF32[i3 >> 2] = d2 + d1;
 return;
}

function _AbortOnAllocFailed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 88 | 0;
 HEAP32[i3 >> 2] = i2;
 i4 = i3 + 4 | 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 84;
 _String_Format1(i3, 53238, i1);
 HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAPU16[i4 >> 1] | 0) >> 0] = 0;
 _Process_Abort2(0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _TouchCtrls_UpdateScale(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_AppendConst(i3, 51067);
 _String_AppendFloat(i3, +HEAPF32[422386], 1);
 _ButtonWidget_Set(i1 + 372 | 0, i3, i1 + 540 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 STACKTOP = i2;
 return;
}

function _Stream_MemoryRead(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = i4 + 36 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = i6 >>> 0 > i1 >>> 0 ? i1 : i6;
 i4 = i4 + 32 | 0;
 _Mem_Copy(i2, HEAP32[i4 >> 2] | 0, i1) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - i1;
 HEAP32[i3 >> 2] = i1;
 return 0;
}

function _OnscreenKeyboard_Open(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i2 = i3;
 HEAP8[1868814] = 1;
 if (HEAP8[1868784] | 0) {
  _String_EncodeUtf8(i2, HEAP32[i1 >> 2] | 0) | 0;
  _Platform_LogConst(53406);
  _interop_OpenKeyboard(i2 | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0);
  HEAP8[i1 + 16 >> 0] = 1;
 }
 STACKTOP = i3;
 return;
}

function _OnInit_118() {
 _Commands_Register(13764);
 _Commands_Register(13800);
 _Commands_Register(13836);
 _Commands_Register(13872);
 _Commands_Register(13908);
 _Commands_Register(13944);
 _Commands_Register(13980);
 _Commands_Register(14016);
 _Commands_Register(14052);
 _Commands_Register(14088);
 _Commands_Register(14124);
 _Commands_Register(14160);
 _Commands_Register(14196);
 return;
}

function _Int_ValidValue(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!((_Convert_ParseInt(i3, i4) | 0) << 24 >> 24)) i1 = 0; else {
  i4 = HEAP32[i4 >> 2] | 0;
  i1 = (i4 | 0) <= (i1 | 0) & (i2 | 0) <= (i4 | 0) & 1;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _ChunkInfo_Init(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP16[i1 >> 1] = i2 + 8;
 HEAP16[i1 + 2 >> 1] = i3 + 8;
 HEAP16[i1 + 4 >> 1] = i4 + 8;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = i1 + 6 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -32 | 21;
 i4 = i1 + 7 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -64;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _CPE_SetBlockPermission(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP8[21301] | 0)) {
  i2 = HEAPU8[i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
 } else {
  i2 = (((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0) & 65535;
  i1 = i1 + 2 | 0;
 }
 HEAP8[1057060 + i2 >> 0] = (HEAP8[i1 >> 0] | 0) != 0 & 1;
 HEAP8[1057828 + i2 >> 0] = (HEAP8[i1 + 1 >> 0] | 0) != 0 & 1;
 _Event_RaiseVoid(1679884);
 return;
}

function _TouchScreen_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 9712;
 HEAP32[i1 + 20 >> 2] = 17;
 HEAP32[i1 + 8 >> 2] = 224;
 _Event_Register(1679624, i1, 418);
 _Event_Register(1679104, i1, 418);
 _TouchScreen_InitButtons(i1);
 _ButtonWidget_Init(i1 + 1360 | 0, 40, 207);
 HEAP32[i1 + 1428 >> 2] = -922746881;
 _ThumbstickWidget_Init(i1 + 56 | 0);
 _LocalPlayerInput_Add(22720);
 return;
}

function _TableWidget_SetToBlock(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i5 + 40 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i3 = 0;
  i1 = -1;
  do {
   i1 = (HEAP16[i5 + 92 + (i3 << 1) >> 1] | 0) == i4 << 16 >> 16 ? i3 : i1;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i2 | 0));
 } else i1 = -1;
 _TableWidget_SetToIndex(i5, i4 << 16 >> 16 == 0 ? -1 : i1);
 return;
}

function _Gfx_Set3DLeft(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i3 + 64 | 0;
 i4 = i3;
 _Matrix_Translate(i5, .07000000029802322, 0.0, 0.0);
 _Matrix_Mul(1689148, i1, i5);
 _Matrix_Translate(i4, -.10000000149011612, 0.0, 0.0);
 _Matrix_Mul(1689084, i2, i4);
 _Gfx_SetColorWrite(0, 1, 1, 0);
 STACKTOP = i3;
 return;
}

function _Collisions_ClipZ(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d5 = 0.0, d6 = 0.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 d5 = +HEAPF32[i1 + 12 >> 2];
 i4 = i4 + 8 | 0;
 d6 = d5 - +HEAPF32[i4 >> 2] * .5;
 HEAPF32[i2 + 8 >> 2] = d6;
 HEAPF32[i3 + 8 >> 2] = d6;
 d5 = d5 + +HEAPF32[i4 >> 2] * .5;
 HEAPF32[i2 + 20 >> 2] = d5;
 HEAPF32[i3 + 20 >> 2] = d5;
 return;
}

function _Widget_SetLocation(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 22 >> 0] = i1;
 HEAP8[i5 + 23 >> 0] = i2;
 i1 = _Display_ScaleX(i3) | 0;
 HEAP32[i5 + 24 >> 2] = i1;
 i1 = _Display_ScaleY_893(i4) | 0;
 HEAP32[i5 + 28 >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i1 + 8 >> 2] & 511](i5);
 return;
}

function _String_IndexOfAt(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAPU16[i2 + 4 >> 1] | 0;
 L1 : do if ((i4 | 0) > (i1 | 0)) {
  i2 = HEAP32[i2 >> 2] | 0;
  while (1) {
   if ((HEAP8[i2 + i1 >> 0] | 0) == i3 << 24 >> 24) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _ListScreen_UNSAFE_Get(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((i2 | 0) > -1) if ((HEAP32[i3 + 916 >> 2] | 0) > (i2 | 0)) _StringsBuffer_UNSAFE_Get(i1, i3 + 908 | 0, i2); else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) {
  i2 = 13264;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i4 = i1;
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i4 + 4 >> 2] = i3;
 }
 return;
}

function _HumanModel_DrawArmCore(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 _Gfx_SetAlphaTest(1);
 i4 = HEAP8[1714761] | 0;
 i1 = i4 & 3;
 i4 = i4 << 24 >> 24 == 0;
 i2 = i4 ? 24 : 48;
 _Model_LockVB(0, i2);
 _Model_DrawArmPart(i3 + 64 + (i1 << 7) + 48 | 0);
 if (!i4) _Model_DrawArmPart(i3 + 64 + (i1 << 7) + 112 | 0);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(i2);
 return;
}

function _DisconnectScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 _Screen_UpdateVb(i1);
 i2 = i1 + 224 | 0;
 _Gui_MakeTitleFont(i2);
 i3 = i1 + 236 | 0;
 _Gui_MakeBodyFont(i3);
 _TextWidget_Set(i1 + 248 | 0, i1 + 584 | 0, i2);
 _TextWidget_Set(i1 + 320 | 0, i1 + 592 | 0, i3);
 _DisconnectScreen_UpdateReconnect(i1);
 _ButtonWidget_SetConst(i1 + 140 | 0, 48427, i2);
 return;
}

function _CPE_TwoWayPing(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i3;
 i4 = HEAP8[i1 >> 0] | 0;
 i1 = (_Stream_GetU16_BE(i1 + 1 | 0) | 0) & 65535;
 if (!(i4 << 24 >> 24)) _Ping_Update(i1); else {
  i4 = _CPE_WriteTwoWayPing(i2, 1, i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, i4 - i2 | 0);
 }
 STACKTOP = i3;
 return;
}

function _TickQueue_Enqueue(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = i3 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) _TickQueue_Resize(i3);
 i4 = i3 + 20 | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = i2;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1 & HEAP32[i3 + 8 >> 2];
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function _SaveLevelScreen_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if (!(_Menu_DoInputDown(i3, i2, i1) | 0)) {
  if ((HEAP32[i1 + 32 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i1 + 36 >> 2] | 0) != (i2 | 0)) break;
  _SaveLevelScreen_Save(i3, i3 + 60 | 0);
 } while (0);
 if ((i2 | 0) != 119) _SaveLevelScreen_RemoveOverwrites(i3);
 return _Screen_InputDown(i3, i2, i1) | 0;
}

function _MenuOptionsScreen_HexSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i1 = HEAP32[i1 + 36 >> 2] | 0;
 _PackedCol_TryParseHex(i2, i4) | 0;
 FUNCTION_TABLE_vi[HEAP32[i1 + 12 >> 2] & 511]((HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0) | (HEAPU8[i4 + 2 >> 0] | 0) << 16 | -16777216);
 STACKTOP = i3;
 return;
}

function _IsometricDrawer_AddBatch(i2, d3, d4, d5) {
 i2 = i2 | 0;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i1 = 0;
 i1 = HEAP8[1006372 + (i2 & 65535) >> 0] | 0;
 do if (i1 << 24 >> 24 != 4) {
  HEAPF32[424244] = d4;
  HEAPF32[424245] = d5;
  if (i1 << 24 >> 24 == 5) {
   _IsometricDrawer_Flat(i2, d3);
   break;
  } else {
   _IsometricDrawer_Angled(i2, d3);
   break;
  }
 } while (0);
 return;
}

function _EnvRenderer_UpdateFog() {
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 do if (HEAP8[978980] | 0) {
  i3 = _CalcFog(i2) | 0;
  _Gfx_ClearColor(i3);
  d1 = +HEAPF32[i2 >> 2];
  if (!(HEAP8[1868743] | 0)) {
   _UpdateFogNormal(d1, i3);
   break;
  } else {
   _UpdateFogMinimal(d1);
   break;
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _Context2D_DrawText(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 do if (!((_Drawer2D_IsEmptyText(i1) | 0) << 24 >> 24)) {
  if (!(HEAP32[HEAP32[i1 + 8 >> 2] >> 2] | 0)) {
   _DrawBitmappedText(i2, i1, i3, i4);
   break;
  }
  if (HEAP8[i1 + 12 >> 0] | 0) _SysFont_DrawText(i1, i2, i3, i4, 1);
  _SysFont_DrawText(i1, i2, i3, i4, 0);
 } while (0);
 return;
}

function _String_UNSAFE_TrimStart(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = i4 + 4 | 0;
 i1 = HEAP16[i3 >> 1] | 0;
 L1 : do if (i1 << 16 >> 16) {
  i2 = HEAP32[i4 >> 2] | 0;
  do {
   if ((HEAP8[i2 >> 0] | 0) != 32) break L1;
   i2 = i2 + 1 | 0;
   HEAP32[i4 >> 2] = i2;
   i1 = i1 + -1 << 16 >> 16;
   HEAP16[i3 >> 1] = i1;
  } while (i1 << 16 >> 16 != 0);
 } while (0);
 return;
}

function _OnNewMapLoaded_1220() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[424248] = HEAP32[244753];
 _FreeChunks();
 _FreeParts();
 _AllocateChunks();
 _AllocateParts();
 _InitChunks();
 _Vec3_BigPos_1222(i2);
 HEAP32[424249] = HEAP32[i2 >> 2];
 HEAP32[424250] = HEAP32[i2 + 4 >> 2];
 HEAP32[424251] = HEAP32[i2 + 8 >> 2];
 STACKTOP = i1;
 return;
}

function _MenuOptionsScreen_OnDone(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24) {
  i1 = HEAP32[424289] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 4 >> 2] & 255](i1, i2);
  _MenuOptionsScreen_Update(1697072, i1);
  HEAP8[1697079] = 1;
 }
 i1 = HEAP32[424274] | 0;
 if ((i1 | 0) > -1) _MenuOptionsScreen_SelectExtHelp(1697072, i1);
 HEAP32[424289] = 0;
 return;
}

function _Classic_OrientationUpdate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = HEAP8[i1 >> 0] | 0;
 HEAP8[i3 + 28 >> 0] = -122;
 HEAPF32[i3 + 16 >> 2] = +(HEAPU8[i1 + 1 >> 0] | 0) * 360.0 * .00390625;
 HEAPF32[i3 + 12 >> 2] = +(HEAPU8[i1 + 2 >> 0] | 0) * 360.0 * .00390625;
 _UpdateLocation(i4, i3);
 STACKTOP = i2;
 return;
}

function _Game_ValidateBitmapPow2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = i1 + 4 | 0;
 i1 = i1 + 8 | 0;
 if (!((_Math_IsPowOf2(HEAP32[i3 >> 2] | 0) | 0) << 24 >> 24)) i4 = 3; else if (!((_Math_IsPowOf2(HEAP32[i1 >> 2] | 0) | 0) << 24 >> 24)) i4 = 3; else i1 = 1;
 if ((i4 | 0) == 3) {
  _Chat_Add1(32254, i2);
  _Chat_Add2(32412, i3, i1);
  i1 = 0;
 }
 return i1 | 0;
}

function _Float_ValidString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 if ((HEAP16[i2 + 4 >> 1] | 0) == 1) if (!((_Float_ValidChar(i1, HEAP8[HEAP32[i2 >> 2] >> 0] | 0) | 0) << 24 >> 24)) i4 = 3; else i1 = 1; else i4 = 3;
 if ((i4 | 0) == 3) i1 = _Convert_ParseFloat(i2, i3) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _Collisions_ClipY(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d5 = 0.0;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i1;
 d5 = +HEAPF32[i4 + 4 >> 2] + (HEAP32[tempDoublePtr >> 2] = i1, +HEAPF32[tempDoublePtr >> 2]);
 HEAPF32[i2 + 16 >> 2] = d5;
 HEAPF32[i3 + 16 >> 2] = d5;
 return;
}

function _BindTriggered_DropBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) if (!((_Inventory_CheckChangeSelected() | 0) << 24 >> 24)) i1 = 1; else {
  i1 = 1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) | 0;
  if (!(HEAP16[i1 >> 1] | 0)) i1 = 1; else {
   HEAP16[i1 >> 1] = 0;
   _Event_RaiseVoid(1679364);
   i1 = 1;
  }
 } else i1 = 0;
 return i1 | 0;
}

function _ThumbstickWidget_GetMovement(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _ThumbstickWidget_CalcDirs(i1) | 0;
 if (i1 & 8 | 0) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + -1.0;
 if (i1 & 4 | 0) HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + 1.0;
 if (i1 & 2 | 0) HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + -1.0;
 if (i1 & 1 | 0) HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + 1.0;
 return;
}

function _TabListOverlay_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP8[1868802] = 1;
 i2 = (HEAP8[1689493] | 0) != 0 | (HEAP8[1841574] | 0) == 0;
 HEAP8[i1 + 52 >> 0] = i2 & 1;
 HEAP32[i1 + 60 >> 2] = i2 ? 0 : 10;
 HEAP32[i1 + 8 >> 2] = 2052;
 _TextWidget_Init(i1 + 64 | 0);
 _Event_Register(1675984, i1, 187);
 _Event_Register(1676244, i1, 188);
 _Event_Register(1676504, i1, 189);
 return;
}

function _GenLevelScreen_Update(i1, d4) {
 i1 = i1 | 0;
 d4 = +d4;
 var i2 = 0, i3 = 0;
 i3 = _GenLevelScreen_SelectedInput(i1) | 0;
 i2 = i1 + 300 | 0;
 i1 = 0;
 do {
  HEAP8[i2 + (i1 * 300 | 0) + 146 >> 0] = (i2 + (i1 * 300 | 0) | 0) == (i3 | 0) & 1;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if (i3 | 0) {
  i3 = i3 + 200 | 0;
  HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + d4;
 }
 return;
}

function _DisconnectReadFailed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i4 = i2 + 128 | 0;
 i3 = i2 + 136 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 _String_Format3(i3, 48791, 1841580, 1841588, i4);
 _Logger_Log(i3);
 _MPConnection_Disconnect();
 STACKTOP = i2;
 return;
}

function _Stream_ReadonlyMemory(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Stream_Init(i3);
 HEAP32[i3 >> 2] = 37;
 HEAP32[i3 + 4 >> 2] = 85;
 HEAP32[i3 + 12 >> 2] = 86;
 HEAP32[i3 + 16 >> 2] = 87;
 HEAP32[i3 + 20 >> 2] = 88;
 HEAP32[i3 + 24 >> 2] = 89;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 36 >> 2] = i2;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 44 >> 2] = i1;
 return;
}

function _ChatScreen_SetChatlines(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[1838292 >> 2] | 0) + 4 >> 2] & 511](1838292);
 HEAP32[459307] = (HEAP32[459583] | 0) - i1 + (HEAP32[459307] | 0);
 HEAP32[459583] = i1;
 _TextGroupWidget_RedrawAll(1838292);
 i1 = _ChatScreen_CalcMaxVertices(1837184) | 0;
 HEAP32[459298] = i1;
 _Screen_UpdateVb(1837184);
 HEAP8[1837191] = 1;
 return;
}

function _Mouse_ScrollHWheel(d2) {
 d2 = +d2;
 var i1 = 0;
 i1 = _Utils_AccumulateWheelDelta(1690076, d2) | 0;
 if ((i1 | 0) > 0) {
  do {
   _Input_SetPressed(125);
   i1 = i1 + -1 | 0;
  } while ((i1 | 0) != 0);
  _Input_SetReleased(125);
 } else if ((i1 | 0) < 0) {
  do {
   _Input_SetPressed(124);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 0);
  _Input_SetReleased(124);
 }
 return;
}

function _ChatScreen_KeyUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP8[i3 + 4 >> 0] | 0) if ((HEAP32[422387] | 0) == (i3 | 0)) {
  if ((i2 | 0) == 92) _ChatScreen_EnterChatInput(i3, 1);
  if (HEAP8[1841577] | 0) {
   i2 = (_InputBind_Claims(17, i2, i1) | 0) << 24 >> 24 == 0;
   if (!(i2 | (HEAP8[1867881] | 0) == 0)) _ChatScreen_ToggleAltInput(i3);
  }
 }
 return;
}

function _String_LastIndexOfAt(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = ~i1 + (HEAPU16[i2 + 4 >> 1] | 0) | 0;
 L1 : do if ((i1 | 0) > -1) {
  i2 = HEAP32[i2 >> 2] | 0;
  while (1) {
   if ((HEAP8[i2 + i1 >> 0] | 0) == i3 << 24 >> 24) break L1;
   if ((i1 | 0) > 0) i1 = i1 + -1 | 0; else {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _RayTracer_SetInvalid(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = HEAP32[5308];
 HEAP32[i1 + 4 >> 2] = HEAP32[5309];
 HEAP32[i1 + 8 >> 2] = HEAP32[5310];
 i2 = i1 + 112 | 0;
 HEAP32[i2 >> 2] = HEAP32[5308];
 HEAP32[i2 + 4 >> 2] = HEAP32[5309];
 HEAP32[i2 + 8 >> 2] = HEAP32[5310];
 HEAP8[i1 + 124 >> 0] = 0;
 HEAP16[i1 + 60 >> 1] = 0;
 HEAP8[i1 + 125 >> 0] = 6;
 return;
}

function _Hotkeys_RemoveText(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[422522] | 0;
 if ((i1 | 0) > 0) {
  i3 = 355216;
  i4 = 0;
  while (1) {
   i2 = HEAP32[i3 >> 2] | 0;
   if ((i2 | 0) >= (i5 | 0)) HEAP32[i3 >> 2] = i2 + -1;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i1 | 0)) break; else i3 = i3 + 8 | 0;
  }
 }
 _StringsBuffer_Remove(1690080, i5);
 return;
}

function _PhysicsComp_MoveHor(i2, i4, d3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 var d1 = 0.0, d5 = 0.0;
 d5 = +HEAPF32[i4 >> 2];
 d1 = +HEAPF32[i4 + 8 >> 2];
 d1 = +Math_sqrt(+(d5 * d5 + d1 * d1));
 if (!(d1 < 9.999999747378752e-06)) {
  i2 = HEAP32[i2 + 8 >> 2] | 0;
  _Vec3_Mul1_345(i4, i4, d3 / (d1 < 1.0 ? 1.0 : d1));
  i2 = i2 + 36 | 0;
  _Vec3_Add_328(i2, i2, i4);
 }
 return;
}

function _Widget_CalcPosition(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[466969] | 0;
 i3 = _Gui_CalcPos(HEAP8[i1 + 22 >> 0] | 0, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP32[466968] | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = _Gui_CalcPos(HEAP8[i1 + 23 >> 0] | 0, HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, i2) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Classic_StartLoading() {
 var i1 = 0, i2 = 0, i3 = 0;
 _World_NewMap();
 _LoadingScreen_Show(1841544, 1841552);
 _WoM_CheckMotd();
 HEAP8[1868800] = 0;
 HEAP8[1868801] = 1;
 i3 = _Stopwatch_Measure() | 0;
 i2 = getTempRet0() | 0;
 i1 = 978304;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[454540] = 0;
 _MapState_Init(1728444);
 _MapState_Init(1773268);
 return;
}

function _PackedCol_Tint(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = ((Math_imul(i2 & 255, i1 & 255) | 0) >>> 0) / 255 | 0;
 i3 = ((Math_imul((8 ? i2 >>> 8 : i2) & 255, (8 ? i1 >>> 8 : i1) & 255) | 0) >>> 0) / 255 | 0;
 return i4 | i1 & -16777216 | i3 << 8 | (((Math_imul((16 ? i2 >>> 16 : i2) & 255, (16 ? i1 >>> 16 : i1) & 255) | 0) >>> 0) / 255 | 0) << 16 | 0;
}

function _TextInputWidget_Render2(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 _Gfx_BindTexture(HEAP32[i3 + 112 >> 2] | 0);
 _Gfx_DrawVb_IndexedTris_Range(4, i2, 4);
 i1 = i2 + 4 | 0;
 if (HEAP8[i3 + 146 >> 0] | 0) if (+_Math_Mod1(+HEAPF32[i3 + 200 >> 2]) < .5) {
  _Gfx_BindTexture(HEAP32[i3 + 172 >> 2] | 0);
  _Gfx_DrawVb_IndexedTris_Range(4, i1, 4);
 }
 return i2 + 8 | 0;
}

function _Game_UpdateBlock(i3, i4, i5, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _World_GetBlock_588(i3, i4, i5) | 0;
 _World_SetBlock(i3, i4, i5, i1);
 if (HEAP32[418844] | 0) _EnvRenderer_OnBlockChanged(i3, i4, i5, i2, i1);
 FUNCTION_TABLE_viiiii[HEAP32[467168] & 7](i3, i4, i5, i2, i1);
 _MapRenderer_OnBlockChanged(i3, i4, i5, i1);
 return;
}

function _ButtonWidget_Render2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gfx_BindTexture((HEAP8[1689492] | 0) == 0 ? HEAP32[422380] | 0 : HEAP32[422381] | 0);
 _Gfx_DrawVb_IndexedTris_Range((HEAP32[i1 + 12 >> 2] | 0) > 399 ? 4 : 8, i2, 2);
 i1 = HEAP32[i1 + 40 >> 2] | 0;
 if (i1 | 0) {
  _Gfx_BindTexture(i1);
  _Gfx_DrawVb_IndexedTris_Range(4, i2 + 8 | 0, 2);
 }
 return i2 + 12 | 0;
}

function _ProcessZipEntry_2236(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2;
 i6 = i1;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i4;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = i5;
 _Utils_UNSAFE_GetFilename(i4);
 _Event_RaiseEntry(1677284, i3, i4);
 STACKTOP = i2;
 return 0;
}

function _Png_Expand_INDEXED_4(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 if ((i1 | 0) > 0) do {
  i5 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAPU8[i4 + (1 ? i1 >> 1 : i1) >> 0] | 0;
  i7 = i1 << 2 & 4 ^ 4;
  HEAP32[i2 + (i1 << 2) >> 2] = HEAP32[i3 + (((i7 ? i6 >>> i7 : i6) & 15) << 2) >> 2];
 } while ((i5 | 0) > 1);
 return;
}

function _InputWidget_DeleteKey(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 64 | 0;
 i3 = i5 + 68 | 0;
 if (HEAP16[i3 >> 1] | 0) {
  i2 = i5 + 160 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != -1) {
   _String_DeleteAt(i4, i1);
   if ((HEAP32[i2 >> 2] | 0) >= (HEAPU16[i3 >> 1] | 0)) HEAP32[i2 >> 2] = -1;
   _InputWidget_UpdateText(i5);
  }
 }
 return;
}

function _Vec3_Lerp(i4, i1, i2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 var d5 = 0.0;
 d5 = +HEAPF32[i1 >> 2];
 HEAPF32[i4 >> 2] = d5 + (+HEAPF32[i2 >> 2] - d5) * d3;
 d5 = +HEAPF32[i1 + 4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d5 + (+HEAPF32[i2 + 4 >> 2] - d5) * d3;
 d5 = +HEAPF32[i1 + 8 >> 2];
 HEAPF32[i4 + 8 >> 2] = d5 + (+HEAPF32[i2 + 8 >> 2] - d5) * d3;
 return;
}

function _TouchCtrlsScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 977248;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 6;
 _Menu_AddButtons(i1, i1 + 120 | 0, 195, 9312, 4);
 _Menu_AddButtons(i1, i1 + 456 | 0, 400, 9360, 1);
 _ButtonWidget_Add(i1, i1 + 36 | 0, 400, 203);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _SaveLevelScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 36 | 0;
 _Gui_MakeTitleFont(i2);
 i3 = i1 + 48 | 0;
 _Gui_MakeBodyFont(i3);
 _Screen_UpdateVb(i1);
 _SaveLevelScreen_UpdateSave(i1);
 _TextInputWidget_SetFont(i1 + 312 | 0, i3);
 _ButtonWidget_SetConst(i1 + 228 | 0, 48180, i2);
 _ButtonWidget_SetConst(i1 + 144 | 0, 43470, i2);
 return;
}

function _Png_Expand_INDEXED_2(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 if ((i1 | 0) > 0) do {
  i5 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAPU8[i4 + (2 ? i1 >> 2 : i1) >> 0] | 0;
  i7 = i1 << 1 & 6 ^ 6;
  HEAP32[i2 + (i1 << 2) >> 2] = HEAP32[i3 + (((i7 ? i6 >>> i7 : i6) & 3) << 2) >> 2];
 } while ((i5 | 0) > 1);
 return;
}

function _Input_SetReleased(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 1868476 + i2 | 0;
 do if (HEAP8[i1 >> 0] | 0) {
  HEAP8[i1 >> 0] = 0;
  if ((i2 | 0) >= 122) {
   _Event_RaiseInput(1686384, i2, 1, 15140);
   break;
  }
  _Event_RaiseInput(1685344, i2, 1, 15140);
  _Event_RaiseInput(1686384, i2, 1, 15140);
  if ((i2 | 0) == 119) _Pointer_SetPressed(0, 0);
 } while (0);
 return;
}

function _BindsSourceScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Gui_MakeTitleFont(i3);
 _Screen_UpdateVb(i1);
 _ButtonWidget_SetConst(i1 + 36 | 0, 45383, i3);
 _ButtonWidget_SetConst(i1 + 120 | 0, 45398, i3);
 _ButtonWidget_SetConst(i1 + 204 | 0, 48180, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _TouchOnscreenScreen_Layout(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 288 | 0;
 i2 = 0;
 do {
  _Widget_SetLocation(i1 + (i2 * 84 | 0) | 0, 1, 1, 0, (i2 * 50 | 0) + -75 | 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 4);
 _Menu_LayoutBack(i3 + 36 | 0);
 _Widget_SetLocation(i3 + 120 | 0, 1, 1, -220, 0);
 _Widget_SetLocation(i3 + 204 | 0, 1, 1, 220, 0);
 return;
}

function _TouchMoreScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 977280;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 7;
 _Menu_AddButtons(i1, i1 + 120 | 0, 195, 9376, 4);
 _Menu_AddButtons(i1, i1 + 456 | 0, 400, 9424, 2);
 _ButtonWidget_Add(i1, i1 + 36 | 0, 400, 206);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Stream_PortionRead(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = i4 + 36 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i4 = HEAP32[i4 + 32 >> 2] | 0;
 i4 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 63](i4, i2, i6 >>> 0 > i1 >>> 0 ? i1 : i6, i3) | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0);
 return i4 | 0;
}

function _ReduceEmoji(i1) {
 i1 = i1 | 0;
 switch (i1 | 0) {
 case 127774:
  {
   i1 = 9788;
   break;
  }
 case 127925:
  {
   i1 = 9835;
   break;
  }
 case 128578:
  {
   i1 = 9786;
   break;
  }
 case 128512:
 case 128513:
 case 128515:
  {
   i1 = 9786;
   break;
  }
 case 128516:
 case 128518:
 case 128522:
  {
   i1 = 9786;
   break;
  }
 default:
  {}
 }
 return i1 | 0;
}

function _FlatgrassGen_Generate() {
 var i1 = 0;
 HEAP32[422258] = 32862;
 _FlatgrassGen_MapSet((HEAP32[244734] | 0) / 2 | 0, HEAP32[244737] | 0, 0);
 HEAP32[422258] = 32881;
 _FlatgrassGen_MapSet(0, ((HEAP32[244734] | 0) / 2 | 0) + -2 | 0, 3);
 HEAP32[422258] = 32901;
 i1 = ((HEAP32[244734] | 0) / 2 | 0) + -1 | 0;
 _FlatgrassGen_MapSet(i1, i1, 2);
 HEAP8[1868762] = 1;
 return;
}

function _Event_RaiseInput(i3, i5, i6, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = i3 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   FUNCTION_TABLE_viiii[HEAP32[i3 + (i4 << 2) >> 2] & 31](HEAP32[i3 + 128 + (i4 << 2) >> 2] | 0, i5, i6, i2);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _TouchCtrlsScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 540 | 0;
 _Gui_MakeTitleFont(i2);
 _Screen_UpdateVb(i1);
 _Menu_SetButtons(i1 + 120 | 0, i2, 9312, 5);
 _ButtonWidget_SetConst(i1 + 36 | 0, 50883, i2);
 _TouchCtrls_UpdateTapText(i1);
 _TouchCtrls_UpdateHoldText(i1);
 _TouchCtrls_UpdateSensitivity(i1);
 _TouchCtrls_UpdateScale(i1);
 return;
}

function _Stream_ReadonlyBuffered(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _Stream_Init(i2);
 HEAP32[i2 >> 2] = 38;
 HEAP32[i2 + 4 >> 2] = 90;
 HEAP32[i2 + 16 >> 2] = 91;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = i1;
 HEAP32[i2 + 44 >> 2] = i1;
 HEAP32[i2 + 40 >> 2] = i3;
 HEAP32[i2 + 48 >> 2] = i4;
 return;
}

function _Gui_GetScreen(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[422372] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAPU8[1868770 + i1 >> 0] | 0 | 0) == (i3 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) {
    i1 = 0;
    break L1;
   }
  }
  i1 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = _emscripten_get_sbrk_ptr() | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + i1 | 0;
 if (i1 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap(i1 | 0) | 0)) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 48;
  i3 = -1;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i3 = i2;
 return i3 | 0;
}

function _MovedFromBeg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = _Math_AbsI_1068(i2 - (HEAP32[352464 + (i1 * 24 | 0) + 8 >> 2] | 0) | 0) | 0;
 if ((i2 | 0) > (_Display_ScaleX_1069() | 0)) i1 = 1; else {
  i1 = _Math_AbsI_1068(i3 - (HEAP32[352464 + (i1 * 24 | 0) + 12 >> 2] | 0) | 0) | 0;
  i1 = (i1 | 0) > (_Display_ScaleY_1070() | 0) & 1;
 }
 return i1 | 0;
}

function _Deflate_MatchLen(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 L1 : do if ((i4 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   if ((HEAP8[i3 >> 0] | 0) != (HEAP8[i2 >> 0] | 0)) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i4 | 0)) {
    i3 = i3 + 1 | 0;
    i2 = i2 + 1 | 0;
   } else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _ThumbstickWidget_Render2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = _ThumbstickWidget_CalcDirs(i1) | 0;
 i1 = HEAP32[422383] | 0;
 if (i1 | 0) {
  _Gfx_BindTexture(i1);
  i1 = 0;
  do {
   _Gfx_DrawVb_IndexedTris_Range(4, (i1 << 2) + i3 + ((1 << i1 & i2 | 0) == 0 ? 16 : 0) | 0, 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 4);
 }
 return i3 + 32 | 0;
}

function _Stream_WriteAllTo(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i5;
 i1 = _Stream_CreateFile(i4, i1) | 0;
 if (!i1) {
  i1 = _Stream_Write(i4, i2, i3) | 0;
  i4 = FUNCTION_TABLE_ii[HEAP32[i4 + 28 >> 2] & 63](i4) | 0;
  i1 = (i1 | 0) == 0 ? i4 : i1;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _Atlas_Update(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[460924] = HEAP32[i1 >> 2];
 HEAP32[460925] = HEAP32[i1 + 4 >> 2];
 HEAP32[460926] = HEAP32[i1 + 8 >> 2];
 i2 = (HEAP32[i1 + 4 >> 2] | 0) / 16 | 0;
 HEAP32[460927] = i2;
 i1 = (HEAP32[i1 + 8 >> 2] | 0) / (i2 | 0) | 0;
 HEAP32[460928] = (i1 | 0) < 32 ? i1 : 32;
 _Atlas_Update1D();
 _Atlas_Convert2DTo1D();
 return;
}

function _Png_Expand_INDEXED_1(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 if ((i1 | 0) > 0) do {
  i5 = i1;
  i1 = i1 + -1 | 0;
  i6 = HEAPU8[i4 + (3 ? i1 >> 3 : i1) >> 0] | 0;
  i7 = i1 & 7 ^ 7;
  HEAP32[i2 + (i1 << 2) >> 2] = HEAP32[i3 + (((i7 ? i6 >>> i7 : i6) & 1) << 2) >> 2];
 } while ((i5 | 0) > 1);
 return;
}

function _InitWeatherHeightmap() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = _Mem_Alloc(Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0, 2, 31047) | 0;
 HEAP32[418844] = i1;
 i3 = Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0;
 if ((i3 | 0) > 0) {
  i2 = 0;
  do {
   HEAP16[i1 + (i2 << 1) >> 1] = 32767;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i3 | 0));
 }
 return;
}

function _OnReset_359() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _Gfx_SetFog(0);
 _DeleteStaticVbs();
 _DeleteWeatherVB();
 _Mem_Free(HEAP32[418844] | 0);
 HEAP32[418844] = 0;
 _IVec3_MaxValue(i2);
 HEAP32[418854] = HEAP32[i2 >> 2];
 HEAP32[418855] = HEAP32[i2 + 4 >> 2];
 HEAP32[418856] = HEAP32[i2 + 8 >> 2];
 STACKTOP = i1;
 return;
}

function _ButtonWidget_Init(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Widget_Reset(i3);
 HEAP32[i3 >> 2] = 22988;
 HEAP32[i3 + 68 >> 2] = -1;
 HEAP32[i3 + 80 >> 2] = 0;
 HEAP8[i3 + 21 >> 0] = 2;
 i1 = _Display_ScaleX_2472(i1) | 0;
 HEAP32[i3 + 72 >> 2] = i1;
 i1 = _Display_ScaleY_2473(40) | 0;
 HEAP32[i3 + 76 >> 2] = i1;
 HEAP32[i3 + 32 >> 2] = i2;
 return;
}

function _World_CheckVolume_1837(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = ___muldi3(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0) | 0;
 i3 = ___muldi3(i3 | 0, getTempRet0() | 0, i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0) | 0;
 i2 = getTempRet0() | 0;
 return (i2 >>> 0 < 0 | (i2 | 0) == 0 & i3 >>> 0 < 2147483648) & 1 | 0;
}

function _UNSAFE_GetString(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = 63;
 L1 : while (1) {
  switch (HEAP8[i3 + i1 >> 0] | 0) {
  case 32:
  case 0:
   break;
  default:
   {
    i4 = 3;
    break L1;
   }
  }
  if (!i1) {
   i1 = 0;
   break;
  } else i1 = i1 + -1 | 0;
 }
 if ((i4 | 0) == 3) i1 = i1 + 1 | 0;
 _String_Init_1780(i2, i3, i1);
 return;
}

function _TerrainPngProcess(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Png_Decode(i2, i1) | 0;
 if (!i1) {
  if (!((_Atlas_TryChange(i2) | 0) << 24 >> 24)) _Mem_Free(HEAP32[i2 >> 2] | 0);
 } else {
  _Logger_SysWarn2(i1, 50210, i3);
  _Mem_Free(HEAP32[i2 >> 2] | 0);
 }
 STACKTOP = i4;
 return;
}

function _Stream_BufferedReadU8(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i3 + 36 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) i1 = _Stream_DefaultReadU8(i3, i1) | 0; else {
  i3 = i3 + 32 | 0;
  HEAP8[i1 >> 0] = HEAP8[HEAP32[i3 >> 2] >> 0] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  i1 = 0;
 }
 return i1 | 0;
}

function _Logger_Warn2(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i6 = i5 + 256 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP16[i6 + 4 >> 1] = 0;
 HEAP16[i6 + 6 >> 1] = 256;
 _Logger_FormatWarn2(i6, i4, i1, i3, i2);
 FUNCTION_TABLE_vi[HEAP32[3881] & 511](i6);
 STACKTOP = i5;
 return;
}

function _InputWidget_TryAppendChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = (FUNCTION_TABLE_i[HEAP32[i2 + 44 >> 2] & 63]() | 0) << 6;
 if ((i3 | 0) > (HEAPU16[i2 + 68 >> 1] | 0 | 0)) if (!((FUNCTION_TABLE_iii[HEAP32[i2 + 56 >> 2] & 127](i2, i1) | 0) << 24 >> 24)) i1 = 0; else {
  _InputWidget_AppendChar(i2, i1);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _OnBreakBlockEffect_Handler(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 _Particles_BreakBlockEffect(i5, i4, i2);
 STACKTOP = i3;
 return;
}

function _Matrix_Translate(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = i1;
 i6 = 22728;
 i7 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  i5 = i5 + 4 | 0;
  i6 = i6 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAPF32[i1 + 48 >> 2] = d2;
 HEAPF32[i1 + 52 >> 2] = d3;
 HEAPF32[i1 + 56 >> 2] = d4;
 return;
}

function _Entity_UpdateModelBounds(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i3 + 28 >> 2] & 511](i1);
 FUNCTION_TABLE_vi[HEAP32[i3 + 32 >> 2] & 511](i1);
 i3 = i1 + 92 | 0;
 i2 = i1 + 80 | 0;
 _Vec3_Mul3(i3, i3, i2);
 i3 = i1 + 56 | 0;
 _Vec3_Mul3(i3, i3, i2);
 i1 = i1 + 68 | 0;
 _Vec3_Mul3(i1, i1, i2);
 return;
}

function _Entity_Init(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 80 >> 2] = 1.0;
 HEAPF32[i1 + 84 >> 2] = 1.0;
 HEAPF32[i1 + 88 >> 2] = 1.0;
 HEAP8[i1 + 54 >> 0] = 2;
 HEAPF32[i1 + 120 >> 2] = 1.0;
 HEAPF32[i1 + 124 >> 2] = 1.0;
 HEAPF32[i1 + 420 >> 2] = 1.0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP8[i1 + 196 >> 0] = 0;
 HEAP8[i1 + 260 >> 0] = 0;
 _Entity_SetModel(i1, 14420);
 return;
}

function _EditHotkeyScreen_Show(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP8[1707916] = 1;
 HEAP8[1707918] = 1;
 HEAP32[426978] = 15972;
 i2 = i1;
 i3 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = 1707956;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 i1 = 1707948;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 _Gui_Add(1707912, 50);
 return;
}

function _Convert_ParseUInt16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3;
 HEAP16[i2 >> 1] = 0;
 i4 = (_Convert_ParseInt(i1, i5) | 0) << 24 >> 24 == 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i4 | i1 >>> 0 > 65535) i1 = 0; else {
  HEAP16[i2 >> 1] = i1;
  i1 = 1;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _Block_RecalcIsLiquid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 & 65535;
 switch (HEAP8[1001764 + i2 >> 0] | 0) {
 case 5:
  {
   i1 = 3;
   i3 = 3;
   break;
  }
 case 6:
  {
   i1 = 1;
   i3 = 3;
   break;
  }
 default:
  i1 = 0;
 }
 if ((i3 | 0) == 3) i1 = (HEAP8[1006372 + i2 >> 0] | 0) == i1 << 24 >> 24 & 1;
 HEAP8[992548 + i2 >> 0] = i1;
 return;
}

function _World_CheckVolume(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = ___muldi3(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0) | 0;
 i3 = ___muldi3(i3 | 0, getTempRet0() | 0, i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0) | 0;
 i2 = getTempRet0() | 0;
 return (i2 >>> 0 < 0 | (i2 | 0) == 0 & i3 >>> 0 < 2147483648) & 1 | 0;
}

function _SpecialInputWidget_PointerDown(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = i2 - (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i1 = i3 - (HEAP32[i4 + 8 >> 2] | 0) | 0;
 if (!((_SpecialInputWidget_IntersectsTitle(i4, i2, i1) | 0) << 24 >> 24)) _SpecialInputWidget_IntersectsBody(i4, i2, i1); else _SpecialInputWidget_Redraw(i4);
 return 1;
}

function _MenuInputOverlay_Show(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[1712304] = 1;
 HEAP8[1712306] = 1;
 HEAP32[428205] = i1;
 HEAP32[428206] = i2;
 HEAP8[1712336] = i3;
 HEAP32[428075] = 16524;
 HEAP32[428207] = 1712836;
 HEAP16[856416] = 0;
 HEAP16[856417] = 64;
 _String_Copy(1712828, i4);
 _Gui_Add(1712300, 57);
 return;
}

function _LogInputUsage(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5;
 i1 = HEAP32[415517] | 0;
 if (!i1) i4 = 3; else {
  _StringsBuffer_UNSAFE_Get(i2, 1662060, i1 + -1 | 0);
  if (!(_String_Equals(i3, i2) | 0)) i4 = 3;
 }
 if ((i4 | 0) == 3) _StringsBuffer_Add(1662060, i3);
 STACKTOP = i5;
 return;
}

function _Collisions_ClipX(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d5 = 0.0, d6 = 0.0;
 HEAPF32[i1 + 36 >> 2] = 0.0;
 d5 = +HEAPF32[i1 + 4 >> 2];
 d6 = d5 - +HEAPF32[i4 >> 2] * .5;
 HEAPF32[i2 >> 2] = d6;
 HEAPF32[i3 >> 2] = d6;
 d5 = d5 + +HEAPF32[i4 >> 2] * .5;
 HEAPF32[i2 + 12 >> 2] = d5;
 HEAPF32[i3 + 12 >> 2] = d5;
 return;
}

function _EditHotkeyScreen_LeaveOpen(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i2 + 24 | 0;
 if ((HEAP32[i1 >> 2] | 0) > -1) {
  HEAP32[i1 >> 2] = -1;
  HEAP8[i2 + 52 >> 0] = 0;
  _EditHotkeyScreen_UpdateBaseKey(i2);
  _EditHotkeyScreen_UpdateModifiers(i2);
 }
 i1 = i2 + 42 | 0;
 HEAP8[i1 >> 0] = HEAP8[i1 >> 0] ^ 1;
 _EditHotkeyScreen_UpdateLeaveOpen(i2);
 return;
}

function _UrlWarningOverlay_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 16 >> 2] = 364704;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 6;
 _Overlay_AddLabels(i1, i1 + 212 | 0);
 _ButtonWidget_Add(i1, i1 + 44 | 0, 160, 181);
 _ButtonWidget_Add(i1, i1 + 128 | 0, 160, 182);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _OnMouseWheel(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0;
 if ((HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i3 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   HEAP8[i3 + 7 >> 0] = 1;
   i3 = (FUNCTION_TABLE_iid[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3, d2) | 0) == 0;
   i1 = i1 + 1 | 0;
  } while (i3 & (i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _Models_TextureChanged(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[428699] | 0;
 L1 : do if (i1 | 0) {
  while (1) {
   if (_String_CaselessEqualsConst(i2, HEAP32[i1 >> 2] | 0) | 0) break;
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (!i1) break L1;
  }
  _Game_UpdateTexture(i1 + 8 | 0, i3, i2, i1 + 4 | 0, 0) | 0;
 } while (0);
 return;
}

function _MenuOptionsScreen_PointerMove(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _Menu_DoPointerMove(i4, i1, i2, i3) | 0;
 if ((i1 | 0) != -1) {
  i2 = i4 + 24 | 0;
  if ((i1 | 0) != (HEAP32[i2 >> 2] | 0)) {
   HEAP32[i2 >> 2] = i1;
   if (!(HEAP32[i4 + 84 >> 2] | 0)) _MenuOptionsScreen_SelectExtHelp(i4, i1);
  }
 }
 return 1;
}

function _InventoryScreen_MouseScroll(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 if (!((HEAP8[1868517] | HEAP8[1868516] | HEAP8[1868514] | HEAP8[1868515]) << 24 >> 24)) if (!((HEAP8[1868513] | HEAP8[1868512]) << 24 >> 24)) {
  i1 = i1 + 48 | 0;
  i1 = FUNCTION_TABLE_iid[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, d2) | 0;
 } else i1 = 0; else i1 = 0;
 return i1 | 0;
}

function _Inflate_Init2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 >> 0] = 0;
 HEAP8[i2 + 1 >> 0] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = i2 + 64;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = i1;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 44736 >> 2] = 0;
 return;
}

function _ClassicLighting_GetLightHeight(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = (Math_imul(HEAP32[244733] | 0, i4) | 0) + i3 | 0;
 i1 = HEAP16[(HEAP32[424246] | 0) + (i2 << 1) >> 1] | 0;
 if (i1 << 16 >> 16 == 32767) i1 = _ClassicLighting_CalcHeightAt(i3, (HEAP32[244734] | 0) + -1 | 0, i4, i2) | 0; else i1 = i1 << 16 >> 16;
 return i1 | 0;
}

function _AddVertices(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = i1 & 65535;
 i2 = i2 & 255;
 i1 = HEAPU16[1047844 + ((i4 * 6 | 0) + i2 << 1) >> 1] | 0;
 i3 = HEAP32[460410] | 0;
 i2 = 110944 + ((((HEAP8[1006372 + i4 >> 0] | 0) == 3 & 1) << 9) + (i3 ? i1 >>> i3 : i1) << 5) + (i2 << 2) | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
 return;
}

function _HotbarWidget_PointerUp(i3, i5, i1, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = i3 + 264 | 0;
 i3 = i3 + 296 | 0;
 i2 = 0;
 do {
  i1 = i4 + (i2 << 2) | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) {
   HEAP32[i1 >> 2] = -1;
   HEAPF32[i3 + (i2 << 2) >> 2] = 0.0;
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 8);
 return;
}

function _Gfx_Draw2DTexture(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _Gfx_SetVertexFormat(1);
 i5 = _Gfx_LockDynamicVb(0, 1, 4) | 0;
 HEAP32[i4 >> 2] = i5;
 _Gfx_Make2DQuad(i2, i1, i4);
 _Gfx_UnlockDynamicVb(HEAP32[422313] | 0);
 _Gfx_DrawVb_IndexedTris(4);
 STACKTOP = i3;
 return;
}

function _Directory_IterCallback(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i3 = i2 + 264 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 260;
 _String_AppendUtf8(i3, i1, _String_Length(i1) | 0);
 FUNCTION_TABLE_viii[HEAP32[466955] & 31](i3, HEAP32[466956] | 0, 0);
 STACKTOP = i2;
 return;
}

function _HeldBlockRenderer_GetCol(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0;
 i3 = HEAP32[417347] | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3) | 0;
 d2 = +HEAPF32[i3 + 16 >> 2] + -90.0;
 return _PackedCol_Scale(i1, +_Math_Lerp(.8999999761581421, .699999988079071, +Math_abs(+((d2 < 0.0 ? d2 + 360.0 : d2) + -180.0)) / 180.0)) | 0;
}

function _Event_RaisePluginMessage(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0;
 i1 = i4 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i5 = 0;
  do {
   FUNCTION_TABLE_viii[HEAP32[i4 + (i5 << 2) >> 2] & 31](HEAP32[i4 + 128 + (i5 << 2) >> 2] | 0, i2, i3);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _Convert_ParseUInt8(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3;
 HEAP8[i2 >> 0] = 0;
 i4 = (_Convert_ParseInt(i1, i5) | 0) << 24 >> 24 == 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i4 | i1 >>> 0 > 255) i1 = 0; else {
  HEAP8[i2 >> 0] = i1;
  i1 = 1;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _Chat_Add4(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i6 + 128 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP16[i7 + 4 >> 1] = 0;
 HEAP16[i7 + 6 >> 1] = 128;
 _String_Format4(i7, i5, i1, i2, i3, i4);
 _Chat_AddOf(i7, 0);
 STACKTOP = i6;
 return;
}

function _calloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (!i3) i2 = 0; else {
  i2 = Math_imul(i1, i3) | 0;
  if ((i1 | i3) >>> 0 > 65535) i2 = ((i2 >>> 0) / (i3 >>> 0) | 0 | 0) == (i1 | 0) ? i2 : -1;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) return i1 | 0;
 if (!(HEAP32[i1 + -4 >> 2] & 3)) return i1 | 0;
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function _RotatePillar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (HEAP8[1688969] | 0) {
 case 4:
 case 5:
  {
   _AutoRotate_Insert(i1, i2, 25210);
   break;
  }
 case 0:
 case 1:
  {
   _AutoRotate_Insert(i1, i2, 25214);
   break;
  }
 case 2:
 case 3:
  {
   _AutoRotate_Insert(i1, i2, 25218);
   break;
  }
 default:
  {}
 }
 return _GetRotated(i1, i2) | 0;
}

function _RecalcProperties(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 80 | 0;
 i1 = ~~((+HEAPF32[i3 >> 2] + -.9998999834060669) * 1.0e3) & 65535;
 if (i1 << 16 >> 16) {
  HEAP16[i2 + 52 >> 1] = (i1 & 65535) < 768 ? i1 : 0;
  HEAPF32[i3 >> 2] = 1.0;
  HEAPF32[i2 + 84 >> 2] = 1.0;
  HEAPF32[i2 + 88 >> 2] = 1.0;
  _Entity_UpdateModelBounds(i2);
 }
 return;
}

function _Event_RaiseLightingMode(i3, i5, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = i3 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   FUNCTION_TABLE_viii[HEAP32[i3 + (i4 << 2) >> 2] & 31](HEAP32[i3 + 128 + (i4 << 2) >> 2] | 0, i5, i2);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _DeleteChunks() {
 var i1 = 0;
 i1 = HEAP32[424252] | 0;
 if (i1 | 0) {
  if ((HEAP32[424248] | 0) > 0) {
   _DeleteChunk(i1);
   if ((HEAP32[424248] | 0) > 1) {
    i1 = 1;
    do {
     _DeleteChunk((HEAP32[424252] | 0) + (i1 * 20 | 0) | 0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[424248] | 0));
   }
  }
  _ResetPartCounts();
 }
 return;
}

function _Camera_CheckFocus() {
 var i1 = 0, i2 = 0;
 i2 = (HEAP32[422387] | 0) == 0;
 do if ((i2 & 1 | 0) != (HEAPU8[1868734] | 0 | 0)) {
  HEAP8[1868734] = i2 & 1;
  i1 = HEAP32[414161] | 0;
  if (i2) {
   FUNCTION_TABLE_v[HEAP32[i1 + 28 >> 2] & 127]();
   break;
  } else {
   FUNCTION_TABLE_v[HEAP32[i1 + 32 >> 2] & 127]();
   break;
  }
 } while (0);
 return;
}

function _Stream_PortionSkip(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = i1 + 36 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 < i3 >>> 0) i1 = -857812989; else {
  i1 = HEAP32[i1 + 32 >> 2] | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 12 >> 2] & 127](i1, i3) | 0;
  if (!i1) {
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - i3;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _MouseStateUpdate(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 HEAP8[1868786 + i2 >> 0] = i3;
 if (HEAP8[1841575] | 0) {
  i1 = HEAP32[3864] | 0;
  if ((i1 | 0) == -1) {
   i1 = _Entities_GetClosest(HEAP32[417347] | 0) | 0;
   i1 = (i1 | 0) == -1 ? 255 : i1;
   HEAP32[3864] = i1;
  }
  _CPE_SendPlayerClick(i2, i3, i1 & 255, 1688844);
 }
 return;
}

function _LocalPlayer_HookBinds() {
 HEAP32[89337] = 41;
 HEAP32[89338] = 42;
 HEAP32[89346] = 43;
 HEAP32[89345] = 44;
 HEAP32[89336] = 45;
 HEAP32[89357] = 46;
 HEAP32[89344] = 47;
 HEAP32[89409] = 98;
 HEAP32[89396] = 99;
 HEAP32[89347] = 48;
 HEAP32[89348] = 49;
 HEAP32[89399] = 100;
 HEAP32[89400] = 101;
 HEAP32[89388] = 102;
 HEAP32[89397] = 103;
 return;
}

function _HotkeyListScreen_ActionFunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 8 | 0;
 i3 = i2;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 _EditHotkeyScreen_Show(i1);
 STACKTOP = i2;
 return;
}

function _CPE_SendNotifyAction(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 if (HEAP8[1841592] | 0) {
  HEAP8[i2 >> 0] = 57;
  _Stream_SetU16_BE(i2 + 1 | 0, i1 & 65535);
  _Stream_SetU16_BE(i2 + 3 | 0, i3);
  FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, 5);
 }
 STACKTOP = i4;
 return;
}

function _AnimatedComp_CalcHumanAnim(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0;
 _AnimatedComp_PerpendicularAnim(i1, .23000000417232513, d2, d3, 1);
 _AnimatedComp_PerpendicularAnim(i1, .2800000011920929, d2, d3, 0);
 i4 = i1 + 60 | 0;
 HEAPF32[i4 >> 2] = -+HEAPF32[i4 >> 2];
 i1 = i1 + 64 | 0;
 HEAPF32[i1 >> 2] = -+HEAPF32[i1 >> 2];
 return;
}

function _Window_OnFileUploaded(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i3 = i2 + 264 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 260;
 _String_AppendUtf8(i3, i1, _String_Length(i1) | 0);
 FUNCTION_TABLE_vi[HEAP32[466976] & 511](i3);
 HEAP32[466976] = 0;
 STACKTOP = i2;
 return;
}

function _Matrix_Scale(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = i1;
 i6 = 22728;
 i7 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  i5 = i5 + 4 | 0;
  i6 = i6 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAPF32[i1 >> 2] = d2;
 HEAPF32[i1 + 20 >> 2] = d3;
 HEAPF32[i1 + 40 >> 2] = d4;
 return;
}

function _DrawOpCommand_ParseBlock(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _Block_Parse(i2) | 0;
 if ((i1 | 0) == -1) {
  _Chat_Add2(25979, HEAP32[416804] | 0, i2);
  i1 = -1;
 } else if ((i1 | 0) > (HEAPU8[1688991] | 0 | 0)) if (!((_Block_IsCustomDefined(i1 & 65535) | 0) << 24 >> 24)) {
  _Chat_Add2(26025, HEAP32[416804] | 0, i2);
  i1 = -1;
 }
 return i1 | 0;
}

function _DisconnectInvalidOpcode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i2 + 72 | 0;
 i3 = i2 + 64 | 0;
 HEAP8[i4 >> 0] = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_Format2(i3, 48686, i4, 1868804);
 _Game_Disconnect(22300, i3);
 STACKTOP = i2;
 return;
}

function _TouchCtrls_UpdateSensitivity(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 64 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_Format1(i3, 51075, 1656552);
 _ButtonWidget_Set(i1 + 288 | 0, i3, i1 + 540 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 STACKTOP = i2;
 return;
}

function _KeyBindsScreen_OnBindingClick(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 HEAP32[467164] = 0;
 i4 = i2 + 36 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i3 + 36 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP8[i2 + 6 >> 0] = 0;
 _KeyBindsScreen_Update(i2, i3);
 if ((i1 | 0) > -1) _KeyBindsScreen_Update(i2, i1);
 HEAP32[467164] = 70;
 return;
}

function _Entity_GetColor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 12 | 0;
 i3 = i2;
 _Entity_GetEyePosition(i4, i1);
 _IVec3_Floor(i3, i4);
 i1 = FUNCTION_TABLE_iiii[HEAP32[467171] & 63](HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ChickenModel_MakeParts() {
 _BoxDesc_BuildBox(1716432, 20076);
 _BoxDesc_BuildBox(1716448, 20120);
 _BoxDesc_BuildBox(1716464, 20164);
 _BoxDesc_BuildRotatedBox(1716480, 20208);
 _BoxDesc_BuildBox(1716496, 20252);
 _BoxDesc_BuildBox(1716512, 20296);
 _ChickenModel_MakeLeg(1716528, -3, 0, -2, -1);
 _ChickenModel_MakeLeg(1716544, 0, 3, 1, 2);
 return;
}

function _Model_Get(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[428697] | 0;
 L1 : do if (!i1) i1 = 0; else {
  while (1) {
   if (_String_CaselessEqualsConst(i2, HEAP32[i1 >> 2] | 0) | 0) break;
   i1 = HEAP32[i1 + 68 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break L1;
   }
  }
  if (!(HEAP8[i1 + 42 >> 0] & 1)) _MakeModel(i1);
 } while (0);
 return i1 | 0;
}

function _ChatScreen_BuildMesh(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = _Screen_LockVb(i1) | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = i1 + 1108 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4, i3);
 _Gfx_UnlockDynamicVb(HEAP32[i1 + 12 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _PrintMaxTextureInfo(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i1 = HEAP32[422269] | 0;
 if (!i1) _String_Format2(i2, 35064, 1689068, 1689072); else {
  HEAPF32[i3 >> 2] = +(i1 | 0) * 9.5367431640625e-07;
  _String_Format3(i2, 35022, 1689068, 1689072, i3);
 }
 STACKTOP = i4;
 return;
}

function _Menu_PadAxis(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (!i1) {
  i1 = HEAP32[i2 + 16 >> 2] | 0;
  if (!i1) i1 = 0; else {
   i2 = HEAP32[i3 + 32 >> 2] | 0;
   if (!i2) i1 = 0; else i1 = _Menu_CycleSelected(i3, Math_imul(i2, i1) | 0) | 0;
  }
 } else i1 = _Menu_CycleSelected(i3, i1) | 0;
 return i1 | 0;
}

function _HUDScreen_UpdateFPS(i4, d2) {
 i4 = i4 | 0;
 d2 = +d2;
 var i1 = 0, i3 = 0;
 i3 = i4 + 300 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 i1 = i4 + 296 | 0;
 d2 = +HEAPF32[i1 >> 2] + d2;
 HEAPF32[i1 >> 2] = d2;
 if (!(d2 < 1.0)) {
  _HUDScreen_RemakeLine1(i4);
  HEAPF32[i1 >> 2] = 0.0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[244562] = 0;
 }
 return;
}

function _TextInputWidget_OpenKeyboard(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 _OpenKeyboardArgs_Init_2512(i4, i2 + 64 | 0, HEAP32[i2 + 296 >> 2] | 0);
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 292 >> 2];
 HEAP32[i4 + 20 >> 2] = i1;
 _OnscreenKeyboard_Open(i4);
 STACKTOP = i3;
 return;
}

function _RotateFence(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0, i4 = 0;
 d1 = +_Math_ClampAngle(+HEAPF32[(HEAP32[417347] | 0) + 20 >> 2]);
 if (d1 < 45.0) i4 = 3; else if (d1 > 315.0 | d1 >= 135.0 & d1 < 225.0) i4 = 3; else _AutoRotate_Insert(i2, i3, 25218);
 if ((i4 | 0) == 3) _AutoRotate_Insert(i2, i3, 25214);
 return _GetRotated(i2, i3) | 0;
}

function _Event_RaiseEntry(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_viii[HEAP32[i2 + (i3 << 2) >> 2] & 31](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0, i5, i4);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _TextGroupWidget_RemoveColorPrefix(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if ((i2 + 2 | 0) <= (HEAPU16[i3 + 4 >> 1] | 0)) if ((HEAP8[(HEAP32[i3 >> 2] | 0) + i2 >> 0] | 0) == 38) {
  i1 = i2 + 1 | 0;
  if ((_Drawer2D_ValidColorCodeAt(i3, i1) | 0) << 24 >> 24) {
   _String_DeleteAt(i3, i1);
   _String_DeleteAt(i3, i2);
  }
 }
 return;
}

function _OnNewMap() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[244562] = 0;
 _DeleteChunks();
 _ResetPartCounts();
 _IVec3_MaxValue_1233(i2);
 HEAP32[424258] = HEAP32[i2 >> 2];
 HEAP32[424259] = HEAP32[i2 + 4 >> 2];
 HEAP32[424260] = HEAP32[i2 + 8 >> 2];
 _FreeChunks();
 _FreeParts();
 STACKTOP = i1;
 return;
}

function _HUDScreen_HasHacksChanged(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0;
 i3 = HEAP32[417347] | 0;
 d2 = +_HacksComp_CalcSpeedFactor(i3 + 460 | 0, HEAP8[i3 + 473 >> 0] | 0);
 if (d2 != +HEAPF32[i1 + 312 >> 2]) i1 = 1; else if ((HEAP32[414163] | 0) == (HEAP32[i1 + 316 >> 2] | 0)) i1 = (HEAP8[i1 + 308 >> 0] | 0) != 0 & 1; else i1 = 1;
 return i1 | 0;
}

function _Event_RaiseChat(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_viii[HEAP32[i2 + (i3 << 2) >> 2] & 31](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0, i4, i5);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _CreateLogsDirectory() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i1 = i2;
 _Platform_EncodePath(i1, 13732);
 i1 = _Directory_Create(i1) | 0;
 if ((i1 | 0) == 0 | (i1 | 0) == (HEAP32[5934] | 0)) i1 = 1; else {
  _Chat_DisableLogging();
  _Logger_SysWarn2(i1, 51302, 13732);
  i1 = 0;
 }
 STACKTOP = i2;
 return i1 | 0;
}

function _StringsBuffer_UNSAFE_GetRaw(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i3 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + (i3 << 2) >> 2] | 0;
 i4 = HEAP32[i1 + 5144 >> 2] | 0;
 HEAP32[i2 >> 2] = (HEAP32[i1 >> 2] | 0) + (i4 ? i3 >>> i4 : i3);
 HEAP16[i2 + 4 >> 1] = HEAP32[i1 + 5148 >> 2] & i3;
 HEAP16[i2 + 6 >> 1] = 0;
 return;
}

function _TexPackOverlay_YesClick(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = i1 + 44 | 0;
 _TexturePack_Extract(i2);
 if ((_TexPackOverlay_IsAlways(i3) | 0) << 24 >> 24) _TextureUrls_Accept(i2);
 _Gui_Remove(i1);
 if (!((_TexPackOverlay_IsAlways(i3) | 0) << 24 >> 24)) _CPE_SendNotifyAction(6, 2); else _CPE_SendNotifyAction(6, 3);
 return;
}

function _Log2Stage1(d4) {
 d4 = +d4;
 var i1 = 0, d2 = 0.0, d3 = 0.0;
 d3 = 4.81147460989;
 i1 = 2;
 while (1) {
  d3 = d3 * d4 + +HEAPF64[3040 + (i1 << 3) >> 3];
  if (!i1) break; else i1 = i1 + -1 | 0;
 }
 d2 = 1.0;
 i1 = 2;
 while (1) {
  d2 = d2 * d4 + +HEAPF64[3072 + (i1 << 3) >> 3];
  if (!i1) break; else i1 = i1 + -1 | 0;
 }
 return +(d3 / d2);
}

function _OnFileChanged(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[460930] | 0;
 L1 : do if (i1 | 0) {
  while (1) {
   if (_String_CaselessEqualsConst(i2, HEAP32[i1 >> 2] | 0) | 0) break;
   i1 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i1) break L1;
  }
  FUNCTION_TABLE_vii[HEAP32[i1 + 4 >> 2] & 255](i3, i2);
 } while (0);
 return;
}

function _Http_Init() {
 var i1 = 0, i2 = 0, i3 = 0;
 _Http_InitCommon();
 i3 = (_interop_IsHttpsOnly() | 0) & 255;
 HEAP8[1868811] = i3;
 i3 = _DateTime_CurrentUTC() | 0;
 i2 = getTempRet0() | 0;
 i1 = 985296;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 _RequestList_Init(979024);
 _RequestList_Init(982160);
 _RequestList_Init(985304);
 return;
}

function _FancyLighting_SetActive() {
 HEAP32[467168] = 1;
 HEAP32[467169] = 92;
 HEAP32[467170] = 18;
 HEAP32[467171] = 19;
 HEAP32[467172] = 20;
 HEAP32[467173] = 21;
 HEAP32[467174] = 19;
 HEAP32[467175] = 19;
 HEAP32[467176] = 22;
 HEAP32[467177] = 20;
 HEAP32[467178] = 23;
 HEAP32[467165] = 93;
 HEAP32[467166] = 94;
 HEAP32[467167] = 11;
 return;
}

function _Utils_ParseEnum(i5, i1, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 L1 : do if ((i4 | 0) > 0) {
  i2 = 0;
  do {
   if (_String_CaselessEqualsConst(i5, HEAP32[i3 + (i2 << 2) >> 2] | 0) | 0) {
    i1 = i2;
    break L1;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i4 | 0));
 } while (0);
 return i1 | 0;
}

function _OnReset() {
 var i1 = 0, i2 = 0;
 i1 = 61696;
 i2 = i1 + 96 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = 0;
 do {
  _Block_ResetProps(i1 & 65535);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 768);
 _Block_UpdateAllCulling();
 _Block_RecalculateAllSpriteBB();
 _memset(1057060, 1, 1536) | 0;
 return;
}

function _Gui_GetBlocksWorld() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[422372] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = 0;
  while (1) {
   i1 = HEAP32[352416 + (i3 << 2) >> 2] | 0;
   i3 = i3 + 1 | 0;
   if (HEAP8[i1 + 5 >> 0] | 0) break L1;
   if ((i3 | 0) >= (i2 | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _Game_ShouldClose() {
 var i1 = 0;
 do if (!(HEAP8[1868751] | 0)) i1 = 1; else {
  if (HEAP8[1841572] | 0) {
   i1 = +HEAPF64[122373] + 5.0 >= +HEAPF64[122280];
   break;
  }
  if (!((HEAP8[1868515] | HEAP8[1868514] | HEAP8[1868518] | HEAP8[1868519]) << 24 >> 24)) i1 = (HEAP8[1868593] | 0) == 0; else i1 = 0;
 } while (0);
 return i1 & 1 | 0;
}

function _Event_RaiseRawMove(i2, d4, d5) {
 i2 = i2 | 0;
 d4 = +d4;
 d5 = +d5;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_vidd[HEAP32[i2 + (i3 << 2) >> 2] & 3](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0, d4, d5);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _SpecialInputWidget_Reposition(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 + 12 >> 2] = HEAPU16[i2 + 68 >> 1];
 if (!(HEAP8[i2 + 20 >> 0] | 0)) i1 = 0; else i1 = HEAPU16[i2 + 70 >> 1] | 0;
 HEAP32[i2 + 16 >> 2] = i1;
 _Widget_CalcPosition(i2);
 HEAP16[i2 + 64 >> 1] = HEAP32[i2 + 4 >> 2];
 HEAP16[i2 + 66 >> 1] = HEAP32[i2 + 8 >> 2];
 return;
}

function _Options_GetBool(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 i4 = i5 + 8 | 0;
 if ((_Options_UNSAFE_Get(i2, i3) | 0) << 24 >> 24) {
  i3 = (_Convert_ParseBool(i3, i4) | 0) << 24 >> 24 == 0;
  i1 = i3 ? i1 : HEAP8[i4 >> 0] | 0;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _HandleInactiveChanged(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1867883] | 0)) {
  _Chat_AddOf(1841616, 361);
  _Game_SetFpsLimit(HEAP32[422209] | 0);
  HEAP8[1689228] = 0;
  HEAP8[1689229] = 2;
 } else {
  _Chat_AddOf(14892, 361);
  _Gfx_SetVSync(0);
  _Game_SetMinFrameTime(1.0e3);
  HEAP8[1689228] = 1;
 }
 _emscripten_resume_main_loop();
 return;
}

function _DisconnectInvalidMap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i2 + 64 | 0;
 i3 = i2 + 72 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 64;
 _String_Format1(i3, 47782, i4);
 _Game_Disconnect(21648, i3);
 STACKTOP = i2;
 return;
}

function _Physics_OnNewMapLoaded(i1) {
 i1 = i1 | 0;
 _TickQueue_Clear(1656360);
 _TickQueue_Clear(1656384);
 HEAP32[414102] = (HEAP32[244736] | 0) + -2;
 HEAP32[414103] = (HEAP32[244737] | 0) + -2;
 HEAP32[414104] = (HEAP32[244738] | 0) + -2;
 HEAP32[422262] = HEAP32[244730];
 _Random_SeedFromCurrentTime(978184);
 HEAP32[422263] = 978184;
 return;
}

function _OptionsGroupScreen_PointerMove(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _Menu_DoPointerMove(i4, 0, i2, i3) | 0;
 if ((i1 | 0) != -1) {
  i2 = i4 + 24 | 0;
  if (!(i1 >>> 0 > 7 ? 1 : (i1 | 0) == (HEAP32[i2 >> 2] | 0))) {
   HEAP32[i2 >> 2] = i1;
   _OptionsGroupScreen_UpdateDesc(i4);
  }
 }
 return 1;
}

function _Gui_GetInputGrab() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[422372] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = 0;
  while (1) {
   i1 = HEAP32[352416 + (i3 << 2) >> 2] | 0;
   i3 = i3 + 1 | 0;
   if (HEAP8[i1 + 4 >> 0] | 0) break L1;
   if ((i3 | 0) >= (i2 | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _CPE_ExtAddEntity2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2 + 8 | 0;
 i3 = i2;
 i5 = HEAP8[i1 >> 0] | 0;
 _UNSAFE_GetString(i4, i1 + 1 | 0);
 _UNSAFE_GetString(i3, i1 + 65 | 0);
 _CheckName(i5, i4, i3);
 _AddEntity(i1 + 129 | 0, i5, i4, i3, 1);
 STACKTOP = i2;
 return;
}

function _BuildSkybox() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = _Gfx_CreateVb(1, 24) | 0;
 HEAP32[418851] = i2;
 i2 = _Gfx_LockVb(i2, 1, 24) | 0;
 _Mem_Copy(i2, 2352, 576) | 0;
 i1 = HEAP32[466941] | 0;
 i3 = 0;
 do {
  HEAP32[i2 + (i3 * 24 | 0) + 12 >> 2] = i1;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 24);
 _Gfx_UnlockVb(HEAP32[418851] | 0);
 return;
}

function _Block_SetCustomDefined(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i1 = i1 & 65535;
 i2 = 1 << (i1 & 31);
 if (!(i3 << 24 >> 24)) {
  i3 = 61696 + ((5 ? i1 >>> 5 : i1) << 2) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & ~i2;
 } else {
  i3 = 61696 + ((5 ? i1 >>> 5 : i1) << 2) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | i2;
 }
 return;
}

function _ParseMPArgs(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _String_Copy(14732, i4);
 _String_Copy(14740, i2);
 _String_Copy(1841580, i1);
 i4 = (_Convert_ParseInt(i3, 1841588) | 0) << 24 >> 24 == 0;
 if (i4 | (HEAP32[460397] | 0) >>> 0 > 65535) {
  _WarnInvalidArg(i3);
  i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _Model_Init(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 43 >> 0] = 1;
 HEAP8[i1 + 44 >> 0] = 1;
 HEAP8[i1 + 45 >> 0] = 0;
 HEAP8[i1 + 46 >> 0] = 0;
 HEAP8[i1 + 47 >> 0] = 1;
 HEAPF32[i1 + 56 >> 2] = 2.0;
 HEAPF32[i1 + 60 >> 2] = 1.0;
 HEAP8[i1 + 40 >> 0] = 6;
 HEAP8[i1 + 41 >> 0] = 12;
 HEAP32[i1 + 48 >> 2] = 24;
 HEAP32[i1 + 52 >> 2] = 339;
 return;
}

function _Logger_Warn(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i5 = i4 + 256 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP16[i5 + 4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 256;
 _Logger_FormatWarn(i5, i3, i1, i2);
 FUNCTION_TABLE_vi[HEAP32[3881] & 511](i5);
 STACKTOP = i4;
 return;
}

function _InventoryScreen_UpdateTitle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i2 + 128 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 _InventoryScreen_GetTitleText(i3, i1);
 _TextWidget_Set(1821592, i3, 1818864);
 HEAP8[1818835] = 1;
 STACKTOP = i2;
 return;
}

function _HoldModel_Register() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 1714800;
 i2 = 17012;
 i3 = i1 + 72 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP32[428700] = 46196;
 HEAP32[428703] = 59;
 HEAP32[428704] = 338;
 HEAP32[428706] = 21;
 _Model_Register(1714800);
 return;
}

function _Gui_GetClosable() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[422372] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = 0;
  while (1) {
   i1 = HEAP32[352416 + (i3 << 2) >> 2] | 0;
   i3 = i3 + 1 | 0;
   if (HEAP8[i1 + 6 >> 0] | 0) break L1;
   if ((i3 | 0) >= (i2 | 0)) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _CPE_ExtAddEntity(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2 + 8 | 0;
 i3 = i2;
 i5 = HEAP8[i1 >> 0] | 0;
 _UNSAFE_GetString(i4, i1 + 1 | 0);
 _UNSAFE_GetString(i3, i1 + 65 | 0);
 _CheckName(i5, i4, i3);
 _AddEntity(i1 + 129 | 0, i5, i4, i3, 0);
 STACKTOP = i2;
 return;
}

function _Stream_MemoryReadU8(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i3 + 36 | 0;
 if (!(HEAP32[i1 >> 2] | 0)) i1 = -857812991; else {
  i3 = i3 + 32 | 0;
  HEAP8[i2 >> 0] = HEAP8[HEAP32[i3 >> 2] >> 0] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
  i1 = 0;
 }
 return i1 | 0;
}

function _LocalPlayer_TriggerFlyDown(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!(HEAP32[422387] | 0)) {
  HEAP8[146288 + (i1 * 796 | 0) + 497 >> 0] = 1;
  if (!(HEAP8[146288 + (i1 * 796 | 0) + 474 >> 0] | 0)) i1 = 0; else i1 = (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) != 0 & 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Gen_Start() {
 var i1 = 0, i2 = 0;
 _Gen_Reset();
 i2 = _Mem_TryAlloc(HEAP32[244732] | 0, 1) | 0;
 HEAP32[422257] = i2;
 if (!i2) i1 = 3; else if (!((FUNCTION_TABLE_i[HEAP32[HEAP32[422256] >> 2] & 63]() | 0) << 24 >> 24)) i1 = 3; else _Gen_Run();
 if ((i1 | 0) == 3) {
  _Window_ShowDialog(51856, 33151);
  HEAP8[1868762] = 1;
 }
 return;
}

function _DrawOpCommand_Begin() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 64;
 _String_Format1(i2, 25893, HEAP32[416804] | 0);
 _Chat_AddOf(i2, 256);
 _Event_Register(1678844, 0, 24);
 HEAP8[1868736] = 1;
 STACKTOP = i1;
 return;
}

function _ClassicLighting_ResetColumn(i3, i2, i4, i5, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 if ((i5 | 0) == (i1 | 0)) _MapRenderer_RefreshChunk(i3, i2, i4); else if ((i1 | 0) >= (i5 | 0)) while (1) {
  _MapRenderer_RefreshChunk(i3, i1, i4);
  if ((i1 | 0) > (i5 | 0)) i1 = i1 + -1 | 0; else break;
 }
 return;
}

function _AllocateChunks() {
 var i1 = 0;
 i1 = _Mem_Alloc(HEAP32[424248] | 0, 20, 39354) | 0;
 HEAP32[424252] = i1;
 i1 = _Mem_Alloc(HEAP32[424248] | 0, 4, 39365) | 0;
 HEAP32[424253] = i1;
 i1 = _Mem_Alloc(HEAP32[424248] | 0, 4, 39383) | 0;
 HEAP32[424254] = i1;
 i1 = _Mem_Alloc(HEAP32[424248] | 0, 4, 39401) | 0;
 HEAP32[424255] = i1;
 return;
}

function _MPConnection_Fail(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i2 + 128 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 128;
 HEAP8[1868803] = 0;
 _String_Format2(i3, 48852, 1841580, 1841588);
 _Game_Disconnect(i3, i1);
 _OnClose();
 STACKTOP = i2;
 return;
}

function _LocalPlayer_TriggerFlyUp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!(HEAP32[422387] | 0)) {
  HEAP8[146288 + (i1 * 796 | 0) + 496 >> 0] = 1;
  if (!(HEAP8[146288 + (i1 * 796 | 0) + 474 >> 0] | 0)) i1 = 0; else i1 = (HEAP8[146288 + (i1 * 796 | 0) + 470 >> 0] | 0) != 0 & 1;
 } else i1 = 0;
 return i1 | 0;
}

function _ChatScreen_GetChat(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = (HEAP32[459307] | 0) + i1 | 0;
 if ((i1 | 0) > -1 & (i1 | 0) < (HEAP32[414212] | 0)) _StringsBuffer_UNSAFE_Get(i2, 1656840, i1); else {
  i3 = 1841616;
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = i1;
 }
 return;
}

function _CPE_SetHotbar(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP8[21301] | 0)) {
  i2 = HEAPU8[i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
 } else {
  i2 = ((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0;
  i1 = i1 + 2 | 0;
 }
 i1 = HEAP8[i1 >> 0] | 0;
 if ((i1 & 255) <= 8) HEAP16[1695240 + ((HEAP32[424236] | 0) + (i1 & 255) << 1) >> 1] = i2;
 return;
}

function _OnTextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i3 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   i3 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 127](i3, i2) | 0) == 0;
   i1 = i1 + 1 | 0;
  } while (i3 & (i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _NbtTag_I32(i1) {
 i1 = i1 | 0;
 switch (HEAP8[i1 + 4 >> 0] | 0) {
 case 3:
  {
   i1 = HEAP32[i1 + 20 >> 2] | 0;
   break;
  }
 case 2:
  {
   i1 = HEAP16[i1 + 20 >> 1] | 0;
   break;
  }
 case 1:
  {
   i1 = HEAPU8[i1 + 20 >> 0] | 0;
   break;
  }
 default:
  {
   HEAP32[i1 + 220 >> 2] = -857812894;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _Int_ValidString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP16[i2 + 4 >> 1] | 0) == 1) if ((HEAP8[HEAP32[i2 >> 2] >> 0] | 0) == 45) i1 = 1; else i4 = 3; else i4 = 3;
 if ((i4 | 0) == 3) i1 = _Convert_ParseInt(i2, i1) | 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _AllocState() {
 var i1 = 0;
 _ClassicLighting_AllocState();
 _InitPalettes();
 i1 = HEAP32[244753] | 0;
 HEAP32[422190] = i1;
 i1 = _Mem_AllocCleared(i1, 1, 31168) | 0;
 HEAP32[422181] = i1;
 i1 = _Mem_AllocCleared(HEAP32[422190] | 0, 4, 31180) | 0;
 HEAP32[422189] = i1;
 _Queue_Init(1688728, 16);
 _Queue_Init(1688764, 16);
 return;
}

function _String_AppendUInt32(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i4;
 i1 = _String_MakeUInt32(i1, i2) | 0;
 if ((i1 | 0) > 0) do {
  i5 = i1;
  i1 = i1 + -1 | 0;
  _String_Append(i3, HEAP8[i2 + i1 >> 0] | 0);
 } while ((i5 | 0) > 1);
 STACKTOP = i4;
 return;
}

function _RenderTypeCommand_Execute(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if (!i1) _Chat_AddRaw(29598); else {
  i1 = _EnvRenderer_CalcFlags(i2) | 0;
  if ((i1 | 0) > -1) {
   _EnvRenderer_SetMode(i1);
   _Options_Set(30966, i2);
   _Chat_Add1(29649, i2);
   break;
  } else {
   _Chat_Add1(29685, i2);
   break;
  }
 } while (0);
 return;
}

function _HotbarWidget_MouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 if (!(HEAP8[357294] | 0)) _Inventory_SetSelectedIndex(_HotbarWidget_ScrolledIndex(i2, d1, HEAP32[424235] | 0, -1) | 0); else {
  _Inventory_SetHotbarIndex(_HotbarWidget_ScrolledIndex(i2, d1, (HEAP32[424236] | 0) / 9 | 0, 1) | 0);
  HEAP8[i2 + 120 >> 0] = 1;
 }
 return 1;
}

function _TouchCtrls_SensitivityDone(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 if (i2 << 24 >> 24) {
  _Convert_ParseInt(i3, i1) | 0;
  HEAP32[414138] = HEAP32[i1 >> 2];
  _Options_Set(51194, i3);
  _TouchCtrls_UpdateSensitivity(1864976);
 }
 STACKTOP = i4;
 return;
}

function _ExtractFromFile(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i4;
 i1 = _Stream_OpenFile(i3, i2) | 0;
 if (!i1) {
  i1 = _ExtractFrom(i3, i2) | 0;
  FUNCTION_TABLE_ii[HEAP32[i3 + 28 >> 2] & 63](i3) | 0;
 } else _Logger_SysWarn2(i1, 51350, i2);
 STACKTOP = i4;
 return i1 | 0;
}

function _CPE_HoldThis(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP8[21301] | 0)) {
  i2 = HEAPU8[i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
 } else {
  i2 = ((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0;
  i1 = i1 + 2 | 0;
 }
 i1 = (HEAP8[i1 >> 0] | 0) == 0 & 1;
 HEAP8[1696948] = 1;
 _Inventory_SetSelectedBlock(i2);
 HEAP8[1696948] = i1;
 return;
}

function _SaveLevelScreen_SaveMap(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _Mem_TryAlloc(1, 115588) | 0;
 if (!i2) {
  _Logger_SysWarn(-857812988, 43562);
  i1 = -857812988;
 } else {
  i1 = _DoSaveMap(i1, i2) | 0;
  _Mem_Free(i2);
  if (!i1) {
   HEAPF64[122373] = +HEAPF64[122280];
   _Gui_ShowPauseMenu();
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _LoadingScreen_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 1841488;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 2;
 _TextWidget_Add(i1, i1 + 72 | 0);
 _TextWidget_Add(i1, i1 + 144 | 0);
 _LoadingScreen_CalcMaxVertices(i1);
 _Gfx_SetFog(0);
 _Event_Register(1680664, i1, 39);
 _Event_Register(1680924, i1, 408);
 return;
}

function _Lighting_HandleModeChanged(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 do if ((HEAP8[1868790] | 0) != i3 << 24 >> 24) {
  _Builder_ApplyActive();
  if (!(HEAP8[978980] | 0)) {
   _Lighting_ApplyActive();
   break;
  } else {
   _Lighting_SwitchActive();
   _MapRenderer_Refresh();
   break;
  }
 } while (0);
 return;
}

function _HelpCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i2) _Commands_PrintDefault(); else {
  i2 = _Commands_FindMatch(i1) | 0;
  if (i2 | 0) {
   i3 = 0;
   do {
    i1 = HEAP32[i2 + 12 + (i3 << 2) >> 2] | 0;
    if (i1 | 0) _Chat_AddRaw(i1);
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != 5);
  }
 }
 return;
}

function _Gfx_WarnIfNecessary() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 _String_FromReadonly(i1, _glGetString(7937) | 0);
 if ((_String_IndexOfConst(i1, 34747) | 0) > -1) {
  _Chat_AddRaw(34756);
  _Chat_AddRaw(34825);
  _Chat_AddRaw(34852);
  i1 = 1;
 } else i1 = 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _Stopwatch_ElapsedMicroseconds(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i4 >>> 0 < i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 < i1 >>> 0;
 i4 = _i64Subtract(i3 | 0, i4 | 0, i1 | 0, i2 | 0) | 0;
 i3 = getTempRet0() | 0;
 setTempRet0((i5 ? 0 : i3) | 0);
 return (i5 ? 0 : i4) | 0;
}

function _Nbt_TakeArray(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 16 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 >>> 0 < 65) {
  i1 = _Mem_Alloc(i1, 1, i4) | 0;
  _Mem_Copy(i1, i3 + 20 | 0, HEAP32[i2 >> 2] | 0) | 0;
 } else {
  i4 = i3 + 20 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
 }
 return i1 | 0;
}

function _Mem_Equal(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 L1 : do if (!i1) i1 = 1; else while (1) {
  i1 = i1 + -1 | 0;
  if ((HEAP8[i2 >> 0] | 0) != (HEAP8[i3 >> 0] | 0)) {
   i1 = 0;
   break L1;
  }
  if (!i1) {
   i1 = 1;
   break;
  } else {
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function _MCLevel_Callback(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1;
 i3 = 0;
 while (1) {
  i2 = HEAP32[i2 >> 2] | 0;
  if (!i2) break; else i3 = i3 + 1 | 0;
 }
 switch (i3 & 2147483647 | 0) {
 case 2:
  {
   _MCLevel_Callback_2(i1);
   break;
  }
 case 3:
  {
   _MCLevel_Callback_3(i1);
   break;
  }
 default:
  {}
 }
 return;
}

function _IndexOfScreen(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[422372] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP32[352416 + (i1 << 2) >> 2] | 0) == (i3 | 0)) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) {
    i1 = -1;
    break;
   }
  }
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _ClassicBindingsScreen_Show() {
 HEAP32[427513] = (HEAP8[1868652] | 0) == 2 ? 353600 : 15140;
 if (!(HEAP8[1868755] | 0)) _KeyBindsScreen_Reset(0, 0, 300); else _KeyBindsScreen_Reset(0, 177, 260);
 _KeyBindsScreen_SetLayout(-140, -40, 5);
 _KeyBindsScreen_Show(10, 45559, 6976, (HEAP8[1868755] | 0) == 0 ? 51250 : 44798);
 return;
}

function _Map_ReadBlocks(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0;
 i1 = Math_imul(i1, HEAP32[244734] | 0) | 0;
 HEAP32[244732] = i1;
 i1 = _Mem_TryAlloc(i1, 1) | 0;
 HEAP32[244730] = i1;
 if (!i1) i1 = -857812988; else i1 = _Stream_Read(i2, i1, HEAP32[244732] | 0) | 0;
 return i1 | 0;
}

function _Entities_RenderModels(d2, d4) {
 d2 = +d2;
 d4 = +d4;
 var i1 = 0, i3 = 0;
 _Gfx_SetAlphaTest(1);
 i3 = 0;
 do {
  i1 = HEAP32[1668360 + (i3 << 2) >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vidd[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 3](i1, d2, d4);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 256);
 _Gfx_SetAlphaTest(0);
 return;
}

function _Options_Get(i2, i4, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 _Options_UNSAFE_Get(i2, i3) | 0;
 HEAP16[i4 + 4 >> 1] = 0;
 if (!(HEAP16[i3 + 4 >> 1] | 0)) _String_AppendConst(i4, i1); else _String_AppendString(i4, i3);
 STACKTOP = i5;
 return;
}

function _OnContextRecreated_865(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i2 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 511](i2);
   HEAP8[i2 + 7 >> 0] = 1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _HotbarWidget_BuildOutlineMesh(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_Make2DQuad(i2 + 68 | 0, -1, i1);
 HEAP16[i2 + 44 >> 1] = ~~(+(~~(+HEAPF32[i2 + 104 >> 2] + +(HEAP32[i2 + 4 >> 2] | 0) + +HEAPF32[i2 + 96 >> 2] * +(HEAP32[424235] | 0)) | 0) - +HEAPF32[i2 + 100 >> 2] * .5);
 _Gfx_Make2DQuad(i2 + 40 | 0, -1, i1);
 return;
}

function _Gfx_CreateDynamicVb(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if (!(HEAP8[1689080] | 0)) {
  i1 = _Gfx_AllocDynamicVb(i2, i3) | 0;
  if (!i1) do {
   if (!((_Game_ReduceVRAM() | 0) << 24 >> 24)) _Process_Abort2(0, 33363);
   i1 = _Gfx_AllocDynamicVb(i2, i3) | 0;
  } while (!(i1 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function _Event_RaisePadAxis(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_vii[HEAP32[i2 + (i3 << 2) >> 2] & 255](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0, i4);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _PhysicsComp_CalcJumpVelocity(d2) {
 d2 = +d2;
 var d1 = 0.0;
 if (d2 == 0.0) d1 = 0.0; else {
  d1 = !(d2 >= 768.0) ? (!(d2 >= 512.0) ? (!(d2 >= 256.0) ? 0.0 : 10.0) : 16.5) : 22.5;
  if (+_PhysicsComp_CalcMaxHeight(d1) <= d2) do d1 = d1 + 1.0000000474974513e-03; while (+_PhysicsComp_CalcMaxHeight(d1) <= d2);
 }
 return +d1;
}

function _Event_RaiseString(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_vii[HEAP32[i2 + (i3 << 2) >> 2] & 255](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0, i4);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _Classic_SendChat(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3;
 HEAP8[i4 >> 0] = 13;
 HEAP8[i4 + 1 >> 0] = (HEAP8[1841576] | 0) == 0 ? -1 : i1;
 _WriteString(i4 + 2 | 0, i2);
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i4, 66);
 STACKTOP = i3;
 return;
}

function _Window_OnTextChanged(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 816 | 0;
 i3 = i2 + 800 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 800;
 _String_AppendUtf8(i3, i1, _String_CalcLen(i1, 3200) | 0);
 _Event_RaiseString(1685864, i3);
 STACKTOP = i2;
 return;
}

function _SoundContext_PollBusy(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 HEAP32[i2 >> 2] = 1;
 i1 = _interop_AudioPoll(HEAP32[i1 >> 2] | 0, i2 | 0) | 0;
 if (!i1) {
  HEAP8[i3 >> 0] = (HEAP32[i2 >> 2] | 0) > 0 & 1;
  i1 = 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Logger_FormatWarn2(i3, i5, i1, i4, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i5;
 _String_Format3(i3, 39117, i7, i1, i4);
 _AppendErrorDesc(i3, HEAP32[i7 >> 2] | 0, i2);
 STACKTOP = i6;
 return;
}

function _Animations_Update(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[460410] | 0;
 i1 = HEAP32[1841648 + ((i1 ? i4 >> i1 : i4) << 2) >> 2] | 0;
 if (i1 | 0) {
  i4 = Math_imul(HEAP32[460409] & i4, HEAP32[460927] | 0) | 0;
  _Gfx_UpdateTexture(i1, 0, i4, i2, i3, HEAP8[1689081] | 0);
 }
 return;
}

function _web_main() {
 _SetupProgram(HEAP32[466953] | 0, HEAP32[466954] | 0);
 switch (_ProcessProgramArgs(HEAP32[466953] | 0, HEAP32[466954] | 0) | 0) {
 case 1:
  {
   _String_AppendConst(14732, 53084);
   break;
  }
 case 2:
  break;
 default:
  _Process_Exit(1);
 }
 _emscripten_set_main_loop(102, 0, 0);
 _Game_Setup();
 return;
}

function _World_GetBlock_2595(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_1769(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_1732(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_1151(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_1086(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _Stream_ReadonlyPortion(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 _Stream_Init(i2);
 HEAP32[i2 >> 2] = 36;
 HEAP32[i2 + 4 >> 2] = 81;
 HEAP32[i2 + 12 >> 2] = 82;
 HEAP32[i2 + 20 >> 2] = 83;
 HEAP32[i2 + 24 >> 2] = 84;
 HEAP32[i2 + 32 >> 2] = i3;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP32[i2 + 40 >> 2] = i1;
 return;
}

function _DoCreateWindow() {
 var i1 = 0;
 HEAP8[1867880] = 1;
 HEAP8[1867881] = 1;
 HEAPF32[466972] = 1.5625000232830644e-03;
 HEAPF32[466973] = 2.0833334419876337e-03;
 _HookEvents();
 i1 = _interop_CanvasWidth() | 0;
 HEAP32[466968] = i1;
 i1 = _interop_CanvasHeight() | 0;
 HEAP32[466969] = i1;
 _interop_InitContainer();
 return;
}

function _AddWidget(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 20 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) >= (HEAP32[i3 + 28 >> 2] | 0)) {
  _Process_Abort2(0, 51568);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 i3 = HEAP32[i3 + 16 >> 2] | 0;
 HEAP32[i2 >> 2] = i1 + 1;
 HEAP32[i3 + (i1 << 2) >> 2] = i4;
 return;
}

function _World_GetBlock_588(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_446(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_375(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_356(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_346(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_264(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _World_GetBlock_121(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _TextGroupWidget_BuildMesh(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 40 | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = i1 + 84 | 0;
  i1 = 0;
  do {
   _Gfx_Make2DQuad((HEAP32[i2 >> 2] | 0) + (i1 * 28 | 0) | 0, -1, i4);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 return;
}

function _TableWidget_SetToIndex(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 60 >> 2] = i1;
 HEAP32[i2 + 1668 >> 2] = ((i1 | 0) / (HEAP32[i2 + 44 >> 2] | 0) | 0) + 1 - (HEAP32[i2 + 52 >> 2] | 0);
 _ScrollbarWidget_ClampTopRow(i2 + 1628 | 0);
 _TableWidget_MoveCursorToSelected(i2);
 _TableWidget_RecreateTitle(i2, 1);
 return;
}

function _Menu_LayoutButtons(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   _Widget_SetLocation(i1 + (i4 * 84 | 0) | 0, 1, 1, HEAP16[i3 + (i4 * 12 | 0) >> 1] | 0, HEAP16[i3 + (i4 * 12 | 0) + 2 >> 1] | 0);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i2 | 0));
 }
 return;
}

function _Event_RaiseInt(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = i3 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   FUNCTION_TABLE_vii[HEAP32[i3 + (i4 << 2) >> 2] & 255](HEAP32[i3 + 128 + (i4 << 2) >> 2] | 0, i2);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _ChatScreen_KeyPress(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 do if (!(HEAP8[i3 + 4 >> 0] | 0)) i1 = 0; else {
  i1 = i3 + 40 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   _InputWidget_Append(i3 + 324 | 0, i2);
   i1 = 1;
   break;
  } else {
   HEAP8[i1 >> 0] = 0;
   i1 = 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _Soundboard_PickRandom(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 + -1 & 255) > 8) i1 = 0; else {
  i2 = i1 << 24 >> 24 == 5 ? 4 : i1 & 255;
  i1 = HEAP32[i3 + (i2 * 204 | 0) >> 2] | 0;
  if (!i1) i1 = 0; else i1 = i3 + (i2 * 204 | 0) + 4 + ((_Random_Next(978176, i1) | 0) * 20 | 0) | 0;
 }
 return i1 | 0;
}

function _Huffman_ReverseBits(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = (1 ? i2 >>> 1 : i2) & 21845 | i2 << 1 & 43690;
 i2 = (2 ? i2 >>> 2 : i2) & 13107 | i2 << 2 & 52428;
 i2 = (4 ? i2 >>> 4 : i2) & 3855 | i2 << 4 & 61680;
 i2 = i2 << 8 & 65280 | (8 ? i2 >>> 8 : i2);
 i1 = 16 - (i1 & 255) | 0;
 return (i1 ? i2 >>> i1 : i2) | 0;
}

function _ExtractPng(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Png_Decode(i2, i1) | 0;
 if (!i1) if (!((_Atlas_TryChange(i2) | 0) << 24 >> 24)) i3 = 3; else i1 = 0; else i3 = 3;
 if ((i3 | 0) == 3) _Mem_Free(HEAP32[i2 >> 2] | 0);
 STACKTOP = i4;
 return i1 | 0;
}

function _PackedCol_GetShaded(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = _PackedCol_Scale(i1, .6000000238418579) | 0;
 HEAP32[i2 >> 2] = i5;
 i2 = _PackedCol_Scale(i1, .800000011920929) | 0;
 HEAP32[i4 >> 2] = i2;
 i4 = _PackedCol_Scale(i1, .5) | 0;
 HEAP32[i3 >> 2] = i4;
 return;
}

function _HacksComp_ParseFlag(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i1 = i1 + 44 | 0;
 if ((_String_IndexOfConst(i1, i3) | 0) > -1) {
  i1 = 1;
  i5 = 3;
 } else if ((_String_IndexOfConst(i1, i2) | 0) > -1) {
  i1 = 0;
  i5 = 3;
 }
 if ((i5 | 0) == 3) HEAP8[i4 >> 0] = i1;
 return;
}

function _HUDScreen_BuildCrosshairsMesh(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = ~~(+_Gui_GetCrosshairScale() * 16.0);
 HEAP16[10872] = ((HEAP32[466968] | 0) / 2 | 0) - i2;
 HEAP16[10873] = ((HEAP32[466969] | 0) / 2 | 0) - i2;
 i2 = i2 << 1 & 65535;
 HEAP16[10874] = i2;
 HEAP16[10875] = i2;
 _Gfx_Make2DQuad(21740, -1, i1);
 return;
}

function _Event_RaiseFloat(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, i4 = 0;
 i1 = i3 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   FUNCTION_TABLE_vid[HEAP32[i3 + (i4 << 2) >> 2] & 63](HEAP32[i3 + 128 + (i4 << 2) >> 2] | 0, d2);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _Collisions_ClipYMax(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 HEAPF32[i6 + 8 >> 2] = +HEAPF32[i1 + 16 >> 2] + 1.0000000474974513e-03;
 HEAP8[i6 + 111 >> 0] = 1;
 _Collisions_ClipY(i6, i5, i3, i4);
 HEAP8[i2 + 8 >> 0] = 1;
 return;
}

function _Queue_Dequeue(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = i1 + 20 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = (HEAP32[i1 >> 2] | 0) + (Math_imul(HEAP32[i1 + 4 >> 2] | 0, i4) | 0) | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 12 >> 2] & i4 + 1;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 return i2 | 0;
}

function _MenuOptionsScreen_EnumClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i2 + 36 >> 2] | 0;
 i4 = (FUNCTION_TABLE_i[HEAP32[i3 + 8 >> 2] & 63]() | 0) + 1 | 0;
 FUNCTION_TABLE_vi[HEAP32[i3 + 12 >> 2] & 511]((i4 | 0) % (HEAP32[i3 + 20 >> 2] | 0) | 0);
 _MenuOptionsScreen_Update(i1, i2);
 return;
}

function _Block_SetCollide(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 & 65535;
 HEAP8[1001764 + i3 >> 0] = i2;
 _Block_RecalcIsLiquid(i1);
 i2 = i2 << 24 >> 24 == 3 ? 2 : i2;
 i2 = i2 << 24 >> 24 == 4 ? 2 : i2;
 i2 = i2 << 24 >> 24 == 5 ? 1 : i2;
 HEAP8[1000996 + i3 >> 0] = i2 << 24 >> 24 == 6 ? 1 : i2;
 return;
}

function _BlockModel_GetTex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP16[1047844 + (((HEAPU16[934362] | 0) * 6 | 0) + (i1 & 255) << 1) >> 1] | 0;
 i3 = i1 & 65535;
 i4 = HEAP32[460410] | 0;
 i2 = HEAP32[428718] | 0;
 HEAP32[428718] = i2 + 1;
 HEAP32[803040 + (i2 << 2) >> 2] = i4 ? i3 >>> i4 : i3;
 return i1 | 0;
}

function _World_GetBlock(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (Math_imul(HEAP32[244735] | 0, i2) | 0) + i3 | 0;
 i3 = (Math_imul(i3, HEAP32[244733] | 0) | 0) + i1 | 0;
 return ((HEAPU8[(HEAP32[244731] | 0) + i3 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[244730] | 0) + i3 >> 0] | 0)) & HEAP32[244744] & 65535 | 0;
}

function _SwitchBindsMain(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (HEAP8[1868652] | 0) {
 case 3:
  {
   _BindsSourceScreen_Show();
   break;
  }
 case 2:
  {
   HEAP32[427513] = 353600;
   _NormalBindingsScreen_Show();
   break;
  }
 default:
  {
   HEAP32[427513] = 15140;
   _NormalBindingsScreen_Show();
  }
 }
 return;
}

function _Menu_AddButtons(i5, i1, i6, i3, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   _ButtonWidget_Add(i5, i1 + (i4 * 84 | 0) | 0, i6, HEAP32[i3 + (i4 * 12 | 0) + 8 >> 2] | 0);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i2 | 0));
 }
 return;
}

function _CorpseModel_Register() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 1715352;
 i2 = 17012;
 i3 = i1 + 72 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP32[428838] = 46219;
 HEAP32[428841] = 59;
 HEAP32[428842] = 337;
 _Model_Register(1715352);
 return;
}

function _MenuInputOverlay_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if (!(_Menu_DoInputDown(i3, i2, i1) | 0)) {
  if ((HEAP32[i1 + 32 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i1 + 36 >> 2] | 0) != (i2 | 0)) break;
  _MenuInputOverlay_EnterInput(i3);
 } while (0);
 return _Screen_InputDown(i3, i2, i1) | 0;
}

function _Gfx_CreateIb2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 196608 | 0;
 i6 = i5;
 i4 = _GL_GenAndBind(34963) | 0;
 FUNCTION_TABLE_viii[i2 & 31](i6, i1, i3);
 _glBufferData(34963, i1 << 1 | 0, i6 | 0, 35044);
 STACKTOP = i5;
 return i4 | 0;
}

function _Collisions_ClipYMin(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 HEAPF32[i6 + 8 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i5 + 4 >> 2] + -1.0000000474974513e-03;
 _Collisions_ClipY(i6, i5, i3, i4);
 HEAP8[i2 + 5 >> 0] = 1;
 return;
}

function _TexIdsOverlay_RenderTerrain(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[460408] << 2;
 if ((HEAP32[460407] | 0) > 0) {
  i2 = 0;
  do {
   _Atlas1D_Bind(i2);
   _Gfx_DrawVb_IndexedTris_Range(i3, i1, 2);
   i1 = i1 + i3 | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[460407] | 0));
 }
 return i1 | 0;
}

function _GenLevelScreen_GetSeedInt(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (!(HEAP16[i2 + 1268 >> 1] | 0)) {
  _Random_SeedFromCurrentTime(i1);
  i1 = _Random_Next(i1, 2147483647) | 0;
 } else i1 = _GenLevelScreen_GetInt(i2, 3) | 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _Cw_WriteColor(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i3 = _Nbt_WriteUInt16(_Nbt_WriteDict(i2, i3) | 0, 35631, i1 & 255) | 0;
 i3 = _Nbt_WriteUInt16(i3, 35609, (8 ? i1 >>> 8 : i1) & 255) | 0;
 i3 = _Nbt_WriteUInt16(i3, 35599, (16 ? i1 >>> 16 : i1) & 255) | 0;
 HEAP8[i3 >> 0] = 0;
 return i3 + 1 | 0;
}

function _ClassicGenScreen_Gen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Random_SeedFromCurrentTime(i3);
 HEAP32[422256] = 14884;
 i3 = _Random_Next(i3, 2147483647) | 0;
 HEAP32[422266] = i3;
 _Gui_Remove(1711856);
 _Menu_BeginGen(i1, 64, i1);
 STACKTOP = i2;
 return;
}

function _WoM_ParseCol(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 if ((_Convert_ParseInt(i3, i2) | 0) << 24 >> 24) {
  i1 = HEAP32[i2 >> 2] | 0;
  i1 = i1 & 65280 | i1 << 16 | (16 ? i1 >>> 16 : i1) & 255 | -16777216;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _TouchMoreScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _Gui_MakeTitleFont(i3);
 _Screen_UpdateVb(i1);
 _Menu_SetButtons(i1 + 120 | 0, i3, 9376, 6);
 _ButtonWidget_SetConst(i1 + 36 | 0, 51211, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _RenderBorders(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = 1006372 + (i1 & 65535) | 0;
 _Gfx_SetupAlphaState(HEAP8[i1 >> 0] | 0);
 _Gfx_BindTexture(i3);
 _Gfx_SetVertexFormat(1);
 _Gfx_BindVb(i4);
 _Gfx_DrawVb_IndexedTris(i2);
 _Gfx_RestoreAlphaState(HEAP8[i1 >> 0] | 0);
 return;
}

function _GetCachedTag(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP16[i5 + 4 >> 1] = 0;
 HEAP16[i5 + 6 >> 1] = 24;
 _HashUrl(i5, i3);
 _EntryList_UNSAFE_Get(i1, i2, i5, 32);
 STACKTOP = i4;
 return;
}

function _ScrollbarWidget_ClampTopRow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (HEAP32[i1 + 44 >> 2] | 0) - (HEAP32[i1 + 48 >> 2] | 0) | 0;
 i3 = i1 + 40 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = (i1 | 0) < (i2 | 0);
 i1 = i4 ? i1 : i2;
 i2 = (i1 | 0) < 0;
 if (i2 | i4 ^ 1) HEAP32[i3 >> 2] = i2 ? 0 : i1;
 return;
}

function _Menu_UnselectAll(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i1 = HEAP32[i1 + 16 >> 2] | 0;
  i3 = 0;
  do {
   i2 = HEAP32[i1 + (i3 << 2) >> 2] | 0;
   if (i2 | 0) HEAP8[i2 + 20 >> 0] = 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i4 | 0));
 }
 return;
}

function _Block_UndefineCustom(i1) {
 i1 = i1 | 0;
 _Block_ResetProps(i1);
 _Block_UpdateCulling(i1);
 _Inventory_Remove(i1);
 if ((i1 & 65535) < 66) _Inventory_AddDefault(i1);
 _Block_SetCustomDefined(i1, 0);
 _Event_RaiseVoid(1680144);
 if ((HEAP8[1006372 + (i1 & 65535) >> 0] | 0) == 5) _Block_RecalculateBB(i1);
 return;
}

function _WarnInvalidArg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i3 = i2 + 256 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 256;
 _String_Format2(i3, 53139, 53147, i1);
 HEAP32[3880] = 53123;
 _Logger_DialogWarn(i3);
 STACKTOP = i2;
 return;
}

function _PauseScreenBase_ContextRecreated(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Screen_UpdateVb(i1);
 _Gui_MakeTitleFont(i2);
 _Menu_SetButtons(i1 + 44 | 0, i2, HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0);
 _ButtonWidget_SetConst(i1 + 632 | 0, 51211, i2);
 _TextWidget_SetConst(i1 + 716 | 0, 43365, i2);
 return;
}

function _IsometricDrawer_GetTexLoc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i2 = HEAP16[1047844 + (((i1 & 65535) * 6 | 0) + (i2 & 255) << 1) >> 1] | 0;
 i3 = i2 & 65535;
 i4 = HEAP32[460410] | 0;
 i1 = HEAP32[424240] | 0;
 HEAP32[424240] = i1 + 4;
 HEAP32[i1 >> 2] = i4 ? i3 >>> i4 : i3;
 return i2 | 0;
}

function _GLContext_GetApiInfo(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i1 = i4;
 _interop_GetGpuRenderer(i1 | 0, 600);
 i2 = _String_CalcLen(i1, 600) | 0;
 if (i2 | 0) {
  _String_AppendConst(i3, 53491);
  _String_AppendUtf8(i3, i1, i2);
 }
 STACKTOP = i4;
 return;
}

function _Fcm_ReadString(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Stream_Read(i3, i2, 2) | 0;
 if (!i1) {
  i1 = (_Stream_GetU16_LE(i2) | 0) & 65535;
  i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 12 >> 2] & 127](i3, i1) | 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Font_CalcHeight(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = i2 << 24 >> 24 != 0;
 if (HEAP32[i3 >> 2] | 0) return (i2 ? i1 + 2 | 0 : i1) | 0;
 if (i2) {
  i3 = HEAP16[i3 + 4 >> 1] | 0;
  i1 = i1 + ((3 ? (i3 & 65535) >>> 3 : i3 & 65535) & 65535) | 0;
 }
 return i1 | 0;
}

function _ClassicLighting_Color_XSide(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_1148(i1, i2, i3) | 0) << 24 >> 24)) i1 = HEAP32[466943] | 0; else {
  i1 = (_ClassicLighting_GetLightHeight(i1, i3) | 0) < (i2 | 0);
  i1 = i1 ? HEAP32[466943] | 0 : HEAP32[466947] | 0;
 }
 return i1 | 0;
}

function _String_AppendHex(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = (4 ? (i2 & 255) >>> 4 : i2 & 255) & 255;
 i4 = i2 & 15;
 i3 = i4 & 255;
 _String_Append(i1, ((i2 & 255) < 160 ? i5 | 48 : i5 + 55 | 0) & 255);
 _String_Append(i1, ((i4 & 255) < 10 ? i3 | 48 : i3 + 55 | 0) & 255);
 return;
}

function _Server_RetrieveTexturePack(i1) {
 i1 = i1 | 0;
 do if (HEAP8[1868757] | 0) if (!((_TextureUrls_HasDenied(i1) | 0) << 24 >> 24)) {
  if (HEAP16[i1 + 4 >> 1] | 0) if (!((_TextureUrls_HasAccepted(i1) | 0) << 24 >> 24)) {
   _TexPackOverlay_Show(i1);
   break;
  }
  _TexturePack_Extract(i1);
 } while (0);
 return;
}

function _MPConnection_SendBlock(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(i1 << 16 >> 16)) _Classic_SendSetBlock(i3, i4, i5, 0, HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0); else _Classic_SendSetBlock(i3, i4, i5, 1, i1);
 return;
}

function _HUDScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Screen_UpdateVb(i1);
 i2 = i1 + 36 | 0;
 _Font_Make(i2, 16, 4);
 _Font_SetPadding(i2, 2);
 _HotbarWidget_SetFont(i1 + 332 | 0, i2);
 _HUDScreen_RemakeLine1(i1);
 _TextAtlas_Make(i1 + 192 | 0, 21724, i2, 21732);
 _HUDScreen_RemakeLine2(i1);
 return;
}

function _Gui_LayoutAll() {
 var i1 = 0, i2 = 0;
 if ((HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i2 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] & 511](i2);
   HEAP8[i2 + 7 >> 0] = 1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _DeferredEnableRawMouse() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i1 = i2;
 if (HEAP8[1868648] | 0) {
  HEAP32[i1 >> 2] = 0;
  _emscripten_get_pointerlock_status(i1 | 0) | 0;
  if (!(HEAP32[i1 >> 2] | 0)) _emscripten_request_pointerlock(53305, 0) | 0;
 }
 STACKTOP = i2;
 return;
}

function _Directory_Enum(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i5 = i4;
 _Platform_EncodePath(i5, i3);
 HEAP32[466956] = i2;
 HEAP32[466955] = i1;
 i3 = 0 - (_interop_DirectoryIter(i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _Vec3_TransformY(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i1 + 16 >> 2] * d3 + +HEAPF32[i1 + 48 >> 2];
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[i1 + 20 >> 2] * d3 + +HEAPF32[i1 + 52 >> 2];
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i1 + 24 >> 2] * d3 + +HEAPF32[i1 + 56 >> 2];
 return;
}

function _ListScreen_UpdatePage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (HEAP32[i1 + 916 >> 2] | 0) + -5 | 0;
 i3 = i1 + 804 | 0;
 _Widget_SetDisabled(i1 + 456 | 0, (HEAP32[i3 >> 2] | 0) < 1 & 1);
 _Widget_SetDisabled(i1 + 540 | 0, (HEAP32[i3 >> 2] | 0) >= (i2 | 0) & 1);
 _ListScreen_UpdateTitle(i1);
 return;
}

function _Gfx_RestoreAlphaState(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 3:
  {
   _Gfx_SetAlphaBlending(0);
   break;
  }
 case 1:
  {
   _Gfx_SetAlphaTest(0);
   break;
  }
 case 2:
  {
   _Gfx_SetAlphaTest(0);
   break;
  }
 case 5:
  {
   _Gfx_SetAlphaTest(0);
   break;
  }
 default:
  {}
 }
 return;
}

function _Entity_GetEyePosition(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 d4 = +HEAPF32[i2 + 8 >> 2];
 i3 = HEAP32[i2 + 12 >> 2] | 0;
 d4 = d4 + +_Entity_GetEyeHeight(i2);
 HEAP32[i1 >> 2] = i5;
 HEAPF32[i1 + 4 >> 2] = d4;
 HEAP32[i1 + 8 >> 2] = i3;
 return;
}

function _Utils_CRC32(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 if (!i4) i1 = 0; else {
  i1 = -1;
  i3 = 0;
  do {
   i1 = HEAP32[9792 + ((i1 & 255 ^ (HEAPU8[i2 + i3 >> 0] | 0)) << 2) >> 2] ^ (8 ? i1 >>> 8 : i1);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i4 | 0));
  i1 = ~i1;
 }
 return i1 | 0;
}

function _Stream_PortionReadU8(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i4 + 36 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) i1 = -857812991; else {
  i4 = HEAP32[i4 + 32 >> 2] | 0;
  HEAP32[i1 >> 2] = i2 + -1;
  i1 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 127](i4, i3) | 0;
 }
 return i1 | 0;
}

function _GeneratingScreen_Update(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[422258] | 0;
 i3 = i4 + 232 | 0;
 if ((i2 | 0) != (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i3 >> 2] = i2;
  HEAP16[i4 + 228 >> 1] = 0;
  _String_AppendConst(i4 + 224 | 0, i2);
  _LoadingScreen_SetMessage(i4);
 }
 return;
}

function _Gamepad_Apply(i2, i1, i5, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 i3 = 353600 + (i2 * 220 | 0) | 0;
 HEAP32[353600 + (i2 * 220 | 0) + 8 >> 2] = 0;
 i1 = i1 + 149 | 0;
 if (!i4) _Event_RaiseInput(1686384, i1, i5, i3); else _Event_RaiseInput(1686124, i1, i5, i3);
 return;
}

function _ClassicLighting_Color(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_1148(i1, i2, i3) | 0) << 24 >> 24)) i1 = HEAP32[466942] | 0; else {
  i1 = (_ClassicLighting_GetLightHeight(i1, i3) | 0) < (i2 | 0);
  i1 = i1 ? HEAP32[466942] | 0 : HEAP32[466946] | 0;
 }
 return i1 | 0;
}

function _OnContextLost_362(i1) {
 i1 = i1 | 0;
 _DeleteStaticVbs();
 _DeleteWeatherVB();
 _Gfx_DeleteTexture(1675384);
 _Gfx_DeleteTexture(1675380);
 if (!(HEAP8[1689082] | 0)) {
  _Gfx_DeleteTexture(1675428);
  _Gfx_DeleteTexture(1675432);
  _Gfx_DeleteTexture(1675436);
  _Gfx_DeleteTexture(1675440);
 }
 return;
}

function _HUDscreen_PointerDown(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP8[1689553] | 0) != 0 | (HEAP32[422387] | 0) != 0) {
  i2 = i2 + 332 | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2, i1, i3, i4) | 0;
 } else i1 = 0;
 return i1 | 0;
}

function _Gfx_SetupAlphaState(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 3:
  {
   _Gfx_SetAlphaBlending(1);
   break;
  }
 case 1:
  {
   _Gfx_SetAlphaTest(1);
   break;
  }
 case 2:
  {
   _Gfx_SetAlphaTest(1);
   break;
  }
 case 5:
  {
   _Gfx_SetAlphaTest(1);
   break;
  }
 default:
  {}
 }
 return;
}

function _OnKeyPress_2921(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _DeferredEnableRawMouse();
 if ((HEAP8[1868784] | 0) == 0 | (HEAP8[1868814] | 0) == 0) if (!(HEAP32[i2 + 80 >> 2] | 0)) {
  _Event_RaiseInt(1684824, HEAP32[i2 + 152 >> 2] | 0);
  i1 = 1;
 } else i1 = 0; else i1 = 0;
 return i1 | 0;
}

function _HUDscreen_MouseScroll(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0;
 i3 = (_Input_HandleMouseWheel(d2) | 0) << 24 >> 24 != 0;
 if (i3 | (HEAP8[1696948] | 0) == 0) i1 = 0; else {
  i1 = i1 + 332 | 0;
  i1 = FUNCTION_TABLE_iid[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, d2) | 0;
 }
 return i1 | 0;
}

function _Entity_CopySkin(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 112 >> 2] = HEAP32[i2 + 112 >> 2];
 HEAP8[i1 + 108 >> 0] = HEAP8[i2 + 108 >> 0] | 0;
 HEAP32[i1 + 120 >> 2] = HEAP32[i2 + 120 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i2 + 124 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i2 + 116 >> 2];
 return;
}

function _Entities_ContextLost(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = 0;
 do {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) {
   if (HEAP8[i1 + 54 >> 0] & 2) _Gfx_DeleteDynamicVb(i1 + 416 | 0);
   if (!(HEAP8[1689082] | 0)) _DeleteSkin(i1);
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 return;
}

function _CPE_SendExtEntry(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3;
 HEAP8[i4 >> 0] = 17;
 _WriteString(i4 + 1 | 0, i1);
 _Stream_SetU32_BE(i4 + 65 | 0, i2);
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i4, 69);
 STACKTOP = i3;
 return;
}

function _SysFonts_GetNames(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i2 = 0;
 do {
  _String_FromReadonly(i3, HEAP32[8656 + (i2 << 2) >> 2] | 0);
  _StringsBuffer_Add(i1, i3);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 18);
 STACKTOP = i4;
 return;
}

function _Menu_SetButtons(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 if ((i2 | 0) > 0) {
  i5 = 0;
  do {
   _ButtonWidget_SetConst(i1 + (i5 * 84 | 0) | 0, HEAP32[i3 + (i5 * 12 | 0) + 4 >> 2] | 0, i4);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i2 | 0));
 }
 return;
}

function _Logger_FormatWarn(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 _String_Format2(i3, 38097, i6, i1);
 _AppendErrorDesc(i3, HEAP32[i6 >> 2] | 0, i2);
 STACKTOP = i5;
 return;
}

function _InputWidget_CopyFromClipboard(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 i3 = i2 + 2048 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP16[i3 + 4 >> 1] = 0;
 HEAP16[i3 + 6 >> 1] = 2048;
 _Clipboard_GetText(i3);
 _InputWidget_AppendText(i1, i3);
 STACKTOP = i2;
 return;
}

function _Custom_Tick(d2) {
 d2 = +d2;
 var i1 = 0;
 if ((HEAP32[431723] | 0) > 0) {
  i1 = 0;
  do {
   if ((_CustomParticle_Tick(885408 + (i1 * 52 | 0) | 0, d2) | 0) << 24 >> 24) {
    _Custom_RemoveAt(i1);
    i1 = i1 + -1 | 0;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[431723] | 0));
 }
 return;
}

function _TouchOnscreenScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Screen_UpdateVb(i1);
 _TouchOnscreen_UpdateAll(i1);
 i2 = i1 + 624 | 0;
 _ButtonWidget_SetConst(i1 + 36 | 0, 50883, i2);
 _ButtonWidget_SetConst(i1 + 120 | 0, 50888, i2);
 _ButtonWidget_SetConst(i1 + 204 | 0, 50890, i2);
 return;
}

function _TickQueue_Dequeue(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = i1 + 16 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + (i4 << 2) >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2] & i4 + 1;
 i1 = i1 + 12 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 return i2 | 0;
}

function _Terrain_Tick(d2) {
 d2 = +d2;
 var i1 = 0;
 if ((HEAP32[431722] | 0) > 0) {
  i1 = 0;
  do {
   if ((_TerrainParticle_Tick(847008 + (i1 << 6) | 0, d2) | 0) << 24 >> 24) {
    _Terrain_RemoveAt(i1);
    i1 = i1 + -1 | 0;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[431722] | 0));
 }
 return;
}

function _LocalPlayer_RenderModel(i2, d1, d3) {
 i2 = i2 | 0;
 d1 = +d1;
 d3 = +d3;
 var i4 = 0;
 _AnimatedComp_GetCurrent(i2, d3);
 if (!(HEAP8[HEAP32[414161] >> 0] | 0)) {
  if ((HEAP32[417347] | 0) != (i2 | 0)) i4 = 3;
 } else i4 = 3;
 if ((i4 | 0) == 3) _Model_Render(HEAP32[i2 + 48 >> 2] | 0, i2);
 return;
}

function _Event_RaiseVoid(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 256 | 0;
 if ((HEAP32[i1 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   FUNCTION_TABLE_vi[HEAP32[i2 + (i3 << 2) >> 2] & 511](HEAP32[i2 + 128 + (i3 << 2) >> 2] | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
 }
 return;
}

function _PhysicsComp_GetSpeed(i3, d1, i2) {
 i3 = i3 | 0;
 d1 = +d1;
 i2 = i2 | 0;
 var d4 = 0.0;
 d1 = (HEAP8[i3 + 1 >> 0] | 0) == 0 ? 1.0 : d1;
 d1 = d1 * (+_HacksComp_CalcSpeedFactor(i3, i2) + 1.0);
 if (!(HEAP8[i3 + 13 >> 0] | 0)) {
  d4 = +HEAPF32[i3 + 40 >> 2];
  d1 = d1 < d4 ? d1 : d4;
 }
 return +d1;
}

function _OnBlockChanged(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i2 << 16 >> 16 != i1 << 16 >> 16) {
  _ClassicLighting_OnBlockChanged(i3, i4, i5, i2, i1);
  _CalcBlockChange(i3, i4, i5, i2, i1, 0);
  _CalcBlockChange(i3, i4, i5, i2, i1, 1);
 }
 return;
}

function _MenuOptionsScreen_LayoutExtHelp(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 132 | 0;
 _Widget_SetLocation(i2, 0, 3, 0, 100);
 HEAP32[i1 + 156 >> 2] = ((HEAP32[466968] | 0) / 2 | 0) - ((HEAP32[i1 + 144 >> 2] | 0) / 2 | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _ClassicGenScreen_Layout(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1 + 372 | 0, 1, 1, 0, -150);
 _Widget_SetLocation(i1 + 36 | 0, 1, 1, 0, -100);
 _Widget_SetLocation(i1 + 120 | 0, 1, 1, 0, -50);
 _Widget_SetLocation(i1 + 204 | 0, 1, 1, 0, 0);
 _Widget_SetLocation(i1 + 288 | 0, 1, 2, 0, 80);
 return;
}

function _Stream_FromFile(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Stream_Init(i2);
 HEAP32[i2 + 32 >> 2] = i1;
 HEAP32[i2 >> 2] = 34;
 HEAP32[i2 + 8 >> 2] = 35;
 HEAP32[i2 + 28 >> 2] = 34;
 HEAP32[i2 + 12 >> 2] = 77;
 HEAP32[i2 + 16 >> 2] = 78;
 HEAP32[i2 + 20 >> 2] = 79;
 HEAP32[i2 + 24 >> 2] = 80;
 return;
}

function _Stream_CreateFile(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i5 = i3 + 8 | 0;
 i4 = i3;
 _Platform_EncodePath(i5, i1);
 i1 = _File_Create(i4, i5) | 0;
 _Stream_FromFile(i2, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return i1 | 0;
}

function _PauseScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _PauseScreenBase_ContextRecreated(i1, i3);
 _ButtonWidget_SetConst(i1 + 548 | 0, 48427, i3);
 _PauseScreen_CheckHacksAllowed(i1);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _HeldBlockRenderer_ResetAnim(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 HEAPF32[422498] = 0.0;
 HEAPF32[422499] = 0.0;
 HEAP8[1868783] = 0;
 HEAP8[1868781] = 0;
 HEAPF32[3777] = d1;
 if (i2 << 24 >> 24) HEAP16[934360] = HEAP16[1695240 + ((HEAP32[424235] | 0) + (HEAP32[424236] | 0) << 1) >> 1] | 0;
 return;
}

function _GZip_StreamWriteFirst(i5, i3, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0;
 i1 = _Stream_Write(HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + 20 >> 2] | 0, 30197, 10) | 0;
 if (!i1) {
  HEAP32[i5 + 8 >> 2] = 31;
  i1 = _GZip_StreamWrite(i5, i3, i2, i4) | 0;
 }
 return i1 | 0;
}

function _EntryList_Remove(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0;
 i1 = _EntryList_Find(i3, i2, i4) | 0;
 if ((i1 | 0) == -1) i1 = 0; else {
  do {
   _StringsBuffer_Remove(i3, i1);
   i1 = _EntryList_Find(i3, i2, i4) | 0;
  } while ((i1 | 0) != -1);
  i1 = 1;
 }
 return i1 | 0;
}

function _DateTime_CurrentUTC() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 _gettimeofday(i1 | 0, 0) | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, 2006054656, 14) | 0;
 setTempRet0(getTempRet0() | 0);
 STACKTOP = i2;
 return i1 | 0;
}

function _CPE_ChangeModel(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i4 = HEAP8[i1 >> 0] | 0;
 _UNSAFE_GetString(i2, i1 + 1 | 0);
 i1 = HEAP32[1668360 + ((i4 & 255) << 2) >> 2] | 0;
 if (i1 | 0) _Entity_SetModel(i1, i2);
 STACKTOP = i3;
 return;
}

function _BlockDefs_UndefineBlock(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP8[21301] | 0)) i1 = HEAPU8[i1 >> 0] | 0; else i1 = ((_Stream_GetU16_BE(i1) | 0) & 65535) % 768 | 0;
 i2 = HEAP8[993316 + (i1 & 65535) >> 0] | 0;
 _Block_UndefineCustom(i1);
 _BlockDefs_OnBlocksLightPropertyUpdated(i1, i2);
 return;
}

function _Model_LockVB(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[428692] | 0;
 if (!i1) {
  i1 = _Gfx_CreateDynamicVb(1, HEAP32[428694] | 0) | 0;
  HEAP32[428692] = i1;
 }
 HEAP32[428720] = i1;
 HEAP32[428721] = HEAP32[428693];
 i2 = _Gfx_LockDynamicVb(i1, 1, i2) | 0;
 HEAP32[428693] = i2;
 return;
}

function _MenuOptionsScreen_IntSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i1 = HEAP32[i1 + 36 >> 2] | 0;
 _Convert_ParseInt(i2, i4) | 0;
 FUNCTION_TABLE_vi[HEAP32[i1 + 12 >> 2] & 511](HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _MakeModel(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[428691] | 0;
 HEAP32[428691] = i1;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = 0;
 FUNCTION_TABLE_v[HEAP32[i1 + 12 >> 2] & 127]();
 i1 = i1 + 42 | 0;
 HEAP8[i1 >> 0] = HEAP8[i1 >> 0] | 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[428691] = i2;
 return;
}

function _CPE_SendExtInfo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2;
 HEAP8[i3 >> 0] = 16;
 _WriteString(i3 + 1 | 0, 1841560);
 _Stream_SetU16_BE(i3 + 65 | 0, i1 & 65535);
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i3, 67);
 STACKTOP = i2;
 return;
}

function _Stream_MemorySkip(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i1 = i1 + 32 | 0;
 if (i3 >>> 0 < i4 >>> 0) i1 = -857812989; else {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
  HEAP32[i2 >> 2] = i3 - i4;
  i1 = 0;
 }
 return i1 | 0;
}

function _Stream_DefaultReadU8(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 63](i2, i1, 1, i3) | 0;
 if (!i1) i1 = (HEAP32[i3 >> 2] | 0) == 0 ? -857812991 : 0;
 STACKTOP = i4;
 return i1 | 0;
}

function _HotbarWidget_InputUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((_InputBind_Claims(30, i2, i1) | 0) << 24 >> 24) {
  i1 = i3 + 120 | 0;
  if (HEAP8[i1 >> 0] | 0) {
   HEAP8[i1 >> 0] = 0;
   break;
  }
  if (HEAP8[1867881] | 0) _Inventory_SwitchHotbar();
 } while (0);
 return;
}

function _Rain_Tick(d2) {
 d2 = +d2;
 var i1 = 0;
 if ((HEAP32[431721] | 0) > 0) {
  i1 = 0;
  do {
   if ((_RainParticle_Tick(916608 + (i1 * 44 | 0) | 0, d2) | 0) << 24 >> 24) {
    _Rain_RemoveAt(i1);
    i1 = i1 + -1 | 0;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[431721] | 0));
 }
 return;
}

function _Vec3_RotateZ(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d6 = +_Math_CosF(d2);
 d4 = +_Math_SinF(d2);
 d2 = +HEAPF32[i3 >> 2];
 d5 = +HEAPF32[i3 + 4 >> 2];
 _Vec3_Create3_2401(i1, d6 * d2 + d4 * d5, d6 * d5 - d4 * d2, +HEAPF32[i3 + 8 >> 2]);
 return;
}

function _Vec3_RotateY(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d4 = +_Math_CosF(d2);
 d6 = +_Math_SinF(d2);
 d5 = +HEAPF32[i3 >> 2];
 d2 = +HEAPF32[i3 + 8 >> 2];
 _Vec3_Create3_2401(i1, d4 * d5 - d6 * d2, +HEAPF32[i3 + 4 >> 2], d6 * d5 + d4 * d2);
 return;
}

function _Vec3_RotateX(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d6 = +_Math_CosF(d2);
 d4 = +_Math_SinF(d2);
 d2 = +HEAPF32[i3 + 4 >> 2];
 d5 = +HEAPF32[i3 + 8 >> 2];
 _Vec3_Create3_2401(i1, +HEAPF32[i3 >> 2], d6 * d2 + d4 * d5, d6 * d5 - d4 * d2);
 return;
}

function _TextGroupWidget_Free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 40 | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = i1 + 84 | 0;
  i1 = 0;
  do {
   _Gfx_DeleteTexture((HEAP32[i2 >> 2] | 0) + (i1 * 28 | 0) | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 return;
}

function _Stream_OpenFile(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i5 = i3 + 8 | 0;
 i4 = i3;
 _Platform_EncodePath(i5, i1);
 i1 = _File_Open(i4, i5) | 0;
 _Stream_FromFile(i2, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return i1 | 0;
}

function _SkinnedCubeModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4310];
 HEAP32[i1 + 4 >> 2] = HEAP32[4311];
 HEAP32[i1 + 8 >> 2] = HEAP32[4312];
 HEAP32[i1 + 12 >> 2] = HEAP32[4313];
 HEAP32[i1 + 16 >> 2] = HEAP32[4314];
 HEAP32[i1 + 20 >> 2] = HEAP32[4315];
 return;
}

function _NbtTag_String(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if ((HEAP8[i1 + 4 >> 0] | 0) == 8) i1 = i1 + 20 | 0; else {
  HEAP32[i1 + 220 >> 2] = -857812892;
  i1 = 1841616;
 }
 i3 = i1;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = i1;
 return;
}

function _StringsBuffer_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 >> 2] = i1 + 24;
 HEAP32[i1 + 4 >> 2] = i1 + 4120;
 HEAP32[i1 + 16 >> 2] = 4096;
 HEAP32[i1 + 20 >> 2] = 256;
 if (!(HEAP32[i1 + 5144 >> 2] | 0)) _StringsBuffer_SetLengthBits(i1, 9);
 return;
}

function _Options_GetEnum(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 if ((_Options_UNSAFE_Get(i2, i5) | 0) << 24 >> 24) i1 = _Utils_ParseEnum(i5, i1, i3, i4) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _Gfx_DrawIndexedTris_T2fC4b(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 + i2 | 0) > 65536) {
  _GL_SetupVbTextured_Range(i1);
  _glDrawElements(4, (2 ? i2 >> 2 : i2) * 6 | 0, 5123, 0);
  _GL_SetupVbTextured();
 } else _glDrawElements(4, (2 ? i2 >> 2 : i2) * 6 | 0, 5123, i1 * 3 | 0);
 return;
}

function _String_AppendString(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 4 | 0;
 if (HEAP16[i2 >> 1] | 0) {
  i1 = 0;
  do {
   _String_Append(i4, HEAP8[(HEAP32[i3 >> 2] | 0) + i1 >> 0] | 0);
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAPU16[i2 >> 1] | 0) >>> 0);
 }
 return;
}

function _NotchyGen_Prepare() {
 var i1 = 0;
 _Random_Seed(978288, HEAP32[422266] | 0);
 i1 = HEAP32[244734] | 0;
 HEAP32[422264] = (i1 | 0) / 2 | 0;
 HEAP32[422265] = i1;
 i1 = _Mem_TryAlloc(Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0, 2) | 0;
 HEAP32[422261] = i1;
 return (i1 | 0) != 0 | 0;
}

function _SkeletonModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4451];
 HEAP32[i1 + 4 >> 2] = HEAP32[4452];
 HEAP32[i1 + 8 >> 2] = HEAP32[4453];
 HEAP32[i1 + 12 >> 2] = HEAP32[4454];
 HEAP32[i1 + 16 >> 2] = HEAP32[4455];
 HEAP32[i1 + 20 >> 2] = HEAP32[4456];
 return;
}

function _MenuOptionsScreen_BoolClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i2 + 36 >> 2] | 0;
 i3 = FUNCTION_TABLE_i[HEAP32[i4 + 8 >> 2] & 63]() | 0;
 FUNCTION_TABLE_vi[HEAP32[i4 + 12 >> 2] & 511](i3 << 24 >> 24 == 0 & 1);
 _MenuOptionsScreen_Update(i1, i2);
 return;
}

function _SittingModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4348];
 HEAP32[i1 + 4 >> 2] = HEAP32[4349];
 HEAP32[i1 + 8 >> 2] = HEAP32[4350];
 HEAP32[i1 + 12 >> 2] = HEAP32[4351];
 HEAP32[i1 + 16 >> 2] = HEAP32[4352];
 HEAP32[i1 + 20 >> 2] = HEAP32[4353];
 return;
}

function _Options_SetInt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP16[i4 + 4 >> 1] = 0;
 HEAP16[i4 + 6 >> 1] = 24;
 _String_AppendInt(i4, i2);
 _Options_Set(i1, i4);
 STACKTOP = i3;
 return;
}

function _LocalPlayer_CheckCanZoom(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[i1 + 474 >> 0] | 0)) {
  i1 = i1 + 791 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   HEAP8[i1 >> 0] = 1;
   if (!(HEAP8[1868739] | 0)) i1 = 0; else {
    _Chat_AddRaw(30692);
    i1 = 0;
   }
  } else i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _CreeperModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4917];
 HEAP32[i1 + 4 >> 2] = HEAP32[4918];
 HEAP32[i1 + 8 >> 2] = HEAP32[4919];
 HEAP32[i1 + 12 >> 2] = HEAP32[4920];
 HEAP32[i1 + 16 >> 2] = HEAP32[4921];
 HEAP32[i1 + 20 >> 2] = HEAP32[4922];
 return;
}

function _ChickenModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[5010];
 HEAP32[i1 + 4 >> 2] = HEAP32[5011];
 HEAP32[i1 + 8 >> 2] = HEAP32[5012];
 HEAP32[i1 + 12 >> 2] = HEAP32[5013];
 HEAP32[i1 + 16 >> 2] = HEAP32[5014];
 HEAP32[i1 + 20 >> 2] = HEAP32[5015];
 return;
}

function _ZombieModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4451];
 HEAP32[i1 + 4 >> 2] = HEAP32[4452];
 HEAP32[i1 + 8 >> 2] = HEAP32[4453];
 HEAP32[i1 + 12 >> 2] = HEAP32[4454];
 HEAP32[i1 + 16 >> 2] = HEAP32[4455];
 HEAP32[i1 + 20 >> 2] = HEAP32[4456];
 return;
}

function _SpiderModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4478];
 HEAP32[i1 + 4 >> 2] = HEAP32[4479];
 HEAP32[i1 + 8 >> 2] = HEAP32[4480];
 HEAP32[i1 + 12 >> 2] = HEAP32[4481];
 HEAP32[i1 + 16 >> 2] = HEAP32[4482];
 HEAP32[i1 + 20 >> 2] = HEAP32[4483];
 return;
}

function _OnVisibilityChanged(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _Vec3_BigPos_1222(i2);
 HEAP32[424249] = HEAP32[i2 >> 2];
 HEAP32[424250] = HEAP32[i2 + 4 >> 2];
 HEAP32[424251] = HEAP32[i2 + 8 >> 2];
 _CalcViewDists();
 STACKTOP = i1;
 return;
}

function _SheepModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4647];
 HEAP32[i1 + 4 >> 2] = HEAP32[4648];
 HEAP32[i1 + 8 >> 2] = HEAP32[4649];
 HEAP32[i1 + 12 >> 2] = HEAP32[4650];
 HEAP32[i1 + 16 >> 2] = HEAP32[4651];
 HEAP32[i1 + 20 >> 2] = HEAP32[4652];
 return;
}

function _HumanModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[5085];
 HEAP32[i1 + 4 >> 2] = HEAP32[5086];
 HEAP32[i1 + 8 >> 2] = HEAP32[5087];
 HEAP32[i1 + 12 >> 2] = HEAP32[5088];
 HEAP32[i1 + 16 >> 2] = HEAP32[5089];
 HEAP32[i1 + 20 >> 2] = HEAP32[5090];
 return;
}

function _DrawTextArgs_MakeEmpty(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = 1841616;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP8[i1 + 12 >> 0] = i3;
 return;
}

function _DrawTextArgs_Make(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = i3;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP8[i1 + 12 >> 0] = i4;
 return;
}

function _Convert_CP437ToUnicode(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 & 255;
 do if ((i1 & 255) < 32) i1 = HEAP16[7568 + (i2 << 1) >> 1] | 0; else if ((i1 & 255) < 127) {
  i1 = i1 & 255;
  break;
 } else {
  i1 = HEAP16[7632 + (i2 + -127 << 1) >> 1] | 0;
  break;
 } while (0);
 return i1 | 0;
}

function _ChibiModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4402];
 HEAP32[i1 + 4 >> 2] = HEAP32[4403];
 HEAP32[i1 + 8 >> 2] = HEAP32[4404];
 HEAP32[i1 + 12 >> 2] = HEAP32[4405];
 HEAP32[i1 + 16 >> 2] = HEAP32[4406];
 HEAP32[i1 + 20 >> 2] = HEAP32[4407];
 return;
}

function _Block_Parse(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = (_Convert_ParseInt(i2, i1) | 0) << 24 >> 24 != 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(i4 & (i1 | 0) < 768)) i1 = _Block_FindID(i2) | 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _World_GetPhysicsBlock(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) < 0) i1 = 7; else if (!((_World_ContainsXZ_2594(i1, i3) | 0) << 24 >> 24)) i1 = 7; else if ((HEAP32[244734] | 0) > (i2 | 0)) i1 = _World_GetBlock_2595(i1, i2, i3) | 0; else i1 = 0;
 return i1 | 0;
}

function _HeadModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4375];
 HEAP32[i1 + 4 >> 2] = HEAP32[4376];
 HEAP32[i1 + 8 >> 2] = HEAP32[4377];
 HEAP32[i1 + 12 >> 2] = HEAP32[4378];
 HEAP32[i1 + 16 >> 2] = HEAP32[4379];
 HEAP32[i1 + 20 >> 2] = HEAP32[4380];
 return;
}

function _String_Append(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i4 + 4 | 0;
 i1 = HEAP16[i3 >> 1] | 0;
 if (i1 << 16 >> 16 != (HEAP16[i4 + 6 >> 1] | 0)) {
  i4 = HEAP32[i4 >> 2] | 0;
  HEAP16[i3 >> 1] = i1 + 1 << 16 >> 16;
  HEAP8[i4 + (i1 & 65535) >> 0] = i2;
 }
 return;
}

function _PigModel_GetBounds(i1) {
 i1 = i1 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[4824];
 HEAP32[i1 + 4 >> 2] = HEAP32[4825];
 HEAP32[i1 + 8 >> 2] = HEAP32[4826];
 HEAP32[i1 + 12 >> 2] = HEAP32[4827];
 HEAP32[i1 + 16 >> 2] = HEAP32[4828];
 HEAP32[i1 + 20 >> 2] = HEAP32[4829];
 return;
}

function _OnAxisUpdate(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (HEAP8[1868648] | 0) if ((HEAP32[15292 + (HEAP32[i2 + 4 >> 2] << 2) >> 2] | 0) == 1) FUNCTION_TABLE_vddi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 24 >> 2] & 1](+HEAPF32[i2 + 8 >> 2], +HEAPF32[i2 + 12 >> 2], HEAP32[i2 >> 2] | 0);
 return;
}

function _MapRenderer_UsedAtlases() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = 0;
 do {
  i3 = HEAPU16[1047844 + (i2 << 1) >> 1] | 0;
  i2 = i2 + 1 | 0;
  i1 = (i1 >>> 0 > i3 >>> 0 ? i1 : i3) & 65535;
 } while ((i2 | 0) != 4608);
 i3 = HEAP32[460410] | 0;
 return (i3 ? i1 >>> i3 : i1) + 1 | 0;
}

function _HacksComp_CalcSpeedFactor(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0;
 if (!(i2 << 24 >> 24)) d1 = 0.0; else {
  if (!(HEAP8[i3 + 39 >> 0] | 0)) d1 = 0.0; else d1 = +HEAPF32[i3 + 4 >> 2] * .5 + 0.0;
  if (HEAP8[i3 + 38 >> 0] | 0) d1 = d1 + +HEAPF32[i3 + 4 >> 2];
 }
 return +d1;
}

function _ClassicLighting_Refresh() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0;
 if ((i3 | 0) > 0) {
  i1 = HEAP32[424246] | 0;
  i2 = 0;
  do {
   HEAP16[i1 + (i2 << 1) >> 1] = 32767;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i3 | 0));
 }
 return;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0 | 0), i3 | 0 | 0) | 0;
}

function _GenLevelScreen_PointerDown(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = _Screen_DoPointerDown(i2, i1, i3, i4) | 0;
 HEAP32[i2 + 24 >> 2] = i1;
 i1 = _GenLevelScreen_SelectedInput(i2) | 0;
 if (i1 | 0) _OnscreenKeyboard_SetText(i1 + 64 | 0);
 return 1;
}

function _InputWidget_RenderCaret(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 if (HEAP8[i2 + 146 >> 0] | 0) {
  i3 = i2 + 200 | 0;
  d1 = +HEAPF32[i3 >> 2] + d1;
  HEAPF32[i3 >> 2] = d1;
  if (+_Math_Mod1(d1) < .5) _Texture_RenderShaded(i2 + 172 | 0, HEAP32[i2 + 168 >> 2] | 0);
 }
 return;
}

function _LoseAllScreens() {
 var i1 = 0, i2 = 0;
 if ((HEAP32[422372] | 0) > 0) {
  i1 = 0;
  do {
   i2 = HEAP32[352416 + (i1 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 56 >> 2] & 511](i2);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[422372] | 0));
 }
 return;
}

function _Entity_TouchesAnyRope(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 _Entity_GetBounds(i1, i3);
 i1 = i3 + 16 | 0;
 HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] + .03125;
 i1 = _Entity_TouchesAny(i3, 19) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _EditHotkeyScreen_RemoveHotkey(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP8[i2 + 48 >> 0] | 0;
 i2 = HEAP8[i2 + 49 >> 0] | 0;
 i1 = i3 & 255;
 if (i3 << 24 >> 24) {
  _Hotkeys_Remove(i1, i2) | 0;
  _StoredHotkeys_Remove(i1, i2);
 }
 _HotkeyListScreen_Show();
 return;
}

function _Stream_ReadU32_LE(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Stream_Read(i1, i2, 4) | 0;
 if (!i1) {
  i1 = _Stream_GetU32_LE(i2) | 0;
  HEAP32[i3 >> 2] = i1;
  i1 = 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Stream_ReadU32_BE(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 i1 = _Stream_Read(i1, i2, 4) | 0;
 if (!i1) {
  i1 = _Stream_GetU32_BE(i2) | 0;
  HEAP32[i3 >> 2] = i1;
  i1 = 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _Java_ReadString(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _Stream_Read(i3, i2, 2) | 0;
 if (!i1) {
  i1 = _Stream_GetU16_BE(i2) | 0;
  _Mem_Set(i2, 0, 48) | 0;
  if ((i1 & 65535) > 48) i1 = -857812924; else i1 = _Stream_Read(i3, i2, i1 & 65535) | 0;
 }
 return i1 | 0;
}

function _InputHandler_Toggle(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = (HEAP8[i2 >> 0] | 0) == 0;
 HEAP8[i2 >> 0] = i5 & 1;
 i1 = HEAP32[5008 + (i1 << 2) >> 2] | 0;
 if (i5) _Chat_Add2(37734, i4, i1); else _Chat_Add2(37765, i3, i1);
 return;
}

function _EnvRenderer_RenderMapSides() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[418850] | 0;
 if (!i1) {
  _BuildMapSides();
  i1 = HEAP32[418850] | 0;
  if (i1 | 0) i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) _RenderBorders(HEAP16[933855] | 0, i1, HEAP32[418846] | 0, HEAP32[418864] | 0);
 return;
}

function _StringsBuffer_Clear(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (HEAP32[i2 + 20 >> 2] | 0) {
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != (i2 + 24 | 0)) _Mem_Free(i1);
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i1 | 0) != (i2 + 4120 | 0)) _Mem_Free(i1);
  _StringsBuffer_Init(i2);
 }
 return;
}

function _String_CalcLen(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = 0;
  while (1) {
   if (!(HEAP8[i2 >> 0] | 0)) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _IVec3_Floor(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = _Math_Floor(+HEAPF32[i1 >> 2]) | 0;
 HEAP32[i2 >> 2] = i3;
 i3 = _Math_Floor(+HEAPF32[i1 + 4 >> 2]) | 0;
 HEAP32[i2 + 4 >> 2] = i3;
 i1 = _Math_Floor(+HEAPF32[i1 + 8 >> 2]) | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 return;
}

function _Stopwatch_Measure() {
 var d1 = 0.0;
 d1 = +_emscripten_get_now() * 1.0e3;
 setTempRet0((+Math_abs(d1) >= 1.0 ? (d1 > 0.0 ? ~~+Math_min(+Math_floor(d1 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d1 - +(~~d1 >>> 0)) / 4294967296.0) >>> 0) : 0) | 0);
 return ~~d1 >>> 0 | 0;
}

function _KeyBindsScreen_Show(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP8[1710060] = 1;
 HEAP8[1710062] = 1;
 HEAP32[427514] = 16220;
 HEAP32[427533] = i4;
 HEAP32[427524] = i2;
 HEAP32[427526] = i1;
 HEAP32[427525] = i3;
 _Gui_Add(1710056, 50);
 return;
}

function _GrO_SetLighting(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, HEAP32[15488 + (i1 << 2) >> 2] | 0);
 _Options_Set(41123, i3);
 HEAP8[1868792] = 0;
 _Lighting_SetMode(i1 & 255, 0);
 STACKTOP = i2;
 return;
}

function _CPEExtensions_Find(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = 0;
 while (1) {
  i1 = HEAP32[7056 + (i2 << 2) >> 2] | 0;
  i2 = i2 + 1 | 0;
  if (_String_CaselessEqualsConst(i3, HEAP32[i1 >> 2] | 0) | 0) break;
  if (i2 >>> 0 >= 40) {
   i1 = 0;
   break;
  }
 }
 return i1 | 0;
}

function _Audio_PlayBlockSound(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 if (!(i2 << 16 >> 16)) _Audio_PlayDigSound(HEAP8[1007140 + (i4 & 65535) >> 0] | 0); else if (!(HEAP8[1868754] | 0)) _Audio_PlayDigSound(HEAP8[1007908 + (i2 & 65535) >> 0] | 0);
 return;
}

function _SaveLevelScreen_Layout(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1 + 312 | 0, 1, 1, 0, -30);
 _Widget_SetLocation(i1 + 60 | 0, 1, 1, 0, 20);
 _Widget_SetLocation(i1 + 612 | 0, 1, 1, 0, 65);
 _Widget_SetLocation(i1 + 144 | 0, 1, 2, 0, 70);
 _Menu_LayoutBack(i1 + 228 | 0);
 return;
}

function _Game_ReduceVRAM() {
 var i1 = 0;
 i1 = HEAP32[3681] | 0;
 if ((i1 | 0) < 17) i1 = 0; else {
  i1 = 1 ? i1 >>> 1 : i1;
  HEAP32[3681] = i1 >>> 0 > 16 ? i1 : 16;
  _MapRenderer_Refresh();
  _Game_SetViewDistance(HEAP32[3681] | 0);
  _Chat_AddRaw(32173);
  i1 = 1;
 }
 return i1 | 0;
}

function _Entities_Tick(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 8 | 0;
 i2 = 0;
 do {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vid[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1, +HEAPF64[i3 >> 3]);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 return;
}

function _ClO_SetFPS(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i1 = i1 << 24 >> 24 == 0 ? 5 : 0;
 _String_FromReadonly(i3, HEAP32[3600 + (i1 << 2) >> 2] | 0);
 _Options_Set(39564, i3);
 _Game_SetFpsLimit(i1);
 STACKTOP = i2;
 return;
}

function _CalcMipmapsLevels(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = _Math_ilog2(i1) | 0;
 i1 = _Math_ilog2(i3) | 0;
 if (!(HEAP8[1868763] | 0)) i1 = (i2 | 0) > (i1 | 0) ? i2 : i1; else {
  i1 = (i2 | 0) < (i1 | 0) ? i2 : i1;
  i1 = (i1 | 0) < 4 ? i1 : 4;
 }
 return i1 | 0;
}

function _Vec3_Sub_1753(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] - +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Sub_1737(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] - +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Sub_1639(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] - +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Mul3_344(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] * +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_2641(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_1765(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_1746(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_1728(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_1087(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _TexPackOverlay_Show(i1) {
 i1 = i1 | 0;
 HEAP8[1713904] = 1;
 HEAP32[428475] = 16744;
 HEAP32[428486] = 1714592;
 HEAP16[856974] = 0;
 HEAP16[856975] = 128;
 _String_Copy(1713944, i1);
 i1 = _Http_AsyncGetHeaders(i1, 1) | 0;
 HEAP32[428488] = i1;
 _Gui_Add(1713900, 35);
 return;
}

function _Protocol_Tick() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i2 = i3;
 i1 = _CPE_Tick(_Classic_Tick(i2) | 0) | 0;
 _WoM_Tick();
 if ((i1 | 0) != (i2 | 0)) FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, i1 - i2 | 0);
 STACKTOP = i3;
 return;
}

function _OpenKeyboardArgs_Init_2512(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 1868813;
 HEAP8[i1 + 16 >> 0] = 0;
 HEAP8[i1 + 17 >> 0] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _LocalPlayer_SetInterpPosition(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0;
 if (!(HEAP8[i1 + 493 >> 0] | 0)) i3 = 3; else if (!(HEAP8[i1 + 494 >> 0] | 0)) i3 = 3;
 if ((i3 | 0) == 3) _Vec3_Lerp(i1 + 4 | 0, i1 + 352 | 0, i1 + 384 | 0, d2);
 _Entity_LerpAngles(i1, d2);
 return;
}

function _HotbarWidget_ScrolledIndex(i4, d1, i3, i2) {
 i4 = i4 | 0;
 d1 = +d1;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = ((Math_imul(_Utils_AccumulateWheelDelta(i4 + 112 | 0, d1) | 0, i2) | 0) % 9 | 0) + i3 | 0;
 i4 = (i4 | 0) < 0 ? i4 + 9 | 0 : i4;
 return ((i4 | 0) > 8 ? i4 + -9 | 0 : i4) | 0;
}

function _Vec3_Add_361(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_328(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add_265(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _UpdateWindowBounds() {
 var i1 = 0, i2 = 0;
 i1 = _interop_CanvasWidth() | 0;
 i2 = _interop_CanvasHeight() | 0;
 if (!((i1 | 0) == (HEAP32[466968] | 0) & (i2 | 0) == (HEAP32[466969] | 0))) {
  HEAP32[466968] = i1;
  HEAP32[466969] = i2;
  _Event_RaiseVoid(1683004);
 }
 return;
}

function _SinStage3(d1) {
 d1 = +d1;
 do if (d1 < .25) d1 = +_SinStage2(d1); else {
  if (d1 < .5) {
   d1 = +_SinStage2(.5 - d1);
   break;
  }
  if (d1 < .75) {
   d1 = -+_SinStage2(d1 + -.5);
   break;
  } else {
   d1 = -+_SinStage2(1.0 - d1);
   break;
  }
 } while (0);
 return +d1;
}

function _OnEnvVariableChanged_451(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP8[1868790] | 0) {
  switch (i1 | 0) {
  case 15:
  case 16:
  case 18:
  case 19:
   {
    _InitPalettes();
    break;
   }
  default:
   {}
  }
  if ((i1 | 1 | 0) == 19) _MapRenderer_Refresh();
 }
 return;
}

function _MenuOptionsScreen_AddBool(i4, i3, i2, i5, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = _MenuOptionsScreen_AddButton(i4, i3, 120, 121, 0, i1) | 0;
 HEAP32[363888 + (i4 << 5) + 8 >> 2] = i2;
 HEAP32[363888 + (i4 << 5) + 12 >> 2] = i5;
 return;
}

function _HotbarWidget_SetFont(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 if (HEAP8[1689553] | 0) {
  _DrawTextArgs_Make(i1, 23228, i2, 1);
  _Drawer2D_MakeTextTexture(i3 + 124 | 0, i1);
 }
 STACKTOP = i4;
 return;
}

function _Gui_Refresh(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 56 >> 2] & 511](i1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 60 >> 2] & 511](i1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 511](i1);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _Vec3_Add_52(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _InventoryScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 i3 = i2 + 48 | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3, 4) | 0;
 i2 = i2 + 2764 | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2, 0) | 0;
 return;
}

function _CPE_VelocityControl(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[417347] | 0;
 _CalcVelocity(i2 + 36 | 0, i1, HEAP8[i1 + 12 >> 0] | 0);
 _CalcVelocity(i2 + 40 | 0, i1 + 4 | 0, HEAP8[i1 + 13 >> 0] | 0);
 _CalcVelocity(i2 + 44 | 0, i1 + 8 | 0, HEAP8[i1 + 14 >> 0] | 0);
 return;
}

function _ProcessGamepadAxis(i3, i1, d4, d5, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d4 = +d4;
 d5 = +d5;
 d2 = +d2;
 var d6 = 0.0, d7 = 0.0;
 d7 = d4;
 d6 = d5;
 _Gamepad_SetAxis(i3, i1, !(d7 >= -.1) | !(d7 <= .1) ? d4 * 8.0 : 0.0, !(d6 >= -.1) | !(d6 <= .1) ? d5 * 8.0 : 0.0, d2);
 return;
}

function _Block_UpdateAllCulling() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 do {
  i2 = i1 & 65535;
  _Block_CalcStretch(i2);
  i3 = 0;
  do {
   _Block_CalcCulling(i2, i3 & 65535);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 768);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 768);
 return;
}

function _Vec3_Mul3(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] * +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Stopwatch_ElapsedMS(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _Stopwatch_ElapsedMicroseconds(i1, i2, i3, i4) | 0;
 i3 = getTempRet0() | 0;
 return (i3 >>> 0 > 0 | (i3 | 0) == 0 & i4 >>> 0 > 2147483647 ? 2147483 : (i4 | 0) / 1e3 | 0) | 0;
}

function _SPConnection_Init() {
 _Server_ResetState();
 _Physics_Init();
 HEAP32[460380] = 100;
 HEAP32[460381] = 412;
 HEAP32[460382] = 3;
 HEAP32[460383] = 413;
 HEAP32[460385] = 197;
 HEAP8[1841577] = (HEAP8[1868754] | 0) == 0 & 1;
 HEAP8[1841576] = 1;
 HEAP8[1841572] = 1;
 return;
}

function _LazyInitUpper(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _Mem_TryAllocCleared(HEAP32[244732] | 0, 1) | 0;
 if (!i2) _World_OutOfMemory(); else {
  _World_SetMapUpper(i2);
  HEAP8[(HEAP32[244731] | 0) + i3 >> 0] = 8 ? (i1 & 65535) >>> 8 : i1 & 65535;
 }
 return;
}

function _Vec3_Sub(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] - +HEAPF32[i2 + 8 >> 2];
 return;
}

function _Vec3_Add(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i2 + 8 >> 2];
 return;
}

function _ThumbstickWidget_Reposition(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ~~(+HEAPF32[i1 + 40 >> 2] * 128.0);
 i3 = _Display_ScaleX_2472(i2) | 0;
 HEAP32[i1 + 12 >> 2] = i3;
 i2 = _Display_ScaleY_2473(i2) | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 _Widget_CalcPosition(i1);
 return;
}

function _NbtTag_U16(i1) {
 i1 = i1 | 0;
 switch (HEAP8[i1 + 4 >> 0] | 0) {
 case 2:
  {
   i1 = HEAP16[i1 + 20 >> 1] | 0;
   break;
  }
 case 1:
  {
   i1 = HEAPU8[i1 + 20 >> 0] | 0;
   break;
  }
 default:
  {
   HEAP32[i1 + 220 >> 2] = -857812895;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _NbtTag_I16(i1) {
 i1 = i1 | 0;
 switch (HEAP8[i1 + 4 >> 0] | 0) {
 case 2:
  {
   i1 = HEAP16[i1 + 20 >> 1] | 0;
   break;
  }
 case 1:
  {
   i1 = HEAPU8[i1 + 20 >> 0] | 0;
   break;
  }
 default:
  {
   HEAP32[i1 + 220 >> 2] = -857812895;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _ListScreen_SetCurrentIndex(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 916 >> 2] | 0;
 i1 = (i3 | 0) > (i1 | 0) ? i1 : i3 + -1 | 0;
 HEAP32[i2 + 804 >> 2] = (i1 | 0) > 0 ? i1 : 0;
 _ListScreen_RedrawEntries(i2);
 _ListScreen_UpdatePage(i2);
 return;
}

function _Game_CanPick(i1) {
 i1 = i1 | 0;
 i1 = i1 & 65535;
 switch (HEAP8[1006372 + i1 >> 0] | 0) {
 case 4:
  {
   i1 = 0;
   break;
  }
 case 5:
  {
   i1 = 1;
   break;
  }
 default:
  i1 = ((HEAP8[1000996 + i1 >> 0] | 0) != 1 | (HEAP8[1868749] | 0) != 0) & 1;
 }
 return i1 | 0;
}

function _ClassicPauseScreen_Layout(i1) {
 i1 = i1 | 0;
 _Menu_LayoutButtons(i1 + 44 | 0, HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0);
 _Widget_SetLocation(i1 + 632 | 0, 1, 2, 0, (HEAP8[1868754] | 0) == 0 ? 25 : 80);
 _Widget_SetLocation(i1 + 716 | 0, 1, 1, 0, -150);
 return;
}

function _HUDScreen_PointerMove(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!(HEAP8[1689553] | 0)) i1 = 0; else {
  i2 = i2 + 332 | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i2, i1, i3, i4) | 0;
 }
 return i1 | 0;
}

function _ChibiModel_Register() {
 _Model_Init(17536);
 HEAP32[4397] = 336;
 HEAP8[17576] = 3;
 HEAP8[17577] = 6;
 HEAP8[17581] = 1;
 HEAP8[17582] = 1;
 HEAP8[17578] = HEAP8[17578] | 2;
 HEAP32[4400] = 288;
 HEAPF32[4398] = 3.0;
 HEAPF32[4399] = .5;
 _Model_Register(17536);
 return;
}

function _TiltComp_Update(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 var i4 = 0;
 i4 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 i1 = i3 + 461 | 0;
 i3 = 0;
 do {
  _AnimatedComp_DoTilt(i4, HEAP8[i1 >> 0] | 0);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 3);
 return;
}

function _OnInit_84() {
 var i1 = 0;
 HEAP32[348] = -1;
 HEAP32[349] = 1;
 HEAP32[350] = -18;
 HEAP32[351] = 18;
 HEAP32[352] = -324;
 HEAP32[353] = 324;
 if (!(HEAP8[1868754] | 0)) {
  i1 = _Options_GetBool(41140, 0) | 0;
  HEAP8[1868730] = i1;
 }
 _Builder_ApplyActive();
 return;
}

function _HttpRequest_Free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 156 | 0;
 _Mem_Free(HEAP32[i3 >> 2] | 0);
 i2 = i1 + 172 | 0;
 _Mem_Free(HEAP32[i2 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i1 + 160 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 164 >> 2] = 0;
 return;
}

function _HeldBlockRenderer_ClickAnim(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 << 24 >> 24 == 0;
 _HeldBlockRenderer_ResetAnim(1, i2 ? .25 : .3499999940395355);
 HEAP8[1868781] = 0;
 HEAP8[1868782] = i1;
 HEAP8[1868783] = 1;
 if (i2) HEAPF32[422498] = +HEAPF32[3777] * .5;
 return;
}

function _ClearCPEMessages() {
 _Chat_AddOf(1841616, 100);
 _Chat_AddOf(1841616, 101);
 _Chat_AddOf(1841616, 102);
 _Chat_AddOf(1841616, 1);
 _Chat_AddOf(1841616, 2);
 _Chat_AddOf(1841616, 3);
 _Chat_AddOf(1841616, 11);
 _Chat_AddOf(1841616, 12);
 _Chat_AddOf(1841616, 13);
 return;
}

function _Stream_MemorySeek(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 40 >> 2] | 0;
 if (i1 >>> 0 > i2 >>> 0) {
  HEAP32[i3 + 32 >> 2] = (HEAP32[i3 + 44 >> 2] | 0) + i2;
  HEAP32[i3 + 36 >> 2] = i1 - i2;
  i1 = 0;
 } else i1 = -857812989;
 return i1 | 0;
}

function _Http_GetResult(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _RequestList_Find(985304, i1) | 0;
 if ((i1 | 0) > -1) {
  _memcpy(i2 | 0, (HEAP32[246328] | 0) + (i1 * 312 | 0) | 0, 312) | 0;
  _RequestList_RemoveAt(985304, i1);
 }
 return (31 ? i1 >>> 31 : i1) & 255 ^ 1 | 0;
}

function _GetWindowScale() {
 var d1 = 0.0, d2 = 0.0;
 d2 = +HEAPF32[466972] * +(HEAP32[466968] | 0);
 d1 = +HEAPF32[466973] * +(HEAP32[466969] | 0);
 if (!(HEAP8[1689553] | 0)) {
  d1 = d1 / +HEAPF32[466959];
  d2 = d2 / +HEAPF32[466958];
 }
 return ~~(d2 < d1 ? d2 : d1) + 1 | 0;
}

function _Chat_Send(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP16[i2 + 4 >> 1] | 0) {
  _Event_RaiseChat(1682224, i2, 0);
  if (i1 << 24 >> 24) _LogInputUsage(i2);
  if (!((_Commands_Execute(i2) | 0) << 24 >> 24)) FUNCTION_TABLE_vi[HEAP32[1841532 >> 2] & 511](i2);
 }
 return;
}

function _BlockDefs_Tex(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP8[21309] | 0)) {
  i2 = i1 + 1 | 0;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else {
  i2 = i1 + 2 | 0;
  i1 = (_Stream_GetU16_BE(i1) | 0) & 511;
 }
 HEAP32[i3 >> 2] = i2;
 return i1 | 0;
}

function _TouchOnscreenScreen_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 636 >> 2] = 0;
 _Gui_MakeTitleFont(i1 + 624 | 0);
 _TouchOnscreen_RemakeWidgets(i1);
 _TouchOnscreen_UpdateAll(i1);
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function _Socket_Write(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i1 = _interop_SocketSend(i3 | 0, i2 | 0, i1 | 0) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i4 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i4 >> 2] = 0;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _OnTerrainAtlasChanged_1235(i1) {
 i1 = i1 | 0;
 if (HEAP32[424247] | 0) if ((HEAP32[424264] | 0) != (HEAP32[460408] | 0)) _MapRenderer_Refresh();
 i1 = _MapRenderer_UsedAtlases() | 0;
 HEAP32[424247] = i1;
 HEAP32[424264] = HEAP32[460408];
 _ResetPartFlags();
 return;
}

function _OnInit_233() {
 var i1 = 0;
 _OnReset_235();
 _TextureEntry_Register(14280);
 if (!(HEAP8[1868754] | 0)) i1 = (_Options_GetBool(41420, 0) | 0) << 24 >> 24 == 0 & 1; else i1 = 1;
 HEAP8[1667320] = i1;
 i1 = _Options_GetBool(41459, 0) | 0;
 HEAP8[1667321] = i1;
 return;
}

function _LoadingScreen_CalcMaxVertices(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = _Math_CeilDiv(HEAP32[466969] | 0, 64) | 0;
 i3 = i1 + 52 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = _Screen_CalcDefaultMaxVertices(i1) | 0;
 HEAP32[i1 + 8 >> 2] = (HEAP32[i3 >> 2] << 2) + i2;
 return;
}

function _CompareDists(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, d2 = 0.0;
 d2 = +HEAPF32[i3 + 28 >> 2];
 d1 = +HEAPF32[i4 + 28 >> 2];
 if (d2 == d1) {
  d2 = +HEAPF32[i3 + 32 >> 2];
  d1 = +HEAPF32[i4 + 32 >> 2];
 }
 return (d2 < d1 ? 1 : (d2 > d1) << 31 >> 31) | 0;
}

function _GenLevelScreen_SelectedInput(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i1 | 0) > -1) {
  i2 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0;
  return ((HEAP32[i2 + 36 >> 2] | 0) == 1e4 ? i2 : 0) | 0;
 } else return 0;
 return 0;
}

function _Color_YMinSide(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_450(i1, i2, i3) | 0) << 24 >> 24)) i1 = (HEAP32[466928] | 0) > (i2 | 0) ? HEAP32[466949] | 0 : HEAP32[466945] | 0; else i1 = _Color_Core(i1, i2, i3, 3) | 0;
 return i1 | 0;
}

function _PauseScreen_Layout(i1) {
 i1 = i1 | 0;
 _Menu_LayoutButtons(i1 + 44 | 0, HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0);
 _Menu_LayoutBack(i1 + 632 | 0);
 _Widget_SetLocation(i1 + 548 | 0, 2, 2, 5, 5);
 _Widget_SetLocation(i1 + 716 | 0, 1, 1, 0, -100);
 return;
}

function _Game_CycleViewDistance() {
 var i1 = 0, i2 = 0;
 i2 = (HEAP8[1689494] | 0) != 0;
 i1 = i2 ? 23992 : 3632;
 i2 = i2 ? 4 : 10;
 if (!((HEAP8[1868513] | HEAP8[1868512]) << 24 >> 24)) _CycleViewDistanceForwards(i1, i2); else _CycleViewDistanceBackwards(i1, i2);
 return;
}

function _File_Write(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i1 = _interop_FileWrite(i3 | 0, i2 | 0, i1 | 0) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i4 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i4 >> 2] = -1;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _Audio_DescribeError(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i4 = i3;
 i2 = _interop_AudioDescribe(i2 | 0, i4 | 0, 600) | 0;
 _String_AppendUtf8(i1, i4, i2);
 STACKTOP = i3;
 return (i2 | 0) > 0 | 0;
}

function _ThirdPersonCamera_GetZoom(i2) {
 i2 = i2 | 0;
 var d1 = 0.0;
 d1 = (HEAP8[1868733] | 0) == 0 ? +HEAPF32[3415] : +HEAPF32[3416];
 if (d1 > 3.0) {
  i2 = (_LocalPlayer_CheckCanZoom(i2) | 0) << 24 >> 24 == 0;
  return +(i2 ? 3.0 : d1);
 } else return +d1;
 return 0.0;
}

function _OnInit_1127() {
 var i1 = 0;
 i1 = (_Options_GetEnum(41123, 0, 15488, 2) | 0) & 255;
 HEAP8[1868790] = i1;
 HEAP8[1868791] = 0;
 HEAP8[1868792] = 0;
 HEAP8[1868793] = i1;
 _FancyLighting_OnInit();
 _Lighting_ApplyActive();
 _Event_Register(1681444, 0, 13);
 return;
}

function _InterpComp_RemoveOldestRotY(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = 0;
 do {
  i3 = i1;
  i1 = i1 + 1 | 0;
  HEAP32[i2 + 4 + (i3 << 2) >> 2] = HEAP32[i2 + 4 + (i1 << 2) >> 2];
 } while ((i1 | 0) != 15);
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
 return;
}

function _Gfx_DeleteIb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = i4;
 if (i4 | 0) {
  _glDeleteBuffers(1, i2 | 0);
  HEAP32[i1 >> 2] = 0;
 }
 STACKTOP = i3;
 return;
}

function _Convert_ParseBool(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(_String_CaselessEqualsConst(i1, 49108) | 0)) {
  i1 = (_String_CaselessEqualsConst(i1, 49102) | 0) != 0;
  HEAP8[i2 >> 0] = 0;
  i1 = i1 & 1;
 } else {
  HEAP8[i2 >> 0] = 1;
  i1 = 1;
 }
 return i1 | 0;
}

function _ClassicLighting_Color_Sprite_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return ((HEAP16[i3 >> 1] | 0) < (i2 | 0) ? HEAP32[466942] | 0 : HEAP32[466946] | 0) | 0;
}

function _WoM_Tick() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i1 = i2;
 if ((_Http_GetResult(HEAP32[454523] | 0, i1) | 0) << 24 >> 24) {
  if (HEAP8[i1 + 305 >> 0] | 0) _WoM_ParseConfig(i1);
  _HttpRequest_Free(i1);
 }
 STACKTOP = i2;
 return;
}

function _RefreshChunks() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[424252] | 0;
 i2 = HEAP32[424248] | 0;
 if ((i1 | 0) != 0 & (i2 | 0) > 0) {
  i3 = 0;
  do {
   _ChunkInfo_Refresh(i1 + (i3 * 20 | 0) | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i2 | 0));
 }
 return;
}

function _Gfx_DeleteDynamicVb(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i4;
 if (i4 | 0) _glDeleteBuffers(1, i1 | 0);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _File_Read(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i1 = _interop_FileRead(i3 | 0, i2 | 0, i1 | 0) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i4 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i4 >> 2] = -1;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _DrawOpCommand_ExtractPersistArg(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP8[1868738] = 0;
 if (_String_CaselessEnds(i1, 14232) | 0) {
  HEAP8[1868738] = 1;
  i2 = i1 + 4 | 0;
  HEAP16[i2 >> 1] = (HEAPU16[i2 >> 1] | 0) + 65533;
  _String_UNSAFE_TrimEnd(i1);
 }
 return;
}

function _Color_ZSide(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_450(i1, i2, i3) | 0) << 24 >> 24)) i1 = (HEAP32[466928] | 0) > (i2 | 0) ? HEAP32[466948] | 0 : HEAP32[466944] | 0; else i1 = _Color_Core(i1, i2, i3, 2) | 0;
 return i1 | 0;
}

function _Color_XSide(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_450(i1, i2, i3) | 0) << 24 >> 24)) i1 = (HEAP32[466928] | 0) > (i2 | 0) ? HEAP32[466947] | 0 : HEAP32[466943] | 0; else i1 = _Color_Core(i1, i2, i3, 1) | 0;
 return i1 | 0;
}

function _ClassicLighting_Color_ZSide_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return ((HEAP16[i3 >> 1] | 0) < (i2 | 0) ? HEAP32[466944] | 0 : HEAP32[466948] | 0) | 0;
}

function _ClassicLighting_Color_XSide_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return ((HEAP16[i3 >> 1] | 0) < (i2 | 0) ? HEAP32[466943] | 0 : HEAP32[466947] | 0) | 0;
}

function _CPE_CustomBlockLevel(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP16[i2 >> 1] = 275;
 FUNCTION_TABLE_vii[HEAP32[1841540 >> 2] & 255](i2, 2);
 HEAP8[1868752] = 1;
 _Event_RaiseVoid(1679884);
 STACKTOP = i1;
 return;
}

function _Sounds_CheckNonSolid(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 & 65535;
 i1 = HEAP8[1007908 + i2 >> 0] | 0;
 if (i1 << 24 >> 24) if ((HEAP8[1000996 + i2 >> 0] | 0) != 2) HEAP8[1868741] = i1;
 if ((HEAP8[1006372 + i2 >> 0] | 0) != 4) HEAP8[1868740] = 1;
 return 0;
}

function _MCLevel_Callback_2(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
 if (!(_String_CaselessEqualsConst(i1, 31597) | 0)) {
  if (_String_CaselessEqualsConst(i1, 31607) | 0) _MCLevel_ParseEnvironment(i2);
 } else _MCLevel_ParseMap(i2);
 return;
}

function _Gfx_DeleteTexture(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i4;
 if (i4 | 0) _glDeleteTextures(1, i1 | 0);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _Game_ToggleFullscreen() {
 var i1 = 0;
 if ((_Window_GetWindowState() | 0) == 1) {
  i1 = _Window_ExitFullscreen() | 0;
  if (i1 | 0) _Logger_SysWarn(i1, 32128);
 } else {
  i1 = _Window_EnterFullscreen() | 0;
  if (i1 | 0) _Logger_SysWarn(i1, 32147);
 }
 return;
}

function _Env_SetSidesBlock(i1) {
 i1 = i1 | 0;
 if (i1 << 16 >> 16 == 255) {
  i1 = (_Block_IsCustomDefined(255) | 0) << 24 >> 24 == 0;
  i1 = i1 ? 7 : 255;
 }
 if (i1 << 16 >> 16 != (HEAP16[933855] | 0)) {
  HEAP16[933855] = i1;
  _Event_RaiseInt(1681184, 1);
 }
 return;
}

function _Classic_LevelInit(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1868801] | 0)) {
  _Classic_StartLoading();
  if (HEAP8[21373] | 0) {
   i1 = _Stream_GetU32_BE(i1) | 0;
   HEAP32[454540] = i1;
   _MapState_SkipHeader(1728444);
   _MapState_SkipHeader(1773268);
  }
 }
 return;
}

function _ClassicLighting_Color_YMin_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return ((HEAP16[i3 >> 1] | 0) < (i2 | 0) ? HEAP32[466945] | 0 : HEAP32[466949] | 0) | 0;
}

function _ClassicLighting_Color_YMax_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return ((HEAP16[i3 >> 1] | 0) < (i2 | 0) ? HEAP32[466942] | 0 : HEAP32[466946] | 0) | 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function _Window_SetSize(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _emscripten_set_canvas_element_size(53305, i2 | 0, i1 | 0) | 0;
 _emscripten_set_element_css_size(53305, +(+(i2 | 0) / +HEAPF32[466958]), +(+(i1 | 0) / +HEAPF32[466959])) | 0;
 _UpdateWindowBounds();
 return;
}

function _OnMouseWheel_2918(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Mouse_ScrollHWheel(+(0 - (_Math_Sign(+HEAPF64[i2 + 72 >> 3]) | 0) | 0));
 _Mouse_ScrollVWheel(+(0 - (_Math_Sign(+HEAPF64[i2 + 80 >> 3]) | 0) | 0));
 _DeferredEnableRawMouse();
 return 1;
}

function _ModelVertex_Init(i3, d4, d5, d6, i1, i2) {
 i3 = i3 | 0;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i3 >> 2] = d4;
 HEAPF32[i3 + 4 >> 2] = d5;
 HEAPF32[i3 + 8 >> 2] = d6;
 HEAP16[i3 + 12 >> 1] = i1;
 HEAP16[i3 + 14 >> 1] = i2;
 return;
}

function _Env_SetEdgeBlock(i1) {
 i1 = i1 | 0;
 if (i1 << 16 >> 16 == 255) {
  i1 = (_Block_IsCustomDefined(255) | 0) << 24 >> 24 == 0;
  i1 = i1 ? 9 : 255;
 }
 if (i1 << 16 >> 16 != (HEAP16[933854] | 0)) {
  HEAP16[933854] = i1;
  _Event_RaiseInt(1681184, 0);
 }
 return;
}

function _Block_SetSide(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = (i1 & 65535) * 6 | 0;
 HEAP16[1047844 + (i1 << 1) >> 1] = i2;
 HEAP16[1047844 + ((i1 | 1) << 1) >> 1] = i2;
 HEAP16[1047844 + (i1 + 2 << 1) >> 1] = i2;
 HEAP16[1047844 + (i1 + 3 << 1) >> 1] = i2;
 return;
}

function _TexPackOverlay_ConfirmNoClick(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i2 + 37 | 0;
 if (HEAP8[i1 >> 0] | 0) _TextureUrls_Deny(i2 + 44 | 0);
 _Gui_Remove(i2);
 if (!(HEAP8[i1 >> 0] | 0)) _CPE_SendNotifyAction(6, 1); else _CPE_SendNotifyAction(6, 0);
 return;
}

function _Path_ValidChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 34:
 case 124:
 case 62:
 case 60:
 case 58:
 case 42:
 case 63:
 case 92:
 case 47:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = i1 << 24 >> 24 != 46 & 1;
 }
 return i1 | 0;
}

function _Overlay_AddLabels(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 _TextWidget_Add(i3, i2);
 i1 = 1;
 do {
  _TextWidget_Add(i3, i2 + (i1 * 72 | 0) | 0);
  HEAP32[i2 + (i1 * 72 | 0) + 68 >> 2] = -2039584;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 return;
}

function _Game_ChangeBlock(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = _World_GetBlock_588(i2, i3, i4) | 0;
 _Game_UpdateBlock(i2, i3, i4, i1);
 FUNCTION_TABLE_viiiii[HEAP32[1841528 >> 2] & 7](i2, i3, i4, i5, i1);
 return;
}

function _Cw_ParseColor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[422201] | 0;
 i3 = HEAP32[422202] | 0;
 i2 = HEAP32[422203] | 0;
 return ((i4 | 0) > 255 | (i3 | 0) > 255 | (i2 | 0) > 255 ? i1 : i4 & 255 | i3 << 8 & 65280 | i2 << 16 | -16777216) | 0;
}

function _String_Equals(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP16[i2 + 4 >> 1] | 0;
 if (i1 << 16 >> 16 == (HEAP16[i3 + 4 >> 1] | 0)) i1 = (_Mem_Equal(HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, i1 & 65535) | 0) != 0 & 1; else i1 = 0;
 return i1 | 0;
}

function _LocalPlayer_OnNewMap(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 436 >> 2] = 0.0;
 HEAPF32[i1 + 440 >> 2] = 0.0;
 HEAPF32[i1 + 444 >> 2] = 0.0;
 HEAP32[i1 + 788 >> 2] = 0;
 return;
}

function _CPE_ExtEntityTeleport(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAPU8[i1 + 1 >> 0] | 0;
 i2 = i3 << 4 & 96 | i3 & 1;
 _Classic_ReadAbsoluteLocation(i1 + 2 | 0, HEAP8[i1 >> 0] | 0, (i3 & 32) << 2 & 255 | ((i3 & 16 | 0) == 0 ? i2 : i2 | 6) & 255);
 return;
}

function _Vec3_Sub_1767(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i1 >> 2] + -.10000000149011612;
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + -.10000000149011612;
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + -.10000000149011612;
 return;
}

function _ModelPart_Init(i3, i2, i1, d4, d5, d6) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 HEAP16[i3 >> 1] = i2;
 HEAP16[i3 + 2 >> 1] = i1;
 HEAPF32[i3 + 4 >> 2] = d4;
 HEAPF32[i3 + 8 >> 2] = d5;
 HEAPF32[i3 + 12 >> 2] = d6;
 return;
}

function _LocalPlayer_ResetJumpVelocity(i2) {
 i2 = i2 | 0;
 var d1 = 0.0;
 if (!((_HacksComp_CanJumpHigher(i2 + 460 | 0) | 0) << 24 >> 24)) d1 = .41999998688697815; else d1 = +HEAPF32[i2 + 744 >> 2];
 HEAPF32[i2 + 740 >> 2] = d1;
 HEAPF32[i2 + 748 >> 2] = d1;
 return;
}

function _InterpComp_AddRotY(i2, d3) {
 i2 = i2 | 0;
 d3 = +d3;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == 15) {
  _InterpComp_RemoveOldestRotY(i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAPF32[i2 + 4 + (i1 << 2) >> 2] = d3;
 HEAP32[i2 >> 2] = i1 + 1;
 return;
}

function _DumpRegisters() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 i2 = i1 + 768 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP16[i2 + 4 >> 1] = 0;
 HEAP16[i2 + 6 >> 1] = 768;
 _String_AppendConst(i2, 39325);
 _Logger_Log(i2);
 STACKTOP = i1;
 return;
}

function _Http_OnUpdateProgress(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _RequestList_Find(982160, i1) | 0;
 if ((i3 | 0) != 0 & (i1 | 0) != -1) HEAP32[(HEAP32[245542] | 0) + (i1 * 312 | 0) + 132 >> 2] = ~~(+(i2 | 0) * 100.0 / +(i3 | 0));
 return;
}

function _FontListScreen_EntryClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _ListScreen_UNSAFE_GetCur(i4, i1, i2);
 _Options_Set(49535, i4);
 _SysFont_SetDefault(i4);
 STACKTOP = i3;
 return;
}

function _Color(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_450(i1, i2, i3) | 0) << 24 >> 24)) i1 = (HEAP32[466928] | 0) > (i2 | 0) ? HEAP32[466946] | 0 : HEAP32[466942] | 0; else i1 = _Color_Core(i1, i2, i3, 0) | 0;
 return i1 | 0;
}

function _ChatScreen_CalcMaxVertices(i1) {
 i1 = i1 | 0;
 i1 = i1 + 1108 | 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1) | 0) < 4) i1 = 4; else i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1) | 0;
 return i1 | 0;
}

function _Vec3_GetDirVector(i1, d3, d2) {
 i1 = i1 | 0;
 d3 = +d3;
 d2 = +d2;
 var d4 = 0.0, d5 = 0.0;
 d5 = +_Math_CosF(d2);
 d5 = d5 * +_Math_SinF(d3);
 d4 = -+_Math_SinF(d2);
 d2 = +_Math_CosF(d2);
 _Vec3_Create3_2401(i1, d5, d4, -(d2 * +_Math_CosF(d3)));
 return;
}

function _Stream_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 32;
 HEAP32[i1 + 4 >> 2] = 73;
 HEAP32[i1 + 8 >> 2] = 33;
 HEAP32[i1 + 12 >> 2] = 74;
 HEAP32[i1 + 16 >> 2] = 75;
 HEAP32[i1 + 20 >> 2] = 76;
 HEAP32[i1 + 24 >> 2] = 76;
 HEAP32[i1 + 28 >> 2] = 33;
 return;
}

function _OpenKeyboardArgs_Init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = 256;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 1868813;
 HEAP8[i1 + 16 >> 0] = 0;
 HEAP8[i1 + 17 >> 0] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _Gfx_DeleteVb(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i4;
 if (i4 | 0) _glDeleteBuffers(1, i1 | 0);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _Gen_Run() {
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[422260] = 0;
 i3 = _Stopwatch_Measure() | 0;
 i2 = getTempRet0() | 0;
 i1 = 978280;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 FUNCTION_TABLE_v[HEAP32[(HEAP32[422256] | 0) + 4 >> 2] & 127]();
 return;
}

function _DefaultPostStretchChunk() {
 var i1 = 0, i2 = 0;
 i1 = 0;
 i2 = 0;
 do {
  i2 = _Builder1DPart_CalcOffsets(110944 + (i1 + 512 << 5) | 0, _Builder1DPart_CalcOffsets(110944 + (i1 << 5) | 0, i2) | 0) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 512);
 return;
}

function _CustomModel_GetCollisionSize(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 92 | 0;
 i1 = (HEAP32[i1 + 48 >> 2] | 0) + 148 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 return;
}

function _MenuOptionsScreen_EnumGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i3 + 8 >> 2] & 63]() | 0;
 _String_AppendConst(i2, HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0);
 return;
}

function _Physics_CheckItem(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _TickQueue_Dequeue(i3) | 0;
 HEAP32[i2 >> 2] = i1 & 134217727;
 if (i1 >>> 0 > 134217727) {
  _TickQueue_Enqueue(i3, i1 + -134217728 | 0);
  i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _DefaultMapping(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1868754] | 0)) if ((HEAPU8[1688991] | 0) > (i1 | 0)) i1 = i1 + 1 & 65535; else i1 = 0; else if ((HEAPU8[1688993] | 0) > (i1 | 0)) i1 = HEAPU8[(HEAP32[422249] | 0) + i1 >> 0] | 0; else i1 = 0;
 return i1 | 0;
}

function _SpecialInputWidget_SetActive(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 + 20 >> 0] = i1;
 if (i1 << 24 >> 24) if (HEAP8[i2 + 52 >> 0] | 0) _SpecialInputWidget_Redraw(i2);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _PigModel_MakeParts() {
 _BoxDesc_BuildBox(1716240, 19332);
 _BoxDesc_BuildRotatedBox(1716256, 19376);
 _BoxDesc_BuildBox(1716272, 19420);
 _BoxDesc_BuildBox(1716288, 19464);
 _BoxDesc_BuildBox(1716304, 19508);
 _BoxDesc_BuildBox(1716320, 19552);
 return;
}

function _OnContextLost_1634(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(1714768);
 if (!(HEAP8[1689082] | 0)) {
  i1 = HEAP32[428699] | 0;
  if (i1 | 0) do {
   _Gfx_DeleteTexture(i1 + 8 | 0);
   i1 = HEAP32[i1 + 12 >> 2] | 0;
  } while ((i1 | 0) != 0);
 }
 return;
}

function _FirstPersonCamera_GetOrientation(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0;
 i3 = HEAP32[417347] | 0;
 d2 = +HEAPF32[i3 + 16 >> 2] * .01745329238474369;
 HEAPF32[i1 >> 2] = +HEAPF32[i3 + 20 >> 2] * .01745329238474369;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}

function _SpecialInputWidget_Create(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Widget_Reset(i3);
 HEAP32[i3 >> 2] = 23460;
 HEAP8[i3 + 23 >> 0] = 2;
 HEAP32[i3 + 88 >> 2] = i1;
 HEAP32[i3 + 56 >> 2] = i2;
 _SpecialInputWidget_InitTabs(i3);
 return;
}

function _Modern_StretchXLiquid(i3, i4, i5, i6, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!((_Builder_OccludedLiquid(i2) | 0) << 24 >> 24)) {
  _AddVertices(i1, 5);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Entity_SetBlockModel(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _Block_Parse(i1) | 0;
 if ((i1 | 0) == -1) HEAP32[i2 + 48 >> 2] = HEAP32[428695]; else {
  HEAP16[i2 + 52 >> 1] = i1;
  i1 = _Model_Get(14428) | 0;
  HEAP32[i2 + 48 >> 2] = i1;
 }
 return;
}

function _Queue_Init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = i2;
 i2 = i1 + 8 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 return;
}

function _Options_LoadFilter(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 _String_UNSAFE_Separate(i1, 61, i3, i2) | 0;
 i1 = (_HasChanged(i3) | 0) << 24 >> 24 == 0 & 1;
 STACKTOP = i2;
 return i1 | 0;
}

function _Font_MakeBitmapped(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i3 = _Display_ScaleY(i3) | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP16[i1 + 4 >> 1] = i3;
 HEAP16[i1 + 6 >> 1] = i2;
 i3 = _Drawer2D_AdjHeight(i3) | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 return;
}

function _AnimatedComp_DoTilt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0;
 d3 = +HEAPF32[i2 >> 2];
 d3 = i1 << 24 >> 24 == 0 ? d3 + .10000000149011612 : d3 * .8399999737739563;
 d3 = d3 < 0.0 ? 0.0 : d3;
 HEAPF32[i2 >> 2] = d3 > 1.0 ? 1.0 : d3;
 return;
}

function _SkeletonModel_MakeParts() {
 _BoxDesc_BuildBox(1715968, 18252);
 _BoxDesc_BuildBox(1715984, 18296);
 _BoxDesc_BuildBox(1716e3, 18340);
 _BoxDesc_BuildBox(1716016, 18384);
 _BoxDesc_BuildBox(1716032, 18428);
 _BoxDesc_BuildBox(1715952, 18472);
 return;
}

function _ScrollbarWidget_MouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0, i4 = 0;
 i4 = _Utils_AccumulateWheelDelta(i2 + 52 | 0, d1) | 0;
 i3 = i2 + 40 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
 _ScrollbarWidget_ClampTopRow(i2);
 return 1;
}

function _CreeperModel_MakeParts() {
 _BoxDesc_BuildBox(1716336, 19704);
 _BoxDesc_BuildBox(1716352, 19748);
 _BoxDesc_BuildBox(1716368, 19792);
 _BoxDesc_BuildBox(1716384, 19836);
 _BoxDesc_BuildBox(1716400, 19880);
 _BoxDesc_BuildBox(1716416, 19924);
 return;
}

function _BlockDefs_OnBrightnessPropertyUpdated(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!((HEAP8[978980] | 0) == 0 | (HEAP8[1868790] | 0) == 0)) if ((HEAP8[994084 + (i1 & 65535) >> 0] | 0) != i2 << 24 >> 24) FUNCTION_TABLE_v[HEAP32[467169] & 127]();
 return;
}

function _AddSpriteVertices(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAPU16[1047844 + (((i1 & 65535) * 6 | 1) << 1) >> 1] | 0;
 i2 = HEAP32[460410] | 0;
 i1 = 110944 + ((i2 ? i1 >>> i2 : i1) << 5) + 24 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 16;
 return;
}

function _Vec3_Sub_1950(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[414158] - +HEAPF32[i1 >> 2];
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[414159] - +HEAPF32[i1 + 4 >> 2];
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[414160] - +HEAPF32[i1 + 8 >> 2];
 return;
}

function _TextGroupWidget_RedrawAll(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 40 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 0) {
  i1 = 0;
  do {
   _TextGroupWidget_Redraw(i3, i1);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i2 >> 2] | 0));
 }
 return;
}

function _OnInit_1110() {
 var i1 = 0, i2 = 0;
 _OnReset_1111();
 HEAP8[1696949] = HEAP8[1688992] | 0;
 i1 = HEAP32[422250] | 0;
 i2 = 0;
 do {
  HEAP16[1695240 + (i2 << 1) >> 1] = HEAPU8[i1 + i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 9);
 return;
}

function _HotbarWidget_MapKey(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 0;
 while (1) {
  if ((_InputBind_Claims(i1 + 39 | 0, i3, i2) | 0) << 24 >> 24) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 9) {
   i1 = -1;
   break;
  }
 }
 return i1 | 0;
}

function _PerspectiveCamera_UpdateMouse(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0;
 i1 = HEAP32[244563] | 0;
 _PerspectiveCamera_UpdateMouseRotation(i3, d2);
 HEAPF32[1656676 + (i1 << 3) >> 2] = 0.0;
 HEAPF32[1656676 + (i1 << 3) + 4 >> 2] = 0.0;
 return;
}

function _Gfx_End3D(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = 1689148;
 i1 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  i3 = i3 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i3 | 0) < (i1 | 0));
 _Gfx_SetColorWrite(1, 1, 1, 1);
 return;
}

function _Drawer2D_ValidColorCodeAt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAPU16[i2 + 4 >> 1] | 0 | 0) > (i1 | 0)) i1 = (HEAP32[1667324 + ((HEAPU8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] | 0) << 2) >> 2] | 0) >>> 0 > 16777215 & 1; else i1 = 0;
 return i1 | 0;
}

function _DisconnectScreen_Layout(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1 + 248 | 0, 1, 1, 0, -30);
 _Widget_SetLocation(i1 + 320 | 0, 1, 1, 0, 10);
 _Widget_SetLocation(i1 + 56 | 0, 1, 1, 0, 80);
 _Widget_SetLocation(i1 + 140 | 0, 1, 1, 0, 130);
 return;
}

function _CPE_Tick(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[454525] | 0;
 HEAP32[454525] = i2 + 1;
 if (!((i2 | 0) < 19 | (HEAP8[21517] | 0) == 0)) {
  i1 = _CPE_WriteTwoWayPing(i1, 0, _Ping_NextPingId() | 0) | 0;
  HEAP32[454525] = 0;
 }
 return i1 | 0;
}

function _UpdateFogMinimal(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0;
 if (d1 != 0.0) {
  i3 = ~~(-2.995732307434082 / -d1);
  i2 = HEAP32[3681] | 0;
  _Game_SetViewDistance((i2 | 0) > (i3 | 0) ? i3 : i2);
 } else _Game_SetViewDistance(HEAP32[3681] | 0);
 return;
}

function _Process_StartOpen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i3 = i2;
 _String_EncodeUtf8(i3, i1) | 0;
 i1 = _interop_OpenTab(i3 | 0) | 0;
 STACKTOP = i2;
 return ((i1 | 0) == 1 ? -857812897 : i1) | 0;
}

function _OnscreenKeyboard_SetText(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i1 = i3;
 if (HEAP8[1868784] | 0) {
  _String_EncodeUtf8(i1, i2) | 0;
  _interop_SetKeyboardText(i1 | 0);
 }
 STACKTOP = i3;
 return;
}

function _MapState_Init(i1) {
 i1 = i1 | 0;
 _Inflate_MakeStream2(i1 + 44740 | 0, i1, 1818104);
 _GZipHeader_Init(i1 + 44800 | 0);
 HEAP32[i1 + 44812 >> 2] = 0;
 HEAP32[i1 + 44796 >> 2] = 0;
 HEAP32[i1 + 44816 >> 2] = 0;
 HEAP8[i1 + 44820 >> 0] = 0;
 return;
}

function _Entity_TouchesAnyWater(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 _Entity_GetBounds(i1, i3);
 _AABB_Offset(i3, i3, 14436);
 i1 = _Entity_TouchesAny(i3, 21) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _InputHandler_SetFOV(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[417347] | 0;
 if (!(HEAP8[i1 + 470 >> 0] | 0)) i1 = 0; else if (!(HEAP8[i1 + 472 >> 0] | 0)) i1 = 0; else {
  HEAP32[414165] = i2;
  _Camera_SetFov(i2);
  i1 = 1;
 }
 return i1 | 0;
}

function _HUDScreen_InputUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((_InventoryScreen_IsHotbarActive() | 0) << 24 >> 24) {
  i3 = i3 + 332 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, i2, i1);
 }
 return;
}

function _GrO_SetShadows(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, HEAP32[2336 + (i1 << 2) >> 2] | 0);
 HEAP8[1669385] = i1;
 _Options_Set(41100, i3);
 STACKTOP = i2;
 return;
}

function _Entity_TouchesAnyLava(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 _Entity_GetBounds(i1, i3);
 _AABB_Offset(i3, i3, 14436);
 i1 = _Entity_TouchesAny(i3, 20) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _MakeBorderTex(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[1689080] | 0)) {
  i1 = HEAP16[1047844 + (((i1 & 65535) * 6 | 0) + 5 << 1) >> 1] | 0;
  _Gfx_DeleteTexture(i2);
  i1 = _Atlas2D_LoadTile(i1) | 0;
  HEAP32[i2 >> 2] = i1;
 }
 return;
}

function _Fallback_CellWidth(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = 0;
 do {
  i4 = HEAPU8[i1 + i3 >> 0] | 0;
  i2 = (i2 | 0) > (i4 | 0) ? i2 : i4;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 8);
 return (_Math_ilog2(i2) | 0) + 2 | 0;
}

function _OctaveNoise_Init(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 HEAP32[i2 + 4096 >> 2] = i3;
 if ((i3 | 0) > 0) {
  i1 = 0;
  do {
   _ImprovedNoise_Init(i2 + (i1 << 9) | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i3 | 0));
 }
 return;
}

function _GrO_SetNames(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, HEAP32[2304 + (i1 << 2) >> 2] | 0);
 HEAP8[1669384] = i1;
 _Options_Set(41113, i3);
 STACKTOP = i2;
 return;
}

function _GrO_SetFPS(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, HEAP32[3600 + (i1 << 2) >> 2] | 0);
 _Options_Set(39564, i3);
 _Game_SetFpsLimit(i1);
 STACKTOP = i2;
 return;
}

function _Game_SetViewDistance(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[3682] | 0;
 i1 = (i2 | 0) > (i1 | 0) ? i1 : i2;
 if ((i1 | 0) != (HEAP32[3680] | 0)) {
  HEAP32[3680] = i1;
  _Event_RaiseVoid(1677544);
  _Camera_UpdateProjection();
 }
 return;
}

function _PauseScreenBase_AddWidgets(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TextWidget_Add(i1, i1 + 716 | 0);
 _Menu_AddButtons(i1, i1 + 44 | 0, i2, HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0);
 _AddPrimaryButton(i1, i1 + 632 | 0, 144);
 return;
}

function _Overlay_LayoutLabels(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 _Widget_SetLocation(i2, 1, 1, 0, -120);
 i1 = 1;
 do {
  _Widget_SetLocation(i2 + (i1 * 72 | 0) | 0, 1, 1, 0, (i1 * 20 | 0) + -70 | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 return;
}

function _ClearDeniedCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 i3 = _TextureUrls_ClearDenied() | 0;
 HEAP32[i1 >> 2] = i3;
 _Chat_Add1(28396, i1);
 STACKTOP = i2;
 return;
}

function _Platform_DescribeError(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i1 >>> 0 > 999) i1 = 0; else {
  i1 = _strerror(i1) | 0;
  if (!i1) i1 = 0; else {
   _String_AppendUtf8(i2, i1, _String_CalcLen(i1, 600) | 0);
   i1 = 1;
  }
 }
 return i1 | 0;
}

function _OnKeyUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _MapNativeKey(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0;
 i2 = (i1 | 0) != 0;
 if (i2) _Input_SetReleased(i1);
 _DeferredEnableRawMouse();
 return i2 & 1 | 0;
}

function _Nbt_WriteFloat(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 HEAP8[i1 >> 0] = 5;
 i2 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 _Stream_SetU32_BE(i2, (HEAPF32[tempDoublePtr >> 2] = d3, HEAP32[tempDoublePtr >> 2] | 0));
 return i2 + 4 | 0;
}

function _MenuOptionsScreen_OnLightingModeServerChanged(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24) {
  i1 = HEAP32[i3 + 100 >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i3);
  HEAP8[i3 + 7 >> 0] = 1;
 }
 return;
}

function _CPE_ApplyTexturePack(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP16[i1 + 4 >> 1] | 0)) i2 = 3; else if ((_Utils_IsUrlPrefix(i1) | 0) << 24 >> 24) i2 = 3;
 if ((i2 | 0) == 3) _Server_RetrieveTexturePack(i1);
 _Platform_Log1(46794, i1);
 return;
}

function _ButtonWidget_SetConst(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 _String_FromReadonly(i5, i2);
 _ButtonWidget_Set(i3, i5, i1);
 STACKTOP = i4;
 return;
}

function _HandleOnNewMapLoaded(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[422252] | 0;
 if (i1 | 0) do {
  i2 = HEAP32[i1 + 16 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_v[i2 & 127]();
  i1 = HEAP32[i1 + 20 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _Gfx_CreateVb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _Gfx_AllocStaticVb() | 0;
 if (!i1) do {
  if (!((_Game_ReduceVRAM() | 0) << 24 >> 24)) _Process_Abort2(0, 34565);
  i1 = _Gfx_AllocStaticVb() | 0;
 } while (!(i1 | 0));
 return i1 | 0;
}

function _UrlWarningOverlay_Show(i1) {
 i1 = i1 | 0;
 HEAP8[1713148] = 1;
 HEAP8[1713150] = 1;
 HEAP32[428286] = 16676;
 HEAP32[428295] = 1713644;
 HEAP16[856592] = 0;
 HEAP16[856593] = 256;
 _String_Copy(1713180, i1);
 _Gui_Add(1713144, 40);
 return;
}

function _RemoveEndPlus(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 4 | 0;
 i1 = HEAP16[i2 >> 1] | 0;
 if (i1 << 16 >> 16) if ((HEAP8[(HEAP32[i3 >> 2] | 0) + ((i1 & 65535) + -1) >> 0] | 0) == 43) HEAP16[i2 >> 1] = i1 + -1 << 16 >> 16;
 return;
}

function _Gui_Contains(i2, i3, i4, i1, i5, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return (i1 + i3 | 0) > (i6 | 0) & ((i4 + i2 | 0) > (i5 | 0) & ((i5 | 0) >= (i2 | 0) & (i6 | 0) >= (i3 | 0))) & 1 | 0;
}

function _Game_Reset() {
 var i1 = 0, i2 = 0;
 _World_NewMap();
 i1 = HEAP32[422252] | 0;
 if (i1 | 0) do {
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_v[i2 & 127]();
  i1 = HEAP32[i1 + 20 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _PhysicsComp_CalcMaxHeight(d1) {
 d1 = +d1;
 var d2 = 0.0, i3 = 0;
 i3 = ~~(+_Math_Log2(d1 * .247483075 + .9899323) * 34.30961849);
 d2 = +_PhysicsComp_YPosAt(i3, d1);
 d1 = +_PhysicsComp_YPosAt(i3 + 1 | 0, d1);
 return +(d2 > d1 ? d2 : d1);
}

function _TextWidget_SetConst(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 _String_FromReadonly(i5, i2);
 _TextWidget_Set(i3, i5, i1);
 STACKTOP = i4;
 return;
}

function _String_MakeUInt32(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = 0;
 do {
  i4 = i1;
  i1 = (i1 >>> 0) / 10 | 0;
  HEAP8[i2 + i3 >> 0] = i4 - (i1 * 10 | 0) | 48;
  i3 = i3 + 1 | 0;
 } while (i4 >>> 0 > 9);
 return i3 | 0;
}

function _Menu_Remove(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = (HEAP32[i2 + 16 >> 2] | 0) + (i1 << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _HUDScreen_PointerUp(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (HEAP8[1689553] | 0) {
  i2 = i2 + 332 | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 31](i2, i1, i3, i4);
 }
 return;
}

function _Camera_Register(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[414208] | 0;
 i3 = (i2 | 0) == 0;
 HEAP32[(i3 ? 1656832 : (HEAP32[414209] | 0) + 44 | 0) >> 2] = i1;
 HEAP32[414209] = i1;
 HEAP32[i1 + 44 >> 2] = i3 ? i1 : i2;
 return;
}

function _Window_GetWindowState() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i1 = i2;
 _memset(i1 | 0, 0, 280) | 0;
 _emscripten_get_fullscreen_status(i1 | 0) | 0;
 STACKTOP = i2;
 return (HEAP32[i1 >> 2] | 0) != 0 | 0;
}

function _OnVisibilityChanged_2920(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = (HEAP32[i2 + 4 >> 2] | 0) == 0;
 if ((HEAPU8[1867883] | 0 | 0) != (i1 & 1 | 0)) {
  HEAP8[1867883] = i1 & 1;
  _Event_RaiseVoid(1684304);
 }
 return 0;
}

function _GL_SetupVbTextured_Range(i1) {
 i1 = i1 | 0;
 i1 = i1 * 24 | 0;
 _glVertexAttribPointer(0, 3, 5126, 0, 24, i1 | 0);
 _glVertexAttribPointer(1, 4, 5121, 1, 24, i1 + 12 | 0);
 _glVertexAttribPointer(2, 2, 5126, 0, 24, i1 + 16 | 0);
 return;
}

function _File_Do(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _interop_FileCreate(i2 | 0, i1 | 0) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i3 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i3 >> 2] = -1;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _SkinnedCubeModel_Draw(i1) {
 i1 = i1 | 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 24);
 _Model_DrawRotate(+HEAPF32[i1 + 16 >> 2] * -.01745329238474369, 0.0, 0.0, 1715336, 1);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(24);
 return;
}

function _NostalgiaMenuScreen_Layout(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1 + 288 | 0, 1, 1, 0, -100);
 _Widget_SetLocation(i1 + 36 | 0, 1, 1, 0, -25);
 _Widget_SetLocation(i1 + 120 | 0, 1, 1, 0, 25);
 _Menu_LayoutBack(i1 + 204 | 0);
 return;
}

function _InputHandler_CheckZoomFov(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[417347] | 0;
 if (!(HEAP8[i1 + 470 >> 0] | 0)) i2 = 3; else if (!(HEAP8[i1 + 472 >> 0] | 0)) i2 = 3;
 if ((i2 | 0) == 3) _Camera_SetFov(HEAP32[414164] | 0);
 return;
}

function _HacksComp_ParseAllFlag(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 44 | 0;
 if ((_String_IndexOfConst(i1, 30891) | 0) > -1) _HacksComp_SetAll(i2, 1); else if ((_String_IndexOfConst(i1, 30898) | 0) > -1) _HacksComp_SetAll(i2, 0);
 return;
}
function _String_AppendAll(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 if ((i3 | 0) > 0) {
  i2 = 0;
  do {
   _String_Append(i4, HEAP8[i1 + i2 >> 0] | 0);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return;
}

function _OnBeforeUnload(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!((_Game_ShouldClose() | 0) << 24 >> 24)) {
  _emscripten_exit_pointerlock() | 0;
  i1 = 53329;
 } else {
  _Window_RequestClose();
  i1 = 0;
 }
 return i1 | 0;
}

function _NostalgiaScreen_Version(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP8[1688989] | 0;
 _Options_SetInt(43269, (i3 & 255) < 28 ? 30 : (i3 & 255) + -1 | 0);
 _GameVersion_Load();
 _MenuOptionsScreen_Update(i1, i2);
 return;
}

function _HandleOnNewMap(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[422252] | 0;
 if (i1 | 0) do {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_v[i2 & 127]();
  i1 = HEAP32[i1 + 20 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _Convert_CP437ToUtf8(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i1 << 24 >> 24 < 32 | i1 << 24 >> 24 == 127) i1 = _Convert_UnicodeToUtf8(_Convert_CP437ToUnicode(i1) | 0, i2) | 0; else {
  HEAP8[i2 >> 0] = i1;
  i1 = 1;
 }
 return i1 | 0;
}

function _BlocksTNT(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 & 65535;
 if ((i1 & -4) << 16 >> 16 == 8) i1 = 1; else if ((HEAP8[1001764 + i2 >> 0] | 0) == 2) return (HEAP8[1007140 + i2 >> 0] | 1) << 24 >> 24 == 5 | 0; else i1 = 0;
 return i1 | 0;
}

function _TextGroupWidget_Create(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 _Widget_Reset(i4);
 HEAP32[i4 >> 2] = 23408;
 HEAP32[i4 + 40 >> 2] = i2;
 HEAP32[i4 + 84 >> 2] = i3;
 HEAP32[i4 + 88 >> 2] = i1;
 return;
}

function _TexIdsOverlay_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 1713140;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 1;
 HEAP32[i1 + 8 >> 2] = 7756;
 _TextWidget_Add(i1, i1 + 156 | 0);
 _Event_Register(1676764, i1, 331);
 return;
}

function _SittingModel_Register() {
 _Model_Init(17320);
 HEAP32[4343] = 333;
 HEAP8[17365] = 1;
 HEAP8[17366] = 1;
 HEAP8[17362] = HEAP8[17362] | 2;
 HEAP32[4346] = 288;
 HEAPF32[4345] = .5;
 HEAP32[4342] = 23;
 _Model_Register(17320);
 return;
}

function _FreeChunks() {
 _Mem_Free(HEAP32[424252] | 0);
 _Mem_Free(HEAP32[424253] | 0);
 _Mem_Free(HEAP32[424254] | 0);
 _Mem_Free(HEAP32[424255] | 0);
 HEAP32[424252] = 0;
 HEAP32[424253] = 0;
 HEAP32[424254] = 0;
 HEAP32[424255] = 0;
 return;
}

function _Block_UpdateCulling(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 _Block_CalcStretch(i1);
 i2 = 0;
 do {
  i3 = i2 & 65535;
  _Block_CalcCulling(i1, i3);
  _Block_CalcCulling(i3, i1);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 768);
 return;
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _String_AppendConst(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i1 << 24 >> 24) do {
  _String_Append(i3, i1);
  i2 = i2 + 1 | 0;
  i1 = HEAP8[i2 >> 0] | 0;
 } while (i1 << 24 >> 24 != 0);
 return;
}

function _SpecialInputWidget_Redraw(i1) {
 i1 = i1 | 0;
 _SpecialInputWidget_Make(i1, i1 + 96 + ((HEAP32[i1 + 48 >> 2] | 0) * 28 | 0) | 0);
 HEAP8[i1 + 52 >> 0] = 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 return;
}

function _SpecialInputWidget_ContentHeight(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _Math_CeilDiv((HEAPU16[i1 + 24 >> 1] | 0 | 0) / (HEAP32[i1 + 4 >> 2] | 0) | 0, HEAP32[i1 >> 2] | 0) | 0;
 return Math_imul(HEAP32[i2 + 44 >> 2] | 0, i1) | 0;
}

function _SinStage1(d4) {
 d4 = +d4;
 var d1 = 0.0, i2 = 0, d3 = 0.0;
 d3 = d4 * d4;
 d1 = -2.020852964e-11;
 i2 = 4;
 while (1) {
  d1 = d3 * d1 + +HEAPF64[2928 + (i2 << 3) >> 3];
  if (!i2) break; else i2 = i2 + -1 | 0;
 }
 return +(d1 * d4);
}

function _OnInit_1631() {
 var i1 = 0;
 HEAP32[428694] = 1536;
 _RegisterDefaultModels();
 i1 = _Options_GetBool(46175, HEAP8[1868754] | 0) | 0;
 HEAP8[1714762] = i1;
 _Event_Register(1677284, 0, 21);
 _Event_Register(1678324, 0, 332);
 return;
}

function _TexPackOverlay_Layout(i1) {
 i1 = i1 | 0;
 _Overlay_LayoutLabels(i1 + 404 | 0);
 _Overlay_LayoutMainButtons(i1 + 68 | 0);
 _Widget_SetLocation(i1 + 236 | 0, 1, 1, -110, 85);
 _Widget_SetLocation(i1 + 320 | 0, 1, 1, 110, 85);
 return;
}

function _GuiClassicPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 2;
 _Game_UpdateTexture(1689524, i2, i1, 0, i4) | 0;
 STACKTOP = i3;
 return;
}

function _FastAllocTempMem(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[422336] | 0;
 if ((HEAP32[422335] | 0) < (i2 | 0)) {
  _Mem_Free(i1);
  i1 = _Mem_Alloc(i2, 1, 34545) | 0;
  HEAP32[422336] = i1;
 }
 HEAP32[422335] = i2;
 return i1 | 0;
}

function _Collisions_HitHorizontal(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[i1 + 4 >> 0] | 0)) if (!(HEAP8[i1 + 7 >> 0] | 0)) if (!(HEAP8[i1 + 6 >> 0] | 0)) i1 = (HEAP8[i1 + 9 >> 0] | 0) != 0 & 1; else i1 = 1; else i1 = 1; else i1 = 1;
 return i1 | 0;
}

function _BlockDefs_Reset() {
 if ((HEAP8[1688988] | 0) != 0 & (HEAP8[1868756] | 0) != 0) {
  HEAP32[431890] = 396;
  HEAP16[863489] = 80;
  HEAP32[431891] = 397;
  HEAP16[863490] = 2;
  HEAP32[431892] = 398;
  HEAP16[863491] = 85;
 }
 return;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1 | 0);
  return i3 << i1;
 }
 setTempRet0(i3 << i1 - 32 | 0);
 return 0;
}

function _SetMatrix() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i1;
 _Matrix_Translate(i2, -0.0, -+_Entity_GetEyeHeight(HEAP32[417347] | 0), -0.0);
 _Matrix_Mul(1689084, i2, 1656560);
 STACKTOP = i1;
 return;
}

function _GZip_MakeStream(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _Deflate_MakeStream(i2, i1, i3);
 HEAP32[i1 + 115580 >> 2] = -1;
 HEAP32[i1 + 115584 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 30;
 HEAP32[i2 + 28 >> 2] = 17;
 return;
}

function _ChatScreen_ClampChatIndex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (HEAP32[414212] | 0) - (HEAP32[422374] | 0) | 0;
 i3 = (i2 | 0) < 0 ? i2 : 0;
 i1 = (i3 | 0) > (i1 | 0) ? i3 : i1;
 return ((i1 | 0) > (i2 | 0) ? i2 : i1) | 0;
}

function _AllowedLogNameChar(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 41:
 case 40:
 case 93:
 case 91:
 case 125:
 case 123:
  break;
 default:
  if ((i1 + -48 & 255) >= 10) return ((i1 & -33) + -65 & 255) < 26 | 0;
 }
 return 1;
}

function _NetPlayer_ShouldRenderName(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 if (!(HEAP8[i1 + 55 >> 0] | 0)) i1 = 0; else {
  d2 = +_Model_RenderDistance(i1);
  i1 = d2 <= ((HEAP8[1669384] | 0) == 4 ? 67108864.0 : 1024.0) & 1;
 }
 return i1 | 0;
}

function _Vec3_RotateY3(i1, d3, d4, d5, d2) {
 i1 = i1 | 0;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d2 = +d2;
 var d6 = 0.0;
 d6 = +_Math_CosF(d2);
 d2 = +_Math_SinF(d2);
 _Vec3_Create3_2401(i1, d6 * d3 - d2 * d5, d4, d6 * d5 + d2 * d3);
 return;
}

function _SetupProgram(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Window_PreInit();
 _Platform_Init();
 _Options_Load();
 _Window_Init();
 _Platform_LogConst(53172);
 HEAP32[460395] = 977600;
 HEAP16[920792] = 0;
 HEAP16[920793] = 64;
 return;
}

function _RequestList_TryFree(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _RequestList_Find(i2, i1) | 0;
 if ((i1 | 0) >= 0) {
  _HttpRequest_Free((HEAP32[i2 + 8 >> 2] | 0) + (i1 * 312 | 0) | 0);
  _RequestList_RemoveAt(i2, i1);
 }
 return;
}

function _PackedCol_DeHex(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 << 24 >> 24;
 if ((i1 + -48 & 255) < 10) i1 = -48; else if ((i1 + -97 & 255) < 6) i1 = -87; else return ((i1 + -65 & 255) < 6 ? i2 + -55 | 0 : -1) | 0;
 return i1 + i2 | 0;
}

function _ClassicHacksBindingsScreen_Show() {
 HEAP32[427513] = (HEAP8[1868652] | 0) == 2 ? 353600 : 15140;
 _KeyBindsScreen_Reset(178, 0, 260);
 _KeyBindsScreen_SetLayout(-90, -40, 3);
 _KeyBindsScreen_Show(6, 45603, 7024, 44924);
 return;
}

function _Drawer2D_ReducePadding_Height(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (HEAP8[1667320] | 0) {
  i4 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i4 - (((i4 - i2 | 0) / (i3 | 0) | 0) << 1);
 }
 return;
}

function _ChatScreen_GetBottomRight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = 1504 + (2 - i2 << 3) | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function _MenuOptionsScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 108 | 0);
 _Font_Free(i1 + 120 | 0);
 _Screen_ContextLost(i1);
 i1 = i1 + 132 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 return;
}

function _Inventory_Remove(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = 0;
 do {
  i1 = 1695402 + (i3 << 1) | 0;
  if ((HEAP16[i1 >> 1] | 0) == i2 << 16 >> 16) HEAP16[i1 >> 1] = 0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 768);
 return;
}

function _IconsPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 4;
 _Game_UpdateTexture(1689528, i2, i1, 0, i4) | 0;
 STACKTOP = i3;
 return;
}

function _GL_GenAndBind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _glGenBuffers(1, i2 | 0);
 _glBindBuffer(i1 | 0, HEAP32[i2 >> 2] | 0);
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}
function _PackedCol_Scale(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 return i1 & -16777216 | ~~(+(i1 & 255 | 0) * d2) & 255 | (~~(+((8 ? i1 >>> 8 : i1) & 255 | 0) * d2) & 255) << 8 | (~~(+((16 ? i1 >>> 16 : i1) & 255 | 0) * d2) & 255) << 16 | 0;
}

function _MenuInputOverlay_PointerDown(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((_Screen_DoPointerDown(i2, i1, i3, i4) | 0) > -1) i1 = 1; else i1 = (HEAP8[i2 + 36 >> 0] | 0) != 0 & 1;
 return i1 | 0;
}

function _Inventory_SetHotbarIndex(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_Inventory_CheckChangeSelected() | 0) << 24 >> 24 != 0;
 if (i2 & (HEAP8[1868754] | 0) == 0) {
  HEAP32[424236] = i1 * 9;
  _Event_RaiseVoid(1679364);
 }
 return;
}

function _Gfx_DepthOnlyRendering(i1) {
 i1 = i1 | 0;
 i1 = i1 << 24 >> 24 == 0 & 1;
 _SetColorWrite((HEAPU8[34487] | 0) & i1 & 255, (HEAPU8[34488] | 0) & i1 & 255, (HEAPU8[34489] | 0) & i1 & 255, (HEAPU8[34490] | 0) & i1 & 255);
 return;
}

function _Builder1DPart_VerticesCount(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = 0;
 do {
  i1 = (HEAP32[i3 + (i2 << 2) >> 2] | 0) + i1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 6);
 return i1 | 0;
}

function _Block_WriteFullBright(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 & 15;
 if (!(i1 << 24 >> 24)) {
  i2 = 4 ? (i2 & 255) >>> 4 : i2 & 255;
  return (i2 << 24 >> 24 == 0 ? 0 : i2 | -64) | 0;
 } else return i1 | -128 | 0;
 return 0;
}

function _GuiPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 2;
 _Game_UpdateTexture(1689520, i2, i1, 0, i4) | 0;
 STACKTOP = i3;
 return;
}

function _DeleteShaders() {
 var i1 = 0, i2 = 0;
 HEAP32[422314] = 0;
 i1 = 0;
 do {
  i2 = 3744 + (i1 << 5) + 8 | 0;
  _glDeleteProgram(HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 18);
 return;
}

function _ChatScreen_GetClientStatus(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = 1536 + (i2 << 3) | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function _TextInputWidget_PointerDown(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _TextInputWidget_OpenKeyboard(i2, 0);
 HEAP8[i2 + 146 >> 0] = 1;
 _InputWidget_PointerDown(i2, i1, i3, i4) | 0;
 return 1;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 >>> i1 | 0);
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 setTempRet0(0);
 return i2 >>> i1 - 32 | 0;
}

function _Vec3_Mul1_1768(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] * d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * d2;
 return;
}

function _Vec3_Mul1_1730(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] * d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * d2;
 return;
}

function _Vec3_Add1_1964(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + d2;
 return;
}

function _Vec3_Add1_1952(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + d2;
 return;
}

function _SittingModel_Draw(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 164 >> 2] = 1.5;
 HEAPF32[i1 + 172 >> 2] = 1.5;
 HEAPF32[i1 + 168 >> 2] = -.10000000149011612;
 HEAPF32[i1 + 176 >> 2] = .10000000149011612;
 _HumanModel_Draw(i1);
 return;
}

function _Physics_Activate(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[(HEAP32[244730] | 0) + i3 >> 0] | 0;
 i2 = HEAP32[1652264 + ((i1 & 255) << 2) >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[i2 & 255](i3, i1 & 255);
 return;
}

function _MenuInputOverlay_PointerMove(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((_Menu_DoPointerMove(i2, 0, i3, i4) | 0) > -1) i1 = 1; else i1 = (HEAP8[i2 + 36 >> 0] | 0) != 0 & 1;
 return i1 | 0;
}

function _Builder_ApplyActive() {
 do if (!(HEAP8[1868730] | 0)) _NormalBuilder_SetActive(); else if (!(HEAP8[1868790] | 0)) {
  _AdvBuilder_SetActive();
  break;
 } else {
  _ModernBuilder_SetActive();
  break;
 } while (0);
 return;
}

function _Vec3_Mul1_345(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] * d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * d2;
 return;
}

function _ScrollbarWidget_PointerUp(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i4 + 60 | 0;
 if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 + 56 >> 2] = 0;
 }
 return;
}

function _OnContextLost_863(i1) {
 i1 = i1 | 0;
 _LoseAllScreens();
 if (!(HEAP8[1689082] | 0)) {
  _Gfx_DeleteTexture(1689520);
  _Gfx_DeleteTexture(1689524);
  _Gfx_DeleteTexture(1689528);
  _Gfx_DeleteTexture(1689532);
 }
 return;
}

function _OnInit_668() {
 var i1 = 0;
 _Event_Register(1678324, 0, 213);
 _Event_Register(1678584, 0, 214);
 i1 = _Options_GetBool(41088, 0) | 0;
 HEAP8[1689081] = i1;
 if (!(HEAP8[1689080] | 0)) _OnContextRecreated_670(0);
 return;
}

function _File_Position(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _interop_FileSeek(i1 | 0, 0, 1) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i2 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = -1;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _EnvRenderer_Rect(i1, i4, i5, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = i2;
 return;
}

function _ClassicLighting_AllocState() {
 var i1 = 0;
 i1 = _Mem_TryAlloc(Math_imul(HEAP32[244735] | 0, HEAP32[244733] | 0) | 0, 2) | 0;
 HEAP32[424246] = i1;
 if (!i1) _World_OutOfMemory(); else _ClassicLighting_Refresh();
 return;
}

function _UpdateUserType(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = (i1 & 255) > 99 & i1 << 24 >> 24 > -1 & 1;
 HEAP8[i2 >> 0] = i1;
 if (!(HEAP8[21445] | 0)) {
  HEAP8[1057835] = i1;
  _memset(1057067, i1 | 0, 5) | 0;
 }
 return;
}

function _HotbarWidget_BuildMesh(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 _HotbarWidget_BuildOutlineMesh(i2, i1);
 _HotbarWidget_BuildEntriesMesh(i2, i1);
 HEAP32[i1 >> 2] = i3 + 2784;
 return;
}

function _CallTexSubImage2D(i2, i5, i6, i4, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _glTexSubImage2D(3553, i2 | 0, i5 | 0, i6 | 0, i4 | 0, i1 | 0, 6408, 5121, i3 | 0);
 return;
}

function _Vec3_Add_902(i1) {
 i1 = i1 | 0;
 HEAPF32[422393] = +HEAPF32[422393] + +HEAPF32[i1 >> 2];
 HEAPF32[422394] = +HEAPF32[422394] + +HEAPF32[i1 + 4 >> 2];
 HEAPF32[422395] = +HEAPF32[422395] + +HEAPF32[i1 + 8 >> 2];
 return;
}

function _TexturePackScreen_Show() {
 HEAP32[424838] = 44211;
 HEAP32[424835] = 43717;
 HEAP32[424834] = 159;
 HEAP32[424836] = 327;
 HEAP32[424832] = 160;
 HEAP32[424833] = 147;
 HEAP32[424837] = 16;
 _ListScreen_Show();
 return;
}

function _String_Length(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 0;
 while (1) {
  if (!(HEAP8[i2 >> 0] | 0)) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 65535) {
   i1 = 65535;
   break;
  } else i2 = i2 + 1 | 0;
 }
 return i1 | 0;
}

function _HotkeyListScreen_MakeFlags(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i1 & 1 | 0) _String_AppendConst(i2, 44153);
 if (i1 & 2 | 0) _String_AppendConst(i2, 44159);
 if (i1 & 4 | 0) _String_AppendConst(i2, 44166);
 return;
}

function _Font_SetPadding(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  i3 = HEAPU16[i2 + 4 >> 1] | 0;
  i1 = ((_Display_ScaleY(i1) | 0) << 1) + i3 | 0;
  HEAP32[i2 + 8 >> 2] = i1;
 }
 return;
}

function _ChatScreen_GetStatus(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = 1456 + (i2 << 3) | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function _Vec3_Add1(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i3 >> 2] = +HEAPF32[i1 >> 2] + d2;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + d2;
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + d2;
 return;
}

function _Sounds_CheckSolid(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 & 65535;
 i1 = HEAP8[1007908 + i2 >> 0] | 0;
 if (i1 << 24 >> 24) HEAP8[1868741] = i1;
 if ((HEAP8[1006372 + i2 >> 0] | 0) != 4) HEAP8[1868740] = 1;
 return 0;
}

function _HotkeyListScreen_Show() {
 HEAP32[424838] = 44003;
 HEAP32[424835] = 44018;
 HEAP32[424834] = 152;
 HEAP32[424836] = 326;
 HEAP32[424832] = 153;
 HEAP32[424833] = 147;
 HEAP32[424837] = 18;
 _ListScreen_Show();
 return;
}

function _GL_ClearColor(i1) {
 i1 = i1 | 0;
 _glClearColor(+(+(i1 & 255 | 0) / 255.0), +(+((8 ? i1 >>> 8 : i1) & 255 | 0) / 255.0), +(+((16 ? i1 >>> 16 : i1) & 255 | 0) / 255.0), +(+((24 ? i1 >>> 24 : i1) | 0) / 255.0));
 return;
}

function _ClassicPauseScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _PauseScreenBase_ContextRecreated(i1, i3);
 _Font_Free(i3);
 STACKTOP = i2;
 return;
}

function _ClO_SetViewDist(i1) {
 i1 = i1 | 0;
 switch (i1 | 0) {
 case 3:
  {
   i1 = 512;
   break;
  }
 case 2:
  {
   i1 = 128;
   break;
  }
 default:
  i1 = (i1 | 0) == 1 ? 32 : 8;
 }
 _Game_UserSetViewDistance(i1);
 return;
}

function _SPConnection_Tick(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1841573] | 0)) {
  i1 = HEAP32[460402] | 0;
  HEAP32[460402] = i1 + 1;
  if (!((i1 | 0) % 3 | 0)) {
   _Physics_Tick();
   _TexturePack_CheckPending();
  }
 }
 return;
}

function _Menu_SelectWidget(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i1 << 2) >> 2] | 0;
 _Menu_UnselectAll(i2);
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP8[i3 + 20 >> 0] = 1;
 return;
}

function _LoadLevelScreen_Show() {
 HEAP32[424838] = 43706;
 HEAP32[424835] = 43717;
 HEAP32[424834] = 148;
 HEAP32[424836] = 325;
 HEAP32[424832] = 149;
 HEAP32[424833] = 147;
 HEAP32[424837] = 16;
 _ListScreen_Show();
 return;
}

function _AddPrimaryButton(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!(HEAP8[1868754] | 0)) i3 = (HEAP32[466968] | 0) < 300 ? 200 : 400; else i3 = 400;
 _ButtonWidget_Add(i4, i1, i3, i2);
 return;
}

function _TouchOnscreen_Right(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i2 + 636 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 _TouchOnscreen_RemakeWidgets(i2);
 _Gui_Refresh(i2);
 _TouchOnscreen_UpdateAll(i2);
 return;
}

function _TouchOnscreen_Left(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i2 + 636 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 _TouchOnscreen_RemakeWidgets(i2);
 _Gui_Refresh(i2);
 _TouchOnscreen_UpdateAll(i2);
 return;
}

function _OnInit() {
 _TextureEntry_Register(13304);
 _TextureEntry_Register(13316);
 _TextureEntry_Register(13328);
 _TextureEntry_Register(13340);
 _ScheduledTask_Add(.05, 189) | 0;
 _Event_Register(1677024, 0, 190);
 return;
}

function _MenuOptionsScreen_BoolGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = (FUNCTION_TABLE_i[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 8 >> 2] & 63]() | 0) << 24 >> 24 == 0;
 _String_AppendConst(i2, i1 ? 44104 : 44108);
 return;
}

function _MenuInputOverlay_EnterInput(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 520 >> 2] | 0;
 _MenuInputOverlay_Close(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1 + 284 | 0) | 0);
 return;
}

function _CalcMemSize(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = Math_imul(i1, i3) | 0;
 if ((i3 | 0) != 0 & (i1 | 0) != 0) i1 = ((i2 >>> 0) / (i1 >>> 0) | 0 | 0) == (i3 | 0) ? i2 : 0; else i1 = 1;
 return i1 | 0;
}

function _AllocateParts() {
 var i1 = 0, i2 = 0;
 i1 = Math_imul(HEAP32[424247] | 0, HEAP32[424248] | 0) | 0;
 i2 = _Mem_AllocCleared(i1 << 1, 20, 39342) | 0;
 HEAP32[424256] = i2;
 HEAP32[424257] = i2 + (i1 * 20 | 0);
 return;
}

function _TouchCtrls_ScaleDone(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24) {
  _Convert_ParseFloat(i2, 1689544) | 0;
  _Options_Set(51179, i2);
  _TouchCtrls_UpdateScale(1864976);
  _Gui_LayoutAll();
 }
 return;
}

function _RotateVertical(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(+HEAPF32[422237] - +(HEAP32[422240] | 0) >= .5)) _AutoRotate_Insert(i1, i2, 25237); else _AutoRotate_Insert(i1, i2, 25234);
 return _GetRotated(i1, i2) | 0;
}

function _InventoryScreen_PointerMove(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 + 48 | 0;
 return FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i2, i1, i3, i4) | 0;
}

function _FontListScreen_Show() {
 HEAP32[424838] = 45461;
 HEAP32[424835] = 45475;
 HEAP32[424834] = 175;
 HEAP32[424836] = 329;
 HEAP32[424832] = 176;
 HEAP32[424833] = 36;
 HEAP32[424837] = 20;
 _ListScreen_Show();
 return;
}

function _File_Length(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _interop_FileLength(i1 | 0) | 0;
 if ((i1 | 0) > -1) {
  HEAP32[i2 >> 2] = i1;
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = -1;
  i1 = 0 - i1 | 0;
 }
 return i1 | 0;
}

function _WordWrap_IsWrapper(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 47:
 case 60:
 case 62:
 case 45:
 case 32:
 case 0:
  {
   i1 = 1;
   break;
  }
 default:
  i1 = i1 << 24 >> 24 == 92 & 1;
 }
 return i1 | 0;
}

function _TouchScreen_BindClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[357328 + ((HEAPU8[(HEAP32[i2 + 36 >> 2] | 0) + 4 >> 0] | 0) << 2) >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_iii[i1 & 127](0, 15216) | 0;
 return;
}

function _Platform_LogError(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, i1);
 FUNCTION_TABLE_vi[HEAP32[3881] & 511](i3);
 STACKTOP = i2;
 return;
}

function _GeneratingScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 HEAPF32[i2 + 48 >> 2] = +HEAPF32[422259];
 _LoadingScreen_Render(i2, d1);
 if ((_Gen_IsDone() | 0) << 24 >> 24) _GeneratingScreen_EndGeneration();
 return;
}

function _Builder_TotalVerticesCount() {
 var i1 = 0, i2 = 0;
 i1 = 0;
 i2 = 0;
 do {
  i1 = (_Builder1DPart_VerticesCount(110944 + (i2 << 5) | 0) | 0) + i1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 1024);
 return i1 | 0;
}

function _SpiderModel_MakeParts() {
 _BoxDesc_BuildBox(1715872, 17948);
 _BoxDesc_BuildBox(1715888, 17992);
 _BoxDesc_BuildBox(1715904, 18036);
 _BoxDesc_BuildBox(1715920, 18080);
 _BoxDesc_BuildBox(1715936, 18124);
 return;
}

function _ClassicLighting_IsLit_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = (HEAP32[424246] | 0) + ((Math_imul(HEAP32[244733] | 0, i3) | 0) + i1 << 1) | 0;
 return (HEAP16[i3 >> 1] | 0) < (i2 | 0) | 0;
}

function _BlockDefs_OnBlocksLightPropertyUpdated(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (HEAP8[978980] | 0) if ((HEAP8[993316 + (i1 & 65535) >> 0] | 0) != i2 << 24 >> 24) FUNCTION_TABLE_v[HEAP32[467169] & 127]();
 return;
}

function _Physics_Tick() {
 if ((HEAP8[1652260] | 0) != 0 & (HEAP32[244730] | 0) != 0) {
  _Physics_TickLava();
  _Physics_TickWater();
  HEAP32[414105] = (HEAP32[414105] | 0) + 1;
  _Physics_TickRandomBlocks();
 }
 return;
}

function _OnHacksChanged(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[417347] | 0;
 if (!(HEAP8[i1 + 472 >> 0] | 0)) i2 = 3; else if (!(HEAP8[i1 + 470 >> 0] | 0)) i2 = 3;
 if ((i2 | 0) == 3) _Camera_CycleActive();
 return;
}

function _MPConnection_Init() {
 _Server_ResetState();
 HEAP8[1841572] = 0;
 HEAP32[460380] = 101;
 HEAP32[460381] = 414;
 HEAP32[460382] = 4;
 HEAP32[460383] = 415;
 HEAP32[460385] = 198;
 HEAP32[460401] = 956272;
 return;
}

function _Gfx_SetColorWrite(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[34487] = i4;
 HEAP8[34488] = i3;
 HEAP8[34489] = i2;
 HEAP8[34490] = i1;
 _SetColorWrite(i4, i3, i2, i1);
 return;
}

function _Gfx_GetApiInfo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = 32;
 _String_Format1(i1, 34921, i3);
 _GetGLApiInfo(i1);
 STACKTOP = i2;
 return;
}

function _Clipboard_SetText(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i3 = i2;
 _String_EncodeUtf8(i3, i1) | 0;
 _interop_TrySetClipboardText(i3 | 0);
 STACKTOP = i2;
 return;
}

function _BlockModel_GetBounds(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAPU16[i1 + 52 >> 1] | 0;
 _Vec3_Add_1638(i1 + 56 | 0, 1010980 + (i2 * 12 | 0) | 0);
 _Vec3_Add_1638(i1 + 68 | 0, 1020196 + (i2 * 12 | 0) | 0);
 return;
}

function _Stream_SetU32_LE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = i2;
 HEAP8[i1 + 1 >> 0] = 8 ? i2 >>> 8 : i2;
 HEAP8[i1 + 2 >> 0] = 16 ? i2 >>> 16 : i2;
 HEAP8[i1 + 3 >> 0] = 24 ? i2 >>> 24 : i2;
 return;
}

function _Stream_SetU32_BE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 24 ? i2 >>> 24 : i2;
 HEAP8[i1 + 1 >> 0] = 16 ? i2 >>> 16 : i2;
 HEAP8[i1 + 2 >> 0] = 8 ? i2 >>> 8 : i2;
 HEAP8[i1 + 3 >> 0] = i2;
 return;
}

function _Options_Set(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _String_FromReadonly(i4, i1);
 _Options_SetString(i4, i2);
 STACKTOP = i3;
 return;
}

function _InventoryScreen_PointerUp(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 + 48 | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 31](i2, i1, i3, i4);
 return;
}

function _Bitmap_Allocate(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i2;
 i3 = _Mem_Alloc(Math_imul(i2, i3) | 0, 4, 30401) | 0;
 HEAP32[i1 >> 2] = i3;
 return;
}

function _Window_ShowDialog(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[1868648] | 0)) _ShowDialogCore(i2, i1); else {
  _Window_DisableRawMouse();
  _ShowDialogCore(i2, i1);
  _Window_EnableRawMouse();
 }
 return;
}

function _Vec3_Add_1638(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i1 >> 2] + -.5;
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] + 0.0;
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] + -.5;
 return;
}

function _PlayerInputGamepad(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = 0;
 do {
  _PlayerInputPad(i1, 0, i2, i3);
  _PlayerInputPad(i1, 1, i2, i3);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 5);
 return;
}

function _Clipboard_GetText(i1) {
 i1 = i1 | 0;
 _interop_TryGetClipboardText();
 if (!((HEAP8[1868784] | 0) == 0 | (HEAP8[1868814] | 0) == 0)) HEAP16[933950] = 0;
 _String_Copy(i1, 1867896);
 HEAP16[933950] = 0;
 return;
}

function _World_Contains_2598(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_1831(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_1731(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_1148(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_1085(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _TableWidget_PointerUp(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 + 1628 | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 31](i2, i1, i3, i4);
 return;
}

function _Gui_Add(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 _Gui_RemoveCore(i3) | 0;
 i1 = _Gui_GetScreen(i2) | 0;
 if (i1 | 0) _Gui_RemoveCore(i1) | 0;
 _Gui_AddCore(i3, i2);
 _Gui_OnScreensChanged();
 return;
}

function _Camera_UpdateProjection() {
 var i1 = 0;
 i1 = HEAP32[414161] | 0;
 if (i1 | 0) {
  FUNCTION_TABLE_vi[HEAP32[i1 + 4 >> 2] & 511](1689148);
  _Gfx_LoadMatrix(0, 1689148);
  _Event_RaiseVoid(1678064);
 }
 return;
}

function _AnimationsPngProcess(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _Png_Decode(988440, i1) | 0;
 if (i1 | 0) {
  _Logger_SysWarn2(i1, 50210, i2);
  _Mem_Free(HEAP32[247110] | 0);
  HEAP32[247110] = 0;
 }
 return;
}

function _World_Contains_646(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_450(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _World_Contains_120(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _PauseScreen_CheckHacksAllowed(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1689494] | 0)) {
  _Widget_SetDisabled(i1 + 128 | 0, (HEAP8[(HEAP32[417347] | 0) + 471 >> 0] | 0) == 0 & 1);
  HEAP8[i1 + 7 >> 0] = 1;
 }
 return;
}

function _OnInit_452() {
 _MapImporter_Register(14640);
 _MapImporter_Register(14652);
 _MapImporter_Register(14664);
 _MapImporter_Register(14676);
 _MapImporter_Register(14688);
 _MapImporter_Register(14700);
 return;
}

function _InventoryScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 _Screen_UpdateVb(i1);
 HEAP32[i1 + 128 >> 2] = HEAP32[i1 + 12 >> 2];
 _Gui_MakeBodyFont(i1 + 36 | 0);
 _TableWidget_RecreateTitle(i1 + 48 | 0, 1);
 return;
}

function _Convert_CodepointToCP437(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _Convert_TryCodepointToCP437(i1, i2) | 0;
 STACKTOP = i3;
 return HEAP8[i2 >> 0] | 0;
}

function _Widget_Contains(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _Gui_Contains(HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, i2, i3) | 0;
}

function _MPConnection_FinishConnect() {
 HEAP8[1868803] = 0;
 _Event_RaiseVoid(1687944);
 _Event_RaiseFloat(1680664, 0.0);
 HEAP32[460401] = 956272;
 HEAPF64[122364] = +HEAPF64[122280];
 _Classic_SendLogin();
 return;
}

function _InputHandler_IsShutdown(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) == 4) if (!((HEAP8[1868517] | HEAP8[1868516]) << 24 >> 24)) i2 = 3; else i1 = 1; else i2 = 3;
 if ((i2 | 0) == 3) i1 = 0;
 return i1 | 0;
}

function _TexturePack_Extract(i1) {
 i1 = i1 | 0;
 if (HEAP16[i1 + 4 >> 1] | 0) _DownloadAsync(i1);
 if (!(_String_Equals(i1, 22388) | 0)) {
  _String_Copy(22388, i1);
  _TexturePack_ExtractCurrent(0) | 0;
 }
 return;
}

function _IVec3_ToVec3(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +(HEAP32[i1 >> 2] | 0);
 HEAPF32[i2 + 4 >> 2] = +(HEAP32[i1 + 4 >> 2] | 0);
 HEAPF32[i2 + 8 >> 2] = +(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function _CustomModel_Undefine(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 + 138 >> 0] | 0) {
  if (HEAP8[i1 + 137 >> 0] | 0) _Model_Unregister(i1);
  _Mem_Free(HEAP32[i1 + 4 >> 2] | 0);
  _Mem_Set(i1, 0, 6848) | 0;
 }
 return;
}

function _World_SafeGetBlock(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((_World_Contains_2598(i1, i2, i3) | 0) << 24 >> 24)) i1 = 0; else i1 = _World_GetBlock_2595(i1, i2, i3) | 0;
 return i1 | 0;
}

function _MenuOptionsScreen_Show(i1) {
 i1 = i1 | 0;
 HEAP8[1697076] = 1;
 HEAP8[1697078] = 1;
 HEAP32[424268] = 15588;
 HEAP32[424290] = i1;
 HEAP32[424291] = 0;
 HEAP32[424292] = 0;
 _Gui_Add(1697072, 50);
 return;
}

function _Http_InitCommon() {
 var i1 = 0;
 i1 = _Options_GetBool(52625, 0) | 0;
 HEAP8[1868812] = i1;
 _Options_GetBool(52639, 1) | 0;
 _Options_Get(52652, 23696, 52668);
 _ScheduledTask_Add(30.0, 423) | 0;
 return;
}

function _Gfx_SetDynamicVbData(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = Math_imul(HEAP32[422337] | 0, i1) | 0;
 _glBindBuffer(34962, i2 | 0);
 _glBufferSubData(34962, 0, i1 | 0, i3 | 0);
 return;
}

function _Gfx_AllocDynamicVb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _GL_GenAndBind(34962) | 0;
 _glBufferData(34962, Math_imul(HEAP32[14940 + (i1 << 2) >> 2] | 0, i2) | 0, 0, 35048);
 return i3 | 0;
}

function _World_Contains(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244734] | 0) >>> 0 > i2 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i3 >>> 0 & 1 | 0;
}

function _UrlWarningOverlay_OpenUrl(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i3 + 36 | 0;
 i1 = _Process_StartOpen(i2) | 0;
 if (i1 | 0) _Logger_SimpleWarn2(i1, 45826, i2);
 _Gui_Remove(i3);
 return;
}

function _PerspectiveCamera_GetProjection(i1) {
 i1 = i1 | 0;
 _Gfx_CalcPerspectiveMatrix(i1, +(HEAP32[414163] | 0) * .01745329238474369, +(HEAP32[244558] | 0) / +(HEAP32[244559] | 0), +(HEAP32[3680] | 0));
 return;
}

function _Window_SetTitle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 i3 = i2;
 _String_EncodeUtf8(i3, i1) | 0;
 _interop_SetPageTitle(i3 | 0);
 STACKTOP = i2;
 return;
}

function _Vec3_Mul1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i1 >> 2] * .5;
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * .5;
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * .5;
 return;
}

function _LocalPlayer_Reset(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 456 >> 2] = 5.0;
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 _LocalPlayer_ResetJumpVelocity(i1);
 return;
}

function _Atlas1D_Free() {
 var i1 = 0;
 if ((HEAP32[460407] | 0) > 0) {
  i1 = 0;
  do {
   _Gfx_DeleteTexture(1841648 + (i1 << 2) | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[460407] | 0));
 }
 return;
}

function _CustomModels_Reset() {
 if (HEAP8[1688988] | 0) {
  HEAP32[431905] = 399;
  HEAP16[863504] = 116;
  HEAP32[431906] = 400;
  HEAP16[863505] = 104;
  HEAP32[431907] = 401;
  HEAP16[863506] = 2;
 }
 return;
}

function _Vec3_Equals() {
 var i1 = 0;
 if (+HEAPF32[414158] == +HEAPF32[424249]) if (+HEAPF32[414159] == +HEAPF32[424250]) i1 = +HEAPF32[414160] == +HEAPF32[424251] & 1; else i1 = 0; else i1 = 0;
 return i1 | 0;
}

function _HUDScreen_LayoutHotbar() {
 var d1 = 0.0;
 d1 = +_Gui_GetHotbarScale();
 HEAPF32[454653] = d1;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[1818496 >> 2] | 0) + 8 >> 2] & 511](1818496);
 return HEAP32[454628] | 0;
}

function _Vec3_LengthSquared_1951(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2];
 d2 = +HEAPF32[i1 + 8 >> 2];
 return +(d4 * d4 + d3 * d3 + d2 * d2);
}

function _Vec3_LengthSquared_1770(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2];
 d2 = +HEAPF32[i1 + 8 >> 2];
 return +(d4 * d4 + d3 * d3 + d2 * d2);
}

function _LocalInterpComp_Angle(i4, i3, d1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d1 = +d1;
 i2 = i2 | 0;
 d1 = +_Math_ClampAngle(d1);
 HEAPF32[i3 >> 2] = d1;
 if (!(i2 << 24 >> 24)) HEAPF32[i4 >> 2] = d1;
 return;
}

function _HacksComp_SetAll(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _memset(i2 + 11 | 0, i1 | 0, 7) | 0;
 if (!(i1 << 24 >> 24)) i1 = 0; else i1 = (HEAP8[i2 >> 0] | 0) != 0 & 1;
 HEAP8[i2 + 18 >> 0] = i1;
 return;
}

function _DeleteAllNameTextures() {
 var i1 = 0, i2 = 0;
 i2 = 0;
 do {
  i1 = HEAP32[1668360 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) _EntityNames_Delete(i1);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 return;
}

function _UpdateLocation(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[1668360 + ((i1 & 255) << 2) >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1, i2);
 return;
}

function _PackedCol_ToHex(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendHex(i1, i2 & 255);
 _String_AppendHex(i1, (8 ? i2 >>> 8 : i2) & 255);
 _String_AppendHex(i1, (16 ? i2 >>> 16 : i2) & 255);
 return;
}

function _InputWidget_AllowedChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[1841577] | 0)) i1 = ((_Convert_CP437ToUnicode(i1) | 0) & 65535 | 0) == (i1 << 24 >> 24 | 0) & 1; else i1 = 1;
 return i1 | 0;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[466953] = i1;
 HEAP32[466954] = i2;
 _interop_FS_Init();
 _interop_DirectorySetWorking(53205);
 _interop_AsyncDownloadTexturePack(53217);
 return 0;
}

function _InputWidget_Reset(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Widget_Reset(i1);
 HEAP32[i1 + 160 >> 2] = -1;
 i2 = _Display_ScaleY_2473(2) | 0;
 HEAP32[i1 + 164 >> 2] = i2;
 HEAP32[i1 + 60 >> 2] = 0;
 return;
}

function _TickQueue_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _OnInit_1722() {
 _ScheduledTask_Add(.05, 344) | 0;
 _Random_SeedFromCurrentTime(978296);
 _TextureEntry_Register(21196);
 _Event_Register(1678844, 0, 29);
 _Event_Register(1678324, 0, 345);
 return;
}

function _Env_SetShadowCol(i1) {
 i1 = i1 | 0;
 _PackedCol_GetShaded(i1, 1867788, 1867792, 1867796);
 if ((HEAP32[466946] | 0) != (i1 | 0)) {
  HEAP32[466946] = i1;
  _Event_RaiseInt(1681184, 16);
 }
 return;
}

function _EditHotkeyScreen_KeyPress(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i3 + 52 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) _InputWidget_Append(i3 + 100 | 0, i2); else HEAP8[i1 >> 0] = 0;
 return 1;
}

function _DirtyUniform(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = 0;
 do {
  i3 = 3744 + (i1 << 5) + 4 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 18);
 return;
}

function _ChatInputWidget_IsNameChar(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 46:
 case 95:
  break;
 default:
  if ((i1 + -48 & 255) >= 10) return ((i1 & -33) + -65 & 255) < 26 | 0;
 }
 return 1;
}

function _InputWidget_OnPressedEnter(i1) {
 i1 = i1 | 0;
 _InputWidget_Clear(i1);
 HEAP32[i1 + 16 >> 2] = HEAP32[i1 + 108 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 return;
}

function _Http_CheckProgress(i1) {
 i1 = i1 | 0;
 i1 = _RequestList_Find(982160, i1) | 0;
 if ((i1 | 0) == -1) i1 = -3; else i1 = HEAP32[(HEAP32[245542] | 0) + (i1 * 312 | 0) + 132 >> 2] | 0;
 return i1 | 0;
}

function _Gfx_DrawVb_IndexedTris_Range(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[HEAP32[422338] & 511](i2);
 _glDrawElements(4, (2 ? i3 >> 2 : i3) * 6 | 0, 5123, 0);
 return;
}

function _Vec3_LengthSquared(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2];
 d2 = +HEAPF32[i1 + 8 >> 2];
 return +(d4 * d4 + d3 * d3 + d2 * d2);
}

function _Java_ReadObject(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 127](i3, i2) | 0;
 if (!i1) i1 = _Java_ReadObjectData(i3, i2) | 0;
 return i1 | 0;
}

function _ChatOptionsScreen_SetScale(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d4 = 0.0;
 d4 = +_Menu_Float(i3);
 HEAPF32[i2 >> 2] = d4;
 _Options_Set(i1, i3);
 _Gui_LayoutAll();
 return;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function _WriteJavaString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _String_Length(i2) | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP8[i1 + 1 >> 0] = i3;
 _Mem_Copy(i1 + 2 | 0, i2, i3) | 0;
 return i3 | 0;
}

function _Model_MinDist(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var d3 = 0.0;
 d3 = +Math_abs(+(d1 - d2));
 d2 = +Math_abs(+(d1 + d2));
 d2 = d3 < d2 ? d3 : d2;
 d1 = +Math_abs(+d1);
 return +(d1 < d2 ? d1 : d2);
}

function _HumanoidModel_Register() {
 _Model_Init(17012);
 HEAP32[4266] = 333;
 HEAP8[17057] = 1;
 HEAP8[17058] = 1;
 HEAP8[17054] = HEAP8[17054] | 2;
 HEAP32[4269] = 288;
 _Model_Register(17012);
 return;
}

function _Env_SetSunCol(i1) {
 i1 = i1 | 0;
 _PackedCol_GetShaded(i1, 1867772, 1867776, 1867780);
 if ((HEAP32[466942] | 0) != (i1 | 0)) {
  HEAP32[466942] = i1;
  _Event_RaiseInt(1681184, 15);
 }
 return;
}

function _Vec3_Negate(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = -+HEAPF32[i1 >> 2];
 HEAPF32[i2 + 4 >> 2] = -+HEAPF32[i1 + 4 >> 2];
 HEAPF32[i2 + 8 >> 2] = -+HEAPF32[i1 + 8 >> 2];
 return;
}

function _ClearTouches() {
 var i1 = 0;
 i1 = 0;
 do {
  HEAP8[352464 + (i1 * 24 | 0) + 4 >> 0] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 32);
 HEAP32[422517] = (HEAP8[1868784] | 0) == 0 & 1;
 return;
}

function _Block_ReadBrightness(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 & 255;
 if (!(i1 & 128)) i1 = i2 << 24 >> 24 == 0 ? 0 : 15; else i1 = (i1 & 64 | 0) == 0 ? i1 & 15 : i1 << 4;
 return i1 & 255 | 0;
}

function _TextWidget_Render2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 40 >> 2] | 0;
 if (i1 | 0) {
  _Gfx_BindTexture(i1);
  _Gfx_DrawVb_IndexedTris_Range(4, i2, 4);
 }
 return i2 + 4 | 0;
}

function _String_Hex32(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = 24;
 while (1) {
  _String_AppendHex(i2, (i1 ? i3 >>> i1 : i3) & 255);
  if (!i1) break; else i1 = i1 + -8 | 0;
 }
 return;
}

function _OnNewMapLoaded() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[466928] | 0;
 i2 = (HEAP32[466929] | 0) + i1 | 0;
 HEAP32[414106] = (i2 | 0) > 0 ? i2 : 0;
 HEAP32[414107] = (i1 | 0) > 0 ? i1 : 0;
 return;
}

function _Classic_Kick(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _UNSAFE_GetString(i3, i1);
 _Game_Disconnect(21608, i3);
 STACKTOP = i2;
 return;
}

function _CalcNumVertices(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _EnvRenderer_AxisSize() | 0;
 i1 = _Math_CeilDiv(i1, i3) | 0;
 return Math_imul(i1 << 2, _Math_CeilDiv(i2, i3) | 0) | 0;
}

function _Block_RecalculateAllSpriteBB() {
 var i1 = 0;
 i1 = 0;
 do {
  if ((HEAP8[1006372 + i1 >> 0] | 0) == 5) _Block_RecalculateBB(i1 & 65535);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 768);
 return;
}

function _TextInputWidget_SetFont(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 40 >> 2] = i1;
 i1 = _Font_CalcHeight(i1, 0) | 0;
 HEAP32[i2 + 108 >> 2] = i1;
 _InputWidget_UpdateText(i2);
 return;
}

function _ProcessPendingResize() {
 if (HEAP8[1867880] | 0) {
  if ((_Window_GetWindowState() | 0) == 1) _SetFullscreenBounds(); else _interop_RequestCanvasResize();
  _UpdateWindowBounds();
 }
 return;
}

function _Gfx_RecreateTexture(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _Gfx_DeleteTexture(i4);
 i3 = _Gfx_CreateTexture(i1, i2, i3) | 0;
 HEAP32[i4 >> 2] = i3;
 return;
}

function _ClassicLighting_Needs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP8[1006372 + (i1 & 65535) >> 0] | 0)) i1 = (HEAP8[1006372 + (i2 & 65535) >> 0] | 0) != 4 & 1; else i1 = 1;
 return i1 | 0;
}

function _Inventory_ResetMapping() {
 var i1 = 0, i2 = 0;
 i1 = 0;
 do {
  i2 = _DefaultMapping(i1) | 0;
  HEAP16[1695402 + (i1 << 1) >> 1] = i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 768);
 return;
}

function _InputHandler_OnScreensChanged() {
 HEAPF32[423809] = 0.0;
 HEAP32[3864] = -1;
 if (HEAP32[422387] | 0) {
  _MouseStateRelease(0);
  _MouseStateRelease(1);
  _MouseStateRelease(2);
 }
 return;
}

function _TouchOnscreen_UpdateAll(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 0;
 do {
  _TouchOnscreen_UpdateButton(i2, i2 + 288 + (i1 * 84 | 0) | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 return;
}

function _TerrainParticle_CanPass(i1) {
 i1 = i1 | 0;
 i1 = i1 & 65535;
 if ((HEAP8[1006372 + i1 >> 0] & -2) << 24 >> 24 == 4) i1 = 1; else i1 = (HEAP8[992548 + i1 >> 0] | 0) != 0 & 1;
 return i1 | 0;
}

function _MenuInputOverlay_Close(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 _Gui_Remove(1712300);
 i1 = HEAP32[428206] | 0;
 if (i1 | 0) FUNCTION_TABLE_vii[i1 & 255](1712584, i2);
 HEAP32[428206] = 0;
 return;
}

function _Entity_ResetSkin(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 120 >> 2] = 1.0;
 HEAPF32[i1 + 124 >> 2] = 1.0;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP8[i1 + 108 >> 0] = 0;
 return;
}

function _DisconnectScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 _Gfx_Draw2DGradient(0, 0, HEAP32[466968] | 0, HEAP32[466969] | 0, -14671808, -15724464);
 _Screen_Render2Widgets(i2, d1);
 return;
}

function _Window_StoreClipboardText(i1) {
 i1 = i1 | 0;
 HEAP32[466974] = 977664;
 HEAP16[933950] = 0;
 HEAP16[933951] = 512;
 _String_AppendUtf8(1867896, i1, _String_CalcLen(i1, 2048) | 0);
 return;
}

function _UpdateFogBlend() {
 var i1 = 0, d2 = 0.0;
 d2 = +_CalcBlendFactor(+(HEAP32[3680] | 0));
 i1 = _PackedCol_Lerp(HEAP32[466939] | 0, HEAP32[466938] | 0, d2) | 0;
 HEAP32[418848] = i1;
 return;
}

function _Model_RegisterTexture(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[428699] | 0) == 0 ? 1714796 : (HEAP32[429140] | 0) + 12 | 0) >> 2] = i1;
 HEAP32[429140] = i1;
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function _MenuOptionsScreen_FreeExtHelp(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 132 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i2);
 HEAP32[i1 + 172 >> 2] = 0;
 return;
}

function _HeadModel_Register() {
 _Model_Init(17428);
 HEAP8[17474] = 1;
 HEAP8[17470] = HEAP8[17470] | 2;
 HEAP8[17475] = 0;
 HEAP32[4369] = 22;
 HEAP32[4373] = 48;
 _Model_Register(17428);
 return;
}

function _BindTriggered_DeleteBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _MouseStatePress(0);
  _InputHandler_DeleteBlock();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Animations_IsDefaultZip() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(HEAP16[11196] | 0)) (_Options_UNSAFE_Get(50400, i1) | 0) << 24 >> 24;
 STACKTOP = i1;
 return;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (setTempRet0(i4 | 0), i1 - i3 >>> 0 | 0) | 0;
}

function _TabListOverlay_KeyUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((_InputBind_Claims(11, i2, i1) | 0) << 24 >> 24) if (!(HEAP8[i3 + 53 >> 0] | 0)) _Gui_Remove(i3);
 return;
}

function _MouseBindingsScreen_Show() {
 _KeyBindsScreen_Reset(167, 169, 260);
 _KeyBindsScreen_SetLayout(-140, 10, 3);
 HEAP32[427534] = 45126;
 _KeyBindsScreen_Show(7, 45162, 6832, 45169);
 return;
}

function _Menu_Float(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _Convert_ParseFloat(i1, i2) | 0;
 STACKTOP = i3;
 return +(+HEAPF32[i2 >> 2]);
}

function ___lctrans_impl(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = ___mo_lookup(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
 return ((i1 | 0) == 0 ? i2 : i1) | 0;
}

function _TextureEntry_Register(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[460930] | 0) == 0 ? 1843720 : (HEAP32[466083] | 0) + 8 | 0) >> 2] = i1;
 HEAP32[466083] = i1;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function _Picking_CalcPickedBlock(i2, i1, d3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 if (!((_RayTrace(i4, i2, i1, d3, 31) | 0) << 24 >> 24)) _RayTracer_SetInvalid(i4);
 return;
}

function _HacksComp_SetNoclip(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 34 | 0;
 if ((HEAP8[i1 >> 0] | 0) != i2 << 24 >> 24) {
  HEAP8[i1 >> 0] = i2;
  _Event_RaiseVoid(1679624);
 }
 return;
}

function _HacksComp_SetFlying(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 35 | 0;
 if ((HEAP8[i1 >> 0] | 0) != i2 << 24 >> 24) {
  HEAP8[i1 >> 0] = i2;
  _Event_RaiseVoid(1679624);
 }
 return;
}

function _CPE_WriteTwoWayPing(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 43;
 HEAP8[i1 + 1 >> 0] = i3;
 _Stream_SetU16_BE(i1 + 2 | 0, i2 & 65535);
 return i1 + 4 | 0;
}

function _BindTriggered_SmoothCamera(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _InputHandler_Toggle(i2, 1656556, 37933, 37964);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _BindTriggered_PlaceBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _MouseStatePress(1);
  _InputHandler_PlaceBlock();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _BindTriggered_BreakLiquids(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _InputHandler_Toggle(i2, 1868749, 37663, 37698);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Screen_UpdateVb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 12 | 0;
 _Gfx_DeleteDynamicVb(i2);
 i1 = _Gfx_CreateDynamicVb(1, HEAP32[i1 + 8 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i1;
 return;
}

function _OnClose() {
 if (!(HEAP8[1841572] | 0)) {
  _Ping_Reset();
  if (!(HEAP8[1841573] | 0)) {
   _Socket_Close(HEAP32[5574] | 0);
   HEAP8[1841573] = 1;
  }
 } else _Physics_Free();
 return;
}

function _MapImporter_Register(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[422198] | 0) == 0 ? 1688792 : (HEAP32[422208] | 0) + 8 | 0) >> 2] = i1;
 HEAP32[422208] = i1;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function _LocalPlayerInput_Add(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[418836] | 0) == 0 ? 1675344 : (HEAP32[418837] | 0) + 4 | 0) >> 2] = i1;
 HEAP32[418837] = i1;
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}

function _Chat_AddRaw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _String_FromReadonly(i3, i1);
 _Chat_AddOf(i3, 0);
 STACKTOP = i2;
 return;
}

function _Socket_Connect(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 0 - (_interop_SocketConnect(i2 | 0, i1 + 4 | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
 return ((i2 | 0) == 23 ? -857812989 : i2) | 0;
}

function _NetPlayer_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _Mem_Set(i1, 0, 804) | 0;
 _Entity_Init(i1);
 i2 = i1 + 54 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
 HEAP32[i1 >> 2] = 14448;
 return;
}

function _MotdCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP8[1841572] | 0)) {
  _Chat_Add1(28281, 1841544);
  _Chat_Add1(28294, 1841552);
 } else _Chat_AddRaw(28233);
 return;
}

function _HotbarWidget_RenderOutline(i1) {
 i1 = i1 | 0;
 _Gfx_BindTexture((HEAP8[1689492] | 0) == 0 ? HEAP32[422380] | 0 : HEAP32[422381] | 0);
 _Gfx_DrawVb_IndexedTris_Range(8, i1, 2);
 return;
}

function _Gui_GetChatScale() {
 var d1 = 0.0;
 if (!(HEAP8[1689552] | 0)) d1 = +HEAPF32[422377]; else {
  d1 = +(_GetWindowScale() | 0);
  d1 = +_Gui_Scale(+HEAPF32[422377] * d1);
 }
 return +d1;
}

function _Game_AddComponent(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[422252] | 0) == 0 ? 1689008 : (HEAP32[422253] | 0) + 20 | 0) >> 2] = i1;
 HEAP32[422253] = i1;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _Commands_Register(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[416803] | 0) == 0 ? 1667212 : (HEAP32[416815] | 0) + 32 | 0) >> 2] = i1;
 HEAP32[416815] = i1;
 HEAP32[i1 + 32 >> 2] = 0;
 return;
}

function _BindTriggered_PickBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _MouseStatePress(2);
  _InputHandler_PickBlock();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _BindTriggered_AutoRotate(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _InputHandler_Toggle(i2, 1868729, 37798, 37827);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _Player_TriggerRight(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
 return (HEAP32[422387] | 0) == 0 | 0;
}

function _Player_TriggerDown(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 32;
 return (HEAP32[422387] | 0) == 0 | 0;
}

function _MCLevel_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = _Nbt_Read(i1, 204) | 0;
 i2 = HEAP32[422199] | 0;
 HEAP32[466928] = i2;
 HEAP32[466929] = (HEAP32[422200] | 0) - i2;
 return i1 | 0;
}

function _ListScreen_UNSAFE_GetCur(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _ListScreen_UNSAFE_Get(i1, i2, (HEAP32[i2 + 804 >> 2] | 0) + (HEAP32[i3 + 36 >> 2] | 0) | 0);
 return;
}

function _HUDScreen_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 + 332 | 0;
 return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3, i2, i1) | 0;
}

function _CloseLogFile() {
 var i1 = 0;
 if (HEAP32[415509] | 0) {
  i1 = FUNCTION_TABLE_ii[HEAP32[1662032 >> 2] & 63](1662004) | 0;
  if (i1 | 0) _Logger_SysWarn2(i1, 51467, 13724);
 }
 return;
}

function _BindsSourceScreen_Layout(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1 + 36 | 0, 1, 1, 0, -25);
 _Widget_SetLocation(i1 + 120 | 0, 1, 1, 0, 25);
 _Menu_LayoutBack(i1 + 204 | 0);
 return;
}

function _BindTriggered_AxisLines(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _InputHandler_Toggle(i2, 1868728, 37857, 37903);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (setTempRet0(i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0 | 0), i3 | 0) | 0;
}

function _ThirdPersonCamera_Zoom(d1) {
 d1 = +d1;
 var i2 = 0;
 i2 = (HEAP8[1868733] | 0) == 0 ? 13660 : 13664;
 d1 = +HEAPF32[i2 >> 2] - d1;
 HEAPF32[i2 >> 2] = d1 > 2.0 ? d1 : 2.0;
 return 1;
}

function _TextInputWidget_Add(i2, i4, i5, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 _TextInputWidget_Create(i4, i5, i3, i1);
 _AddWidget(i2, i4);
 return;
}

function _TabListOverlay_Free(i1) {
 i1 = i1 | 0;
 HEAP8[1868802] = 0;
 _Event_Unregister(1675984, i1, 187);
 _Event_Unregister(1676244, i1, 188);
 _Event_Unregister(1676504, i1, 189);
 return;
}

function _SaveLevelScreen_RemoveOverwrites(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 140 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  HEAP32[i1 >> 2] = 0;
  _SaveLevelScreen_UpdateSave(i2);
 }
 return;
}

function _Player_TriggerLeft(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
 return (HEAP32[422387] | 0) == 0 | 0;
}

function _Nbt_WriteUInt16(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[i1 >> 0] = 2;
 i2 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 _Stream_SetU16_BE(i2, i3);
 return i2 + 2 | 0;
}

function _NbtTag_F32(i2) {
 i2 = i2 | 0;
 var d1 = 0.0;
 if ((HEAP8[i2 + 4 >> 0] | 0) == 5) d1 = +HEAPF32[i2 + 20 >> 2]; else {
  HEAP32[i2 + 220 >> 2] = -857812893;
  d1 = 0.0;
 }
 return +d1;
}

function _ListScreen_Reload(i1) {
 i1 = i1 | 0;
 _ListScreen_Free(i1);
 FUNCTION_TABLE_vi[HEAP32[i1 + 824 >> 2] & 511](i1);
 _ListScreen_SetCurrentIndex(i1, HEAP32[i1 + 804 >> 2] | 0);
 return;
}

function _InterpComp_AdvanceRotY(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP32[i2 >> 2] | 0) {
  HEAP32[i1 + 408 >> 2] = HEAP32[i2 + 4 >> 2];
  _InterpComp_RemoveOldestRotY(i2);
 }
 return;
}

function _TestAxis(i3, d1, i2) {
 i3 = i3 | 0;
 d1 = +d1;
 i2 = i2 | 0;
 d1 = +Math_abs(+d1);
 if (!(d1 >= +HEAPF32[431726])) {
  HEAPF32[431726] = d1;
  HEAP8[i3 + 125 >> 0] = i2;
 }
 return;
}

function _TabList_Remove(i1) {
 i1 = i1 | 0;
 _TabList_Delete(i1);
 i1 = i1 & 255;
 HEAP16[1669392 + (i1 << 1) >> 1] = 0;
 HEAP8[1669904 + i1 >> 0] = 0;
 _Event_RaiseInt(1676504, i1);
 return;
}

function _Sounds_Start() {
 if (!((_AudioBackend_Init() | 0) << 24 >> 24)) HEAP32[248134] = 0; else if (!(HEAP8[1868727] | 0)) {
  HEAP8[1868727] = 1;
  _AudioBackend_LoadSounds();
 }
 return;
}

function _Player_TriggerUp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 16;
 return (HEAP32[422387] | 0) == 0 | 0;
}

function _Nbt_WriteInt32(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[i1 >> 0] = 3;
 i2 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 _Stream_SetU32_BE(i2, i3);
 return i2 + 4 | 0;
}

function _Nbt_WriteArray(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[i1 >> 0] = 7;
 i2 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 _Stream_SetU32_BE(i2, i3);
 return i2 + 4 | 0;
}

function _Model_Register(i1) {
 i1 = i1 | 0;
 HEAP32[((HEAP32[428697] | 0) == 0 ? 1714788 : (HEAP32[428698] | 0) + 68 | 0) >> 2] = i1;
 HEAP32[428698] = i1;
 HEAP32[i1 + 68 >> 2] = 0;
 return;
}

function _TexPackOverlay_NoClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = _TexPackOverlay_IsAlways(i2) | 0;
 HEAP8[i1 + 37 >> 0] = i2;
 HEAP8[i1 + 36 >> 0] = 1;
 _Gui_Refresh(i1);
 return;
}

function _OptionsGroupScreen_Layout(i1) {
 i1 = i1 | 0;
 _Menu_LayoutButtons(i1 + 48 | 0, 6576, 8);
 _Widget_SetLocation(i1 + 720 | 0, 1, 1, 0, 100);
 _Menu_LayoutBack(i1 + 792 | 0);
 return;
}

function _OptionsGroupScreen_CheckHacksAllowed(i1) {
 i1 = i1 | 0;
 _Widget_SetDisabled(i1 + 552 | 0, (HEAP8[(HEAP32[417347] | 0) + 471 >> 0] | 0) == 0 & 1);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _Game_UpdateDimensions() {
 var i1 = 0;
 i1 = HEAP32[466968] | 0;
 HEAP32[244558] = (i1 | 0) > 1 ? i1 : 1;
 i1 = HEAP32[466969] | 0;
 HEAP32[244559] = (i1 | 0) > 1 ? i1 : 1;
 return;
}

function _BindTriggered_HideGUI(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  HEAP8[1868760] = (HEAP8[1868760] | 0) == 0 & 1;
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _BindTriggered_HideFPS(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  HEAP8[1689502] = (HEAP8[1689502] | 0) == 0 & 1;
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _RequestList_EnsureSpace(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 4 | 0;
 if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i1 >> 2] | 0)) _Utils_Resize(i2 + 8 | 0, i1, 312, 10, 10);
 return;
}

function _BlockModel_Register() {
 _Model_Init(17084);
 HEAP8[17127] = 0;
 HEAP8[17128] = 0;
 HEAP8[17131] = 0;
 HEAP32[4287] = 32;
 _Model_Register(17084);
 HEAP32[428696] = 17084;
 return;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _SkinnedCubeModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4316];
 HEAP32[i1 + 4 >> 2] = HEAP32[4317];
 HEAP32[i1 + 8 >> 2] = HEAP32[4318];
 return;
}

function _Inflate_MakeStream2(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _Stream_Init(i2);
 _Inflate_Init2(i1, i3);
 HEAP32[i2 + 32 >> 2] = i1;
 HEAP32[i2 >> 2] = 28;
 return;
}

function _HotbarWidget_RenderEntries(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 260 >> 2] | 0;
 if (i1 | 0) _IsometricDrawer_Render(i1, i2, i3 + 152 | 0);
 return;
}

function _Drawer2D_IsWhiteColor(i1) {
 i1 = i1 | 0;
 switch (i1 << 24 >> 24) {
 case 102:
 case 0:
  {
   i1 = 1;
   break;
  }
 default:
  i1 = i1 << 24 >> 24 == 70 & 1;
 }
 return i1 | 0;
}

function _LocalPlayer_ReleaseHalfSpeed(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i1 >> 2] | 0) != 2) HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 499 >> 0] = 0;
 return;
}

function _KeyBindsScreen_Reset(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 HEAP32[427527] = i2;
 HEAP32[427528] = i3;
 HEAP32[427529] = i1;
 HEAP32[427534] = 1868813;
 return;
}

function _HotbarWidget_CycleIndex(i1) {
 i1 = i1 | 0;
 i1 = (HEAP32[424235] | 0) + i1 | 0;
 i1 = (i1 | 0) < 0 ? i1 + 9 | 0 : i1;
 HEAP32[424235] = (i1 | 0) > 8 ? i1 + -9 | 0 : i1;
 return;
}

function _ChatScreen_TextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP8[i1 + 4 >> 0] | 0)) i1 = 0; else {
  _InputWidget_SetText(i1 + 324 | 0, i2);
  i1 = 1;
 }
 return i1 | 0;
}

function _BlockModel_GetEyeY(i1) {
 i1 = i1 | 0;
 i1 = HEAPU16[i1 + 52 >> 1] | 0;
 return +((+HEAPF32[1010980 + (i1 * 12 | 0) + 4 >> 2] + +HEAPF32[1020196 + (i1 * 12 | 0) + 4 >> 2]) * .5);
}

function _Widget_SetDisabled(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i2 = i2 + 21 | 0;
 i3 = HEAPU8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = (i1 | 0) == 0 ? i3 & 254 : i3 | 1;
 return;
}

function _ParseIPv4(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if ((_String_EncodeUtf8(i1 + 4 | 0, i2) | 0) > 511) _Process_Abort2(0, 53274);
 HEAP32[i1 >> 2] = i3;
 return;
}

function _Modern_StretchZ(i3, i5, i6, i7, i2, i1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 _AddVertices(i1, i4);
 return 1;
}

function _Modern_StretchX(i3, i5, i6, i7, i2, i1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 _AddVertices(i1, i4);
 return 1;
}

function _MenuOptionsScreen_OnHacksChanged(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 96 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i2);
 HEAP8[i2 + 7 >> 0] = 1;
 return;
}

function _LoadingScreen_ContextRecreated(i1) {
 i1 = i1 | 0;
 _Gui_MakeBodyFont(i1 + 36 | 0);
 _LoadingScreen_SetTitle(i1);
 _LoadingScreen_SetMessage(i1);
 _Screen_UpdateVb(i1);
 return;
}

function _Input_Clear() {
 var i1 = 0;
 i1 = 0;
 do {
  if (HEAP8[1868476 + i1 >> 0] | 0) _Input_SetReleased(i1);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 172);
 _ClearTouches();
 return;
}

function _GL_SetupVbColoured_Range(i1) {
 i1 = i1 | 0;
 i1 = i1 << 4;
 _glVertexAttribPointer(0, 3, 5126, 0, 16, i1 | 0);
 _glVertexAttribPointer(1, 4, 5121, 1, 16, i1 | 12 | 0);
 return;
}

function _EntityRenderers_ContextLost(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(1675352);
 _Gfx_DeleteDynamicVb(1675356);
 _Gfx_DeleteDynamicVb(1675360);
 _DeleteAllNameTextures();
 return;
}

function _CalcBlendFactor(d1) {
 d1 = +d1;
 d1 = +_Math_Log2(d1) * .17328999936580658 * .2800000011920929 + -.12999999523162842;
 d1 = d1 < 0.0 ? 0.0 : d1;
 return +(d1 > 1.0 ? 1.0 : d1);
}

function _ZombieModel_Draw(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 + 180 >> 2] = 1.5707963705062866;
 HEAPF32[i1 + 188 >> 2] = 1.5707963705062866;
 _HumanModel_DrawCore(i1, 1714888, 0);
 return;
}

function _String_Init_2534(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP16[i1 + 4 >> 1] = i4;
 HEAP16[i1 + 6 >> 1] = i3;
 return;
}

function _String_Init_2044(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP16[i1 + 4 >> 1] = i4;
 HEAP16[i1 + 6 >> 1] = i3;
 return;
}

function _SkeletonModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4560];
 HEAP32[i1 + 4 >> 2] = HEAP32[4561];
 HEAP32[i1 + 8 >> 2] = HEAP32[4562];
 return;
}

function _SkeletonModel_DrawArm(i1) {
 i1 = i1 | 0;
 _Gfx_SetAlphaTest(1);
 _Model_LockVB(0, 24);
 _Model_DrawArmPart(1715952);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(24);
 return;
}

function _NostalgiaMenuScreen_SwitchBack(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP8[1689494] | 0)) _Menu_SwitchOptions_1410(i1, i2); else _Menu_SwitchPause_1430(i1, i2);
 return;
}

function _Nbt_WriteUInt8(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[i1 >> 0] = 1;
 i2 = _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
 HEAP8[i2 >> 0] = i3;
 return i2 + 1 | 0;
}

function _ChatScreen_ToggleAltInput(i1) {
 i1 = i1 | 0;
 _SpecialInputWidget_SetActive(i1 + 1292 | 0, (HEAP8[i1 + 1312 >> 0] | 0) == 0 & 1);
 _ChatScreen_UpdateChatYOffsets(i1);
 return;
}

function _TextInputWidget_BuildMesh(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_Make2DQuad(i2 + 112 | 0, -1, i1);
 _Gfx_Make2DQuad(i2 + 172 | 0, HEAP32[i2 + 168 >> 2] | 0, i1);
 return;
}

function _SittingModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4354];
 HEAP32[i1 + 4 >> 2] = HEAP32[4355];
 HEAP32[i1 + 8 >> 2] = HEAP32[4356];
 return;
}

function _PackedCol_ScreenBlend(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (_PackedCol_Tint((i1 | -16777216) ^ 16777215, (i2 | -16777216) ^ 16777215) | 0 | -16777216) ^ 16777215 | 0;
}

function _Menu_IsSelectable(i1) {
 i1 = i1 | 0;
 if (!i1) return 0; else {
  i1 = HEAPU8[i1 + 21 >> 0] | 0;
  return ((i1 & 1 | 0) == 0 ? (1 ? i1 >>> 1 : i1) & 1 : 0) | 0;
 }
 return 0;
}

function _Mem_Realloc(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i1 = _Mem_TryRealloc(i2, i3, i1) | 0;
 if (!i1) _AbortOnAllocFailed(i4);
 return i1 | 0;
}

function _Math_LerpAngle(d1, d2, d3) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 return +(+_Math_Lerp(d1 > 270.0 & d2 < 90.0 ? d1 + -360.0 : d1, d1 < 90.0 & d2 > 270.0 ? d2 + -360.0 : d2, d3));
}

function _Entity_GetEyeHeight(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 + 48 >> 2] | 0) + 24 >> 2] & 31](i1);
 return +(d2 * +HEAPF32[i1 + 84 >> 2]);
}

function _Drawer2D_TextWidth(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[HEAP32[i1 + 8 >> 2] >> 2] | 0)) i1 = _MeasureBitmappedWidth(i1) | 0; else i1 = _SysFont_TextWidth(i1) | 0;
 return i1 | 0;
}

function _CreeperModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4923];
 HEAP32[i1 + 4 >> 2] = HEAP32[4924];
 HEAP32[i1 + 8 >> 2] = HEAP32[4925];
 return;
}

function _ChickenModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[5016];
 HEAP32[i1 + 4 >> 2] = HEAP32[5017];
 HEAP32[i1 + 8 >> 2] = HEAP32[5018];
 return;
}

function _SpiderModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4484];
 HEAP32[i1 + 4 >> 2] = HEAP32[4485];
 HEAP32[i1 + 8 >> 2] = HEAP32[4486];
 return;
}

function _LocalPlayer_ReleaseSpeed(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i1 >> 2] | 0) != 2) HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 498 >> 0] = 0;
 return;
}

function _InitDefaultResources() {
 var i1 = 0;
 i1 = _Gfx_CreateIb2(98304, 12, 0) | 0;
 HEAP32[422308] = i1;
 _RecreateDynamicVb(1689248, 0);
 _RecreateDynamicVb(1689252, 1);
 return;
}

function _GL_SetupVbTextured() {
 _glVertexAttribPointer(0, 3, 5126, 0, 24, 0);
 _glVertexAttribPointer(1, 4, 5121, 1, 24, 12);
 _glVertexAttribPointer(2, 2, 5126, 0, 24, 16);
 return;
}

function _FurlessModel_Draw(i1) {
 i1 = i1 | 0;
 _Model_ApplyTexture(i1);
 _Model_LockVB(0, 144);
 _SheepModel_DrawBody(i1);
 _Model_UnlockVB();
 _Gfx_DrawVb_IndexedTris(144);
 return;
}

function _Font_Make(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 if (!(HEAP8[1667320] | 0)) _SysFont_MakeDefault(i1, i3, i2); else _Font_MakeBitmapped(i1, i3, i2);
 return;
}

function _SheepModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4653];
 HEAP32[i1 + 4 >> 2] = HEAP32[4654];
 HEAP32[i1 + 8 >> 2] = HEAP32[4655];
 return;
}

function _Menu_BeginGen(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _World_NewMap();
 _World_SetDimensions(i3, i1, i2);
 _Gen_Start();
 _GeneratingScreen_Show();
 return;
}

function _HumanModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4457];
 HEAP32[i1 + 4 >> 2] = HEAP32[4458];
 HEAP32[i1 + 8 >> 2] = HEAP32[4459];
 return;
}

function _Hex_ValidValue(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _PackedCol_TryParseHex(i2, i1) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function _GetBlockBrightness(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAPU8[994084 + (i1 & 65535) >> 0] | 0;
 return (i2 << 24 >> 24 == 0 ? i1 & 15 : 4 ? i1 >>> 4 : i1) & 255 | 0;
}

function _Classic_SetPermission(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (HEAP32[417347] | 0) + 460 | 0;
 _UpdateUserType(i2, HEAP8[i1 >> 0] | 0);
 _HacksComp_RecheckFlags(i2);
 return;
}

function _ChibiModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4408];
 HEAP32[i1 + 4 >> 2] = HEAP32[4409];
 HEAP32[i1 + 8 >> 2] = HEAP32[4410];
 return;
}

function _AllocateVertexBuffers() {
 var i1 = 0;
 i1 = _Gfx_CreateDynamicVb(0, 6144) | 0;
 HEAP32[460378] = i1;
 i1 = _Gfx_CreateDynamicVb(0, 6144) | 0;
 HEAP32[460379] = i1;
 return;
}

function _TextWidget_Render(i3, d1) {
 i3 = i3 | 0;
 d1 = +d1;
 var i2 = 0;
 i2 = i3 + 40 | 0;
 if (HEAP32[i2 >> 2] | 0) _Texture_RenderShaded(i2, HEAP32[i3 + 68 >> 2] | 0);
 return;
}

function _Stream_GetU32_LE(i1) {
 i1 = i1 | 0;
 return (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16 | (HEAPU8[i1 + 3 >> 0] | 0) << 24 | 0;
}

function _Stream_GetU32_BE(i1) {
 i1 = i1 | 0;
 return (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0) | 0;
}

function _OnProjectionChanged(i1) {
 i1 = i1 | 0;
 _Gfx_CalcPerspectiveMatrix(169e4, 1.2217304706573486, +(HEAP32[244558] | 0) / +(HEAP32[244559] | 0), +(HEAP32[3680] | 0));
 return;
}

function _HeadModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4381];
 HEAP32[i1 + 4 >> 2] = HEAP32[4382];
 HEAP32[i1 + 8 >> 2] = HEAP32[4383];
 return;
}

function _CallTexImage2D(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _glTexImage2D(3553, i2 | 0, 6408, i4 | 0, i1 | 0, 0, 6408, 5121, i3 | 0);
 return;
}

function _Widget_Reset(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + 4 | 0;
 i2 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function _Vec3_Create3_2401(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 HEAPF32[i1 >> 2] = d2;
 HEAPF32[i1 + 4 >> 2] = d3;
 HEAPF32[i1 + 8 >> 2] = d4;
 return;
}

function _String_Init(i1, i2, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP16[i1 + 4 >> 1] = i4;
 HEAP16[i1 + 6 >> 1] = i3;
 return;
}

function _PigModel_GetSize(i1) {
 i1 = i1 | 0;
 i1 = i1 + 92 | 0;
 HEAP32[i1 >> 2] = HEAP32[4830];
 HEAP32[i1 + 4 >> 2] = HEAP32[4831];
 HEAP32[i1 + 8 >> 2] = HEAP32[4832];
 return;
}

function _LocalPlayer_CheckJumpVelocity(i1) {
 i1 = i1 | 0;
 if (!((_HacksComp_CanJumpHigher(i1 + 460 | 0) | 0) << 24 >> 24)) HEAP32[i1 + 740 >> 2] = HEAP32[i1 + 748 >> 2];
 return;
}

function _Drawer2D_Width(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = Math_imul(HEAP32[145264 + ((i1 & 255) << 2) >> 2] | 0, i2) | 0;
 return _Math_CeilDiv(i2, HEAP32[3579] | 0) | 0;
}

function _PhysicsComp_YPosAt(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 return +(+_Math_Exp2(+(i1 | 0) * -.02914633510256746) * (-196.0 - d2 * 49.0) - +(i1 << 2 | 0) + d2 * 50.0 + 196.0);
}

function _IsometricDrawer_BeginBatch(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _IsometricDrawer_InitCache();
 HEAP32[424238] = i2;
 HEAP32[424239] = i2;
 HEAP32[424240] = i1;
 return;
}

function _DeleteSkin(i1) {
 i1 = i1 | 0;
 if ((_CanDeleteTexture(i1) | 0) << 24 >> 24) _Gfx_DeleteTexture(i1 + 112 | 0);
 _Entity_ResetSkin(i1);
 HEAP8[i1 + 109 >> 0] = 0;
 return;
}

function _Audio_Close(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) _interop_AudioClose(i1 | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 return;
}

function _SPConnection_SendBlock(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Physics_OnBlockChanged(i3, i4, i5, i2, i1);
 return;
}

function _NbtTag_U8(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 4 >> 0] | 0) == 1) i1 = HEAP8[i1 + 20 >> 0] | 0; else {
  HEAP32[i1 + 220 >> 2] = -857812896;
  i1 = 0;
 }
 return i1 | 0;
}

function _MenuOptionsScreen_IntGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendInt(i2, FUNCTION_TABLE_i[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 8 >> 2] & 63]() | 0);
 return;
}

function _Inventory_SetSelectedIndex(i1) {
 i1 = i1 | 0;
 if ((_Inventory_CheckChangeSelected() | 0) << 24 >> 24) {
  HEAP32[424235] = i1;
  _Event_RaiseVoid(1679364);
 }
 return;
}

function _HS_SetFOV(i1) {
 i1 = i1 | 0;
 if ((HEAP32[414165] | 0) > (i1 | 0)) HEAP32[414165] = i1;
 HEAP32[414164] = i1;
 _Options_SetInt(42407, i1);
 _Camera_SetFov(i1);
 return;
}

function _Gfx_EnableTextureOffset(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 HEAPF32[422332] = d1;
 HEAPF32[422333] = d2;
 HEAP8[1868766] = 1;
 _DirtyUniform(2);
 _SwitchProgram();
 return;
}

function _Gfx_Create() {
 _GLContext_Create();
 HEAP8[1689214] = 3;
 _GL_InitCommon();
 _GLBackend_Init();
 _Gfx_RestoreState();
 _GLContext_SetVSync(HEAP8[1868769] | 0);
 return;
}

function _ClO_SetHacks(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 470 >> 0] = i1;
 _Options_SetBool(39545, i1);
 _HacksComp_Update((HEAP32[417347] | 0) + 460 | 0);
 return;
}

function _Audio_Init(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = _interop_AudioCreate() | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = 0;
 return 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _Utils_AccumulateWheelDelta(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0;
 d2 = +HEAPF32[i1 >> 2] + d2;
 i3 = ~~d2;
 HEAPF32[i1 >> 2] = d2 - +(i3 | 0);
 return i3 | 0;
}

function _TouchCtrls_UpdateTapText(i1) {
 i1 = i1 | 0;
 _ButtonWidget_SetConst(i1 + 120 | 0, _GetTapDesc(HEAP32[422516] | 0) | 0, i1 + 540 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _TouchCtrls_UpdateHoldText(i1) {
 i1 = i1 | 0;
 _ButtonWidget_SetConst(i1 + 204 | 0, _GetHoldDesc(HEAP32[3784] | 0) | 0, i1 + 540 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _SaveLevelScreen_Show() {
 HEAP8[1705372] = 1;
 HEAP8[1705374] = 1;
 HEAP32[426342] = 15792;
 _Gui_Add(1705368, 50);
 _TextInputWidget_OpenKeyboard(1705680, 0);
 return;
}

function _MenuOptionsScreen_HexGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _PackedCol_ToHex(i2, FUNCTION_TABLE_i[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 8 >> 2] & 63]() | 0);
 return;
}

function _Mem_TryRealloc(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _CalcMemSize(i2, i1) | 0;
 if (!i1) i1 = 0; else i1 = _realloc(i3, i1) | 0;
 return i1 | 0;
}

function _Lighting_SetMode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP8[1868790] | 0;
 HEAP8[1868790] = i2;
 _Event_RaiseLightingMode(1681444, i3, i1);
 return;
}

function _Input_SetNonRepeatable(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) _Input_SetReleased(i1); else if (!(HEAP8[1868476 + i1 >> 0] | 0)) _Input_SetPressed(i1);
 return;
}

function _HS_SetHacks(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 470 >> 0] = i1;
 _Options_SetBool(39545, i1);
 _HacksComp_Update((HEAP32[417347] | 0) + 460 | 0);
 return;
}

function _TextWidget_Reposition(i1) {
 i1 = i1 | 0;
 _Widget_CalcPosition(i1);
 HEAP16[i1 + 44 >> 1] = HEAP32[i1 + 4 >> 2];
 HEAP16[i1 + 46 >> 1] = HEAP32[i1 + 8 >> 2];
 return;
}

function _ModernBuilder_SetActive() {
 _Builder_SetDefault();
 HEAP32[414108] = 1;
 HEAP32[414109] = 1;
 HEAP32[414110] = 2;
 HEAP32[414111] = 21;
 HEAP32[414120] = 89;
 return;
}

function _ListScreen_PageClick(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _ListScreen_SetCurrentIndex(i2, (HEAP32[i2 + 804 >> 2] | 0) + (i1 << 24 >> 24 == 0 ? -5 : 5) | 0);
 return;
}

function _InventoryScreen_PadAxis(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 48 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1, i2) | 0;
}

function _CPE_SetClickDistance(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +((_Stream_GetU16_BE(i1) | 0) & 65535) * .03125;
 HEAPF32[(HEAP32[417347] | 0) + 456 >> 2] = d2;
 return;
}

function _Vec3_Create3(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 HEAPF32[i1 >> 2] = d2;
 HEAPF32[i1 + 4 >> 2] = d3;
 HEAPF32[i1 + 8 >> 2] = d4;
 return;
}

function _RainParticle_Tick(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 HEAP8[1868795] = 0;
 i2 = _PhysicsTick(i2, 3.5, 29, d1) | 0;
 return (HEAP8[1868795] | i2) << 24 >> 24 != 0 | 0;
}

function _InventoryScreen_KeyUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((_InputBind_Claims(8, i2, i1) | 0) << 24 >> 24) HEAP8[i3 + 2836 >> 0] = 1;
 return;
}

function _EditHotkeyScreen_Modifiers(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 24 >> 2] = 1;
 HEAP8[i2 + 52 >> 0] = 1;
 _EditHotkeyScreen_UpdateModifiers(i2);
 return;
}

function _GLContext_SetVSync(i1) {
 i1 = i1 | 0;
 if (!(i1 << 24 >> 24)) _emscripten_set_main_loop_timing(0, 16) | 0; else _emscripten_set_main_loop_timing(1, 1) | 0;
 return;
}

function _CalcViewDists() {
 var i1 = 0;
 i1 = _AdjustDist(HEAP32[3681] | 0) | 0;
 HEAP32[424262] = i1;
 i1 = _AdjustDist(HEAP32[3680] | 0) | 0;
 HEAP32[424263] = i1;
 return;
}

function _CPEExtensions_Reset() {
 var i1 = 0;
 i1 = 0;
 do {
  HEAP8[(HEAP32[7056 + (i1 << 2) >> 2] | 0) + 5 >> 0] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 40);
 return;
}

function _Utils_IsUrlPrefix(i1) {
 i1 = i1 | 0;
 if (!(_String_IndexOfConst(i1, 53055) | 0)) i1 = 1; else i1 = (_String_IndexOfConst(i1, 53046) | 0) == 0 & 1;
 return i1 | 0;
}

function _UpdateAll() {
 _DeleteStaticVbs();
 _UpdateFogBlend();
 _EnvRenderer_UpdateFog();
 _DeleteWeatherVB();
 if (!(HEAP8[1689080] | 0)) _UpdateBorderTextures();
 return;
}

function _OtherBindingsScreen_Show() {
 _KeyBindsScreen_Reset(164, 168, 260);
 _KeyBindsScreen_SetLayout(-140, 10, 6);
 _KeyBindsScreen_Show(12, 44967, 6784, 44979);
 return;
}

function _HotkeyListScreen_UpdateEntry(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if (HEAP16[i3 + 4 >> 1] | 0) _ButtonWidget_Set(i1, i3, i2 + 792 | 0);
 return;
}

function _GLContext_Free() {
 _emscripten_webgl_destroy_context(HEAP32[466977] | 0) | 0;
 _emscripten_set_webglcontextlost_callback_on_thread(53305, 0, 0, 0, 2) | 0;
 return;
}

function _File_Seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _interop_FileSeek(i1 | 0, i2 | 0, i3 | 0) | 0;
 return ((i3 | 0) > -1 ? 0 : 0 - i3 | 0) | 0;
}

function _AdvBuilder_SetActive() {
 _Builder_SetDefault();
 HEAP32[414108] = 2;
 HEAP32[414109] = 3;
 HEAP32[414110] = 4;
 HEAP32[414111] = 22;
 HEAP32[414120] = 90;
 return;
}

function _String_AppendInt(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 0) {
  _String_Append(i2, 45);
  i1 = 0 - i1 | 0;
 }
 _String_AppendUInt32(i2, i1);
 return;
}

function _OnNewMap_1970() {
 var i1 = 0;
 if (!(HEAP8[1841572] | 0)) {
  i1 = 0;
  do {
   _Entities_Remove(i1);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 255);
 }
 return;
}

function _NormalBindingsScreen_Show() {
 _KeyBindsScreen_Reset(0, 164, 250);
 _KeyBindsScreen_SetLayout(-140, 10, 6);
 _KeyBindsScreen_Show(12, 44786, 6704, 44798);
 return;
}

function _MenuInputOverlay_CheckStillValid(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 84 >> 2] | 0;
 if (i1 | 0) if (HEAP8[i1 + 21 >> 0] & 1) _MenuInputOverlay_Close(0);
 return;
}

function _Mem_AllocCleared(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = _Mem_TryAllocCleared(i2, i1) | 0;
 if (!i1) _AbortOnAllocFailed(i3);
 return i1 | 0;
}

function _InventoryScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1676764, i1, 406);
 _Event_Unregister(1679884, i1, 407);
 _Event_Unregister(1680144, i1, 407);
 return;
}

function _Http_AsyncGetDataEx(i5, i3, i4, i2, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _Http_Add(i5, i3, 0, i4, i2, 0, 0, i1) | 0;
}

function _HotbarBindingsScreen_Show() {
 _KeyBindsScreen_Reset(168, 0, 260);
 _KeyBindsScreen_SetLayout(-140, 10, 6);
 _KeyBindsScreen_Show(11, 45263, 6864, 45274);
 return;
}

function _GenLevelScreen_TextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _GenLevelScreen_SelectedInput(i1) | 0;
 if (i1 | 0) _InputWidget_SetText(i1, i2);
 return 1;
}

function _Camera_OnRawMovement(d1, d2, i3) {
 d1 = +d1;
 d2 = +d2;
 i3 = i3 | 0;
 HEAPF32[414169] = +HEAPF32[414169] + d1;
 HEAPF32[414170] = +HEAPF32[414170] + d2;
 return;
}

function _SaveLevelScreen_UploadCallback(i1) {
 i1 = i1 | 0;
 if (!(_SaveLevelScreen_SaveMap(i1) | 0)) {
  _Chat_Add1(43543, i1);
  _CPE_SendNotifyAction(2, 0);
 }
 return;
}

function _PadDevice_IsPressed(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i1 + -149 | 0;
 if (i1 >>> 0 < 23) i1 = HEAP8[i2 + 96 + i1 >> 0] | 0; else i1 = 0;
 return i1 | 0;
}

function _OnReset_235() {
 _Mem_Set(1667324, 0, 1024) | 0;
 _Mem_Copy(1667516, 2224, 40) | 0;
 _Mem_Copy(1667712, 2272, 24) | 0;
 _Mem_Copy(1667584, 2272, 24) | 0;
 return;
}

function _HacksBindingsScreen_Show() {
 _KeyBindsScreen_Reset(166, 167, 260);
 _KeyBindsScreen_SetLayout(-40, 10, 4);
 _KeyBindsScreen_Show(8, 44916, 6752, 44924);
 return;
}

function _Gamepad_Tick(d1) {
 d1 = +d1;
 var i2 = 0;
 _Gamepads_Process(d1);
 i2 = 0;
 do {
  _Gamepad_Update(i2, d1);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 5);
 return;
}

function _EditHotkeyScreen_BaseKey(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP8[i2 + 52 >> 0] = 1;
 _EditHotkeyScreen_UpdateBaseKey(i2);
 return;
}

function _BindTriggered_Fullscreen(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _Game_ToggleFullscreen();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _OptionsGroupScreen_UpdateDesc(i1) {
 i1 = i1 | 0;
 _TextWidget_SetConst(i1 + 720 | 0, HEAP32[6672 + (HEAP32[i1 + 24 >> 2] << 2) >> 2] | 0, i1 + 36 | 0);
 return;
}

function _InputWidget_SetText(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _InputWidget_Clear(i2);
 _InputWidget_DoAppendText(i2, i1) | 0;
 _InputWidget_UpdateText(i2);
 return;
}

function _CustomModel_FreeAll() {
 var i1 = 0;
 i1 = 0;
 do {
  _CustomModel_Undefine(364768 + (i1 * 6848 | 0) | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 64);
 return;
}

function _TexturePackScreen_ActionFunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _Window_OpenFileDialog(16056) | 0;
 if (i1 | 0) _Logger_SimpleWarn(i1, 43785);
 return;
}

function _RequestList_Free(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i1 | 0) != (i2 + 16 | 0)) _Mem_Free(i1);
 _RequestList_Init(i2);
 return;
}

function _BindTriggered_ThirdPerson(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _Camera_CycleActive();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _SoundContext_PlayData(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _interop_AudioPlay(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 24 >> 2] | 0) | 0;
}

function _Queue_Clear(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  _Mem_Free(i1);
  _Queue_Init(i2, HEAP32[i2 + 4 >> 2] | 0);
 }
 return;
}

function _Options_Load() {
 _StringsBuffer_SetLengthBits(1716580, 11);
 _EntryList_Load(1716580, 46486, 61, 0) | 0;
 _EntryList_Load(1716580, 46506, 61, 0) | 0;
 return;
}

function _Gfx_LockDynamicVb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _FastAllocTempMem(Math_imul(HEAP32[14940 + (i2 << 2) >> 2] | 0, i1) | 0) | 0;
}

function _GenLevelScreen_KeyPress(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _GenLevelScreen_SelectedInput(i1) | 0;
 if (i1 | 0) _InputWidget_Append(i1, i2);
 return 1;
}

function _String_Init_1780(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP16[i1 + 4 >> 1] = i3;
 HEAP16[i1 + 6 >> 1] = 64;
 return;
}

function _OnBlockDefinitionChanged(i1) {
 i1 = i1 | 0;
 _MapRenderer_Refresh();
 i1 = _MapRenderer_UsedAtlases() | 0;
 HEAP32[424247] = i1;
 _ResetPartFlags();
 return;
}

function _Math_ClampAngle(d1) {
 d1 = +d1;
 if (d1 >= 360.0) do d1 = d1 + -360.0; while (d1 >= 360.0);
 if (d1 < 0.0) do d1 = d1 + 360.0; while (d1 < 0.0);
 return +d1;
}

function _Math_CeilDiv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = (i1 | 0) / (i2 | 0) | 0;
 return i3 + ((i1 - (Math_imul(i3, i2) | 0) | 0) != 0 & 1) | 0;
}

function _LoadLevelScreen_ActionFunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _Window_OpenFileDialog(15884) | 0;
 if (i1 | 0) _Logger_SimpleWarn(i1, 43785);
 return;
}

function _SaveLevelScreen_TextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SaveLevelScreen_RemoveOverwrites(i1);
 _InputWidget_SetText(i1 + 312 | 0, i2);
 return 1;
}

function _Random_Seed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2 ^ -554899859;
 HEAP32[i1 + 4 >> 2] = ((i2 | 0) < 0) << 31 >> 31 & 65535 ^ 5;
 return;
}

function _OnInputDownLegacy(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) != 15140) _OnInputDown(i3, i2, i4, 15140);
 return;
}

function _HUDScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1679624, i1, 402);
 _Event_Unregister(1676764, i1, 403);
 _Event_Unregister(1680144, i1, 403);
 return;
}

function _Gfx_LoseContext(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1689080] | 0)) {
  HEAP8[1689080] = 1;
  _Platform_Log1(34491, i1);
  _Event_RaiseVoid(1678324);
 }
 return;
}

function _FontListScreen_ActionFunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _Window_OpenFileDialog(16492) | 0;
 if (i1 | 0) _Logger_SimpleWarn(i1, 43785);
 return;
}

function _DisconnectScreen_OnReconnect(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(i1);
 _Gui_ShowDefault();
 FUNCTION_TABLE_v[HEAP32[460380] & 127]();
 return;
}

function _ChatScreen_FreeChatFonts(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 60 | 0);
 _Font_Free(i1 + 72 | 0);
 _Font_Free(i1 + 84 | 0);
 _Font_Free(i1 + 96 | 0);
 return;
}

function _BindTriggered_IDOverlay(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _Gui_GetScreen(30) | 0;
 if (!i1) _TexIdsOverlay_Show(); else _Gui_Remove(i1);
 return 1;
}

function _String_Format3(i5, i4, i1, i2, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _String_Format4(i5, i4, i1, i2, i3, 0);
 return;
}

function _Server_ResetState() {
 HEAP8[1841592] = 0;
 HEAP8[1841573] = 0;
 HEAP8[1841574] = 0;
 HEAP8[1841575] = 0;
 HEAP8[1841576] = 0;
 HEAP8[1841577] = 0;
 return;
}

function _SaveLevelScreen_UpdateSave(i1) {
 i1 = i1 | 0;
 _ButtonWidget_SetConst(i1 + 60 | 0, (HEAP32[i1 + 140 >> 2] | 0) == 0 ? 43479 : 43484, i1 + 36 | 0);
 return;
}

function _Env_SetExpFog(i1) {
 i1 = i1 | 0;
 i1 = i1 & 255;
 if ((HEAP32[466935] | 0) != (i1 | 0)) {
  HEAP32[466935] = i1;
  _Event_RaiseInt(1681184, 9);
 }
 return;
}

function _ClO_GetViewDist() {
 var i1 = 0;
 i1 = HEAP32[3680] | 0;
 if ((i1 | 0) > 511) return 3; else return ((i1 | 0) > 127 ? 2 : (i1 | 0) > 31 & 1) | 0;
 return 0;
}

function _BindTriggered_Fog(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP32[422387] | 0)) {
  _Game_CycleViewDistance();
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function _UrlWarningOverlay_AppendUrl(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP8[1689500] | 0) _ChatScreen_AppendInput(i2 + 36 | 0);
 _Gui_Remove(i2);
 return;
}

function _TouchScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1679624, i1, 418);
 _Event_Unregister(1679104, i1, 418);
 _LocalPlayerInput_Remove(22720);
 return;
}

function _SetFullscreenBounds() {
 var i1 = 0;
 i1 = _GetScreenWidth() | 0;
 _emscripten_set_canvas_element_size(53305, i1 | 0, _GetScreenHeight() | 0) | 0;
 return;
}

function _Player_ReleaseRight(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -3;
 return;
}

function _Player_ReleaseDown(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -33;
 return;
}

function _OnRawMovement(i3, d1, d2) {
 i3 = i3 | 0;
 d1 = +d1;
 d2 = +d2;
 FUNCTION_TABLE_vddi[HEAP32[(HEAP32[1656644 >> 2] | 0) + 24 >> 2] & 1](d1, d2, 0);
 return;
}

function _OnBlockChanged_898(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 if (i2 << 16 >> 16) _HeldBlockRenderer_ClickAnim(0);
 return;
}

function _MenuOptionsScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1679104, i1, 232);
 _Event_Unregister(1681444, i1, 15);
 _MenuInputOverlay_Close(0);
 return;
}

function _KeyBindsScreen_SetLayout(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[427530] = i3;
 HEAP32[427531] = i1;
 HEAP32[427532] = i2;
 return;
}

function _IVec3_MaxValue_1233(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[3893];
 HEAP32[i1 + 4 >> 2] = HEAP32[3894];
 HEAP32[i1 + 8 >> 2] = HEAP32[3895];
 return;
}

function _FontListScreen_UploadCallback(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _SysFonts_Register(i2, 330) | 0;
 if (i1) _Logger_SimpleWarn2(i1, 45511, i2);
 return;
}

function _CombinedNoise_Calc(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 return +(+_OctaveNoise_Calc(i1, +_OctaveNoise_Calc(i1 + 4100 | 0, d2, d3) + d2, d3));
}

function _CheckMaxVertices() {
 if ((HEAP32[428694] | 0) < 1536) {
  _Platform_LogConst(46427);
  HEAP32[428694] = 1536;
  _Gfx_DeleteDynamicVb(1714768);
 }
 return;
}

function _World_ContainsXZ_2594(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _World_ContainsXZ_1764(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _World_ContainsXZ_1244(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _TouchScreen_TabClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _Gui_GetScreen(17) | 0;
 if (!i1) _TabListOverlay_Show(1); else _Gui_Remove(i1);
 return;
}

function _TerrainParticle_Tick(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return _PhysicsTick(i2, +HEAPF32[1649188 + ((HEAPU16[i2 + 62 >> 1] | 0) << 2) >> 2], 30, d1) | 0;
}

function _Pointer_SetPressed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(i2 << 24 >> 24)) _Event_RaiseInt(1687164, i1); else _Event_RaiseInt(1686904, i1);
 return;
}

function _Player_ReleaseLeft(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
 return;
}

function _InventoryScreen_Show() {
 HEAP8[1818832] = 1;
 HEAP8[1818834] = 1;
 HEAP32[454707] = 21912;
 _Gui_Add(1818828, 20);
 _CPE_SendNotifyAction(1, 1);
 return;
}

function _World_ContainsXZ_640(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _World_ContainsXZ_374(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _World_ContainsXZ_355(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _Stream_FileWrite(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return _File_Write(HEAP32[i4 + 32 >> 2] | 0, i2, i1, i3) | 0;
}

function _SaveLevelScreen_KeyPress(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _SaveLevelScreen_RemoveOverwrites(i2);
 _InputWidget_Append(i2 + 312 | 0, i1);
 return 1;
}

function _RecreateDynamicVb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(i2);
 i1 = _Gfx_CreateDynamicVb(i1, 4) | 0;
 HEAP32[i2 >> 2] = i1;
 return;
}

function _Player_ReleaseUp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = 1695232 + (HEAP32[i1 + 8 >> 2] << 2) | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -17;
 return;
}

function _Player_Despawn(i1) {
 i1 = i1 | 0;
 _DeleteSkin(i1);
 _EntityNames_Delete(i1);
 if (HEAP8[i1 + 54 >> 0] & 2) _Gfx_DeleteDynamicVb(i1 + 416 | 0);
 return;
}

function _InputWidget_Append(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((_InputWidget_TryAppendChar(i2, i1) | 0) << 24 >> 24) _InputWidget_UpdateText(i2);
 return;
}

function _HS_SetSpeed(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +_Menu_Float(i1);
 HEAPF32[(HEAP32[417347] | 0) + 464 >> 2] = d2;
 _Options_Set(42560, i1);
 return;
}

function _EditHotkeyScreen_MakeFlags(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) _String_AppendConst(i2, 44147);
 _HotkeyListScreen_MakeFlags(i1, i2);
 return;
}

function _ButtonWidget_Add(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ButtonWidget_Init(i4, i1, i2);
 _AddWidget(i3, i4);
 return;
}

function _Vec3_BigPos_1222(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[3890];
 HEAP32[i1 + 4 >> 2] = HEAP32[3891];
 HEAP32[i1 + 8 >> 2] = HEAP32[3892];
 return;
}

function _MenuInputOverlay_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 if (HEAP8[i2 + 36 >> 0] | 0) _Menu_RenderBounds();
 _Screen_Render2Widgets(i2, d1);
 return;
}

function _Gfx_LockVb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _FastAllocTempMem(Math_imul(HEAP32[14940 + (i2 << 2) >> 2] | 0, i1) | 0) | 0;
}

function _Gfx_LoadMVP(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_LoadMatrix(1, i3);
 _Gfx_LoadMatrix(0, i2);
 _Matrix_Mul(i1, i3, i2);
 return;
}

function _Gfx_DrawVb_IndexedTris(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[HEAP32[422334] & 127]();
 _glDrawElements(4, (2 ? i1 >> 2 : i1) * 6 | 0, 5123, 0);
 return;
}

function _AABB_Offset(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Vec3_Add_1746(i3, i2, i1);
 _Vec3_Add_1746(i3 + 12 | 0, i2 + 12 | 0, i1);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 63](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b9(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(9);
 return 0;
}

function _TouchCtrls_Tap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[422516] = ((HEAP32[422516] | 0) + 1 | 0) % 3 | 0;
 _TouchCtrls_UpdateTapText(i1);
 return;
}

function _SysFont_MakeDefault(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _SysFont_Make(i1, _SysFonts_UNSAFE_GetDefault() | 0, i3, i2) | 0;
 return;
}

function _Stream_FileRead(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return _File_Read(HEAP32[i4 + 32 >> 2] | 0, i2, i1, i3) | 0;
}

function _Socket_ParseAddress(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _ParseIPv4(i1, i4, i2);
 HEAP32[i3 >> 2] = 1;
 return 0;
}

function _OnContextRecreated_2251(i1) {
 i1 = i1 | 0;
 if (!((HEAP8[1689082] | 0) != 0 & (HEAP8[1868807] | 0) == 0)) _TexturePack_ExtractCurrent(1) | 0;
 return;
}

function _DoNextFrame() {
 if (!(HEAP8[1868751] | 0)) {
  _Game_Free();
  _Window_Free();
  _emscripten_cancel_main_loop();
 } else _Game_RenderFrame();
 return;
}

function _Context2D_CalcUV(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP8[1689212] | 0) == 1) i1 = _Math_NextPowOf2(i1) | 0;
 return +(+(i2 | 0) / +(i1 | 0));
}

function _AddPostProcessing(i1) {
 i1 = i1 | 0;
 if ((HEAP32[422315] | 0) == 1) {
  _String_AppendConst(i1, 34107);
  _String_AppendConst(i1, 34167);
 }
 return;
}

function _Stream_FileClose(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 32 | 0;
 i1 = _File_Close(HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 0;
 return i1 | 0;
}

function _ScrollbarWidget_GetScale(i1) {
 i1 = i1 | 0;
 return +(+((HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 72 >> 2] << 1) | 0) / +(HEAP32[i1 + 44 >> 2] | 0));
}

function _Math_ilog2(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = 0;
 while (1) {
  i1 = 1 ? i1 >>> 1 : i1;
  if (!i1) break; else i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function _IVec3_MaxValue(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[3893];
 HEAP32[i1 + 4 >> 2] = HEAP32[3894];
 HEAP32[i1 + 8 >> 2] = HEAP32[3895];
 return;
}

function _GrO_CheckLightingModeAllowed(i1) {
 i1 = i1 | 0;
 _Widget_SetDisabled(HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + 12 >> 2] | 0, HEAPU8[1868791] | 0);
 return;
}

function _Gfx_SetFogCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[422310] | 0) != (i1 | 0)) {
  HEAP32[422310] = i1;
  _DirtyUniform(4);
  _ReloadUniforms();
 }
 return;
}

function _FontListScreen_LoadEntries(i1) {
 i1 = i1 | 0;
 _SysFonts_GetNames(i1 + 908 | 0);
 _ListScreen_Select(i1, _SysFonts_UNSAFE_GetDefault() | 0);
 return;
}

function _World_ContainsXZ(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[244733] | 0) >>> 0 > i1 >>> 0 & (HEAP32[244735] | 0) >>> 0 > i2 >>> 0 & 1 | 0;
}

function _TouchCtrls_Hold(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[3784] = ((HEAP32[3784] | 0) + 1 | 0) % 3 | 0;
 _TouchCtrls_UpdateHoldText(i1);
 return;
}

function _Menu_InputDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Menu_DoInputDown(i3, i2, i1) | 0;
 return _Screen_InputDown(i3, i2, i1) | 0;
}

function _Mem_Alloc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = _Mem_TryAlloc(i2, i1) | 0;
 if (!i1) _AbortOnAllocFailed(i3);
 return i1 | 0;
}

function _ChunkInfo_Refresh(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + 6 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 & 8)) HEAP8[i1 >> 0] = i2 & -7 | 4;
 return;
}

function _TextureUrls_ClearDenied() {
 var i1 = 0;
 i1 = HEAP32[462221] | 0;
 _StringsBuffer_Clear(1848876);
 _EntryList_Save(1848876, 50479);
 return i1 | 0;
}

function _TextGroupWidget_UNSAFE_Get(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[HEAP32[i3 + 88 >> 2] & 255](i1, i2);
 return;
}

function _IsometricDrawer_InitCache() {
 if (!(HEAP8[1868789] | 0)) {
  HEAP8[1868789] = 1;
  _PackedCol_GetShaded(-1, 1696964, 1696968, 1696972);
 }
 return;
}

function _Http_TryCancel(i1) {
 i1 = i1 | 0;
 _RequestList_TryFree(979024, i1);
 _RequestList_TryFree(982160, i1);
 _RequestList_TryFree(985304, i1);
 return;
}

function _Gfx_UnlockDynamicVb(i1) {
 i1 = i1 | 0;
 _glBindBuffer(34962, i1 | 0);
 _glBufferSubData(34962, 0, HEAP32[422335] | 0, HEAP32[422336] | 0);
 return;
}

function _FreePalettes() {
 var i1 = 0;
 i1 = 0;
 do {
  _Mem_Free(HEAP32[352112 + (i1 << 2) >> 2] | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 8);
 return;
}

function _Block_IsCustomDefined(i1) {
 i1 = i1 | 0;
 i1 = i1 & 65535;
 return (HEAP32[61696 + ((5 ? i1 >>> 5 : i1) << 2) >> 2] & 1 << (i1 & 31) | 0) != 0 | 0;
}

function _Vec3_BigPos(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[3890];
 HEAP32[i1 + 4 >> 2] = HEAP32[3891];
 HEAP32[i1 + 8 >> 2] = HEAP32[3892];
 return;
}

function _Stream_PortionPosition(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) - (HEAP32[i2 + 36 >> 2] | 0);
 return 0;
}

function _Searcher_Free() {
 var i1 = 0;
 i1 = HEAP32[5306] | 0;
 if ((i1 | 0) != 945056) _Mem_Free(i1);
 HEAP32[5306] = 945056;
 HEAP32[5307] = 64;
 return;
}

function _ResetPartFlags() {
 _memset(361840, 1, 512) | 0;
 _memset(362352, 0, 512) | 0;
 _memset(362864, 1, 512) | 0;
 _memset(363376, 0, 512) | 0;
 return;
}

function _MenuOptionsScreen_NumSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 12 >> 2] & 511](i2);
 return;
}

function _MenuOptionsScreen_Layout(i1) {
 i1 = i1 | 0;
 _Screen_Layout(i1);
 _Menu_LayoutBack(i1 + 1288 | 0);
 _MenuOptionsScreen_LayoutExtHelp(i1);
 return;
}

function _Env_SetLavaLightCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466950] | 0) != (i1 | 0)) {
  HEAP32[466950] = i1;
  _Event_RaiseInt(1681184, 18);
 }
 return;
}

function _Env_SetLampLightCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466951] | 0) != (i1 | 0)) {
  HEAP32[466951] = i1;
  _Event_RaiseInt(1681184, 19);
 }
 return;
}

function _DrawOpCommand_ResetState() {
 if (HEAP8[1868736] | 0) {
  _Event_Unregister(1678844, 0, 24);
  HEAP8[1868736] = 0;
 }
 HEAP8[1868737] = 0;
 return;
}

function _ClassicLighting_IsLit(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (_ClassicLighting_GetLightHeight(i1, i3) | 0) < (i2 | 0) | 0;
}

function _ChO_SetLogging(i1) {
 i1 = i1 | 0;
 HEAP8[1868735] = i1;
 _Options_SetBool(41244, i1);
 if (!(HEAP8[1868735] | 0)) _Chat_DisableLogging();
 return;
}

function _StringsBuffer_SetLengthBits(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 5144 >> 2] = i1;
 HEAP32[i2 + 5148 >> 2] = (1 << i1) + -1;
 return;
}

function _Stream_MemoryPosition(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) - (HEAP32[i2 + 36 >> 2] | 0);
 return 0;
}

function _Overlay_LayoutMainButtons(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1, 1, 1, -110, 30);
 _Widget_SetLocation(i1 + 84 | 0, 1, 1, 110, 30);
 return;
}

function _MenuOptionsScreen_NumGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 8 >> 2] & 511](i2);
 return;
}

function _Lighting_SwitchActive() {
 FUNCTION_TABLE_v[HEAP32[467165] & 127]();
 _Lighting_ApplyActive();
 FUNCTION_TABLE_v[HEAP32[467166] & 127]();
 return;
}

function _Java_ReadNewString(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[422207] = (HEAP32[422207] | 0) + 1;
 return _Java_ReadString(i2, i1 + 4 | 0) | 0;
}

function _Hex_ValidChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 + -48 & 255) < 10) return 1; else return ((i1 & -33) + -65 & 255) < 6 | 0;
 return 0;
}

function _HashUrl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendUInt32(i1, _Utils_CRC32(HEAP32[i2 >> 2] | 0, HEAPU16[i2 + 4 >> 1] | 0) | 0);
 return;
}

function _HacksComp_CanJumpHigher(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[i1 + 10 >> 0] | 0)) i1 = 0; else i1 = (HEAP8[i1 + 13 >> 0] | 0) != 0 & 1;
 return i1 | 0;
}

function _Env_SetCloudsHeight(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466930] | 0) != (i1 | 0)) {
  HEAP32[466930] = i1;
  _Event_RaiseInt(1681184, 4);
 }
 return;
}

function _Entities_Free() {
 var i1 = 0;
 i1 = 0;
 do {
  _Entities_Remove(i1);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 HEAP32[418836] = 0;
 return;
}

function _AudioBackend_Init() {
 var i1 = 0;
 i1 = _interop_InitAudio() | 0;
 if (!i1) i1 = 1; else {
  _Audio_Warn(i1, 51939);
  i1 = 0;
 }
 return i1 | 0;
}

function _WoM_CheckSendWomID() {
 if (!((HEAP8[1868797] | 0) == 0 | (HEAP8[1868798] | 0) != 0)) {
  _Chat_Send(21640, 0);
  HEAP8[1868798] = 1;
 }
 return;
}

function _TabListOverlay_SortAndLayout(i1) {
 i1 = i1 | 0;
 _TabListOverlay_SortEntries(i1);
 _TabListOverlay_Layout(i1);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _TabListOverlay_Add(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _TabListOverlay_AddName(i2, i1 & 255, -1);
 _TabListOverlay_SortAndLayout(i2);
 return;
}

function _String_FromReadonly(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _String_Length(i2) | 0;
 _String_Init_2044(i1, i2, i3, i3);
 return;
}

function _NormalBuilder_SetActive() {
 _Builder_SetDefault();
 HEAP32[414108] = 3;
 HEAP32[414109] = 5;
 HEAP32[414110] = 6;
 HEAP32[414111] = 23;
 return;
}

function _ModelCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) _Chat_AddRaw(28950); else _Entity_SetModel(HEAP32[417347] | 0, i1);
 return;
}

function _Menu_PointerDown(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _Screen_DoPointerDown(i2, i1, i3, i4) | 0;
 return 1;
}

function _InputWidget_HomeKey(i1) {
 i1 = i1 | 0;
 if (HEAP16[i1 + 68 >> 1] | 0) {
  HEAP32[i1 + 160 >> 2] = 0;
  _InputWidget_UpdateCaret(i1);
 }
 return;
}

function _GetRotated(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _FindRotated(i2, i1) | 0;
 if ((i1 | 0) == -1) i1 = _Block_FindID(i2) | 0;
 return i1 | 0;
}

function _Env_SetSidesOffset(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466929] | 0) != (i1 | 0)) {
  HEAP32[466929] = i1;
  _Event_RaiseInt(1681184, 3);
 }
 return;
}

function _AudioPool_Close() {
 var i1 = 0;
 i1 = 0;
 do {
  _Audio_Close(977376 + (i1 * 12 | 0) | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 8);
 return;
}

function _Stream_SetU16_BE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 8 ? (i2 & 65535) >>> 8 : i2 & 65535;
 HEAP8[i1 + 1 >> 0] = i2;
 return;
}

function _LocalPlayer_ReleaseFlyDown(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 497 >> 0] = 0;
 return;
}

function _GuO_SetUseFont(i1) {
 i1 = i1 | 0;
 HEAP8[1667320] = i1 << 24 >> 24 == 0 & 1;
 _Options_SetBool(41420, i1);
 _Event_RaiseVoid(1681704);
 return;
}

function _GrO_SetSmooth(i1) {
 i1 = i1 | 0;
 HEAP8[1868730] = i1;
 _Options_SetBool(41140, i1);
 _Builder_ApplyActive();
 _MapRenderer_Refresh();
 return;
}

function _Gfx_SetViewport(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _glViewport(i3 | 0, i4 | 0, i2 | 0, i1 | 0);
 return;
}

function _Gfx_SetAlphaBlending(i1) {
 i1 = i1 | 0;
 if ((HEAP8[1868767] | 0) != i1 << 24 >> 24) {
  HEAP8[1868767] = i1;
  _SetAlphaBlend(i1);
 }
 return;
}

function _Env_SetSkyboxCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466941] | 0) != (i1 | 0)) {
  HEAP32[466941] = i1;
  _Event_RaiseInt(1681184, 17);
 }
 return;
}

function _Env_SetEdgeHeight(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466928] | 0) != (i1 | 0)) {
  HEAP32[466928] = i1;
  _Event_RaiseInt(1681184, 2);
 }
 return;
}

function _Env_SetCloudsCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466940] | 0) != (i1 | 0)) {
  HEAP32[466940] = i1;
  _Event_RaiseInt(1681184, 13);
 }
 return;
}

function _Atlas2D_Free() {
 var i1 = 0;
 i1 = HEAP32[460924] | 0;
 if ((i1 | 0) != 8736) _Mem_Free(i1);
 HEAP32[460924] = 0;
 HEAP32[460928] = 0;
 return;
}

function _SkinCommand_Execute(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) _Chat_AddRaw(28756); else _Entity_SetSkin(HEAP32[417347] | 0, i1);
 return;
}

function _SetColorWrite(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _glColorMask(i4 | 0, i3 | 0, i2 | 0, i1 | 0);
 return;
}

function _Random_SeedFromCurrentTime(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _Stopwatch_Measure() | 0;
 getTempRet0() | 0;
 _Random_Seed(i1, i2);
 return;
}

function _Particles_Tick(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +HEAPF64[i1 + 8 >> 3];
 _Terrain_Tick(d2);
 _Rain_Tick(d2);
 _Custom_Tick(d2);
 return;
}

function _Mem_TryAlloc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _CalcMemSize(i2, i1) | 0;
 if (!i1) i1 = 0; else i1 = _malloc(i1) | 0;
 return i1 | 0;
}

function _LocalPlayer_ReleaseNoclip(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 462 >> 0] = 0;
 return;
}

function _Gfx_CreateTexture(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _Gfx_CreateTexture2(i1, HEAP32[i1 + 4 >> 2] | 0, i2, i3) | 0;
}

function _TickQueue_Clear(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  _Mem_Free(i1);
  _TickQueue_Init(i2);
 }
 return;
}

function _SkinnedCubeModel_Register() {
 _Model_Init(17168);
 HEAP8[17214] = 1;
 HEAP8[17215] = 0;
 HEAP32[4308] = 24;
 _Model_Register(17168);
 return;
}

function _SkeletonModel_Register() {
 _Model_Init(18168);
 HEAP32[4555] = 334;
 HEAP8[18208] = 5;
 HEAP32[4558] = 144;
 _Model_Register(18168);
 return;
}

function _Png_Detect(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i2 >>> 0 > 7) i1 = (_Mem_Equal(i1, 24692, 8) | 0) != 0 & 1; else i1 = 0;
 return i1 | 0;
}

function _OnFree_861() {
 if (HEAP32[422372] | 0) do _Gui_Remove(HEAP32[88104] | 0); while ((HEAP32[422372] | 0) != 0);
 _OnContextLost_863(0);
 return;
}

function _Menu_PointerMove(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _Menu_DoPointerMove(i2, 0, i3, i4) | 0;
 return 1;
}

function _MCLevel_ParseColor(i1) {
 i1 = i1 | 0;
 i1 = _NbtTag_I32(i1) | 0;
 return i1 & 65280 | i1 << 16 | (16 ? i1 >>> 16 : i1) & 255 | -16777216 | 0;
}

function _LocalPlayer_ReleaseFlyUp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 496 >> 0] = 0;
 return;
}

function _InputWidget_AppendText(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (_InputWidget_DoAppendText(i2, i1) | 0) _InputWidget_UpdateText(i2);
 return;
}

function _Gfx_SetFogDensity(d1) {
 d1 = +d1;
 if (!(+HEAPF32[3733] == d1)) {
  HEAPF32[3733] = d1;
  _DirtyUniform(16);
  _ReloadUniforms();
 }
 return;
}

function _Float_ValidChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (i1 << 24 >> 24 == 44 | ((i1 + -45 & 255) < 2 | (i1 + -48 & 255) < 10)) & 1 | 0;
}

function _TexturePackScreen_LoadEntries(i1) {
 i1 = i1 | 0;
 i1 = i1 + 908 | 0;
 _Directory_Enum(16040, i1, 19) | 0;
 _StringsBuffer_Sort(i1);
 return;
}

function _Math_SafeDiv_1761(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0;
 i3 = +Math_abs(+d2) < 9.999999974752427e-07;
 return +(i3 ? 1.0e9 : d1 / d2);
}

function _LocalPlayer_ReleaseJump(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[146288 + ((HEAP32[i1 + 8 >> 2] | 0) * 796 | 0) + 730 >> 0] = 0;
 return;
}

function _Inventory_CheckChangeSelected() {
 var i1 = 0;
 if (!(HEAP8[1696948] | 0)) {
  _Chat_AddRaw(38015);
  i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _GetShadowColor_2173(i1) {
 i1 = i1 | 0;
 return ((HEAP8[1667321] | 0) == 0 ? (2 ? i1 >>> 2 : i1) & 4144959 | i1 & -16777216 : -16777216) | 0;
}

function _GZipHeader_Init(i1) {
 i1 = i1 | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP8[i1 + 1 >> 0] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP8[i1 + 2 >> 0] = 0;
 return;
}

function _Env_SetWeather(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466934] | 0) != (i1 | 0)) {
  HEAP32[466934] = i1;
  _Event_RaiseInt(1681184, 8);
 }
 return;
}

function _Env_SetSkyCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466938] | 0) != (i1 | 0)) {
  HEAP32[466938] = i1;
  _Event_RaiseInt(1681184, 12);
 }
 return;
}

function _Env_SetFogCol(i1) {
 i1 = i1 | 0;
 if ((HEAP32[466939] | 0) != (i1 | 0)) {
  HEAP32[466939] = i1;
  _Event_RaiseInt(1681184, 14);
 }
 return;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 31](i1 | 0, i2 | 0, i3 | 0);
}

function _String_FromRaw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _String_Init_2044(i1, i2, _String_CalcLen(i2, i3) | 0, i3);
 return;
}

function _OnFocus(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[1867881] = (i3 | 0) == 13 & 1;
 _Event_RaiseVoid(1683524);
 return 1;
}

function _Deflate_Hash(i1) {
 i1 = i1 | 0;
 return (HEAPU8[i1 >> 0] | 0) << 8 & 3840 ^ (HEAPU8[i1 + 1 >> 0] | 0) << 4 ^ (HEAPU8[i1 + 2 >> 0] | 0) | 0;
}

function _BlockModel_GetNameY(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[1020196 + ((HEAPU16[i1 + 52 >> 1] | 0) * 12 | 0) + 4 >> 2] + .07500000298023224);
}

function _LoadLevelScreen_LoadEntries(i1) {
 i1 = i1 | 0;
 i1 = i1 + 908 | 0;
 _Directory_Enum(15876, i1, 17) | 0;
 _StringsBuffer_Sort(i1);
 return;
}

function _Game_Disconnect(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Event_RaiseVoid(1688204);
 _Game_Reset();
 _DisconnectScreen_Show(i2, i1);
 return;
}

function _Font_Free(i1) {
 i1 = i1 | 0;
 HEAP16[i1 + 4 >> 1] = 0;
 if (HEAP32[i1 >> 2] | 0) {
  _SysFont_Free(i1);
  HEAP32[i1 >> 2] = 0;
 }
 return;
}

function _EnvRenderer_AxisSize() {
 var i1 = 0;
 if (!(HEAP8[1689213] & 4)) i1 = (HEAP8[1868744] | 0) == 0 ? 2048 : 128; else i1 = 8;
 return i1 | 0;
}

function _Camera_SetFov(i1) {
 i1 = i1 | 0;
 if ((HEAP32[414163] | 0) != (i1 | 0)) {
  HEAP32[414163] = i1;
  _Camera_UpdateProjection();
 }
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (___pthread_self_105() | 0) + 188 | 0;
 return ___strerror_l(i1, HEAP32[i2 >> 2] | 0) | 0;
}

function _Socket_Create(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = _interop_SocketCreate() | 0;
 HEAP32[i3 >> 2] = i2;
 return 0;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function _TouchScreen_GetMovement(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _ThumbstickWidget_GetMovement(1866240, i2, i3);
 return;
}

function _String_Format2(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_Format4(i4, i3, i1, i2, 0, 0);
 return;
}

function _LoadingScreen_SetMessage(i1) {
 i1 = i1 | 0;
 _TextWidget_Set(i1 + 144 | 0, i1 + 224 | 0, i1 + 36 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _Gfx_SetFogEnd(d1) {
 d1 = +d1;
 if (!(+HEAPF32[3732] == d1)) {
  HEAPF32[3732] = d1;
  _DirtyUniform(8);
  _ReloadUniforms();
 }
 return;
}

function _Gfx_SetAlphaTest(i1) {
 i1 = i1 | 0;
 if ((HEAP8[1868765] | 0) != i1 << 24 >> 24) {
  HEAP8[1868765] = i1;
  _SetAlphaTest();
 }
 return;
}

function _Gfx_End2D() {
 _Gfx_SetDepthTest(1);
 _Gfx_SetDepthWrite(1);
 _Gfx_SetAlphaBlending(0);
 if (HEAP8[1868768] | 0) _Gfx_SetFog(1);
 return;
}

function _Env_SetSkyboxVerSpeed(d1) {
 d1 = +d1;
 if (+HEAPF32[466937] != d1) {
  HEAPF32[466937] = d1;
  _Event_RaiseInt(1681184, 11);
 }
 return;
}

function _Env_SetSkyboxHorSpeed(d1) {
 d1 = +d1;
 if (+HEAPF32[466936] != d1) {
  HEAPF32[466936] = d1;
  _Event_RaiseInt(1681184, 10);
 }
 return;
}

function _DisconnectScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 224 | 0);
 _Font_Free(i1 + 236 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _ClO_SetSounds(i1) {
 i1 = i1 | 0;
 _Audio_SetSounds(i1 << 24 >> 24 == 0 ? 0 : 100);
 _Options_SetInt(39597, HEAP32[248134] | 0);
 return;
}

function _Builder_SetDefault() {
 HEAP32[414108] = 0;
 HEAP32[414109] = 0;
 HEAP32[414110] = 0;
 HEAP32[414111] = 0;
 HEAP32[414120] = 91;
 return;
}

function _Texture_RenderShaded(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_BindTexture(HEAP32[i2 >> 2] | 0);
 _Gfx_Draw2DTexture(i2, i1);
 return;
}

function _OnContextLost_1725(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(1726896);
 if (!(HEAP8[1689082] | 0)) _Gfx_DeleteTexture(1726900);
 return;
}

function _InventoryScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 36 | 0);
 _Screen_ContextLost(i1);
 HEAP32[i1 + 128 >> 2] = 0;
 return;
}

function _GetShadowColor(i1) {
 i1 = i1 | 0;
 return ((HEAP8[1667321] | 0) == 0 ? (2 ? i1 >>> 2 : i1) & 4144959 | i1 & -16777216 : -16777216) | 0;
}

function _TouchPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP8[1689553] | 0) _Game_UpdateTexture(1689532, i2, i1, 0, 0) | 0;
 return;
}

function _StringsBuffer_Sort(i1) {
 i1 = i1 | 0;
 HEAP32[460406] = i1;
 _StringsBuffer_QuickSort(0, (HEAP32[i1 + 8 >> 2] | 0) + -1 | 0);
 return;
}

function _Math_NextPowOf2(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 1;
 while (1) if ((i1 | 0) < (i2 | 0)) i1 = i1 << 1; else break;
 return i1 | 0;
}

function _InventoryScreen_Update(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 if (HEAP8[i2 + 2837 >> 0] | 0) _InventoryScreen_MoveToSelected(i2);
 return;
}

function _Gui_GetCrosshairScale() {
 var d1 = 0.0;
 d1 = +_Gui_Scale(+HEAPF32[466973] * +(HEAP32[466969] | 0));
 return +(d1 * +HEAPF32[422379]);
}

function _GetFloat(i1) {
 i1 = i1 | 0;
 i1 = _Stream_GetU32_BE(i1) | 0;
 return +(HEAP32[tempDoublePtr >> 2] = i1, +HEAPF32[tempDoublePtr >> 2]);
}

function _Gen_IsDone() {
 if (!(HEAP8[1868762] | 0)) FUNCTION_TABLE_v[HEAP32[(HEAP32[422256] | 0) + 4 >> 2] & 127]();
 return HEAP8[1868762] | 0;
}

function _EditHotkeyScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 76 | 0);
 _Font_Free(i1 + 88 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _ClO_SetMusic(i1) {
 i1 = i1 | 0;
 _Audio_SetMusic(i1 << 24 >> 24 == 0 ? 0 : 100);
 _Options_SetInt(39656, HEAP32[248135] | 0);
 return;
}

function _CPE_UndefineModel(i1) {
 i1 = i1 | 0;
 i1 = _CustomModel_Get(HEAPU8[i1 >> 0] | 0) | 0;
 if (i1 | 0) _CustomModel_Undefine(i1);
 return;
}

function _AdjustDist(i1) {
 i1 = i1 | 0;
 i1 = ~~(+(((i1 | 0) > 16 ? i1 : 16) | 0) * 1.4142135381698608) + 24 | 0;
 return Math_imul(i1, i1) | 0;
}

function _Table_Height(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 1740 >> 2] | 0) + (HEAP32[i1 + 16 >> 2] | 0) + (HEAP32[i1 + 1744 >> 2] | 0) | 0;
}

function _SaveLevelScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 36 | 0);
 _Font_Free(i1 + 48 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _MiO_SetCameraMass(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +_Menu_Float(i1);
 HEAPF32[414162] = d2;
 _Options_Set(42748, i1);
 return;
}

function _LoadingScreen_SetTitle(i1) {
 i1 = i1 | 0;
 _TextWidget_Set(i1 + 72 | 0, i1 + 216 | 0, i1 + 36 | 0);
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _GL_InitCommon() {
 _glGetIntegerv(3379, 1689068);
 HEAP32[422268] = HEAP32[422267];
 HEAP8[1689083] = 1;
 HEAP8[1689080] = 0;
 return;
}

function _Env_SetWeatherSpeed(d1) {
 d1 = +d1;
 if (+HEAPF32[466932] != d1) {
  HEAPF32[466932] = d1;
  _Event_RaiseInt(1681184, 6);
 }
 return;
}

function b8(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(8);
 return 0;
}

function _UrlWarningOverlay_Layout(i1) {
 i1 = i1 | 0;
 _Overlay_LayoutLabels(i1 + 212 | 0);
 _Overlay_LayoutMainButtons(i1 + 44 | 0);
 return;
}

function _TexturePack_SetDefault(i1) {
 i1 = i1 | 0;
 HEAP16[11200] = 0;
 _String_Format1(22396, 50415, i1);
 _Options_Set(50400, i1);
 return;
}

function _TextInputWidget_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 _Texture_Render(i2 + 112 | 0);
 _InputWidget_RenderCaret(i2, d1);
 return;
}

function _Table_Width(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 1732 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0) + (HEAP32[i1 + 1736 >> 2] | 0) | 0;
}

function _OnReset_1776() {
 if (!(HEAP8[1841572] | 0)) {
  _Mem_Set(1726908, 0, 1536) | 0;
  _Protocol_Reset();
  _FreeMapStates();
 }
 return;
}

function _NF_SetCPE(i1) {
 i1 = i1 | 0;
 _Options_SetBool(43282, i1);
 _GameVersion_Load();
 _NostalgiaScreen_UpdateVersionDisabled();
 return;
}

function _Env_SetWeatherFade(d1) {
 d1 = +d1;
 if (+HEAPF32[466933] != d1) {
  HEAPF32[466933] = d1;
  _Event_RaiseInt(1681184, 7);
 }
 return;
}

function _Env_SetCloudsSpeed(d1) {
 d1 = +d1;
 if (+HEAPF32[466931] != d1) {
  HEAPF32[466931] = d1;
  _Event_RaiseInt(1681184, 5);
 }
 return;
}

function _BindsSourceScreen_ModeGamepad(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[427513] = 353600;
 _NormalBindingsScreen_Show();
 return;
}

function _TextureUrls_HasAccepted(i1) {
 i1 = i1 | 0;
 i1 = _EntryList_Find(1843724, i1, 32) | 0;
 return (31 ? i1 >>> 31 : i1) & 255 ^ 1 | 0;
}

function _Platform_Log3(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _Platform_Log4(i4, i1, i2, i3, 0);
 return;
}

function _GrO_SetMipmaps(i1) {
 i1 = i1 | 0;
 HEAP8[1689081] = i1;
 _Options_SetBool(41088, i1);
 _TexturePack_ExtractCurrent(1) | 0;
 return;
}

function _Gfx_ClearColor(i1) {
 i1 = i1 | 0;
 if ((HEAP32[422309] | 0) != (i1 | 0)) {
  _GL_ClearColor(i1);
  HEAP32[422309] = i1;
 }
 return;
}

function _FreeMapStates() {
 _Mem_Free(HEAP32[443310] | 0);
 HEAP32[443310] = 0;
 _Mem_Free(HEAP32[454516] | 0);
 HEAP32[454516] = 0;
 return;
}

function _MenuInputOverlay_Update(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 i2 = i2 + 420 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + d1;
 return;
}

function _EditHotkeyScreen_Update(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 i2 = i2 + 300 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + d1;
 return;
}

function _CPE_ToggleBlockList(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) _InventoryScreen_Show(); else _InventoryScreen_Hide();
 return;
}

function _BindsSourceScreen_ModeNormal(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[427513] = 15140;
 _NormalBindingsScreen_Show();
 return;
}

function _swapc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = _llvm_bswap_i32(i2 | 0) | 0;
 return ((i1 | 0) == 0 ? i2 : i3) | 0;
}

function _Window_GotClipboardText(i1) {
 i1 = i1 | 0;
 _Window_StoreClipboardText(i1);
 _Event_RaiseInput(1686124, 1002, 0, 15140);
 return;
}

function _TextureUrls_HasDenied(i1) {
 i1 = i1 | 0;
 i1 = _EntryList_Find(1848876, i1, 32) | 0;
 return (31 ? i1 >>> 31 : i1) & 255 ^ 1 | 0;
}

function _SaveLevelScreen_Update(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 i2 = i2 + 512 | 0;
 HEAPF32[i2 >> 2] = +HEAPF32[i2 >> 2] + d1;
 return;
}

function _OnFullscreenChange(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _UpdateWindowBounds();
 HEAP8[1868815] = 1;
 return 0;
}

function _Game_UserSetViewDistance(i1) {
 i1 = i1 | 0;
 HEAP32[3681] = i1;
 _Options_SetInt(32164, i1);
 _Game_SetViewDistance(i1);
 return;
}

function _Classic_RemoveEntity(i1) {
 i1 = i1 | 0;
 i1 = HEAP8[i1 >> 0] | 0;
 if (i1 << 24 >> 24 != -1) _Entities_Remove(i1 & 255);
 return;
}

function _TouchCtrlsScreen_Layout(i1) {
 i1 = i1 | 0;
 _Menu_LayoutButtons(i1 + 120 | 0, 9312, 5);
 _Menu_LayoutBack(i1 + 36 | 0);
 return;
}

function _ListScreen_UpdateEntry(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _ButtonWidget_Set(i1, i3, i2 + 792 | 0);
 return;
}

function _Entity_SetName(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _EntityNames_Delete(i1);
 _String_CopyToRaw(i1 + 260 | 0, 64, i2);
 return;
}

function _TouchOnscreenScreen_Show() {
 HEAP8[1864340] = 1;
 HEAP8[1864342] = 1;
 HEAP32[466084] = 22448;
 _Gui_Add(1864336, 45);
 return;
}

function _TouchMoreScreen_Layout(i1) {
 i1 = i1 | 0;
 _Menu_LayoutButtons(i1 + 120 | 0, 9376, 6);
 _Menu_LayoutBack(i1 + 36 | 0);
 return;
}

function _TextWidget_BuildMesh(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Gfx_Make2DQuad(i2 + 40 | 0, HEAP32[i2 + 68 >> 2] | 0, i1);
 return;
}

function _NostalgiaMenuScreen_Show() {
 HEAP8[1709696] = 1;
 HEAP8[1709698] = 1;
 HEAP32[427423] = 16152;
 _Gui_Add(1709692, 50);
 return;
}

function _MiO_SetReach(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +_Menu_Float(i1);
 HEAPF32[(HEAP32[417347] | 0) + 456 >> 2] = d2;
 return;
}

function _InventoryScreen_IsHotbarActive() {
 var i1 = 0;
 i1 = HEAP32[422387] | 0;
 return ((i1 | 0) == 0 | (i1 | 0) == 1818828) & 1 | 0;
}

function dynCall_vidd(i4, i1, d2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 FUNCTION_TABLE_vidd[i4 & 3](i1 | 0, +d2, +d3);
}

function dynCall_vddi(i4, d1, d2, i3) {
 i4 = i4 | 0;
 d1 = +d1;
 d2 = +d2;
 i3 = i3 | 0;
 FUNCTION_TABLE_vddi[i4 & 1](+d1, +d2, i3 | 0);
}

function _String_AppendBool(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i1, i2 << 24 >> 24 == 0 ? 49102 : 49108);
 return;
}

function _OptionsGroupScreen_Show() {
 HEAP8[1708820] = 1;
 HEAP8[1708822] = 1;
 HEAP32[427204] = 16084;
 _Gui_Add(1708816, 50);
 return;
}

function _MouseStateRelease(i1) {
 i1 = i1 | 0;
 HEAP32[3864] = -1;
 if (HEAP8[1868786 + i1 >> 0] | 0) _MouseStateUpdate(i1, 0);
 return;
}

function _ClassicPauseScreen_Show() {
 HEAP8[1704584] = 1;
 HEAP8[1704586] = 1;
 HEAP32[426145] = 16356;
 _Gui_Add(1704580, 50);
 return;
}

function _ChO_SetChatlines(i1) {
 i1 = i1 | 0;
 HEAP32[422374] = i1;
 _ChatScreen_SetChatlines(i1);
 _Options_SetInt(41257, i1);
 return;
}

function _ThumbstickWidget_Init(i1) {
 i1 = i1 | 0;
 _Widget_Reset(i1);
 HEAP32[i1 >> 2] = 23584;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 return;
}

function _RequestList_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 10;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = i1 + 16;
 return;
}

function _OnCanvasResize(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _UpdateWindowBounds();
 HEAP8[1868815] = 1;
 return 0;
}

function _LoadingScreen_Show(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[460281] = 21980;
 _LoadingScreen_ShowCommon(i2, i1);
 return;
}

function _Gfx_SetFogMode(i1) {
 i1 = i1 | 0;
 if ((HEAP32[3734] | 0) != (i1 | 0)) {
  HEAP32[3734] = i1;
  _SwitchProgram();
 }
 return;
}

function _GL_SetupVbColoured() {
 _glVertexAttribPointer(0, 3, 5126, 0, 16, 0);
 _glVertexAttribPointer(1, 4, 5121, 1, 16, 12);
 return;
}

function _ChatScreen_Show() {
 HEAP32[459310] = -3;
 HEAP32[459296] = 21836;
 HEAP32[455417] = 1837184;
 _Gui_Add(1837184, 15);
 return;
}

function _Block_UNSAFE_GetName(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_FromRaw(i1, 61792 + ((i2 & 65535) << 6) | 0, 64);
 return;
}

function _BlockEditCommand_GetTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _BlockEditCommand_GetInt(i1, 27786, i2, 0, 511) | 0;
}

function _BindsSourceScreen_Show() {
 HEAP8[1711560] = 1;
 HEAP8[1711562] = 1;
 HEAP32[427889] = 16288;
 _Gui_Add(1711556, 50);
 return;
}

function _Window_ProcessEvents(d1) {
 d1 = +d1;
 if (HEAP8[1868815] | 0) {
  HEAP8[1868815] = 0;
  _ProcessPendingResize();
 }
 return;
}

function _UpdateBorderTextures() {
 _MakeBorderTex(1675380, HEAP16[933854] | 0);
 _MakeBorderTex(1675384, HEAP16[933855] | 0);
 return;
}

function _TouchCtrlsScreen_Show() {
 HEAP8[1864980] = 1;
 HEAP8[1864982] = 1;
 HEAP32[466244] = 22516;
 _Gui_Add(1864976, 45);
 return;
}

function _OnResize_2919(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _UpdateWindowBounds();
 HEAP8[1868815] = 1;
 return 1;
}

function _EnvRenderer_SetMode(i1) {
 i1 = i1 | 0;
 HEAP8[1868744] = i1 & 2;
 HEAP8[1868743] = i1 & 1;
 _OnContextRecreated(0);
 return;
}

function _Dat_Format0And1() {
 HEAP32[422204] = 0;
 HEAP32[466930] = -3e4;
 HEAP32[466938] = -13185;
 HEAP32[466939] = -13185;
 return;
}

function _ClassicGenScreen_Show() {
 HEAP8[1711860] = 1;
 HEAP8[1711862] = 1;
 HEAP32[427964] = 16424;
 _Gui_Add(1711856, 50);
 return;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 127](i1 | 0, i2 | 0) | 0;
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function _TouchMoreScreen_Show() {
 HEAP8[1865564] = 1;
 HEAP8[1865566] = 1;
 HEAP32[466390] = 22584;
 _Gui_Add(1865560, 45);
 return;
}

function _TextureUrls_Accept(i1) {
 i1 = i1 | 0;
 _EntryList_Set(1843724, i1, 1841616, 32);
 _EntryList_Save(1843724, 50449);
 return;
}

function _Lighting_ApplyActive() {
 if (!(HEAP8[1868790] | 0)) _ClassicLighting_SetActive(); else _FancyLighting_SetActive();
 return;
}

function _Gui_GetInventoryScale() {
 var d1 = 0.0;
 d1 = +(_GetWindowScale() | 0);
 return +(+_Gui_Scale(+HEAPF32[422378] * .5 * d1));
}

function _ClassicOptionsScreen_RecreateExtra(i1) {
 i1 = i1 | 0;
 _ButtonWidget_SetConst(i1 + 1120 | 0, 44660, i1 + 108 | 0);
 return;
}

function _Chat_Add3(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _Chat_Add4(i4, i1, i2, i3, 0);
 return;
}

function _Animations_Clear() {
 _Mem_Free(HEAP32[247110] | 0);
 HEAP32[247113] = 0;
 HEAP32[247110] = 0;
 HEAP8[1868726] = 0;
 return;
}

function _TouchScreen_Refresh() {
 _Screen_ContextLost(1866184);
 _TouchScreen_InitButtons(1866184);
 _Gui_Refresh(1866184);
 return;
}

function _SetPostProcess(i1) {
 i1 = i1 | 0;
 HEAP32[422315] = i1;
 _DeleteShaders();
 _SwitchProgram();
 _DirtyUniform(31);
 return;
}

function _Menu_RenderBounds() {
 _Gfx_Draw2DGradient(0, 0, HEAP32[466968] | 0, HEAP32[466969] | 0, 1763186712, -1570622669);
 return;
}

function _LocalPlayer_SetLocation(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _LocalInterpComp_SetLocation(i1 + 648 | 0, i2, i1);
 return;
}

function _GuO_SetShadows(i1) {
 i1 = i1 | 0;
 HEAP8[1667321] = i1;
 _Options_SetBool(41459, i1);
 _Event_RaiseVoid(1681704);
 return;
}

function _GenLevelScreen_Show() {
 HEAP8[1706056] = 1;
 HEAP8[1706058] = 1;
 HEAP32[426513] = 15904;
 _Gui_Add(1706052, 50);
 return;
}

function _DeleteStaticVbs() {
 _DeleteSkyVB();
 _DeleteCloudsVB();
 _DeleteSkyboxVB();
 _DeleteSidesVB();
 _DeleteEdgesVB();
 return;
}

function _TouchScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 if (!(HEAP32[422387] | 0)) _Screen_Render2Widgets(i2, d1);
 return;
}

function _TextureUrls_Deny(i1) {
 i1 = i1 | 0;
 _EntryList_Set(1848876, i1, 1841616, 32);
 _EntryList_Save(1848876, 50479);
 return;
}

function _TexIdsOverlay_Show() {
 HEAP8[1712916] = 1;
 HEAP8[1712918] = 1;
 HEAP32[428228] = 16592;
 _Gui_Add(1712912, 30);
 return;
}

function _TabList_Clear() {
 _Mem_Set(1669392, 0, 512) | 0;
 _Mem_Set(1669904, 0, 256) | 0;
 _StringsBuffer_Clear(1670160);
 return;
}

function _NA_SetAnim(i1) {
 i1 = i1 | 0;
 i1 = i1 << 24 >> 24 == 0 & 1;
 HEAP8[1868753] = i1;
 _Options_SetBool(43004, i1);
 return;
}

function _Math_SafeDiv(d1) {
 d1 = +d1;
 var i2 = 0;
 i2 = +Math_abs(+d1) < 9.999999974752427e-07;
 return +(i2 ? 1.0e9 : 1.0 / d1);
}

function _LoadingScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1680664, i1, 39);
 _Event_Unregister(1680924, i1, 408);
 return;
}

function _Java_I32(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 >> 0] | 0) != 73) _Process_Abort2(0, 31851);
 return HEAP32[i1 + 52 >> 2] | 0;
}

function _Game_OnResize(i1) {
 i1 = i1 | 0;
 _Game_UpdateDimensions();
 _Gfx_OnWindowResize();
 _Camera_UpdateProjection();
 return;
}

function _FreeDefaultResources() {
 _Gfx_DeleteDynamicVb(1689248);
 _Gfx_DeleteDynamicVb(1689252);
 _Gfx_DeleteIb(1689232);
 return;
}

function _ZombieModel_Register() {
 _Model_Init(17732);
 HEAP32[4446] = 335;
 HEAP32[4449] = 288;
 _Model_Register(17732);
 return;
}

function _Socket_CheckWritable(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0 - (_interop_SocketWritable(i1 | 0, i2 | 0) | 0) | 0;
}

function _Protocol_Reset() {
 _Classic_Reset();
 _CPE_Reset();
 _BlockDefs_Reset();
 _CustomModels_Reset();
 _WoM_Reset();
 return;
}

function _Gui_UpdateInputGrab() {
 var i1 = 0;
 i1 = _Gui_GetInputGrab() | 0;
 HEAP32[422387] = i1;
 _Camera_CheckFocus();
 return;
}

function _Block_SetName(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_CopyToRaw(61792 + ((i1 & 65535) << 6) | 0, 64, i2);
 return;
}

function _TextureCache_Init() {
 _EntryList_UNSAFE_Load(1854028, 50507) | 0;
 _EntryList_UNSAFE_Load(1859180, 50530) | 0;
 return;
}

function _PauseScreen_Show() {
 HEAP8[1704584] = 1;
 HEAP8[1704586] = 1;
 HEAP32[426145] = 15724;
 _Gui_Add(1704580, 50);
 return;
}

function _Classic_EntityTeleport(i1) {
 i1 = i1 | 0;
 _Classic_ReadAbsoluteLocation(i1 + 1 | 0, HEAP8[i1 >> 0] | 0, -89);
 return;
}

function _ChO_SetAutoScaleChat(i1) {
 i1 = i1 | 0;
 HEAP8[1689552] = i1;
 _Options_SetBool(41285, i1);
 _Gui_LayoutAll();
 return;
}

function _TextureUrls_Init() {
 _EntryList_UNSAFE_Load(1843724, 50449) | 0;
 _EntryList_UNSAFE_Load(1848876, 50479) | 0;
 return;
}

function _TabListOverlay_Show(i1) {
 i1 = i1 | 0;
 HEAP32[455418] = 21768;
 HEAP8[1821725] = i1;
 _Gui_Add(1821672, 17);
 return;
}

function _Screen_LockVb(i1) {
 i1 = i1 | 0;
 return _Gfx_LockDynamicVb(HEAP32[i1 + 12 >> 2] | 0, 1, HEAP32[i1 + 8 >> 2] | 0) | 0;
}

function _NostalgiaMenuScreen_Functionality(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NostalgiaFunctionalityScreen_Show();
 return;
}

function _NetPlayer_SetLocation(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NetInterpComp_SetLocation(i1 + 424 | 0, i2, i1);
 return;
}

function _ListScreen_Show() {
 HEAP8[1698524] = 1;
 HEAP8[1698526] = 1;
 HEAP32[424630] = 15656;
 _Gui_Add(1698520, 50);
 return;
}

function _IsLit_Fast(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _ClassicLighting_IsLit_Fast(i1, i2, i3) | 0;
}

function _HS_SetWOMHacks(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 493 >> 0] = i1;
 _Options_SetBool(42500, i1);
 return;
}

function _HS_SetPushback(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 468 >> 0] = i1;
 _Options_SetBool(42435, i1);
 return;
}

function _HS_SetFullStep(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 469 >> 0] = i1;
 _Options_SetBool(42480, i1);
 return;
}

function _Drawer2D_TextHeight(i1) {
 i1 = i1 | 0;
 return _Font_CalcHeight(HEAP32[i1 + 8 >> 2] | 0, HEAP8[i1 + 12 >> 0] | 0) | 0;
}

function _ChatScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1681964, i1, 25);
 _Event_Unregister(1682484, i1, 194);
 return;
}

function _TextWidget_Init(i1) {
 i1 = i1 | 0;
 _Widget_Reset(i1);
 HEAP32[i1 >> 2] = 22936;
 HEAP32[i1 + 68 >> 2] = -1;
 return;
}

function _TexPackOverlay_GoBackClick(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 + 36 >> 0] = 0;
 _Gui_Refresh(i2);
 return;
}

function _String_Format1(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 _String_Format4(i3, i2, i1, 0, 0, 0);
 return;
}

function _Options_SetBool(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Options_Set(i1, i2 << 24 >> 24 == 0 ? 21156 : 21164);
 return;
}

function _Nbt_WriteDict(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 10;
 return _Nbt_WriteConst(i1 + 1 | 0, i2) | 0;
}

function _MenuScreen_Render2(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 _Menu_RenderBounds();
 _Screen_Render2Widgets(i2, d1);
 return;
}

function _MenuInputOverlay_TextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _InputWidget_SetText(i1 + 220 | 0, i2);
 return 1;
}

function _Mem_Copy(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _Input_Set(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) _Input_SetReleased(i1); else _Input_SetPressed(i1);
 return;
}

function _Gfx_DrawVb_Lines(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[HEAP32[422334] & 127]();
 _glDrawArrays(1, 0, i1 | 0);
 return;
}

function _EditHotkeyScreen_TextChanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _InputWidget_SetText(i1 + 100 | 0, i2);
 return 1;
}

function _Audio_SetVolume(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _interop_AudioVolume(HEAP32[i1 >> 2] | 0, i2 | 0) | 0;
 return;
}

function dynCall_iid(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 return FUNCTION_TABLE_iid[i3 & 15](i1 | 0, +d2) | 0;
}

function _TouchMore_Chat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1865560);
 _ChatScreen_OpenInput(1841616);
 return;
}

function _Mem_Set(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _memset(i1 | 0, i3 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _MapRenderer_Update(d1) {
 d1 = +d1;
 if (HEAP32[424252] | 0) {
  _UpdateSortOrder();
  _UpdateChunks(d1);
 }
 return;
}

function _ListScreen_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 _Menu_RenderBounds();
 _Screen_Render2Widgets(i2, d1);
 return;
}

function _Chat_DisableLogging() {
 HEAP8[1868735] = 0;
 HEAP32[415500] = -321;
 _Chat_AddRaw(25384);
 _CloseLogFile();
 return;
}

function _Input_UpdateTouch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _TryUpdateTouch(i1, i2, i3) | 0;
 return;
}

function _HS_SetSlide(i1) {
 i1 = i1 | 0;
 HEAP8[(HEAP32[417347] | 0) + 492 >> 0] = i1;
 _Options_SetBool(42417, i1);
 return;
}

function _Gui_GetHotbarScale() {
 var d1 = 0.0;
 d1 = +(_GetWindowScale() | 0);
 return +(+_Gui_Scale(+HEAPF32[422376] * d1));
}

function _String_Copy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 4 >> 1] = 0;
 _String_AppendString(i1, i2);
 return;
}

function _Stream_FilePosition(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _File_Position(HEAP32[i2 + 32 >> 2] | 0, i1) | 0;
}

function _Sounds_Init() {
 _Audio_SetSounds(_Options_GetInt(39597, 0, 100, 0) | 0);
 _Event_Register(1678844, 0, 9);
 return;
}

function _Selections_ContextLost(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(1841512);
 _Gfx_DeleteDynamicVb(1841516);
 return;
}

function _ParticlesPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Game_UpdateTexture(1726900, i2, i1, 0, 0) | 0;
 return;
}

function _MouseStatePress(i1) {
 i1 = i1 | 0;
 HEAPF32[423809] = 0.0;
 HEAP32[3864] = -1;
 _MouseStateUpdate(i1, 1);
 return;
}

function _Logger_SimpleWarn2(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Logger_Warn2(i3, i1, i2, 69);
 return;
}

function _Int_ValidChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (i1 << 24 >> 24 == 45 | (i1 + -48 & 255) < 10) & 1 | 0;
}

function _InputWidget_Free(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1 + 112 | 0);
 _Gfx_DeleteTexture(i1 + 172 | 0);
 return;
}

function _CPE_PluginMessage(i1) {
 i1 = i1 | 0;
 _Event_RaisePluginMessage(1688464, HEAP8[i1 >> 0] | 0, i1 + 1 | 0);
 return;
}

function _lequal(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return (d1 < d2 | +Math_abs(+(d1 - d2)) < 1.0000000474974513e-03) & 1 | 0;
}

function _Stream_GetU16_LE(i1) {
 i1 = i1 | 0;
 return ((HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0)) & 65535 | 0;
}

function _Stream_GetU16_BE(i1) {
 i1 = i1 | 0;
 return ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) & 65535 | 0;
}

function _MenuInputOverlay_KeyPress(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _InputWidget_Append(i2 + 220 | 0, i1);
 return 1;
}

function _HS_GetJump(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +_LocalPlayer_JumpHeight(HEAP32[417347] | 0), 3);
 return;
}

function _Gfx_BindTexture(i1) {
 i1 = i1 | 0;
 _glBindTexture(3553, ((i1 | 0) == 0 ? HEAP32[422311] | 0 : i1) | 0);
 return;
}

function _Entity_GetPickingBounds(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _AABB_Offset(i1, i2 + 56 | 0, i2 + 4 | 0);
 return;
}

function _Audio_SetSounds(i1) {
 i1 = i1 | 0;
 HEAP32[248134] = i1;
 if (!i1) _Sounds_Stop(); else _Sounds_Start();
 return;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 255](i1 | 0, i2 | 0);
}

function _TouchMore_Screen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1865560);
 _Game_ToggleFullscreen();
 return;
}

function _Stream_DefaultWrite(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return -857812990;
}

function _Random_Range_1727(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (_Random_Next(978296, i1 - i2 | 0) | 0) + i2 | 0;
}

function _Platform_Log2(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Platform_Log4(i3, i1, i2, 0, 0);
 return;
}

function _OnReset_2222() {
 if (HEAP16[11196] | 0) {
  HEAP16[11196] = 0;
  _TexturePack_ExtractCurrent(0) | 0;
 }
 return;
}

function _OnFree_97() {
 _CloseLogFile();
 _ClearCPEMessages();
 _ClearChatLogs();
 _StringsBuffer_Clear(1662060);
 return;
}

function _NostalgiaMenuScreen_Appearance(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NostalgiaAppearanceScreen_Show();
 return;
}

function _MiO_GetReach(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[(HEAP32[417347] | 0) + 456 >> 2], 2);
 return;
}

function _Gfx_SetVSync(i1) {
 i1 = i1 | 0;
 HEAP8[1868769] = i1;
 if (HEAP8[1689083] | 0) _GLContext_SetVSync(i1);
 return;
}

function _GeneratingScreen_Free(i1) {
 i1 = i1 | 0;
 _LoadingScreen_Free(i1);
 _Event_Unregister(1676764, 0, 409);
 return;
}

function _Float_Default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendFloat(i2, +HEAPF32[i1 + 12 >> 2], 3);
 return;
}

function _CalcRainAlphaAt(d1) {
 d1 = +d1;
 return +((d1 * .05000000074505806 * d1 - d1 * 7.0) * +HEAPF32[466933] + 178.0);
}

function _Texture_Render(i1) {
 i1 = i1 | 0;
 _Gfx_BindTexture(HEAP32[i1 >> 2] | 0);
 _Gfx_Draw2DTexture(i1, -1);
 return;
}

function _Stream_DefaultRead(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return -857812990;
}

function _SkyboxPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Game_UpdateTexture(1675432, i2, i1, 0, 0) | 0;
 return;
}

function _Random_Range_650(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (_Random_Next(978288, i1 - i2 | 0) | 0) + i2 | 0;
}

function _Menu_SwitchBindsClassicHacks(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicHacksBindingsScreen_Show();
 return;
}

function _Logger_SysWarn2(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Logger_Warn2(i3, i1, i2, 50);
 return;
}

function _HS_GetSpeed(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[(HEAP32[417347] | 0) + 464 >> 2], 2);
 return;
}

function _Gui_ShowPauseMenu() {
 if (!(HEAP8[1689494] | 0)) _PauseScreen_Show(); else _ClassicPauseScreen_Show();
 return;
}

function _CombinedNoise_Init(i1) {
 i1 = i1 | 0;
 _OctaveNoise_Init(i1, 8);
 _OctaveNoise_Init(i1 + 4100 | 0, 8);
 return;
}

function _CloudsPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Game_UpdateTexture(1675428, i2, i1, 0, 0) | 0;
 return;
}

function _TexIdsOverlay_ContextLost(i1) {
 i1 = i1 | 0;
 _Screen_ContextLost(i1);
 _TextAtlas_Free(i1 + 52 | 0);
 return;
}

function _Stream_FileLength(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _File_Length(HEAP32[i2 + 32 >> 2] | 0, i1) | 0;
}

function _RainParticle_CanPass(i1) {
 i1 = i1 | 0;
 return (HEAP8[1006372 + (i1 & 65535) >> 0] | 1) << 24 >> 24 == 5 | 0;
}

function _Physics_PlaceWater(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _TickQueue_Enqueue(1656384, i2 | 671088640);
 return;
}

function _Physics_PlaceLava(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _TickQueue_Enqueue(1656360, i2 | -268435456);
 return;
}

function _OptionsGroupScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 36 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _NostalgiaScreen_RecreateExtra(i1) {
 i1 = i1 | 0;
 _TextWidget_SetConst(1698448, 43222, i1 + 120 | 0);
 return;
}

function _Gfx_SetFaceCulling(i1) {
 i1 = i1 | 0;
 if (!(i1 << 24 >> 24)) _glDisable(2884); else _glEnable(2884);
 return;
}

function _GeneratingScreen_Init(i1) {
 i1 = i1 | 0;
 _LoadingScreen_Init(i1);
 _Event_Register(1676764, 0, 409);
 return;
}

function _Float_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_Format2(i2, 51524, i1 + 4 | 0, i1 + 8 | 0);
 return;
}

function _Window_DisableRawMouse() {
 _RegrabMouse();
 _emscripten_exit_pointerlock() | 0;
 HEAP8[1868648] = 0;
 return;
}

function _TouchCtrlsScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 540 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _TexIdsOverlay_OnAtlasChanged(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 7 >> 0] = 1;
 _TexIdsOverlay_Layout(i1);
 return;
}

function _Stream_PortionLength(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 + 40 >> 2];
 return 0;
}

function _Stream_FileSkip(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _File_Seek(HEAP32[i2 + 32 >> 2] | 0, i1, 1) | 0;
}

function _Stream_FileSeek(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _File_Seek(HEAP32[i2 + 32 >> 2] | 0, i1, 0) | 0;
}

function _SnowPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Game_UpdateTexture(1675440, i2, i1, 0, 0) | 0;
 return;
}

function _Screen_InputDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (i2 + -1 | 0) >>> 0 > 23 | 0;
}

function _RainPngProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Game_UpdateTexture(1675436, i2, i1, 0, 0) | 0;
 return;
}

function _GetOnscreenButtons() {
 return _Options_GetInt(51050, 0, 2147483647, (HEAP8[1841572] | 0) == 0 ? 81 : 80) | 0;
}

function _EntityNames_Delete(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1 + 324 | 0);
 HEAP16[i1 + 328 >> 1] = 0;
 return;
}

function _Stream_MemoryLength(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 + 40 >> 2];
 return 0;
}

function _Sounds_Fail(i1) {
 i1 = i1 | 0;
 _Audio_Warn(i1, 24623);
 _Chat_AddRaw(24638);
 _Audio_SetSounds(0);
 return;
}

function _PhysicsComp_TouchesSlipperyIce(i1) {
 i1 = i1 | 0;
 return (HEAP8[1001764 + (i1 & 65535) >> 0] | 0) == 4 | 0;
}

function _MenuInputOverlay_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 40 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _IsLit(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _ClassicLighting_IsLit(i1, i2, i3) | 0;
}

function _Int_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_Format2(i2, 51497, i1 + 4 | 0, i1 + 8 | 0);
 return;
}

function _Gfx_SetDepthTest(i1) {
 i1 = i1 | 0;
 if (!(i1 << 24 >> 24)) _glDisable(2929); else _glEnable(2929);
 return;
}

function _Gfx_RecreateContext() {
 HEAP8[1689080] = 0;
 _Platform_LogConst(34517);
 _Event_RaiseVoid(1678584);
 return;
}

function _GLContext_OnLost(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _Gfx_LoseContext(53472);
 return 1;
}

function _RegrabMouse() {
 if ((HEAP8[1867881] | 0) != 0 & (HEAP8[1867880] | 0) != 0) _CentreMousePosition();
 return;
}

function _Random_Range(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (_Random_Next(978184, i1 - i2 | 0) | 0) + i2 | 0;
}

function _OnFree_2221() {
 _OnContextLost_2250(0);
 _Atlas2D_Free();
 HEAP16[11196] = 0;
 HEAP32[460930] = 0;
 return;
}

function _Int_Default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendInt(i2, HEAP32[i1 + 12 >> 2] | 0);
 return;
}

function _Gui_Remove(i1) {
 i1 = i1 | 0;
 if ((_Gui_RemoveCore(i1) | 0) << 24 >> 24) _Gui_OnScreensChanged();
 return;
}

function _Gfx_GetUIOptions(i1) {
 i1 = i1 | 0;
 _MenuOptionsScreen_AddEnum(i1, 34898, 14972, 2, 3, 217, 0);
 return 0;
}

function _ChatInputWidget_GetMaxLines() {
 return ((HEAP8[1868754] | 0) == 0 & (HEAP8[1841576] | 0) != 0 ? 3 : 1) | 0;
}

function _TouchMore_Menu(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1865560);
 _Gui_ShowPauseMenu();
 return;
}

function _TexPackOverlay_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 56 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _OnscreenKeyboard_Close() {
 HEAP8[1868814] = 0;
 if (HEAP8[1868784] | 0) _interop_CloseKeyboard();
 return;
}

function _OnContextRecreated(i1) {
 i1 = i1 | 0;
 _Gfx_SetFog((HEAP8[1868743] | 0) == 0 & 1);
 _UpdateAll();
 return;
}

function _Menu_SwitchBindsClassic_1595(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicBindingsScreen_Show();
 return;
}

function _MapState_SkipHeader(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 44801 >> 0] = 1;
 HEAP32[i1 + 44816 >> 2] = 4;
 return;
}

function _LocalPlayer_JumpHeight(i1) {
 i1 = i1 | 0;
 return +(+_PhysicsComp_CalcMaxHeight(+HEAPF32[i1 + 740 >> 2]));
}

function _KeyBindsScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 84 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _InputWidget_EndKey(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 160 >> 2] = -1;
 _InputWidget_UpdateCaret(i1);
 return;
}

function _Http_AsyncGetHeaders(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _Http_Add(i2, i1, 1, 0, 0, 0, 0, 0) | 0;
}

function _GenLevelScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 36 | 0);
 _Screen_ContextLost(i1);
 return;
}

function dynCall_vid(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 FUNCTION_TABLE_vid[i3 & 63](i1 | 0, +d2);
}

function b19(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(19);
}

function _SetAlphaBlend(i1) {
 i1 = i1 | 0;
 if (!(i1 << 24 >> 24)) _glDisable(3042); else _glEnable(3042);
 return;
}

function _OnInit_2164() {
 _Options_Get(49535, 22372, 1868813);
 if (HEAP8[1868754] | 0) HEAP16[11188] = 0;
 return;
}

function _NF_GetVersion(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i2, HEAP32[422246] | 0);
 return;
}

function _Math_CosF(d1) {
 d1 = +d1;
 d1 = d1 * .15915494309189535 + .25;
 return +(+_SinStage3(d1 - +_Floord(d1)));
}

function _LoadingScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 36 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _InventoryScreen_OnBlockChanged(i1) {
 i1 = i1 | 0;
 _TableWidget_OnInventoryChanged(i1 + 48 | 0);
 return;
}

function _Hex_Default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _PackedCol_ToHex(i2, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function _TouchMore_Take(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1865560);
 HEAP8[1868750] = 1;
 return;
}

function _TextWidget_Add(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TextWidget_Init(i2);
 _AddWidget(i1, i2);
 return;
}

function _LocalPlayer_IsSolidCollide(i1) {
 i1 = i1 | 0;
 return (HEAP8[1000996 + (i1 & 65535) >> 0] | 0) == 2 | 0;
}

function _HotbarWidget_Free(i1) {
 i1 = i1 | 0;
 if (HEAP8[1689553] | 0) _Gfx_DeleteTexture(i1 + 124 | 0);
 return;
}

function _EnvRenderer_ShouldRenderSkybox() {
 return (HEAP32[418858] | 0) != 0 & (HEAP8[1868743] | 0) == 0 & 1 | 0;
}

function _Entity_GetBounds(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _AABB_Make(i1, i2 + 4 | 0, i2 + 92 | 0);
 return;
}

function _Chat_Add2(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Chat_Add4(i3, i1, i2, 0, 0);
 return;
}

function _TouchScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 44 | 0);
 _Screen_ContextLost(i1);
 return;
}

function _PhysicsComp_TouchesLiquid(i1) {
 i1 = i1 | 0;
 return (HEAP8[1000996 + (i1 & 65535) >> 0] | 0) == 1 | 0;
}

function _Model_UnlockVB() {
 _Gfx_UnlockDynamicVb(HEAP32[428720] | 0);
 HEAP32[428693] = HEAP32[428721];
 return;
}

function _ListScreen_ContextLost(i1) {
 i1 = i1 | 0;
 _Screen_ContextLost(i1);
 _Font_Free(i1 + 792 | 0);
 return;
}

function _Http_AsyncGetData(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _Http_Add(i2, i1, 0, 0, 0, 0, 0, 0) | 0;
}

function _GenLevelScreen_Flatgrass(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GenLevelScreen_Gen(i1, 14876);
 return;
}

function _Widget_PointerMove(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}

function _Platform_Init() {
 _interop_InitModule();
 _interop_InitFilesystem();
 _interop_InitSockets();
 return;
}

function _Options_SaveIfChanged() {
 if (HEAP32[430435] | 0) {
  _Options_Reload();
  _SaveOptions();
 }
 return;
}

function _Menu_SwitchClassicOptions(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicOptionsScreen_Show();
 return;
}

function _HUDScreen_Show() {
 HEAP32[454541] = 21656;
 HEAP32[454706] = 1818164;
 _Gui_Add(1818164, 10);
 return;
}

function _EntityRenderers_Init() {
 _Event_Register(1678324, 0, 197);
 _Event_Register(1681704, 0, 198);
 return;
}

function _ZoomScrollReleased(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Camera_SetFov(HEAP32[414164] | 0);
 return;
}

function _TouchScreen_Show() {
 HEAP32[466546] = 22652;
 if (HEAP8[1689553] | 0) _Gui_Add(1866184, 25);
 return;
}

function _OnInit_1065() {
 _Event_Register(1683524, 0, 225);
 _ClearTouches();
 _InputBind_Load(15140);
 return;
}

function _NostalgiaScreen_UpdateVersionDisabled() {
 _Widget_SetDisabled(1697688, HEAPU8[1688988] | 0);
 return;
}

function _Menu_SwitchNostalgia_1504(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NostalgiaMenuScreen_Show();
 return;
}

function _Menu_SwitchBindsClassic(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicBindingsScreen_Show();
 return;
}

function _Logger_Log(i1) {
 i1 = i1 | 0;
 _Platform_Log(HEAP32[i1 >> 2] | 0, HEAPU16[i1 + 4 >> 1] | 0);
 return;
}

function _ListScreen_MoveBackwards(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _ListScreen_PageClick(i2, 0);
 return;
}

function _Gfx_EndFrame() {
 if (!((_GLContext_SwapBuffers() | 0) << 24 >> 24)) _Gfx_LoseContext(34609);
 return;
}

function _EntryList_UNSAFE_Load(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _EntryList_Load(i2, i1, 0, 0) | 0;
}

function _TouchScreen_ChatClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ChatScreen_OpenInput(1841616);
 return;
}

function _SysFont_SetDefault(i1) {
 i1 = i1 | 0;
 _String_Copy(22372, i1);
 _Event_RaiseVoid(1681704);
 return;
}

function _String_ValidString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAPU16[i2 + 4 >> 1] | 0) < 65 | 0;
}

function _MenuInputOverlay_OK(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _MenuInputOverlay_EnterInput(i1);
 return;
}

function _Math_Floor(d1) {
 d1 = +d1;
 var i2 = 0;
 i2 = ~~d1;
 return ((+(i2 | 0) > d1) << 31 >> 31) + i2 | 0;
}

function _ListScreen_MoveForwards(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _ListScreen_PageClick(i2, 1);
 return;
}

function _Gfx_FreeState() {
 _FreeDefaultResources();
 _DeleteShaders();
 _Gfx_DeleteTexture(1689244);
 return;
}

function _GeneratingScreen_Show() {
 HEAP32[460281] = 22048;
 _LoadingScreen_ShowCommon(22116, 22124);
 return;
}

function _GenLevelScreen_Notchy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GenLevelScreen_Gen(i1, 14884);
 return;
}

function _CreeperModel_Register() {
 _Model_Init(19596);
 HEAP32[4915] = 144;
 _Model_Register(19596);
 return;
}

function _ChickenModel_Register() {
 _Model_Init(19968);
 HEAP32[5008] = 160;
 _Model_Register(19968);
 return;
}

function _Window_SetMinFrameTime(d1) {
 d1 = +d1;
 _emscripten_set_main_loop_timing(0, ~~d1 | 0) | 0;
 return;
}

function _SpiderModel_Register() {
 _Model_Init(17840);
 HEAP32[4476] = 264;
 _Model_Register(17840);
 return;
}

function _SpecialInputWidget_Render(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 _Texture_Render(i2 + 60 | 0);
 return;
}

function _Screen_TPointer(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 1;
}

function _Screen_FPointer(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}

function _OnFree_358() {
 _OnContextLost_362(0);
 _Mem_Free(HEAP32[418844] | 0);
 HEAP32[418844] = 0;
 return;
}

function _Menu_SwitchClassicGenLevel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicGenScreen_Show();
 return;
}

function _Menu_SwitchBindsNormal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NormalBindingsScreen_Show();
 return;
}

function _Menu_SwitchBindsHotbar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _HotbarBindingsScreen_Show();
 return;
}

function _Math_SinF(d1) {
 d1 = +d1;
 d1 = d1 * .15915494309189535;
 return +(+_SinStage3(d1 - +_Floord(d1)));
}

function _IsometricDrawer_EndBatch() {
 return ((HEAP32[424238] | 0) - (HEAP32[424239] | 0) | 0) / 24 | 0 | 0;
}

function _GetHoldDesc(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 0 ? 51115 : (i1 | 0) == 1 ? 51091 : 51104) | 0;
}

function _CustomModel_GetNameY(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[(HEAP32[i1 + 48 >> 2] | 0) + 140 >> 2]);
}

function _ChatScreen_OnInputTextChanged(i1) {
 i1 = i1 | 0;
 _ChatScreen_UpdateChatYOffsets(1837184);
 return;
}

function _Widget_PointerUp(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}

function _Widget_Pointer(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}

function _ShowDialogCore(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _interop_ShowDialog(i2 | 0, i1 | 0);
 return;
}

function _SheepModel_Register() {
 _Model_Init(19152);
 HEAP32[4804] = 288;
 _Model_Register(19152);
 return;
}

function _Screen_PointerUp(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}

function _Platform_EncodePath(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_EncodeUtf8(i1, i2) | 0;
 return;
}

function _NoFurModel_Register() {
 _Model_Init(18516);
 HEAP32[4645] = 144;
 _Model_Register(18516);
 return;
}

function _MiO_SetPhysics(i1) {
 i1 = i1 | 0;
 _Physics_SetEnabled(i1);
 _Options_SetBool(42728, i1);
 return;
}

function _Menu_SwitchOptions_1410(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _OptionsGroupScreen_Show();
 return;
}

function _GetTapDesc(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 0 ? 51149 : (i1 | 0) == 1 ? 51127 : 51139) | 0;
}

function _CustomModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[(HEAP32[i1 + 48 >> 2] | 0) + 144 >> 2]);
}

function _CustomModel_Get(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) > 63 ? 0 : 364768 + (i1 * 6848 | 0) | 0) | 0;
}

function _ClassicGenScreen_Medium(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicGenScreen_Gen(256);
 return;
}

function _TouchScreen_SwitchClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Inventory_SwitchHotbar();
 return;
}

function _RawDpiScale(i1) {
 i1 = i1 | 0;
 return ~~(+_emscripten_get_device_pixel_ratio() * +(i1 | 0)) | 0;
}

function _Process_Exit(i1) {
 i1 = i1 | 0;
 _Window_Free();
 _emscripten_cancel_main_loop();
 _exit(i1 | 0);
}

function _Physics_SetEnabled(i1) {
 i1 = i1 | 0;
 HEAP8[1652260] = i1;
 _Physics_OnNewMapLoaded(0);
 return;
}

function _NA_SetClassicChat(i1) {
 i1 = i1 | 0;
 HEAP8[1689495] = i1;
 _Options_SetBool(42982, i1);
 return;
}

function _MiO_SetSensitivity(i1) {
 i1 = i1 | 0;
 HEAP32[414138] = i1;
 _Options_SetInt(51194, i1);
 return;
}

function _Menu_SwitchBindsOther(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _OtherBindingsScreen_Show();
 return;
}

function _Menu_SwitchBindsMouse(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _MouseBindingsScreen_Show();
 return;
}

function _Menu_SwitchBindsHacks(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _HacksBindingsScreen_Show();
 return;
}

function _ClassicGenScreen_Small(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicGenScreen_Gen(128);
 return;
}

function _Atlas1D_Bind(i1) {
 i1 = i1 | 0;
 _Gfx_BindTexture(HEAP32[1841648 + (i1 << 2) >> 2] | 0);
 return;
}

function b7(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(7);
 return 0;
}

function _Window_Free() {
 _Window_ExitFullscreen() | 0;
 _Window_SetSize(0, 0);
 _UnhookEvents();
 return;
}

function _Table_Y(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 8 >> 2] | 0) - (HEAP32[i1 + 1740 >> 2] | 0) | 0;
}

function _Table_X(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i1 + 1732 >> 2] | 0) | 0;
}

function _PigModel_Register() {
 _Model_Init(19224);
 HEAP32[4822] = 144;
 _Model_Register(19224);
 return;
}

function _NA_SetClassicInv(i1) {
 i1 = i1 | 0;
 HEAP8[1689503] = i1;
 _Options_SetBool(42955, i1);
 return;
}

function _Modern_PrePrepareChunk() {
 _DefaultPrePrepateChunk();
 HEAP32[414122] = HEAP32[414121];
 return;
}

function _Menu_SwitchNostalgia(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _NostalgiaMenuScreen_Show();
 return;
}

function _LoadingScreen_MapLoading(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 HEAPF32[i2 + 48 >> 2] = d1;
 return;
}

function _Hex_ValidString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAPU16[i2 + 4 >> 1] | 0) < 7 | 0;
}

function _Cotangent(d1) {
 d1 = +d1;
 var d2 = 0.0;
 d2 = +_Math_CosF(d1);
 return +(d2 / +_Math_SinF(d1));
}

function _ClassicGenScreen_Huge(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ClassicGenScreen_Gen(512);
 return;
}

function _ChO_SetClickable(i1) {
 i1 = i1 | 0;
 HEAP8[1689500] = i1;
 _Options_SetBool(41226, i1);
 return;
}

function _Window_ExitFullscreen() {
 _emscripten_exit_fullscreen() | 0;
 _UpdateWindowBounds();
 return 0;
}

function _TouchCtrls_Onscreen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TouchOnscreenScreen_Show();
 return;
}

function _TiltComp_Init(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 >> 2] = 1.0;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 return;
}

function _SinStage2(d1) {
 d1 = +d1;
 d1 = +_SinStage1(d1 * 4.0);
 return +(d1 * (3.0 - d1 * (d1 * 4.0)));
}

function _NormDevice_IsPressed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP8[1868476 + i2 >> 0] | 0;
}

function _Gfx_OnWindowResize() {
 _Gfx_SetViewport(0, 0, HEAP32[244558] | 0, HEAP32[244559] | 0);
 return;
}

function _FreeParts() {
 _Mem_Free(HEAP32[424256] | 0);
 HEAP32[424256] = 0;
 HEAP32[424257] = 0;
 return;
}

function _ClO_SetAnaglyph(i1) {
 i1 = i1 | 0;
 HEAP8[1868758] = i1;
 _Options_SetBool(39610, i1);
 return;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 63](i1 | 0) | 0;
}

function _OnInit_96() {
 var i1 = 0;
 i1 = _Options_GetBool(41244, 0) | 0;
 HEAP8[1868735] = i1;
 return;
}

function _MiO_SetViewBob(i1) {
 i1 = i1 | 0;
 HEAP8[1868759] = i1;
 _Options_SetBool(39573, i1);
 return;
}

function _HS_SetClipping(i1) {
 i1 = i1 | 0;
 HEAP8[1656557] = i1;
 _Options_SetBool(42539, i1);
 return;
}

function _GuO_SetTabAuto(i1) {
 i1 = i1 | 0;
 HEAP8[1689501] = i1;
 _Options_SetBool(41438, i1);
 return;
}

function _GuO_SetShowFPS(i1) {
 i1 = i1 | 0;
 HEAP8[1689502] = i1;
 _Options_SetBool(39585, i1);
 return;
}

function _GuO_SetInventory(i1) {
 i1 = i1 | 0;
 _ChatOptionsScreen_SetScale(i1, 1689512, 41499);
 return;
}

function _GuO_SetCrosshair(i1) {
 i1 = i1 | 0;
 _ChatOptionsScreen_SetScale(i1, 1689516, 41480);
 return;
}

function _DisconnectScreen_OnQuit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Window_RequestClose();
 return;
}

function _ClO_SetViewBob(i1) {
 i1 = i1 | 0;
 HEAP8[1868759] = i1;
 _Options_SetBool(39573, i1);
 return;
}

function _ClO_SetShowFPS(i1) {
 i1 = i1 | 0;
 HEAP8[1689502] = i1;
 _Options_SetBool(39585, i1);
 return;
}

function _ChO_SetChatScale(i1) {
 i1 = i1 | 0;
 _ChatOptionsScreen_SetScale(i1, 1689508, 41271);
 return;
}

function _BindReleased_DeleteBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _MouseStateRelease(0);
 return;
}

function _TouchScreen_MoreClick(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TouchMoreScreen_Show();
 return;
}

function _Platform_Log1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Platform_Log4(i2, i1, 0, 0, 0);
 return;
}

function _OnReset_1969() {
 if (!(HEAP8[1841572] | 0)) {
  HEAP32[460399] = 0;
  _OnClose();
 }
 return;
}

function _MiO_SetSounds(i1) {
 i1 = i1 | 0;
 _Options_SetInt(39597, i1);
 _Audio_SetSounds(i1);
 return;
}

function _MiO_SetInvert(i1) {
 i1 = i1 | 0;
 HEAP8[1656558] = i1;
 _Options_SetBool(39644, i1);
 return;
}

function _MiO_SetCamera(i1) {
 i1 = i1 | 0;
 HEAP8[1656556] = i1;
 _Options_SetBool(42714, i1);
 return;
}

function _Menu_SwitchTexPacks(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TexturePackScreen_Show();
 return;
}

function _Menu_SwitchOptions(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _OptionsGroupScreen_Show();
 return;
}

function _Inventory_SwitchHotbar() {
 _Inventory_SetHotbarIndex((HEAP32[424236] | 0) == 0 & 1);
 return;
}

function _HS_SetLiquids(i1) {
 i1 = i1 | 0;
 HEAP8[1868749] = i1;
 _Options_SetBool(42457, i1);
 return;
}

function _Gfx_ClearBuffers(i1) {
 i1 = i1 | 0;
 _glClear(i1 << 7 & 256 | i1 << 14 & 16384 | 0);
 return;
}

function _Gen_Reset() {
 HEAPF32[422259] = 0.0;
 HEAP32[422258] = 1868813;
 HEAP8[1868762] = 0;
 return;
}

function _EuclidianMod(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(d1 - +(_Math_Floor(d1 / d2) | 0) * d2);
}

function _ES_GetWeatherSpeed(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[466932], 2);
 return;
}

function _ClO_SetInvert(i1) {
 i1 = i1 | 0;
 HEAP8[1656558] = i1;
 _Options_SetBool(39644, i1);
 return;
}

function _ChatScreen_MouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return HEAPU8[i2 + 4 >> 0] | 0 | 0;
}

function _CPE_ExtRemovePlayerName(i1) {
 i1 = i1 | 0;
 _TabList_Remove(HEAP8[i1 + 1 >> 0] | 0);
 return;
}

function _BindReleased_PlaceBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _MouseStateRelease(1);
 return;
}

function _Audio_SetMusic(i1) {
 i1 = i1 | 0;
 HEAP32[248135] = i1;
 if (i1 | 0) _Music_Start();
 return;
}

function _OnPackChanged(i1) {
 i1 = i1 | 0;
 _Animations_Clear();
 _Animations_IsDefaultZip();
 return;
}

function _NF_SetCustom(i1) {
 i1 = i1 | 0;
 HEAP8[1868756] = i1;
 _Options_SetBool(43299, i1);
 return;
}

function _MiO_GetCameraMass(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[414162], 2);
 return;
}

function _Menu_SwitchSaveLevel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SaveLevelScreen_Show();
 return;
}

function _Menu_SwitchLoadLevel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _LoadLevelScreen_Show();
 return;
}

function _Menu_SwitchHacks(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _HacksSettingsScreen_Show();
 return;
}

function _Menu_SwitchGfx(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GraphicsOptionsScreen_Show();
 return;
}

function _IsWaterCollide(i1) {
 i1 = i1 | 0;
 return (HEAP8[1001764 + (i1 & 65535) >> 0] | 0) == 5 | 0;
}

function _InventoryScreen_OnUpdateTitle(i1) {
 i1 = i1 | 0;
 _InventoryScreen_UpdateTitle(i1);
 return;
}

function _Gui_OnScreensChanged() {
 _Gui_UpdateInputGrab();
 _InputHandler_OnScreensChanged();
 return;
}

function _GetCachedETag(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GetCachedTag(i1, i2, 1854028);
 return;
}

function _ES_GetCloudsSpeed(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[466931], 2);
 return;
}

function _BindReleased_PickBlock(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _MouseStateRelease(2);
 return;
}

function dynCall_di(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_di[i2 & 31](i1 | 0);
}

function _World_SetMapUpper(i1) {
 i1 = i1 | 0;
 HEAP32[244731] = i1;
 HEAP32[244744] = 1023;
 return;
}

function _TouchOnscreen_More(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TouchCtrlsScreen_Show();
 return;
}

function _String_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i2, 51553);
 return;
}

function _Random_Range_86(i1) {
 i1 = i1 | 0;
 return (_Random_Next(978192, 4 - i1 | 0) | 0) + i1 | 0;
}

function _PauseScreenBase_Quit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Window_RequestClose();
 return;
}

function _OnContextLost_2250(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1689082] | 0)) _Atlas1D_Free();
 return;
}

function _MiO_SetMusic(i1) {
 i1 = i1 | 0;
 _Options_SetInt(39656, i1);
 _Audio_SetMusic(i1);
 return;
}

function _Menu_SwitchHotkeys(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _HotkeyListScreen_Show();
 return;
}

function _IsRopeCollide(i1) {
 i1 = i1 | 0;
 return (HEAP8[1001764 + (i1 & 65535) >> 0] | 0) == 7 | 0;
}

function _IsLavaCollide(i1) {
 i1 = i1 | 0;
 return (HEAP8[1001764 + (i1 & 65535) >> 0] | 0) == 6 | 0;
}

function _GuO_SetHotbar(i1) {
 i1 = i1 | 0;
 _ChatOptionsScreen_SetScale(i1, 1689504, 41518);
 return;
}

function _GuO_GetInventory(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[422378], 1);
 return;
}

function _GuO_GetCrosshair(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[422379], 1);
 return;
}

function _ChO_GetChatScale(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[422377], 1);
 return;
}

function _UnlockVb() {
 _glBufferData(34962, HEAP32[422335] | 0, HEAP32[422336] | 0, 35044);
 return;
}

function _TouchesSolid(i1) {
 i1 = i1 | 0;
 return (HEAP8[1000996 + (i1 & 65535) >> 0] | 0) == 2 | 0;
}

function _OnInit_51() {
 HEAP8[1868729] = 1;
 _Event_Register(1676764, 0, 192);
 _OnReset();
 return;
}

function _NF_SetTexs(i1) {
 i1 = i1 | 0;
 HEAP8[1868757] = i1;
 _Options_SetBool(43322, i1);
 return;
}

function _NA_SetOpts(i1) {
 i1 = i1 | 0;
 HEAP8[1689494] = i1;
 _Options_SetBool(42884, i1);
 return;
}

function _NA_SetList(i1) {
 i1 = i1 | 0;
 HEAP8[1689493] = i1;
 _Options_SetBool(42909, i1);
 return;
}

function _NA_SetHand(i1) {
 i1 = i1 | 0;
 HEAP8[1714762] = i1;
 _Options_SetBool(46175, i1);
 return;
}

function _Menu_SwitchPause_1430(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_ShowPauseMenu();
 return;
}

function _Menu_SwitchGenLevel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GenLevelScreen_Show();
 return;
}

function _Logger_SimpleWarn(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Logger_Warn(i2, i1, 69);
 return;
}

function _Gui_ShowDefault() {
 _HUDScreen_Show();
 _ChatScreen_Show();
 _TouchScreen_Show();
 return;
}

function _Gui_RefreshAll() {
 _LoseAllScreens();
 _OnContextRecreated_865(0);
 _OnResize(0);
 return;
}

function _Game_SetMinFrameTime(d1) {
 d1 = +d1;
 if (d1 != 0.0) _Window_SetMinFrameTime(d1);
 return;
}

function _ClassicLighting_FreeState() {
 _Mem_Free(HEAP32[424246] | 0);
 HEAP32[424246] = 0;
 return;
}

function _ZLibHeader_Init(i1) {
 i1 = i1 | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP8[i1 + 1 >> 0] = 0;
 return;
}

function _Seed_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i2, 51509);
 return;
}

function _SaveOptions() {
 _EntryList_Save(1716580, 46506);
 _StringsBuffer_Clear(1721732);
 return;
}

function _ResetPartCounts() {
 _memset(357744, 0, 2048) | 0;
 _memset(359792, 0, 2048) | 0;
 return;
}

function _Process_Abort2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Logger_DoAbort(i2, i1, 0);
 return;
}

function _Platform_LogConst(i1) {
 i1 = i1 | 0;
 _Platform_Log(i1, _String_Length(i1) | 0);
 return;
}

function _Platform_Log(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _interop_Log(i2 | 0, i1 | 0);
 return;
}

function _PauseScreenBase_Game(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1704580);
 return;
}

function _Path_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i2, 51538);
 return;
}

function _OptionsGroupScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1679104, i1, 328);
 return;
}

function _NA_SetGui(i1) {
 i1 = i1 | 0;
 HEAP8[1689492] = i1;
 _Options_SetBool(42934, i1);
 return;
}

function _Menu_SwitchMisc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _MiscOptionsScreen_Show();
 return;
}

function _Menu_SwitchChat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ChatOptionsScreen_Show();
 return;
}

function _Math_IsPowOf2(i1) {
 i1 = i1 | 0;
 return (i1 | 0) != 0 & (i1 + -1 & i1 | 0) == 0 & 1 | 0;
}

function _Math_Ceil(d1) {
 d1 = +d1;
 var i2 = 0;
 i2 = ~~d1;
 return (+(i2 | 0) < d1 & 1) + i2 | 0;
}

function _Gfx_BindVb_Textured(i1) {
 i1 = i1 | 0;
 _Gfx_BindVb(i1);
 _GL_SetupVbTextured();
 return;
}

function _FreeFontBitmap() {
 _memset(145264, 0, 1024) | 0;
 _Mem_Free(HEAP32[417087] | 0);
 return;
}

function _DisconnectScreen_Free(i1) {
 i1 = i1 | 0;
 _Game_SetFpsLimit(HEAP32[422209] | 0);
 return;
}

function _ChatScreen_AppendInput(i1) {
 i1 = i1 | 0;
 _InputWidget_AppendText(1837508, i1);
 return;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _TouchMore_Ctrls(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TouchCtrlsScreen_Show();
 return;
}

function _Menu_SwitchEnv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _EnvSettingsScreen_Show();
 return;
}

function _Hex_Range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _String_AppendConst(i2, 51475);
 return;
}

function _GuO_GetHotbar(i1) {
 i1 = i1 | 0;
 _String_AppendFloat(i1, +HEAPF32[422376], 1);
 return;
}

function _File_OpenOrCreate(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _File_Do(i1, i2, 66) | 0;
}

function _ClearChatLogs() {
 _Mem_Set(144672, 0, 256) | 0;
 _StringsBuffer_Clear(1656840);
 return;
}

function _CPE_RemoveSelection(i1) {
 i1 = i1 | 0;
 _Selections_Remove(HEAP8[i1 >> 0] | 0);
 return;
}

function dynCall_id(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return FUNCTION_TABLE_id[i2 & 3](+d1) | 0;
}

function b18(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(18);
}

function _TouchMore_Fog(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Game_CycleViewDistance();
 return;
}

function _TouchCtrls_More(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _TouchMoreScreen_Show();
 return;
}

function _TexPackOverlay_IsAlways(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 36 >> 2] | 0) != 0 | 0;
}

function _TexIdsOverlay_KeyDown(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _String_ValidChar(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 << 24 >> 24 != 38 | 0;
}

function _OnReset_1724() {
 HEAP32[431721] = 0;
 HEAP32[431722] = 0;
 HEAP32[431723] = 0;
 return;
}

function _Menu_SwitchGui(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _GuiOptionsScreen_Show();
 return;
}

function _Math_Lerp(d1, d2, d3) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 return +((d2 - d1) * d3 + d1);
}

function _Logger_SysWarn(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Logger_Warn(i2, i1, 50);
 return;
}

function _LocalPlayer_ShouldRenderName(i1) {
 i1 = i1 | 0;
 return HEAP8[HEAP32[414161] >> 0] | 0;
}

function _ES_SetWeatherSpeed(i1) {
 i1 = i1 | 0;
 _Env_SetWeatherSpeed(+_Menu_Float(i1));
 return;
}

function _ZombieModel_DrawArm(i1) {
 i1 = i1 | 0;
 _HumanModel_DrawArmCore(i1, 1714888);
 return;
}

function _OnFocusChanged(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[1867881] | 0)) _Input_Clear();
 return;
}

function _Menu_SwitchFont(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _FontListScreen_Show();
 return;
}

function _MenuOptionsScreen_BeginButtons(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 104 >> 2] = 0;
 return;
}

function _Input_SetTouchMode(i1) {
 i1 = i1 | 0;
 HEAP8[1868784] = i1;
 _ClearTouches();
 return;
}

function _TextGroupWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 40 >> 2] << 2 | 0;
}

function _SysFonts_UNSAFE_GetDefault() {
 return ((HEAP16[11188] | 0) == 0 ? 22380 : 22372) | 0;
}

function _SpecialInputWidget_Free(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1 + 60 | 0);
 return;
}

function _Menu_SwitchPause(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_ShowPauseMenu();
 return;
}

function _MenuInput_NoProcess(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return 0;
}

function _Mem_TryAllocCleared(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _calloc(i2, i1) | 0;
}

function _InventoryScreen_Hide() {
 _Gui_Remove(1818828);
 _CPE_SendNotifyAction(1, 0);
 return;
}

function _HumanModel_DrawArm(i1) {
 i1 = i1 | 0;
 _HumanModel_DrawArmCore(i1, 1714888);
 return;
}

function _Http_ClearPending() {
 _RequestList_Free(979024);
 _RequestList_Free(982160);
 return;
}

function _ES_SetCloudsSpeed(i1) {
 i1 = i1 | 0;
 _Env_SetCloudsSpeed(+_Menu_Float(i1));
 return;
}

function _ChibiModel_DrawArm(i1) {
 i1 = i1 | 0;
 _HumanModel_DrawArmCore(i1, 1715424);
 return;
}

function _Chat_Add1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Chat_Add4(i2, i1, 0, 0, 0);
 return;
}

function _CPE_EnvWeatherType(i1) {
 i1 = i1 | 0;
 _Env_SetWeather(HEAPU8[i1 >> 0] | 0);
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 511](i1 | 0);
}

function _WoM_Reset() {
 HEAP32[454523] = 0;
 HEAP8[1868797] = 0;
 HEAP8[1868798] = 0;
 return;
}

function _Window_RequestClipboardText() {
 _Event_RaiseInput(1686124, 1001, 0, 15140);
 return;
}

function _TexIdsOverlay_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1676764, i1, 331);
 return;
}

function _GLContext_TryRestore() {
 return (_emscripten_is_webgl_context_lost(0) | 0) == 0 | 0;
}

function _Display_ScaleY_2473(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Display_ScaleY_2340(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Display_ScaleY_1898(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Display_ScaleY_1478(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Display_ScaleX_2472(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466958] * +(i1 | 0)) | 0;
}

function _Display_ScaleX_2339(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466958] * +(i1 | 0)) | 0;
}

function _Display_ScaleX_1897(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466958] * +(i1 | 0)) | 0;
}

function ___lctrans(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ___lctrans_impl(i2, i1) | 0;
}

function _TouchMore_Game(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _Gui_Remove(1865560);
 return;
}

function _FontListScreen_RegisterCallback(i1) {
 i1 = i1 | 0;
 _Chat_Add1(45529, i1);
 return;
}

function _File_Create(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _File_Do(i1, i2, 578) | 0;
}

function _Display_ScaleY_893(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Audio_Warn(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _Logger_Warn(i2, i1, 94);
 return;
}

function _main_phase1() {
 _interop_LoadIndexedDB();
 _interop_AsyncLoadIndexedDB();
 return;
}

function _Widget_InputDown(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return 0;
}

function _PauseScreen_Free(i1) {
 i1 = i1 | 0;
 _Event_Unregister(1679104, i1, 323);
 return;
}

function _Menu_LayoutBack(i1) {
 i1 = i1 | 0;
 _Widget_SetLocation(i1, 1, 2, 0, 25);
 return;
}

function _LoadLevelScreen_UploadCallback(i1) {
 i1 = i1 | 0;
 _Map_LoadFrom(i1) | 0;
 return;
}

function _InventoryScreen_NeedRedrawing(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _HumanModel_Draw(i1) {
 i1 = i1 | 0;
 _HumanModel_DrawCore(i1, 1714888, 1);
 return;
}

function _EntityNames_ChatFontChanged(i1) {
 i1 = i1 | 0;
 _DeleteAllNameTextures();
 return;
}

function _ChibiModel_Draw(i1) {
 i1 = i1 | 0;
 _HumanModel_DrawCore(i1, 1715424, 1);
 return;
}

function _World_OutOfMemory() {
 _Window_ShowDialog(51856, 51870);
 _World_Reset();
 return;
}

function _Window_Create3D(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _DoCreateWindow();
 return;
}

function _DateTime_CurrentLocal(i1) {
 i1 = i1 | 0;
 _interop_GetLocalTime(i1 | 0);
 return;
}

function _Window_RequestClose() {
 HEAP8[1867880] = 0;
 _Event_RaiseVoid(1683264);
 return;
}

function _OnReset_98() {
 _CloseLogFile();
 _ResetLogFile();
 _ClearCPEMessages();
 return;
}

function _ListScreen_Free(i1) {
 i1 = i1 | 0;
 _StringsBuffer_Clear(i1 + 908 | 0);
 return;
}

function _TouchOnscreenScreen_Free(i1) {
 i1 = i1 | 0;
 _Font_Free(i1 + 624 | 0);
 return;
}

function _Screen_TInput(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 1;
}

function _Screen_FInput(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _Refresh() {
 _ClassicLighting_Refresh();
 _FreeState();
 _AllocState();
 return;
}

function _Math_AbsI_1068(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _Gfx_SetFog(i1) {
 i1 = i1 | 0;
 HEAP8[1868764] = i1;
 _SwitchProgram();
 return;
}

function _File_Open(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _File_Do(i1, i2, 0) | 0;
}

function _File_Close(i1) {
 i1 = i1 | 0;
 return 0 - (_interop_FileClose(i1 | 0) | 0) | 0;
}

function _Drawer2D_AdjHeight(i1) {
 i1 = i1 | 0;
 return _Math_CeilDiv(i1 * 3 | 0, 2) | 0;
}

function _Display_ScaleY(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466959] * +(i1 | 0)) | 0;
}

function _Display_ScaleX(i1) {
 i1 = i1 | 0;
 return ~~(+HEAPF32[466958] * +(i1 | 0)) | 0;
}

function _ButtonWidget_Free(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1 + 40 | 0);
 return;
}

function b6(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(6);
 return 0;
}

function _Widget_InputUp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return;
}

function _Screen_InputUp(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _OnTexturePackChanged(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(1675432);
 return;
}

function _OnContextLost_1944(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(1841496);
 return;
}

function _Math_Sign(d1) {
 d1 = +d1;
 return (d1 > 0.0 ? 1 : (d1 < 0.0) << 31 >> 31) | 0;
}

function _Math_AbsI_645(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _Math_AbsI_377(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _GeneratingScreen_AtlasChanged(i1) {
 i1 = i1 | 0;
 HEAP8[1841131] = 1;
 return;
}

function _TouchScreen_HacksChanged(i1) {
 i1 = i1 | 0;
 _TouchScreen_Refresh();
 return;
}

function _TextWidget_Free(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1 + 40 | 0);
 return;
}

function _OnContextLost_899(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(1689984);
 return;
}

function _MenuInputOverlay_Free(i1) {
 i1 = i1 | 0;
 _OnscreenKeyboard_Close();
 return;
}

function _Math_AbsI_83(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _HUDScreen_HacksChanged(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 308 >> 0] = 1;
 return;
}

function dynCall_vd(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_vd[i2 & 0](+d1);
}

function _OnAtlasChanged(i1) {
 i1 = i1 | 0;
 _Block_RecalculateAllSpriteBB();
 return;
}

function _NostalgiaFunctionalityScreen_Show() {
 _MenuOptionsScreen_Show(318);
 return;
}

function _HUDScreen_NeedRedrawing(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 7 >> 0] = 1;
 return;
}

function _Gfx_DisableTextureOffset() {
 HEAP8[1868766] = 0;
 _SwitchProgram();
 return;
}

function _Gfx_BindDynamicVb(i1) {
 i1 = i1 | 0;
 _glBindBuffer(34962, i1 | 0);
 return;
}

function _Stream_DefaultSeek(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -857812990;
}

function _Socket_Close(i1) {
 i1 = i1 | 0;
 _interop_SocketClose(i1 | 0) | 0;
 return;
}

function _OnTerrainAtlasChanged(i1) {
 i1 = i1 | 0;
 _UpdateBorderTextures();
 return;
}

function _HoldModel_GetEyeY(i1) {
 i1 = i1 | 0;
 _RecalcProperties(i1);
 return 1.625;
}

function _GrO_SetViewDist(i1) {
 i1 = i1 | 0;
 _Game_UserSetViewDistance(i1);
 return;
}

function _GetOnscreenHAligns() {
 return _Options_GetInt(51033, 0, 2147483647, 0) | 0;
}

function _Floord(d1) {
 d1 = +d1;
 return +(+((!(d1 >= 0.0) << 31 >> 31) + ~~d1 | 0));
}

function _Context2D_Free(i1) {
 i1 = i1 | 0;
 _Mem_Free(HEAP32[i1 >> 2] | 0);
 return;
}

function _SysFonts_Register(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -857812990;
}

function _Stream_DefaultGet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -857812990;
}

function _SkinnedCubeModel_MakeParts() {
 _BoxDesc_BuildBox(1715336, 17276);
 return;
}

function _Ping_Reset() {
 _Mem_Set(955840, 0, 240) | 0;
 HEAP32[460400] = 0;
 return;
}

function _OnNewMapLoaded_1129() {
 FUNCTION_TABLE_v[HEAP32[467166] & 127]();
 return;
}

function _Menu_CloseKeyboard(i1) {
 i1 = i1 | 0;
 _OnscreenKeyboard_Close();
 return;
}

function _Math_AbsI(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _Audio_PlayStepSound(i1) {
 i1 = i1 | 0;
 _Sounds_Play(i1, 990496);
 return;
}

function _SysFont_Free(i1) {
 i1 = i1 | 0;
 _Mem_Free(HEAP32[i1 >> 2] | 0);
 return;
}

function _OnReset_1111() {
 _Inventory_ResetMapping();
 HEAP8[1696948] = 1;
 return;
}

function _OnFree_1632() {
 _OnContextLost_1634(0);
 _CustomModel_FreeAll();
 return;
}

function _NostalgiaAppearanceScreen_Show() {
 _MenuOptionsScreen_Show(310);
 return;
}

function _HttpBackend_DescribeError(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _GetScreenHeight() {
 return _RawDpiScale(_interop_ScreenHeight() | 0) | 0;
}

function _ES_SetCloudsHeight(i1) {
 i1 = i1 | 0;
 _Env_SetCloudsHeight(i1);
 return;
}

function _Audio_PlayDigSound(i1) {
 i1 = i1 | 0;
 _Sounds_Play(i1, 988456);
 return;
}

function _SkinnedCubeModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.0750000476837158;
}

function _OnContextRecreated_670(i1) {
 i1 = i1 | 0;
 _Gfx_RestoreState();
 return;
}

function _OnContextLost(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteDynamicVb(992544);
 return;
}

function _Window_EnableRawMouse() {
 _RegrabMouse();
 HEAP8[1868648] = 1;
 return;
}

function _GetScreenWidth() {
 return _RawDpiScale(_interop_ScreenWidth() | 0) | 0;
}

function _File_Exists(i1) {
 i1 = i1 | 0;
 return _interop_FileExists(i1 | 0) | 0;
}

function _OnInit_1775() {
 if (!(HEAP8[1841572] | 0)) _Protocol_Reset();
 return;
}

function _Gui_Scale(d1) {
 d1 = +d1;
 return +(+(~~(d1 * 10.0 + .5) | 0) / 10.0);
}

function b17(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(17);
}

function _World_NewMap() {
 _World_Reset();
 _Event_RaiseVoid(1680404);
 return;
}

function _TouchDevice_IsPressed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function _Tablist_Init() {
 _TabList_Set(-1, 14732, 14732, 1841616, 0);
 return;
}

function _LoadingScreen_MapLoaded(i1) {
 i1 = i1 | 0;
 _Gui_Remove(i1);
 return;
}

function _HS_GetWOMHacks() {
 return HEAP8[(HEAP32[417347] | 0) + 493 >> 0] | 0;
}

function _HS_GetPushback() {
 return HEAP8[(HEAP32[417347] | 0) + 468 >> 0] | 0;
}

function _HS_GetFullStep() {
 return HEAP8[(HEAP32[417347] | 0) + 469 >> 0] | 0;
}

function _Gui_MakeTitleFont(i1) {
 i1 = i1 | 0;
 _Font_Make(i1, 16, 1);
 return;
}

function _GraphicsOptionsScreen_Show() {
 _MenuOptionsScreen_Show(257);
 return;
}

function _Gfx_BindVb(i1) {
 i1 = i1 | 0;
 _glBindBuffer(34962, i1 | 0);
 return;
}

function _Gfx_BindIb(i1) {
 i1 = i1 | 0;
 _glBindBuffer(34963, i1 | 0);
 return;
}

function _ES_SetShadowColor(i1) {
 i1 = i1 | 0;
 _Env_SetShadowCol(i1);
 return;
}

function _ES_SetEdgeHeight(i1) {
 i1 = i1 | 0;
 _Env_SetEdgeHeight(i1);
 return;
}

function _ES_SetCloudsColor(i1) {
 i1 = i1 | 0;
 _Env_SetCloudsCol(i1);
 return;
}

function dynCall_i(i1) {
 i1 = i1 | 0;
 return FUNCTION_TABLE_i[i1 & 63]() | 0;
}

function _MPConnection_Disconnect() {
 _Game_Disconnect(22308, 22316);
 return;
}

function _KeyBindsScreen_Free(i1) {
 i1 = i1 | 0;
 HEAP32[467164] = 0;
 return;
}

function _Gui_MakeBodyFont(i1) {
 i1 = i1 | 0;
 _Font_Make(i1, 16, 0);
 return;
}

function _Gfx_SetDepthWrite(i1) {
 i1 = i1 | 0;
 _glDepthMask(i1 | 0);
 return;
}

function _CreeperModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.7000000476837158;
}

function _ClassicOptionsScreen_Show() {
 _MenuOptionsScreen_Show(233);
 return;
}

function _ChickenModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.0125000476837158;
}

function _TextAtlas_Free(i1) {
 i1 = i1 | 0;
 _Gfx_DeleteTexture(i1);
 return;
}

function _SpiderModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.0125000476837158;
}

function _SPConnection_SendData(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _ResetLogFile() {
 HEAP16[6860] = 0;
 HEAP32[415500] = -123;
 return;
}

function _OnReset_1128() {
 FUNCTION_TABLE_v[HEAP32[467165] & 127]();
 return;
}

function _HacksSettingsScreen_Show() {
 _MenuOptionsScreen_Show(284);
 return;
}

function _FancyLighting_OnInit() {
 _Event_Register(1681184, 0, 105);
 return;
}

function _DefaultPrePrepateChunk() {
 _Mem_Set(110944, 0, 32768) | 0;
 return;
}

function _ClO_GetHacks() {
 return HEAP8[(HEAP32[417347] | 0) + 470 >> 0] | 0;
}

function _SheepModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.4812500476837158;
}

function _Music_Start() {
 _Chat_AddRaw(24657);
 HEAP32[248135] = 0;
 return;
}

function _HS_GetSlide() {
 return HEAP8[(HEAP32[417347] | 0) + 492 >> 0] | 0;
}

function _HS_GetHacks() {
 return HEAP8[(HEAP32[417347] | 0) + 470 >> 0] | 0;
}

function _Game_PendingClose(i1) {
 i1 = i1 | 0;
 HEAP8[1868751] = 0;
 return;
}

function _EntityRenderers_Free() {
 _EntityRenderers_ContextLost(0);
 return;
}

function _ChibiModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.2625000476837158;
}

function _MiscOptionsScreen_Show() {
 _MenuOptionsScreen_Show(298);
 return;
}

function _MenuInput_NoDefault(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _LocalPlayers_OnNewMap() {
 _LocalPlayer_OnNewMap(146288);
 return;
}

function _EnvSettingsScreen_Show() {
 _MenuOptionsScreen_Show(244);
 return;
}

function _ChatOptionsScreen_Show() {
 _MenuOptionsScreen_Show(266);
 return;
}

function _Screen_TMouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return 1;
}

function _Screen_TKeyPress(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 1;
}

function _Screen_FMouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return 0;
}

function _Screen_FKeyPress(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _PigModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 1.0750000476837158;
}

function _Path_ValidString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}

function _OnViewDistanceChanged(i1) {
 i1 = i1 | 0;
 _UpdateAll();
 return;
}

function _OnContextLost_669(i1) {
 i1 = i1 | 0;
 _Gfx_FreeState();
 return;
}

function _Gui_SetTouchUI(i1) {
 i1 = i1 | 0;
 HEAP8[1689553] = i1;
 return;
}

function _GuiOptionsScreen_Show() {
 _MenuOptionsScreen_Show(273);
 return;
}

function _Display_ScaleX_1477() {
 return ~~(+HEAPF32[466958] * 500.0) | 0;
}

function _Cursor_SetPosition(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function b15(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 abort(15);
}

function b12(d1, d2, i3) {
 d1 = +d1;
 d2 = +d2;
 i3 = i3 | 0;
 abort(12);
}

function _Widget_MouseScroll(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return 0;
}

function _OnFree_234() {
 _FreeFontBitmap();
 HEAP32[417087] = 0;
 return;
}

function _ES_SetWeather(i1) {
 i1 = i1 | 0;
 _Env_SetWeather(i1);
 return;
}

function _ES_SetSunColor(i1) {
 i1 = i1 | 0;
 _Env_SetSunCol(i1);
 return;
}

function _ES_SetSkyColor(i1) {
 i1 = i1 | 0;
 _Env_SetSkyCol(i1);
 return;
}

function _ES_SetFogColor(i1) {
 i1 = i1 | 0;
 _Env_SetFogCol(i1);
 return;
}

function _Display_ScaleY_1070() {
 return ~~(+HEAPF32[466959] * 5.0) | 0;
}

function _Display_ScaleX_1069() {
 return ~~(+HEAPF32[466958] * 5.0) | 0;
}

function _DescribeSimple(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _UseWaterProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _Refresh_(i1) {
 i1 = i1 | 0;
 _MapRenderer_Refresh();
 return;
}

function _Physics_Free() {
 _Event_Unregister(1680924, 0, 193);
 return;
}

function _OnFontChanged(i1) {
 i1 = i1 | 0;
 _Gui_RefreshAll();
 return;
}

function _Gfx_TryRestoreContext() {
 return _GLContext_TryRestore() | 0;
}

function b5(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(5);
 return 0;
}

function _UseLavaProcess(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _Screen_TText(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}

function _Screen_NullUpdate(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 return;
}

function _Screen_FText(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function _Mem_Free(i1) {
 i1 = i1 | 0;
 if (i1 | 0) _free(i1);
 return;
}

function _NF_SetVersion(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _LocalPlayers_Reset() {
 _LocalPlayer_Reset(146288);
 return;
}

function _Gfx_Free() {
 _Gfx_FreeState();
 _GLContext_Free();
 return;
}

function _DeleteWeatherVB() {
 _Gfx_DeleteDynamicVb(1675388);
 return;
}

function _DeleteChunks_(i1) {
 i1 = i1 | 0;
 _DeleteChunks();
 return;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 127]();
}

function _OnInit_1955() {
 _Event_Register(1678324, 0, 411);
 return;
}

function _Cw_Load(i1) {
 i1 = i1 | 0;
 return _Nbt_Read(i1, 205) | 0;
}

function b4(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(4);
 return 0;
}

function _TextInputWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return 8;
}

function _OnFree_1968() {
 HEAP16[920792] = 0;
 _OnClose();
 return;
}

function _Chat_Add(i1) {
 i1 = i1 | 0;
 _Chat_AddOf(i1, 0);
 return;
}

function _OnInit_44() {
 _Event_Register(1678324, 0, 191);
 return;
}

function _HotbarWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return 116;
}

function _GuO_GetUseFont() {
 return (HEAP8[1667320] | 0) == 0 | 0;
}

function _TableWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return 960;
}

function _SkinnedCubeModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .5;
}

function _OnResize(i1) {
 i1 = i1 | 0;
 _Gui_LayoutAll();
 return;
}

function _OnNewMapLoaded_360() {
 _OnContextRecreated(0);
 return;
}

function _HumanModel_GetNameY(i1) {
 i1 = i1 | 0;
 return 2.03125;
}

function _Gfx_AllocStaticVb() {
 return _GL_GenAndBind(34962) | 0;
}

function _ButtonWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return 12;
}

function _Math_Mod1(d1) {
 d1 = +d1;
 return +(d1 - +(~~d1 | 0));
}

function _Gfx_UnlockVb(i1) {
 i1 = i1 | 0;
 _UnlockVb();
 return;
}

function _CreeperModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return 1.375;
}

function _ClO_GetSounds() {
 return (HEAP32[248134] | 0) > 0 | 0;
}

function _ClO_GetMusic() {
 return (HEAP32[248135] | 0) > 0 | 0;
}

function _ChickenModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .875;
}

function _CentreMousePosition() {
 _Cursor_GetRawPos();
 return;
}

function _TextWidget_MaxVertices(i1) {
 i1 = i1 | 0;
 return 4;
}

function _SittingModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return 1.0;
}

function _OnFree_1956() {
 _Selections_ContextLost(0);
 return;
}

function _NA_GetAnim() {
 return (HEAP8[1868753] | 0) == 0 | 0;
}

function _HumanModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return 1.625;
}

function _ClO_GetFPS() {
 return (HEAP32[422209] | 0) == 0 | 0;
}

function b16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(16);
}

function _SheepModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return 1.25;
}

function _GrO_GetLighting() {
 return HEAPU8[1868790] | 0 | 0;
}

function _DeleteSkyboxVB() {
 _Gfx_DeleteVb(1675404);
 return;
}

function _DeleteCloudsVB() {
 _Gfx_DeleteVb(1675408);
 return;
}

function _ChibiModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .875;
}

function _ChO_GetAutoScaleChat() {
 return HEAP8[1689552] | 0;
}

function ___pthread_self_105() {
 return _pthread_self() | 0;
}

function _SpiderModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .5;
}

function _HeadModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .375;
}

function _GrO_GetShadows() {
 return HEAPU8[1669385] | 0 | 0;
}

function _Directory_GetCachePath(i1) {
 i1 = i1 | 0;
 return;
}

function _DeleteSidesVB() {
 _Gfx_DeleteVb(1675400);
 return;
}

function _DeleteEdgesVB() {
 _Gfx_DeleteVb(1675396);
 return;
}

function _Stream_DefaultClose(i1) {
 i1 = i1 | 0;
 return 0;
}

function _SelectZipEntry_2235(i1) {
 i1 = i1 | 0;
 return 1;
}

function _OnReset_1633() {
 _CustomModel_FreeAll();
 return;
}

function _MiO_GetSensitivity() {
 return HEAP32[414138] | 0;
}

function _FirstPersonCamera_Zoom(d1) {
 d1 = +d1;
 return 0;
}

function _ES_GetCloudsHeight() {
 return HEAP32[466930] | 0;
}

function b14(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(14);
}

function _PigModel_GetEyeY(i1) {
 i1 = i1 | 0;
 return .75;
}

function _OnFree_1943() {
 _OnContextLost_1944(0);
 return;
}

function _OnFree_1723() {
 _OnContextLost_1725(0);
 return;
}

function _NA_GetClassicChat() {
 return HEAP8[1689495] | 0;
}

function _GrO_GetNames() {
 return HEAPU8[1669384] | 0 | 0;
}

function _Gfx_SetAlphaArgBlend(i1) {
 i1 = i1 | 0;
 return;
}

function _ES_GetShadowColor() {
 return HEAP32[466946] | 0;
}

function _ES_GetCloudsColor() {
 return HEAP32[466940] | 0;
}

function _DeleteSkyVB() {
 _Gfx_DeleteVb(1675412);
 return;
}

function _Window_PreInit() {
 HEAP8[1867858] = 1;
 return;
}

function _NA_GetClassicInv() {
 return HEAP8[1689503] | 0;
}

function _ES_GetEdgeHeight() {
 return HEAP32[466928] | 0;
}

function _ChO_GetClickable() {
 return HEAP8[1689500] | 0;
}

function _ChO_GetChatlines() {
 return HEAP32[422374] | 0;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function _Directory_Create(i1) {
 i1 = i1 | 0;
 return 0;
}

function _ClO_GetAnaglyph() {
 return HEAP8[1868758] | 0;
}

function _OnReset_1957() {
 HEAP32[460377] = 0;
 return;
}

function _MiO_GetViewBob() {
 return HEAP8[1868759] | 0;
}

function _MiO_GetPhysics() {
 return HEAP8[1652260] | 0;
}

function _HS_GetClipping() {
 return HEAP8[1656557] | 0;
}

function _GuO_GetTabAuto() {
 return HEAP8[1689501] | 0;
}

function _GuO_GetShowFPS() {
 return HEAP8[1689502] | 0;
}

function _GuO_GetShadows() {
 return HEAP8[1667321] | 0;
}

function _GrO_GetMipmaps() {
 return HEAP8[1689081] | 0;
}

function _GetPostProcess() {
 return HEAP32[422315] | 0;
}

function _ES_GetSunColor() {
 return HEAP32[466942] | 0;
}

function _ES_GetSkyColor() {
 return HEAP32[466938] | 0;
}

function _ES_GetFogColor() {
 return HEAP32[466939] | 0;
}

function _ClO_GetViewBob() {
 return HEAP8[1868759] | 0;
}

function _ClO_GetShowFPS() {
 return HEAP8[1689502] | 0;
}

function _ChO_GetLogging() {
 return HEAP8[1868735] | 0;
}

function b0(i1) {
 i1 = i1 | 0;
 abort(0);
 return 0.0;
}

function _TableWidget_Free(i1) {
 i1 = i1 | 0;
 return;
}

function _Sounds_Stop() {
 _AudioPool_Close();
 return;
}

function _OnFree_1078() {
 HEAP32[422522] = 0;
 return;
}

function _MiO_GetSounds() {
 return HEAP32[248134] | 0;
}

function _MiO_GetInvert() {
 return HEAP8[1656558] | 0;
}

function _MiO_GetCamera() {
 return HEAP8[1656556] | 0;
}

function _HS_GetLiquids() {
 return HEAP8[1868749] | 0;
}

function _GrO_GetViewDist() {
 return HEAP32[3680] | 0;
}

function _GrO_GetSmooth() {
 return HEAP8[1868730] | 0;
}

function _ES_GetWeather() {
 return HEAP32[466934] | 0;
}

function _ClO_GetInvert() {
 return HEAP8[1656558] | 0;
}

function _emscripten_get_sbrk_ptr() {
 return 1868832;
}

function _Widget_NullFunc(i1) {
 i1 = i1 | 0;
 return;
}

function _SetAlphaTest() {
 _SwitchProgram();
 return;
}

function _Screen_NullFunc(i1) {
 i1 = i1 | 0;
 return;
}

function _OnFree_453() {
 HEAP32[422198] = 0;
 return;
}

function _OnFree_119() {
 HEAP32[416803] = 0;
 return;
}

function _NF_GetCustom() {
 return HEAP8[1868756] | 0;
}

function _MiO_GetMusic() {
 return HEAP32[248135] | 0;
}

function b3(i1) {
 i1 = i1 | 0;
 abort(3);
 return 0;
}

function _Model_NullFunc(i1) {
 i1 = i1 | 0;
 return;
}

function _TextInputWidget_GetMaxLines() {
 return 1;
}

function _OnFree_45() {
 _OnContextLost(0);
 return;
}

function _OnFree_1066() {
 _ClearTouches();
 return;
}

function _NF_GetTexs() {
 return HEAP8[1868757] | 0;
}

function _NA_GetOpts() {
 return HEAP8[1689494] | 0;
}

function _NA_GetList() {
 return HEAP8[1689493] | 0;
}

function _NA_GetHand() {
 return HEAP8[1714762] | 0;
}

function _GrO_GetFPS() {
 return HEAP32[422209] | 0;
}

function _Gfx_GetFog() {
 return HEAP8[1868764] | 0;
}

function _Thread_Sleep(i1) {
 i1 = i1 | 0;
 return;
}

function _Sounds_Free() {
 _Sounds_Stop();
 return;
}

function _NF_GetCPE() {
 return HEAP8[1688988] | 0;
}

function _NA_GetGui() {
 return HEAP8[1689492] | 0;
}

function _Mutex_Unlock(i1) {
 i1 = i1 | 0;
 return;
}

function _HS_GetFOV() {
 return HEAP32[414163] | 0;
}

function _Classic_Ping(i1) {
 i1 = i1 | 0;
 return;
}

function b2(d1) {
 d1 = +d1;
 abort(2);
 return 0;
}

function _OnInit_33() {
 _Sounds_Init();
 return;
}

function _Mutex_Lock(i1) {
 i1 = i1 | 0;
 return;
}

function _main_phase2() {
 _web_main();
 return;
}

function ___errno_location() {
 return 1867976;
}

function _OnFree() {
 _Sounds_Free();
 return;
}

function _GLContext_SwapBuffers() {
 return 1;
}

function _FlatgrassGen_Prepare() {
 return 1;
}

function stackSave() {
 return STACKTOP | 0;
}

function b13(i1) {
 i1 = i1 | 0;
 abort(13);
}

function _Window_UpdateRawMouse() {
 return;
}

function b11(d1) {
 d1 = +d1;
 abort(11);
}

function _pthread_self() {
 return 23748;
}

function _SysFonts_SaveCache() {
 return;
}

function _Gfx_DisableMipmaps() {
 return;
}

function _Gfx_EnableMipmaps() {
 return;
}

function _AudioBackend_Tick() {
 return;
}

function _AudioBackend_Free() {
 return;
}

function _GLContext_Update() {
 return;
}

function _Cursor_GetRawPos() {
 return;
}

function b1() {
 abort(1);
 return 0;
}

function _Gfx_BeginFrame() {
 return;
}

function _Model_NoParts() {
 return;
}

function _Gamepads_Init() {
 return;
}

function _Window_Show() {
 return;
}

function _OnReset_862() {
 return;
}

function _Logger_Hook() {
 return;
}

function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_di = [b0,_HumanModel_GetNameY,_HumanModel_GetEyeY,_BlockModel_GetNameY,_BlockModel_GetEyeY,_SkinnedCubeModel_GetNameY,_SkinnedCubeModel_GetEyeY,_SittingModel_GetEyeY,_HeadModel_GetEyeY,_ChibiModel_GetNameY,_ChibiModel_GetEyeY,_SpiderModel_GetNameY,_SpiderModel_GetEyeY,_SheepModel_GetNameY,_SheepModel_GetEyeY,_PigModel_GetNameY,_PigModel_GetEyeY,_CreeperModel_GetNameY,_CreeperModel_GetEyeY,_ChickenModel_GetNameY,_ChickenModel_GetEyeY,_HoldModel_GetEyeY,_CustomModel_GetNameY,_CustomModel_GetEyeY,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,_FlatgrassGen_Prepare,_NotchyGen_Prepare,_GetPostProcess,_ClO_GetMusic,_ClO_GetInvert,_ClO_GetViewDist,_ClO_GetAnaglyph,_ClO_GetSounds,_ClO_GetShowFPS,_ClO_GetViewBob,_ClO_GetFPS,_ClO_GetHacks,_ES_GetCloudsColor,_ES_GetSkyColor,_ES_GetFogColor,_ES_GetCloudsHeight,_ES_GetSunColor,_ES_GetShadowColor,_ES_GetWeather,_ES_GetEdgeHeight,_GrO_GetFPS,_GrO_GetViewDist,_GrO_GetSmooth,_GrO_GetLighting,_GrO_GetNames,_GrO_GetShadows,_GrO_GetMipmaps,_ChO_GetAutoScaleChat
,_ChO_GetChatlines,_ChO_GetLogging,_ChO_GetClickable,_GuO_GetShowFPS,_GuO_GetShadows,_GuO_GetTabAuto,_GuO_GetUseFont,_HS_GetHacks,_HS_GetClipping,_HS_GetWOMHacks,_HS_GetFullStep,_HS_GetLiquids,_HS_GetPushback,_HS_GetSlide,_HS_GetFOV,_MiO_GetMusic,_MiO_GetSounds,_MiO_GetPhysics,_MiO_GetCamera,_MiO_GetViewBob,_MiO_GetInvert,_MiO_GetSensitivity,_NA_GetHand,_NA_GetAnim,_NA_GetClassicChat,_NA_GetClassicInv,_NA_GetGui,_NA_GetList,_NA_GetOpts,_NF_GetTexs
,_NF_GetCustom,_NF_GetCPE,_TextInputWidget_GetMaxLines,_ChatInputWidget_GetMaxLines,b1];
var FUNCTION_TABLE_id = [b2,_FirstPersonCamera_Zoom,_ThirdPersonCamera_Zoom,b2];
var FUNCTION_TABLE_ii = [b3,_Entity_GetColor,_LocalPlayer_ShouldRenderName,_NetPlayer_ShouldRenderName,_Cw_Load,_Dat_Load,_Lvl_Load,_Fcm_Load,_MCLevel_Load,_HeldBlockRenderer_GetCol,_TextWidget_MaxVertices,_ButtonWidget_MaxVertices,_HotbarWidget_MaxVertices,_TableWidget_MaxVertices,_TextInputWidget_MaxVertices,_TextGroupWidget_MaxVertices,_Deflate_StreamClose,_GZip_StreamClose,_LocalPlayer_IsSolidCollide,_IsRopeCollide,_IsLavaCollide,_IsWaterCollide,_PhysicsComp_TouchesLiquid,_PhysicsComp_TouchesSlipperyIce,_Sounds_CheckNonSolid,_Sounds_CheckSolid,_TouchesSolid,_Options_LoadFilter,_CustomParticle_CanPass
,_RainParticle_CanPass,_TerrainParticle_CanPass,_ClipBlock,_ClipCamera,_Stream_DefaultClose,_Stream_FileClose,_ExtractFromFile,_SelectZipEntry_2235,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iid = [b4,_Screen_TMouseScroll,_HUDscreen_MouseScroll,_Screen_FMouseScroll,_ChatScreen_MouseScroll,_InventoryScreen_MouseScroll,_Widget_MouseScroll,_ScrollbarWidget_MouseScroll,_HotbarWidget_MouseScroll,_TableWidget_MouseScroll,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iii = [b5,_NormDevice_IsPressed,_TouchDevice_IsPressed,_PadDevice_IsPressed,_Screen_TKeyPress,_Screen_TText,_Menu_PadAxis,_SaveLevelScreen_KeyPress,_SaveLevelScreen_TextChanged,_GenLevelScreen_KeyPress,_GenLevelScreen_TextChanged,_EditHotkeyScreen_KeyPress,_EditHotkeyScreen_TextChanged,_MenuInputOverlay_KeyPress,_MenuInputOverlay_TextChanged,_Screen_FKeyPress,_Screen_FText,_ChatScreen_KeyPress,_ChatScreen_TextChanged,_InventoryScreen_PadAxis,_Hex_ValidChar,_Hex_ValidString,_Hex_ValidValue,_Int_ValidChar,_Int_ValidString,_Int_ValidValue,_Float_ValidChar,_Float_ValidString,_Float_ValidValue
,_Path_ValidChar,_Path_ValidString,_String_ValidChar,_String_ValidString,_TextWidget_Render2,_ButtonWidget_Render2,_HotbarWidget_Render2,_TableWidget_Render2,_TableWidget_PadAxis,_TextInputWidget_Render2,_TextGroupWidget_Render2,_ThumbstickWidget_Render2,_LocalPlayer_HandleRespawn,_LocalPlayer_HandleSetSpawn,_LocalPlayer_HandleFly,_LocalPlayer_HandleNoclip,_LocalPlayer_HandleJump,_LocalPlayer_TriggerHalfSpeed,_LocalPlayer_TriggerSpeed,_LocalPlayer_TriggerFlyUp,_LocalPlayer_TriggerFlyDown,_Platform_DescribeError,_Player_TriggerUp,_Player_TriggerDown,_Player_TriggerLeft,_Player_TriggerRight,_BindTriggered_HideFPS,_BindTriggered_Fullscreen,_BindTriggered_Fog,_BindTriggered_DeleteBlock
,_BindTriggered_PlaceBlock,_BindTriggered_PickBlock,_BindTriggered_HideGUI,_BindTriggered_SmoothCamera,_BindTriggered_AxisLines,_BindTriggered_AutoRotate,_BindTriggered_ThirdPerson,_BindTriggered_DropBlock,_BindTriggered_IDOverlay,_BindTriggered_BreakLiquids,_DescribeSimple,_KeyBindsScreen_TriggerBinding,_TabListOverlay_PlayerCompare,_TabListOverlay_GroupCompare,_Stream_DefaultReadU8,_Stream_DefaultSkip,_Stream_DefaultSeek,_Stream_DefaultGet,_Stream_FileSkip,_Stream_FileSeek,_Stream_FilePosition,_Stream_FileLength,_Stream_PortionReadU8,_Stream_PortionSkip,_Stream_PortionPosition,_Stream_PortionLength,_Stream_MemoryReadU8,_Stream_MemorySkip,_Stream_MemorySeek,_Stream_MemoryPosition
,_Stream_MemoryLength,_Stream_BufferedReadU8,_Stream_BufferedSeek,_TextInputWidget_AllowedChar,_InputWidget_AllowedChar,_Audio_DescribeError,_HttpBackend_DescribeError,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiii = [b6,_Menu_InputDown,_ListScreen_KeyDown,_SaveLevelScreen_KeyDown,_EditHotkeyScreen_KeyDown,_MenuInputOverlay_KeyDown,_TexIdsOverlay_KeyDown,_HUDScreen_KeyDown,_Screen_FInput,_ChatScreen_KeyDown,_InventoryScreen_KeyDown,_Screen_TInput,_MenuInput_NoProcess,_Widget_InputDown,_HotbarWidget_KeyDown,_TableWidget_KeyDown,_TextInputWidget_KeyDown,_ChatInputWidget_KeyDown,_IsLit,_Color,_Color_XSide,_IsLit_Fast,_Color_YMinSide,_Color_ZSide,_ClassicLighting_Color,_SmoothLighting_Color,_ClassicLighting_IsLit,_ClassicLighting_Color_XSide,_ClassicLighting_IsLit_Fast
,_ClassicLighting_Color_Sprite_Fast,_ClassicLighting_Color_YMax_Fast,_ClassicLighting_Color_YMin_Fast,_ClassicLighting_Color_XSide_Fast,_ClassicLighting_Color_ZSide_Fast,_ProcessZipEntry_2236,_OnMouseWheel_2918,_OnMouseButton,_OnMouseMove,_OnFullscreenChange,_OnFocus,_OnResize_2919,_OnBeforeUnload,_OnVisibilityChanged_2920,_OnKeyDown,_OnKeyUp,_OnKeyPress_2921,_OnTouchStart,_OnTouchMove,_OnTouchEnd,_OnCanvasResize,_GLContext_OnLost,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,_Menu_PointerDown,_MenuOptionsScreen_PointerMove,_Menu_PointerMove,_GenLevelScreen_PointerDown,_OptionsGroupScreen_PointerMove,_MenuInputOverlay_PointerDown,_MenuInputOverlay_PointerMove,_HUDscreen_PointerDown,_HUDScreen_PointerMove,_TabListOverlay_PointerDown,_Screen_FPointer,_ChatScreen_PointerDown,_InventoryScreen_PointerDown,_InventoryScreen_PointerMove,_Screen_TPointer,_TouchScreen_PointerDown,_Widget_Pointer,_Widget_PointerMove,_ScrollbarWidget_PointerDown,_ScrollbarWidget_PointerMove,_HotbarWidget_PointerDown,_HotbarWidget_PointerMove,_TableWidget_PointerDown,_TableWidget_PointerMove,_TextInputWidget_PointerDown,_InputWidget_PointerDown,_SpecialInputWidget_PointerDown,_Inflate_StreamRead
,_Deflate_StreamWrite,_GZip_StreamWriteFirst,_GZip_StreamWrite,_Stream_DefaultRead,_Stream_DefaultWrite,_Stream_FileRead,_Stream_FileWrite,_Stream_PortionRead,_Stream_MemoryRead,_Stream_BufferedRead,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiii = [b8,_Modern_StretchXLiquid,_Adv_StretchXLiquid,_NormalBuilder_StretchXLiquid];
var FUNCTION_TABLE_iiiiiiii = [b9,_Modern_StretchX,_Modern_StretchZ,_Adv_StretchX,_Adv_StretchZ,_NormalBuilder_StretchX,_NormalBuilder_StretchZ,b9];
var FUNCTION_TABLE_v = [b10,_OnInit,_Animations_Clear,_OnInit_33,_OnFree,_OnInit_44,_OnFree_45,_OnInit_51,_OnReset,_OnInit_84,_OnNewMapLoaded,_OnInit_89,_Window_EnableRawMouse,_Window_DisableRawMouse,_OnInit_96,_OnFree_97,_OnReset_98,_OnInit_118,_OnFree_119,_OnInit_233,_OnFree_234,_OnReset_235,_Tablist_Init,_TabList_Clear,_Entities_Init,_Entities_Free,_LocalPlayers_Reset,_LocalPlayers_OnNewMap,_EntityRenderers_Init
,_EntityRenderers_Free,_OnInit_357,_OnFree_358,_OnReset_359,_OnNewMapLoaded_360,_OnInit_452,_OnFree_453,_FlatgrassGen_Generate,_NotchyGen_Generate,_OnInit_668,_OnInit_860,_OnFree_861,_OnReset_862,_OnInit_896,_OnInit_1065,_OnFree_1066,_OnInit_1077,_OnFree_1078,_OnInit_1110,_OnReset_1111,_OnInit_1127,_OnReset_1128,_OnNewMapLoaded_1129,_OnInit_1219,_OnNewMap,_OnNewMapLoaded_1220,_OnInit_1631,_OnFree_1632,_OnReset_1633,_HumanModel_MakeParts
,_Model_NoParts,_SkinnedCubeModel_MakeParts,_ChibiModel_MakeParts,_SpiderModel_MakeParts,_SkeletonModel_MakeParts,_SheepModel_MakeParts,_PigModel_MakeParts,_CreeperModel_MakeParts,_ChickenModel_MakeParts,_OnInit_1722,_OnFree_1723,_OnReset_1724,_OnInit_1775,_OnReset_1776,_OnInit_1942,_OnFree_1943,_OnInit_1955,_OnFree_1956,_OnReset_1957,_OnInit_1967,_OnFree_1968,_OnReset_1969,_OnNewMap_1970,_OnInit_2164,_OnInit_2220,_OnFree_2221,_OnReset_2222,_World_Reset,_Http_Init,_Http_ClearPending
,_Modern_PrePrepareChunk,_Adv_PrePrepareChunk,_DefaultPrePrepateChunk,_Refresh,_FreeState,_AllocState,_GL_SetupVbTextured,_GL_SetupVbColoured,_ClassicLighting_Refresh,_ClassicLighting_FreeState,_ClassicLighting_AllocState,_SPConnection_BeginConnect,_MPConnection_BeginConnect,_DoNextFrame,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_vd = [b11];
var FUNCTION_TABLE_vddi = [b12,_Camera_OnRawMovement];
var FUNCTION_TABLE_vi = [b13,_PerspectiveCamera_GetProjection,_PerspectiveCamera_GetView,_FirstPersonCamera_GetOrientation,_PerspectiveCamera_GetPickedBlock,_ThirdPersonCamera_GetOrientation,_Player_Despawn,_Logger_DialogWarn,_MenuOptionsScreen_Init,_MenuOptionsScreen_Free,_Screen_BuildMesh,_MenuOptionsScreen_Layout,_MenuOptionsScreen_ContextLost,_MenuOptionsScreen_ContextRecreated,_ListScreen_Init,_ListScreen_Free,_ListScreen_Layout,_ListScreen_ContextLost,_ListScreen_ContextRecreated,_PauseScreen_Init,_PauseScreen_Free,_PauseScreen_Layout,_Screen_ContextLost,_PauseScreen_ContextRecreated,_SaveLevelScreen_Init,_Menu_CloseKeyboard,_SaveLevelScreen_Layout,_SaveLevelScreen_ContextLost,_SaveLevelScreen_ContextRecreated
,_LoadLevelScreen_UploadCallback,_GenLevelScreen_Init,_GenLevelScreen_Layout,_GenLevelScreen_ContextLost,_GenLevelScreen_ContextRecreated,_EditHotkeyScreen_Init,_EditHotkeyScreen_Layout,_EditHotkeyScreen_ContextLost,_EditHotkeyScreen_ContextRecreated,_TexturePackScreen_UploadCallback,_OptionsGroupScreen_Init,_OptionsGroupScreen_Free,_OptionsGroupScreen_Layout,_OptionsGroupScreen_ContextLost,_OptionsGroupScreen_ContextRecreated,_NostalgiaMenuScreen_Init,_Screen_NullFunc,_NostalgiaMenuScreen_Layout,_NostalgiaMenuScreen_ContextRecreated,_KeyBindsScreen_Init,_KeyBindsScreen_Free,_KeyBindsScreen_Layout,_KeyBindsScreen_ContextLost,_KeyBindsScreen_ContextRecreated,_BindsSourceScreen_Init,_BindsSourceScreen_Layout,_BindsSourceScreen_ContextRecreated,_ClassicPauseScreen_Init,_ClassicPauseScreen_Layout,_ClassicPauseScreen_ContextRecreated
,_ClassicGenScreen_Init,_ClassicGenScreen_Layout,_ClassicGenScreen_ContextRecreated,_FontListScreen_UploadCallback,_MenuInputOverlay_Init,_MenuInputOverlay_Free,_MenuInputOverlay_Layout,_MenuInputOverlay_ContextLost,_MenuInputOverlay_ContextRecreated,_TexIdsOverlay_Init,_TexIdsOverlay_Free,_TexIdsOverlay_BuildMesh,_TexIdsOverlay_Layout,_TexIdsOverlay_ContextLost,_TexIdsOverlay_ContextRecreated,_UrlWarningOverlay_Init,_UrlWarningOverlay_Layout,_UrlWarningOverlay_ContextRecreated,_TexPackOverlay_Init,_TexPackOverlay_Layout,_TexPackOverlay_ContextLost,_TexPackOverlay_ContextRecreated,_HumanModel_Draw,_HumanModel_GetSize,_HumanModel_GetBounds,_BlockModel_Draw,_BlockModel_GetSize,_BlockModel_GetBounds,_SkinnedCubeModel_Draw,_SkinnedCubeModel_GetSize
,_SkinnedCubeModel_GetBounds,_SittingModel_Draw,_SittingModel_GetSize,_SittingModel_GetBounds,_HeadModel_Draw,_HeadModel_GetSize,_HeadModel_GetBounds,_ChibiModel_Draw,_ChibiModel_GetSize,_ChibiModel_GetBounds,_ZombieModel_Draw,_ZombieModel_GetBounds,_SpiderModel_Draw,_SpiderModel_GetSize,_SpiderModel_GetBounds,_SkeletonModel_Draw,_SkeletonModel_GetSize,_SkeletonModel_GetBounds,_FurlessModel_Draw,_SheepModel_GetSize,_SheepModel_GetBounds,_SheepModel_Draw,_PigModel_Draw,_PigModel_GetSize,_PigModel_GetBounds,_CreeperModel_Draw,_CreeperModel_GetSize,_CreeperModel_GetBounds,_ChickenModel_Draw,_ChickenModel_GetSize
,_ChickenModel_GetBounds,_HUDScreen_Init,_HUDScreen_Free,_HUDScreen_BuildMesh,_HUDScreen_Layout,_HUDScreen_ContextLost,_HUDScreen_ContextRecreated,_TabListOverlay_Init,_TabListOverlay_Free,_TabListOverlay_BuildMesh,_TabListOverlay_Layout,_TabListOverlay_ContextLost,_TabListOverlay_ContextRecreated,_ChatScreen_Init,_ChatScreen_Free,_ChatScreen_BuildMesh,_ChatScreen_Layout,_ChatScreen_ContextLost,_ChatScreen_ContextRecreated,_InventoryScreen_Init,_InventoryScreen_Free,_InventoryScreen_Layout,_InventoryScreen_ContextLost,_InventoryScreen_ContextRecreated,_LoadingScreen_Init,_LoadingScreen_Free,_LoadingScreen_BuildMesh,_LoadingScreen_Layout,_LoadingScreen_ContextLost,_LoadingScreen_ContextRecreated
,_GeneratingScreen_Init,_GeneratingScreen_Free,_DisconnectScreen_Init,_DisconnectScreen_Free,_DisconnectScreen_Layout,_DisconnectScreen_ContextLost,_DisconnectScreen_ContextRecreated,_TouchOnscreenScreen_Init,_TouchOnscreenScreen_Free,_TouchOnscreenScreen_Layout,_TouchOnscreenScreen_ContextRecreated,_TouchCtrlsScreen_Init,_TouchCtrlsScreen_Layout,_TouchCtrlsScreen_ContextLost,_TouchCtrlsScreen_ContextRecreated,_TouchMoreScreen_Init,_TouchMoreScreen_Layout,_TouchMoreScreen_ContextRecreated,_TouchScreen_Init,_TouchScreen_Free,_TouchScreen_Layout,_TouchScreen_ContextLost,_TouchScreen_ContextRecreated,_TextWidget_Free,_TextWidget_Reposition,_ButtonWidget_Free,_ButtonWidget_Reposition,_Widget_NullFunc,_Widget_CalcPosition,_HotbarWidget_Free
,_HotbarWidget_Reposition,_TableWidget_Free,_TableWidget_Reposition,_InputWidget_Free,_InputWidget_Reposition,_TextGroupWidget_Free,_TextGroupWidget_Reposition,_SpecialInputWidget_Free,_SpecialInputWidget_Reposition,_ThumbstickWidget_Reposition,_Animations_Tick,_OnPackChanged,_OnContextLost,_OnAtlasChanged,_Physics_OnNewMapLoaded,_OnHacksChanged,_Entities_ContextLost,_LocalPlayer_CheckJumpVelocity,_EntityRenderers_ContextLost,_EntityNames_ChatFontChanged,_OnTexturePackChanged,_OnTerrainAtlasChanged,_OnViewDistanceChanged,_OnContextLost_362,_OnContextRecreated,_MCLevel_Callback,_Cw_Callback,_Game_WarnFunc,_HandleOnNewMap,_HandleOnNewMapLoaded
,_Game_OnResize,_Game_PendingClose,_HandleInactiveChanged,_Entities_Tick,_OnContextLost_669,_OnContextRecreated_670,_GL_SetupVbTextured_Range,_GL_SetupVbColoured_Range,_SetPostProcess,_OnFontChanged,_OnContextLost_863,_OnContextRecreated_865,_OnResize,_OnProjectionChanged,_DoSwitchBlockAnim,_OnContextLost_899,_OnFocusChanged,_InputHandler_CheckZoomFov,_OnTerrainAtlasChanged_1235,_OnBlockDefinitionChanged,_OnVisibilityChanged,_DeleteChunks_,_Refresh_,_MenuOptionsScreen_OnHacksChanged,_ClassicOptionsScreen_InitWidgets,_ClO_SetMusic,_ClO_SetInvert,_ClO_SetViewDist,_ClO_SetAnaglyph,_ClO_SetSounds
,_ClO_SetShowFPS,_ClO_SetViewBob,_ClO_SetFPS,_ClO_SetHacks,_ClassicOptionsScreen_RecreateExtra,_EnvSettingsScreen_InitWidgets,_ES_SetCloudsColor,_ES_SetSkyColor,_ES_SetFogColor,_ES_GetCloudsSpeed,_ES_SetCloudsSpeed,_ES_SetCloudsHeight,_ES_SetSunColor,_ES_SetShadowColor,_ES_SetWeather,_ES_GetWeatherSpeed,_ES_SetWeatherSpeed,_ES_SetEdgeHeight,_GraphicsOptionsScreen_InitWidgets,_GrO_SetFPS,_GrO_SetViewDist,_GrO_SetSmooth,_GrO_SetLighting,_GrO_SetNames,_GrO_SetShadows,_GrO_SetMipmaps,_GrO_CheckLightingModeAllowed,_ChatOptionsScreen_InitWidgets,_ChO_SetAutoScaleChat,_ChO_GetChatScale
,_ChO_SetChatScale,_ChO_SetChatlines,_ChO_SetLogging,_ChO_SetClickable,_GuiOptionsScreen_InitWidgets,_GuO_SetShowFPS,_GuO_GetHotbar,_GuO_SetHotbar,_GuO_GetInventory,_GuO_SetInventory,_GuO_GetCrosshair,_GuO_SetCrosshair,_GuO_SetShadows,_GuO_SetTabAuto,_GuO_SetUseFont,_HacksSettingsScreen_InitWidgets,_HS_SetHacks,_HS_GetSpeed,_HS_SetSpeed,_HS_SetClipping,_HS_GetJump,_HS_SetJump,_HS_SetWOMHacks,_HS_SetFullStep,_HS_SetLiquids,_HS_SetPushback,_HS_SetSlide,_HS_SetFOV,_HacksSettingsScreen_CheckHacksAllowed,_MiscSettingsScreen_InitWidgets
,_MiO_GetReach,_MiO_SetReach,_MiO_GetCameraMass,_MiO_SetCameraMass,_MiO_SetMusic,_MiO_SetSounds,_MiO_SetPhysics,_MiO_SetCamera,_MiO_SetViewBob,_MiO_SetInvert,_MiO_SetSensitivity,_NostalgiaAppearanceScreen_InitWidgets,_NA_SetHand,_NA_SetAnim,_NA_SetClassicChat,_NA_SetClassicInv,_NA_SetGui,_NA_SetList,_NA_SetOpts,_NostalgiaFunctionalityScreen_InitWidgets,_NF_SetTexs,_NF_SetCustom,_NF_SetCPE,_NostalgiaScreen_RecreateExtra,_PauseScreen_CheckHacksAllowed,_SaveLevelScreen_UploadCallback,_LoadLevelScreen_LoadEntries,_HotkeyListScreen_LoadEntries,_TexturePackScreen_LoadEntries,_OptionsGroupScreen_CheckHacksAllowed
,_FontListScreen_LoadEntries,_FontListScreen_RegisterCallback,_TexIdsOverlay_OnAtlasChanged,_OnContextLost_1634,_HumanModel_DrawArm,_SkeletonModel_DrawArm,_ZombieModel_DrawArm,_ChibiModel_DrawArm,_CorpseModel_Draw,_HoldModel_Draw,_Model_NullFunc,_CustomModel_Draw,_CustomModel_GetCollisionSize,_CustomModel_GetPickingBounds,_CustomModel_DrawArm,_Particles_Tick,_OnContextLost_1725,_Classic_Handshake,_Classic_Ping,_Classic_LevelInit,_Classic_LevelDataChunk,_Classic_LevelFinalise,_Classic_SetBlock,_Classic_AddEntity,_Classic_EntityTeleport,_Classic_RelPosAndOrientationUpdate,_Classic_RelPositionUpdate,_Classic_OrientationUpdate,_Classic_RemoveEntity,_Classic_Message
,_Classic_Kick,_Classic_SetPermission,_CPE_ExtInfo,_CPE_ExtEntry,_CPE_SetClickDistance,_CPE_CustomBlockLevel,_CPE_HoldThis,_CPE_SetTextHotkey,_CPE_ExtAddPlayerName,_CPE_ExtAddEntity,_CPE_ExtRemovePlayerName,_CPE_SetEnvCol,_CPE_MakeSelection,_CPE_RemoveSelection,_CPE_SetBlockPermission,_CPE_ChangeModel,_CPE_EnvSetMapAppearance,_CPE_EnvWeatherType,_CPE_HackControl,_CPE_ExtAddEntity2,_CPE_BulkBlockUpdate,_CPE_SetTextColor,_CPE_SetMapEnvUrl,_CPE_SetMapEnvProperty,_CPE_SetEntityProperty,_CPE_TwoWayPing,_CPE_SetInventoryOrder,_CPE_SetHotbar,_CPE_SetSpawnPoint,_CPE_VelocityControl
,_CPE_DefineEffect,_CPE_SpawnEffect,_CPE_PluginMessage,_CPE_ExtEntityTeleport,_CPE_LightingMode,_CPE_CinematicGui,_CPE_ToggleBlockList,_BlockDefs_DefineBlock,_BlockDefs_UndefineBlock,_BlockDefs_DefineBlockExt,_CPE_DefineModel,_CPE_DefineModelPart,_CPE_UndefineModel,_HUDScreen_HacksChanged,_HUDScreen_NeedRedrawing,_ChatScreen_OnInputTextChanged,_InventoryScreen_OnUpdateTitle,_InventoryScreen_NeedRedrawing,_InventoryScreen_OnBlockChanged,_LoadingScreen_MapLoaded,_GeneratingScreen_AtlasChanged,_OnContextLost_1944,_Selections_ContextLost,_SPConnection_Tick,_SPConnection_SendChat,_MPConnection_Tick,_MPConnection_SendChat,_OnContextLost_2250,_OnContextRecreated_2251,_TouchScreen_HacksChanged
,_TextInputWidget_RemakeTexture,_InputWidget_OnPressedEnter,_ChatInputWidget_RemakeTexture,_ChatInputWidget_OnPressedEnter,_Http_CleanCacheTask,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_vid = [b14,_FirstPersonCamera_GetPosition,_PerspectiveCamera_UpdateMouse,_ThirdPersonCamera_GetPosition,_LocalPlayer_Tick,_NetPlayer_Tick,_Screen_NullUpdate,_MenuOptionsScreen_Render,_ListScreen_Render,_MenuScreen_Render2,_SaveLevelScreen_Update,_GenLevelScreen_Update,_EditHotkeyScreen_Update,_EditHotkeyScreen_Render,_MenuInputOverlay_Update,_MenuInputOverlay_Render,_TexIdsOverlay_Render,_TexPackOverlay_Update,_HUDScreen_Update,_HUDScreen_Render,_TabListOverlay_Render,_ChatScreen_Update,_ChatScreen_Render,_InventoryScreen_Update,_InventoryScreen_Render,_LoadingScreen_Render,_GeneratingScreen_Update,_GeneratingScreen_Render,_DisconnectScreen_Update
,_DisconnectScreen_Render,_TouchScreen_Render,_TextWidget_Render,_ButtonWidget_Render,_ScrollbarWidget_Render,_TextInputWidget_Render,_ChatInputWidget_Render,_TextGroupWidget_Render,_SpecialInputWidget_Render,_OnMouseWheel,_LoadingScreen_MapLoading,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_vidd = [b15,_LocalPlayer_RenderModel,_NetPlayer_RenderModel,_OnRawMovement];
var FUNCTION_TABLE_vii = [b16,_AnimationsPngProcess,_Animations_ReadDescription,_UseWaterProcess,_UseLavaProcess,_GpuInfoCommand_Execute,_HelpCommand_Execute,_RenderTypeCommand_Execute,_ResolutionCommand_Execute,_ModelCommand_Execute,_SkinCommand_Execute,_TeleportCommand_Execute,_ClearDeniedCommand_Execute,_MotdCommand_Execute,_PlaceCommand_Execute,_BlockEditCommand_Execute,_CuboidCommand_Execute,_ReplaceCommand_Execute,_DefaultPngProcess,_LocalPlayer_SetLocation,_NetPlayer_SetLocation,_CloudsPngProcess,_SkyboxPngProcess,_SnowPngProcess,_RainPngProcess,_GuiPngProcess,_GuiClassicPngProcess,_IconsPngProcess,_TouchPngProcess
,_Menu_SwitchOptions_1410,_Menu_SwitchTexPacks,_Menu_SwitchHotkeys,_Menu_SwitchGenLevel,_Menu_SwitchLoadLevel,_Menu_SwitchSaveLevel,_Menu_SwitchMisc,_Menu_SwitchGui,_Menu_SwitchGfx,_SwitchBindsMain,_Menu_SwitchChat,_Menu_SwitchHacks,_Menu_SwitchEnv,_Menu_SwitchNostalgia_1504,_Menu_SwitchClassicOptions,_Menu_SwitchClassicGenLevel,_ParticlesPngProcess,_TerrainPngProcess,_TouchCtrls_Tap,_TouchCtrls_Hold,_TouchCtrls_Sensitivity,_TouchCtrls_Scale,_TouchCtrls_Onscreen,_TouchMore_Take,_TouchMore_Screen,_TouchMore_Chat,_TouchMore_Fog,_TouchMore_Ctrls,_TouchMore_Menu,_TouchScreen_ChatClick
,_TouchScreen_TabClick,_TouchScreen_BindClick,_TouchScreen_SwitchClick,_Hex_Range,_Hex_Default,_Int_Range,_Int_Default,_Seed_Range,_MenuInput_NoDefault,_Float_Range,_Float_Default,_Path_Range,_String_Range,_TextWidget_BuildMesh,_ButtonWidget_BuildMesh,_HotbarWidget_BuildMesh,_TableWidget_BuildMesh,_TextInputWidget_BuildMesh,_TextGroupWidget_BuildMesh,_ThumbstickWidget_BuildMesh,_Physics_DoFalling,_Physics_HandleSapling,_Physics_HandleDirt,_Physics_HandleGrass,_Physics_HandleFlower,_Physics_HandleMushroom,_Physics_PlaceLava,_Physics_PlaceWater,_Physics_PlaceSponge,_Physics_DeleteSponge
,_Physics_ActivateWater,_Physics_ActivateLava,_Physics_HandleSlab,_Physics_HandleCobblestoneSlab,_Physics_HandleTnt,_ZoomScrollReleased,_OnAxisUpdate,_ReplaceCommand_Draw,_CuboidCommand_Draw,_LocalPlayer_ReleaseHalfSpeed,_LocalPlayer_ReleaseSpeed,_LocalPlayer_ReleaseFlyUp,_LocalPlayer_ReleaseFlyDown,_LocalPlayer_ReleaseJump,_LocalPlayer_ReleaseNoclip,_OnEnvVariableChanged,_OnEnvVariableChanged_451,_OnPointerMove,_OnAxisUpdate_864,_OnKeyPress,_OnTextChanged,_OnPointerDown,_OnPointerUp,_Player_ReleaseUp,_Player_ReleaseDown,_Player_ReleaseLeft,_Player_ReleaseRight,_BindReleased_DeleteBlock,_BindReleased_PlaceBlock,_BindReleased_PickBlock
,_OnEnvVariableChanged_1236,_MenuOptionsScreen_BoolClick,_MenuOptionsScreen_BoolGet,_MenuOptionsScreen_EnumClick,_MenuOptionsScreen_EnumGet,_MenuOptionsScreen_InputClick,_MenuOptionsScreen_HexGet,_MenuOptionsScreen_HexSet,_MenuOptionsScreen_OnDone,_MenuOptionsScreen_IntGet,_MenuOptionsScreen_IntSet,_MenuOptionsScreen_NumGet,_MenuOptionsScreen_NumSet,_MenuOptionsScreen_GetDesc,_Menu_SwitchPause,_Menu_SwitchBindsClassic,_Menu_SwitchOptions,_Menu_SwitchFont,_Menu_SwitchNostalgia,_NostalgiaScreen_Version,_NF_GetVersion,_NF_SetVersion,_ListScreen_MoveBackwards,_ListScreen_MoveForwards,_PauseScreenBase_Quit,_PauseScreenBase_Game,_SaveLevelScreen_Save,_SaveLevelScreen_File,_Menu_SwitchPause_1430,_LoadLevelScreen_ActionFunc
,_LoadLevelScreen_EntryClick,_GenLevelScreen_Flatgrass,_GenLevelScreen_Notchy,_HotkeyListScreen_ActionFunc,_HotkeyListScreen_EntryClick,_EditHotkeyScreen_BaseKey,_EditHotkeyScreen_Modifiers,_EditHotkeyScreen_LeaveOpen,_EditHotkeyScreen_SaveChanges,_EditHotkeyScreen_RemoveHotkey,_TexturePackScreen_ActionFunc,_TexturePackScreen_EntryClick,_NostalgiaMenuScreen_Appearance,_NostalgiaMenuScreen_Functionality,_NostalgiaMenuScreen_SwitchBack,_Menu_SwitchBindsHacks,_KeyBindsScreen_OnBindingClick,_Menu_SwitchBindsNormal,_Menu_SwitchBindsOther,_Menu_SwitchBindsMouse,_Menu_SwitchBindsHotbar,_BindsSourceScreen_ModeNormal,_BindsSourceScreen_ModeGamepad,_ClassicGenScreen_Small,_ClassicGenScreen_Medium,_ClassicGenScreen_Huge,_FontListScreen_ActionFunc,_FontListScreen_EntryClick,_Menu_SwitchBindsClassicHacks,_Menu_SwitchBindsClassic_1595
,_MenuInputOverlay_OK,_MenuInputOverlay_Default,_UrlWarningOverlay_OpenUrl,_UrlWarningOverlay_AppendUrl,_TexPackOverlay_YesClick,_TexPackOverlay_ConfirmNoClick,_TexPackOverlay_NoClick,_TexPackOverlay_GoBackClick,_TabListOverlay_Add,_TabListOverlay_Update,_TabListOverlay_Remove,_ChatScreen_GetStatus,_ChatScreen_GetBottomRight,_ChatScreen_GetChat,_ChatScreen_GetClientStatus,_ChatScreen_ColCodeChanged,_DisconnectScreen_OnReconnect,_DisconnectScreen_OnQuit,_SPConnection_SendData,_MPConnection_SendData,_TouchOnscreen_Any,_TouchOnscreen_More,_TouchOnscreen_Left,_TouchOnscreen_Right,_TouchCtrls_More,_TouchCtrls_SensitivityDone,_TouchCtrls_ScaleDone,_TouchMore_Game,_TouchScreen_MoreClick,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_viii = [b17,_PlayerInputNormal,_PlayerInputGamepad,_Screen_InputUp,_HUDScreen_InputUp,_TabListOverlay_KeyUp,_ChatScreen_KeyUp,_InventoryScreen_KeyUp,_TouchScreen_GetMovement,_Widget_InputUp,_HotbarWidget_InputUp,_LightHint,_MakeIndices,_Lighting_HandleModeChanged,_ClassicLighting_LightHint,_MenuOptionsScreen_OnLightingModeServerChanged,_ListScreen_UpdateEntry,_LoadLevelScreen_FilterFiles,_HotkeyListScreen_UpdateEntry,_TexturePackScreen_FilterFiles,_FontListScreen_UpdateEntry,_Models_TextureChanged,_HeadModel_GetTransform,_SittingModel_GetTransform,_Model_GetTransform,_ChatScreen_ChatReceived,_OnFileChanged,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,_Screen_PointerUp,_HUDScreen_PointerUp,_InventoryScreen_PointerUp,_TouchScreen_PointerUp,_Widget_PointerUp,_ScrollbarWidget_PointerUp,_HotbarWidget_PointerUp,_TableWidget_PointerUp,_Audio_PlayBlockSound,_Png_Expand_RGB_8,_Png_Expand_GRAYSCALE_A_8,_Png_Expand_RGB_A_8,_Png_Expand_GRAYSCALE_1,_Png_Expand_GRAYSCALE_2,_Png_Expand_GRAYSCALE_4,_Png_Expand_GRAYSCALE_8,_Png_Expand_INDEXED_1,_Png_Expand_INDEXED_2,_Png_Expand_INDEXED_4,_Png_Expand_INDEXED_8,_Modern_RenderBlock,_Adv_RenderBlock,_NormalBuilder_RenderBlock,_DrawOpCommand_BlockChanged,_OnBlockChanged_898,_OnInputDownLegacy,_OnInputDown,_OnInputUp
,_OnBreakBlockEffect_Handler,b18,b18];
var FUNCTION_TABLE_viiiii = [b19,_OnBlockChanged,_ClassicLighting_OnBlockChanged,_SPConnection_SendBlock,_MPConnection_SendBlock,b19,b19,b19];

  return { _Directory_IterCallback: _Directory_IterCallback, _Http_OnFinishedAsync: _Http_OnFinishedAsync, _Http_OnUpdateProgress: _Http_OnUpdateProgress, _Platform_LogError: _Platform_LogError, _Window_GotClipboardText: _Window_GotClipboardText, _Window_OnFileUploaded: _Window_OnFileUploaded, _Window_OnTextChanged: _Window_OnTextChanged, _Window_RequestClipboardText: _Window_RequestClipboardText, _Window_StoreClipboardText: _Window_StoreClipboardText, ___errno_location: ___errno_location, ___muldi3: ___muldi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _emscripten_replace_memory: _emscripten_replace_memory, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _main_phase1: _main_phase1, _main_phase2: _main_phase2, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, dynCall_di: dynCall_di, dynCall_i: dynCall_i, dynCall_id: dynCall_id, dynCall_ii: dynCall_ii, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vd: dynCall_vd, dynCall_vddi: dynCall_vddi, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vidd: dynCall_vidd, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var _Directory_IterCallback = Module["_Directory_IterCallback"] = asm["_Directory_IterCallback"];

var _Http_OnFinishedAsync = Module["_Http_OnFinishedAsync"] = asm["_Http_OnFinishedAsync"];

var _Http_OnUpdateProgress = Module["_Http_OnUpdateProgress"] = asm["_Http_OnUpdateProgress"];

var _Platform_LogError = Module["_Platform_LogError"] = asm["_Platform_LogError"];

var _Window_GotClipboardText = Module["_Window_GotClipboardText"] = asm["_Window_GotClipboardText"];

var _Window_OnFileUploaded = Module["_Window_OnFileUploaded"] = asm["_Window_OnFileUploaded"];

var _Window_OnTextChanged = Module["_Window_OnTextChanged"] = asm["_Window_OnTextChanged"];

var _Window_RequestClipboardText = Module["_Window_RequestClipboardText"] = asm["_Window_RequestClipboardText"];

var _Window_StoreClipboardText = Module["_Window_StoreClipboardText"] = asm["_Window_StoreClipboardText"];

var ___errno_location = Module["___errno_location"] = asm["___errno_location"];

var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];

var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];

var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];

var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];

var _free = Module["_free"] = asm["_free"];

var _i64Add = Module["_i64Add"] = asm["_i64Add"];

var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];

var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];

var _main = Module["_main"] = asm["_main"];

var _main_phase1 = Module["_main_phase1"] = asm["_main_phase1"];

var _main_phase2 = Module["_main_phase2"] = asm["_main_phase2"];

var _malloc = Module["_malloc"] = asm["_malloc"];

var _memcpy = Module["_memcpy"] = asm["_memcpy"];

var _memset = Module["_memset"] = asm["_memset"];

var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];

var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];

var stackRestore = Module["stackRestore"] = asm["stackRestore"];

var stackSave = Module["stackSave"] = asm["stackSave"];

var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];

var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];

var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];

var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];

var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];

var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];

var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];

var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];

var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];

var dynCall_vddi = Module["dynCall_vddi"] = asm["dynCall_vddi"];

var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];

var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];

var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];

var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];

var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];

var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];

Module["asm"] = asm;

if (memoryInitializer) {
 if (!isDataURI(memoryInitializer)) {
  memoryInitializer = locateFile(memoryInitializer);
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = readBinary(memoryInitializer);
  HEAPU8.set(data, GLOBAL_BASE);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   HEAPU8.set(data, GLOBAL_BASE);
   if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
   removeRunDependency("memory initializer");
  };
  var doBrowserLoad = function() {
   readAsync(memoryInitializer, applyMemoryInitializer, function() {
    throw "could not load memory initializer " + memoryInitializer;
   });
  };
  var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
  if (memoryInitializerBytes) {
   applyMemoryInitializer(memoryInitializerBytes.buffer);
  } else if (Module["memoryInitializerRequest"]) {
   var useRequest = function() {
    var request = Module["memoryInitializerRequest"];
    var response = request.response;
    if (request.status !== 200 && request.status !== 0) {
     var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
     if (data) {
      response = data.buffer;
     } else {
      console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
      doBrowserLoad();
      return;
     }
    }
    applyMemoryInitializer(response);
   };
   if (Module["memoryInitializerRequest"].response) {
    setTimeout(useRequest, 0);
   } else {
    Module["memoryInitializerRequest"].addEventListener("load", useRequest);
   }
  } else {
   doBrowserLoad();
  }
 }
}

var calledRun;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function callMain(args) {
 var entryFunction = Module["_main"];
 args = args || [];
 var argc = args.length + 1;
 var argv = stackAlloc((argc + 1) * 4);
 HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
 for (var i = 1; i < argc; i++) {
  HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
 }
 HEAP32[(argv >> 2) + argc] = 0;
 try {
  var ret = entryFunction(argc, argv);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   noExitRuntime = true;
   return;
  } else {
   var toLog = e;
   if (e && typeof e === "object" && e.stack) {
    toLog = [ e, e.stack ];
   }
   err("exception thrown: " + toLog);
   quit_(1, e);
  }
 } finally {
  calledMain = true;
 }
}

function run(args) {
 args = args || arguments_;
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  if (ABORT) return;
  initRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (shouldRunNow) callMain(args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
}

Module["run"] = run;

function exit(status, implicit) {
 if (implicit && noExitRuntime && status === 0) {
  return;
 }
 if (noExitRuntime) {} else {
  ABORT = true;
  EXITSTATUS = status;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 quit_(status, new ExitStatus(status));
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

var shouldRunNow = true;

if (Module["noInitialRun"]) shouldRunNow = false;

noExitRuntime = true;

run();

